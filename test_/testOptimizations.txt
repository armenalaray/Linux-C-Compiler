sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
9
['/home/alejandro/CComp/code/cd.py', '--codegen', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: assemblyGeneration
NoLink: False
NotAssembly: False
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('int', <TokenType.INT_KW: 4>, 1), ('check_one_int', <TokenType.IDENTIFIER: 2>, 1), ('(', <TokenType.OPEN_PAREN: 7>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('actual', <TokenType.IDENTIFIER: 2>, 1), (',', <TokenType.COMMA: 38>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('expected', <TokenType.IDENTIFIER: 2>, 1), (')', <TokenType.CLOSE_PAREN: 8>, 1), (';', <TokenType.SEMICOLON: 11>, 1), ('int', <TokenType.INT_KW: 4>, 2), ('check_5_ints', <TokenType.IDENTIFIER: 2>, 2), ('(', <TokenType.OPEN_PAREN: 7>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('a', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('b', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('c', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('d', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('e', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('start', <TokenType.IDENTIFIER: 2>, 2), (')', <TokenType.CLOSE_PAREN: 8>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('int', <TokenType.INT_KW: 4>, 3), ('check_12_ints', <TokenType.IDENTIFIER: 2>, 3), ('(', <TokenType.OPEN_PAREN: 7>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('a', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('b', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('c', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('d', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('e', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('f', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('g', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('h', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('i', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 4), ('j', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('k', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('l', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('start', <TokenType.IDENTIFIER: 2>, 4), (')', <TokenType.CLOSE_PAREN: 8>, 4), (';', <TokenType.SEMICOLON: 11>, 4), ('int', <TokenType.INT_KW: 4>, 5), ('id', <TokenType.IDENTIFIER: 2>, 5), ('(', <TokenType.OPEN_PAREN: 7>, 5), ('int', <TokenType.INT_KW: 4>, 5), ('x', <TokenType.IDENTIFIER: 2>, 5), (')', <TokenType.CLOSE_PAREN: 8>, 5), (';', <TokenType.SEMICOLON: 11>, 5), ('int', <TokenType.INT_KW: 4>, 6), ('counter', <TokenType.IDENTIFIER: 2>, 6), ('=', <TokenType.EQUAL: 28>, 6), ('5', <TokenType.INT_CONSTANT: 3>, 6), (';', <TokenType.SEMICOLON: 11>, 6), ('int', <TokenType.INT_KW: 4>, 7), ('expected_a', <TokenType.IDENTIFIER: 2>, 7), ('=', <TokenType.EQUAL: 28>, 7), ('2', <TokenType.INT_CONSTANT: 3>, 7), (';', <TokenType.SEMICOLON: 11>, 7), ('int', <TokenType.INT_KW: 4>, 8), ('update_expected_a', <TokenType.IDENTIFIER: 2>, 8), ('(', <TokenType.OPEN_PAREN: 7>, 8), ('void', <TokenType.VOID_KW: 5>, 8), (')', <TokenType.CLOSE_PAREN: 8>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('int', <TokenType.INT_KW: 4>, 9), ('times_two', <TokenType.IDENTIFIER: 2>, 9), ('(', <TokenType.OPEN_PAREN: 7>, 9), ('int', <TokenType.INT_KW: 4>, 9), ('x', <TokenType.IDENTIFIER: 2>, 9), (')', <TokenType.CLOSE_PAREN: 8>, 9), (';', <TokenType.SEMICOLON: 11>, 9), ('int', <TokenType.INT_KW: 4>, 10), ('target', <TokenType.IDENTIFIER: 2>, 10), ('(', <TokenType.OPEN_PAREN: 7>, 10), ('void', <TokenType.VOID_KW: 5>, 10), (')', <TokenType.CLOSE_PAREN: 8>, 10), ('{', <TokenType.OPEN_BRACE: 9>, 10), ('int', <TokenType.INT_KW: 4>, 11), ('z', <TokenType.IDENTIFIER: 2>, 11), (';', <TokenType.SEMICOLON: 11>, 11), ('int', <TokenType.INT_KW: 4>, 12), ('a', <TokenType.IDENTIFIER: 2>, 12), (';', <TokenType.SEMICOLON: 11>, 12), ('int', <TokenType.INT_KW: 4>, 13), ('one', <TokenType.IDENTIFIER: 2>, 13), ('=', <TokenType.EQUAL: 28>, 13), ('counter', <TokenType.IDENTIFIER: 2>, 13), ('-', <TokenType.HYPHEN: 13>, 13), ('4', <TokenType.INT_CONSTANT: 3>, 13), (';', <TokenType.SEMICOLON: 11>, 13), ('int', <TokenType.INT_KW: 4>, 14), ('two', <TokenType.IDENTIFIER: 2>, 14), ('=', <TokenType.EQUAL: 28>, 14), ('counter', <TokenType.IDENTIFIER: 2>, 14), ('/', <TokenType.FORWARD_SLASH: 15>, 14), ('2', <TokenType.INT_CONSTANT: 3>, 14), (';', <TokenType.SEMICOLON: 11>, 14), ('int', <TokenType.INT_KW: 4>, 15), ('three', <TokenType.IDENTIFIER: 2>, 15), ('=', <TokenType.EQUAL: 28>, 15), ('-', <TokenType.HYPHEN: 13>, 15), ('counter', <TokenType.IDENTIFIER: 2>, 15), ('+', <TokenType.PLUS: 18>, 15), ('8', <TokenType.INT_CONSTANT: 3>, 15), (';', <TokenType.SEMICOLON: 11>, 15), ('int', <TokenType.INT_KW: 4>, 16), ('four', <TokenType.IDENTIFIER: 2>, 16), ('=', <TokenType.EQUAL: 28>, 16), ('counter', <TokenType.IDENTIFIER: 2>, 16), ('-', <TokenType.HYPHEN: 13>, 16), ('1', <TokenType.INT_CONSTANT: 3>, 16), (';', <TokenType.SEMICOLON: 11>, 16), ('while', <TokenType.WHILE_KW: 34>, 17), ('(', <TokenType.OPEN_PAREN: 7>, 17), ('counter', <TokenType.IDENTIFIER: 2>, 17), ('>', <TokenType.GREATERT: 20>, 17), ('0', <TokenType.INT_CONSTANT: 3>, 17), (')', <TokenType.CLOSE_PAREN: 8>, 17), ('{', <TokenType.OPEN_BRACE: 9>, 17), ('if', <TokenType.IF_KW: 31>, 18), ('(', <TokenType.OPEN_PAREN: 7>, 18), ('counter', <TokenType.IDENTIFIER: 2>, 18), ('==', <TokenType.TEQUALS: 24>, 18), ('5', <TokenType.INT_CONSTANT: 3>, 18), (')', <TokenType.CLOSE_PAREN: 8>, 18), ('z', <TokenType.IDENTIFIER: 2>, 19), ('=', <TokenType.EQUAL: 28>, 19), ('4', <TokenType.INT_CONSTANT: 3>, 19), (';', <TokenType.SEMICOLON: 11>, 19), ('else', <TokenType.ELSE_KW: 32>, 20), ('z', <TokenType.IDENTIFIER: 2>, 21), ('=', <TokenType.EQUAL: 28>, 21), ('times_two', <TokenType.IDENTIFIER: 2>, 21), ('(', <TokenType.OPEN_PAREN: 7>, 21), ('a', <TokenType.IDENTIFIER: 2>, 21), (')', <TokenType.CLOSE_PAREN: 8>, 21), (';', <TokenType.SEMICOLON: 11>, 21), ('update_expected_a', <TokenType.IDENTIFIER: 2>, 22), ('(', <TokenType.OPEN_PAREN: 7>, 22), (')', <TokenType.CLOSE_PAREN: 8>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('a', <TokenType.IDENTIFIER: 2>, 23), ('=', <TokenType.EQUAL: 28>, 23), ('1', <TokenType.INT_CONSTANT: 3>, 23), ('-', <TokenType.HYPHEN: 13>, 23), ('z', <TokenType.IDENTIFIER: 2>, 23), (';', <TokenType.SEMICOLON: 11>, 23), ('check_one_int', <TokenType.IDENTIFIER: 2>, 24), ('(', <TokenType.OPEN_PAREN: 7>, 24), ('a', <TokenType.IDENTIFIER: 2>, 24), (',', <TokenType.COMMA: 38>, 24), ('expected_a', <TokenType.IDENTIFIER: 2>, 24), (')', <TokenType.CLOSE_PAREN: 8>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('counter', <TokenType.IDENTIFIER: 2>, 25), ('=', <TokenType.EQUAL: 28>, 25), ('counter', <TokenType.IDENTIFIER: 2>, 25), ('-', <TokenType.HYPHEN: 13>, 25), ('1', <TokenType.INT_CONSTANT: 3>, 25), (';', <TokenType.SEMICOLON: 11>, 25), ('}', <TokenType.CLOSE_BRACE: 10>, 26), ('check_one_int', <TokenType.IDENTIFIER: 2>, 27), ('(', <TokenType.OPEN_PAREN: 7>, 27), ('one', <TokenType.IDENTIFIER: 2>, 27), (',', <TokenType.COMMA: 38>, 27), ('1', <TokenType.INT_CONSTANT: 3>, 27), (')', <TokenType.CLOSE_PAREN: 8>, 27), (';', <TokenType.SEMICOLON: 11>, 27), ('check_one_int', <TokenType.IDENTIFIER: 2>, 28), ('(', <TokenType.OPEN_PAREN: 7>, 28), ('two', <TokenType.IDENTIFIER: 2>, 28), (',', <TokenType.COMMA: 38>, 28), ('2', <TokenType.INT_CONSTANT: 3>, 28), (')', <TokenType.CLOSE_PAREN: 8>, 28), (';', <TokenType.SEMICOLON: 11>, 28), ('check_one_int', <TokenType.IDENTIFIER: 2>, 29), ('(', <TokenType.OPEN_PAREN: 7>, 29), ('three', <TokenType.IDENTIFIER: 2>, 29), (',', <TokenType.COMMA: 38>, 29), ('3', <TokenType.INT_CONSTANT: 3>, 29), (')', <TokenType.CLOSE_PAREN: 8>, 29), (';', <TokenType.SEMICOLON: 11>, 29), ('check_one_int', <TokenType.IDENTIFIER: 2>, 30), ('(', <TokenType.OPEN_PAREN: 7>, 30), ('four', <TokenType.IDENTIFIER: 2>, 30), (',', <TokenType.COMMA: 38>, 30), ('4', <TokenType.INT_CONSTANT: 3>, 30), (')', <TokenType.CLOSE_PAREN: 8>, 30), (';', <TokenType.SEMICOLON: 11>, 30), ('return', <TokenType.RETURN_KW: 6>, 31), ('0', <TokenType.INT_CONSTANT: 3>, 31), (';', <TokenType.SEMICOLON: 11>, 31), ('}', <TokenType.CLOSE_BRACE: 10>, 32), ('int', <TokenType.INT_KW: 4>, 33), ('update_expected_a', <TokenType.IDENTIFIER: 2>, 33), ('(', <TokenType.OPEN_PAREN: 7>, 33), ('void', <TokenType.VOID_KW: 5>, 33), (')', <TokenType.CLOSE_PAREN: 8>, 33), ('{', <TokenType.OPEN_BRACE: 9>, 33), ('expected_a', <TokenType.IDENTIFIER: 2>, 34), ('=', <TokenType.EQUAL: 28>, 34), ('1', <TokenType.INT_CONSTANT: 3>, 34), ('-', <TokenType.HYPHEN: 13>, 34), ('(', <TokenType.OPEN_PAREN: 7>, 34), ('2', <TokenType.INT_CONSTANT: 3>, 34), ('*', <TokenType.ASTERISK: 17>, 34), ('expected_a', <TokenType.IDENTIFIER: 2>, 34), (')', <TokenType.CLOSE_PAREN: 8>, 34), (';', <TokenType.SEMICOLON: 11>, 34), ('return', <TokenType.RETURN_KW: 6>, 35), ('0', <TokenType.INT_CONSTANT: 3>, 35), (';', <TokenType.SEMICOLON: 11>, 35), ('}', <TokenType.CLOSE_BRACE: 10>, 36), ('int', <TokenType.INT_KW: 4>, 37), ('times_two', <TokenType.IDENTIFIER: 2>, 37), ('(', <TokenType.OPEN_PAREN: 7>, 37), ('int', <TokenType.INT_KW: 4>, 37), ('x', <TokenType.IDENTIFIER: 2>, 37), (')', <TokenType.CLOSE_PAREN: 8>, 37), ('{', <TokenType.OPEN_BRACE: 9>, 37), ('return', <TokenType.RETURN_KW: 6>, 38), ('x', <TokenType.IDENTIFIER: 2>, 38), ('*', <TokenType.ASTERISK: 17>, 38), ('2', <TokenType.INT_CONSTANT: 3>, 38), (';', <TokenType.SEMICOLON: 11>, 38), ('}', <TokenType.CLOSE_BRACE: 10>, 39)]
<parser.Int object at 0x7f5609c90e60>
[<parser.TypeS object at 0x7f560d9a1a30>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_int) [int (IdenDeclarator: actual), int (IdenDeclarator: expected)])
FunType: ParamTypes: [int, int] Return Type: int
<parser.Int object at 0x7f560d9a1a30>
[<parser.TypeS object at 0x7f5609c90e60>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_5_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f5609c90e60>
[<parser.TypeS object at 0x7f560d9a1a30>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), int (IdenDeclarator: k), int (IdenDeclarator: l), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f560d9a1a30>
[<parser.TypeS object at 0x7f5609d29f40>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: id) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
<parser.Int object at 0x7f560d9a1a30>
[<parser.TypeS object at 0x7f5609c90e60>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: counter)
int
<parser.Int object at 0x7f5609c90e60>
[<parser.TypeS object at 0x7f560d9a1a30>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: expected_a)
int
<parser.Int object at 0x7f560d9a1a30>
[<parser.TypeS object at 0x7f5609c90e60>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: update_expected_a) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f5609c90e60>
[<parser.TypeS object at 0x7f560d9a1a30>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: times_two) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
<parser.Int object at 0x7f560d9a1a30>
[<parser.TypeS object at 0x7f5609c90e60>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: target) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f5609d2adb0>
[<parser.TypeS object at 0x7f5609d2ade0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: z)
int
<parser.Int object at 0x7f5609d2ade0>
[<parser.TypeS object at 0x7f5609d2adb0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: a)
int
<parser.Int object at 0x7f5609d2adb0>
[<parser.TypeS object at 0x7f5609d2ade0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: one)
int
<parser.Int object at 0x7f5609d2ade0>
[<parser.TypeS object at 0x7f5609d2adb0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: two)
int
<parser.Int object at 0x7f5609d2adb0>
[<parser.TypeS object at 0x7f5609d2ade0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: three)
int
<parser.Int object at 0x7f5609d2ade0>
[<parser.TypeS object at 0x7f5609d2adb0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: four)
int
<parser.Int object at 0x7f5609d2ac00>
[<parser.TypeS object at 0x7f5609d2ac30>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: update_expected_a) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f5609d2ac30>
[<parser.TypeS object at 0x7f5609d2ac00>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: times_two) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
0
1
0
0
AST Program:
FunDecl: NULL check_one_int (actual, expected, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a, b, c, d, e, start, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int counter = SI: (5)
VarDecl: NULL int expected_a = SI: (2)
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int

FunDecl: NULL times_two (x, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int z
Declaration:
VarDecl: NULL int a
Declaration:
VarDecl: NULL int one = SI: ((counter) SUBTRACT (4))
Declaration:
VarDecl: NULL int two = SI: ((counter) DIVIDE (2))
Declaration:
VarDecl: NULL int three = SI: ((NEGATE (counter)) ADD (8))
Declaration:
VarDecl: NULL int four = SI: ((counter) SUBTRACT (1))
Statement: while  (((counter) GREATERTHAN (0)))
	Statement: if (((counter) EQUAL (5)))Expression: ((z) = (4))Expression: ((z) = (times_two((a), )))
	Statement: Expression: (update_expected_a())
	Statement: Expression: ((a) = ((1) SUBTRACT (z)))
	Statement: Expression: (check_one_int((a), (expected_a), ))
	Statement: Expression: ((counter) = ((counter) SUBTRACT (1)))
Statement: Expression: (check_one_int((one), (1), ))
Statement: Expression: (check_one_int((two), (2), ))
Statement: Expression: (check_one_int((three), (3), ))
Statement: Expression: (check_one_int((four), (4), ))
Statement: return (0)
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int
Statement: Expression: ((expected_a) = ((1) SUBTRACT ((2) MULTIPLY (expected_a))))
Statement: return (0)
FunDecl: NULL times_two (x, ) ParamTypes: (int, ) ReturnType: int
Statement: return ((x) MULTIPLY (2))

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
1
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x.21, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int counter = SI: (5)
VarDecl: NULL int expected_a = SI: (2)
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int

FunDecl: NULL times_two (x.22, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int z.23
Declaration:
VarDecl: NULL int a.24
Declaration:
VarDecl: NULL int one.25 = SI: ((counter) SUBTRACT (4))
Declaration:
VarDecl: NULL int two.26 = SI: ((counter) DIVIDE (2))
Declaration:
VarDecl: NULL int three.27 = SI: ((NEGATE (counter)) ADD (8))
Declaration:
VarDecl: NULL int four.28 = SI: ((counter) SUBTRACT (1))
Statement: while  (((counter) GREATERTHAN (0)))
	Statement: if (((counter) EQUAL (5)))Expression: ((z.23) = (4))Expression: ((z.23) = (times_two((a.24), )))
	Statement: Expression: (update_expected_a())
	Statement: Expression: ((a.24) = ((1) SUBTRACT (z.23)))
	Statement: Expression: (check_one_int((a.24), (expected_a), ))
	Statement: Expression: ((counter) = ((counter) SUBTRACT (1)))
Statement: Expression: (check_one_int((one.25), (1), ))
Statement: Expression: (check_one_int((two.26), (2), ))
Statement: Expression: (check_one_int((three.27), (3), ))
Statement: Expression: (check_one_int((four.28), (4), ))
Statement: return (0)
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int
Statement: Expression: ((expected_a) = ((1) SUBTRACT ((2) MULTIPLY (expected_a))))
Statement: return (0)
FunDecl: NULL times_two (x.29, ) ParamTypes: (int, ) ReturnType: int
Statement: return ((x.29) MULTIPLY (2))

[(a.24 RetType: int)]
[(a.24 RetType: int), (expected_a RetType: int)]
[(one.25 RetType: int), (1 RetType: int)]
[(two.26 RetType: int), (2 RetType: int)]
[(three.27 RetType: int), (3 RetType: int)]
[(four.28 RetType: int), (4 RetType: int)]
Old:  int New: int
0
1
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x.21, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int counter = SI: (5 : int) : int
VarDecl: NULL int expected_a = SI: (2 : int) : int
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int

FunDecl: NULL times_two (x.22, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int z.23
Declaration:
VarDecl: NULL int a.24
Declaration:
VarDecl: NULL int one.25 = SI: ((counter : int) SUBTRACT (4 : int) : int) : int
Declaration:
VarDecl: NULL int two.26 = SI: ((counter : int) DIVIDE (2 : int) : int) : int
Declaration:
VarDecl: NULL int three.27 = SI: ((NEGATE (counter : int) : int) ADD (8 : int) : int) : int
Declaration:
VarDecl: NULL int four.28 = SI: ((counter : int) SUBTRACT (1 : int) : int) : int
Statement: while  (((counter : int) GREATERTHAN (0 : int) : int))
	Statement: if (((counter : int) EQUAL (5 : int) : int))Expression: ((z.23 : int) = (4 : int) : int)Expression: ((z.23 : int) = (times_two((a.24 : int), ) : int) : int)
	Statement: Expression: (update_expected_a() : int)
	Statement: Expression: ((a.24 : int) = ((1 : int) SUBTRACT (z.23 : int) : int) : int)
	Statement: Expression: (check_one_int((a.24 : int), (expected_a : int), ) : int)
	Statement: Expression: ((counter : int) = ((counter : int) SUBTRACT (1 : int) : int) : int)
Statement: Expression: (check_one_int((one.25 : int), (1 : int), ) : int)
Statement: Expression: (check_one_int((two.26 : int), (2 : int), ) : int)
Statement: Expression: (check_one_int((three.27 : int), (3 : int), ) : int)
Statement: Expression: (check_one_int((four.28 : int), (4 : int), ) : int)
Statement: return (0 : int)
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int
Statement: Expression: ((expected_a : int) = ((1 : int) SUBTRACT ((2 : int) MULTIPLY (expected_a : int) : int) : int) : int)
Statement: return (0 : int)
FunDecl: NULL times_two (x.29, ) ParamTypes: (int, ) ReturnType: int
Statement: return ((x.29 : int) MULTIPLY (2 : int) : int)

Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'counter': counter int InitialVal: InitialList: [c_int(5)] Global: True, 'expected_a': expected_a int InitialVal: InitialList: [c_int(2)] Global: True, 'update_expected_a': update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'times_two': times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'z.23': z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>, 'a.24': a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>, 'one.25': one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>, 'two.26': two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>, 'three.27': three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>, 'four.28': four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>, 'x.29': x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>}
0
1
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x.21, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int counter = SI: (5 : int) : int
VarDecl: NULL int expected_a = SI: (2 : int) : int
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int

FunDecl: NULL times_two (x.22, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int z.23
Declaration:
VarDecl: NULL int a.24
Declaration:
VarDecl: NULL int one.25 = SI: ((counter : int) SUBTRACT (4 : int) : int) : int
Declaration:
VarDecl: NULL int two.26 = SI: ((counter : int) DIVIDE (2 : int) : int) : int
Declaration:
VarDecl: NULL int three.27 = SI: ((NEGATE (counter : int) : int) ADD (8 : int) : int) : int
Declaration:
VarDecl: NULL int four.28 = SI: ((counter : int) SUBTRACT (1 : int) : int) : int
Statement: while tmp.30 (((counter : int) GREATERTHAN (0 : int) : int))
	Statement: if (((counter : int) EQUAL (5 : int) : int))Expression: ((z.23 : int) = (4 : int) : int)Expression: ((z.23 : int) = (times_two((a.24 : int), ) : int) : int)
	Statement: Expression: (update_expected_a() : int)
	Statement: Expression: ((a.24 : int) = ((1 : int) SUBTRACT (z.23 : int) : int) : int)
	Statement: Expression: (check_one_int((a.24 : int), (expected_a : int), ) : int)
	Statement: Expression: ((counter : int) = ((counter : int) SUBTRACT (1 : int) : int) : int)
Statement: Expression: (check_one_int((one.25 : int), (1 : int), ) : int)
Statement: Expression: (check_one_int((two.26 : int), (2 : int), ) : int)
Statement: Expression: (check_one_int((three.27 : int), (3 : int), ) : int)
Statement: Expression: (check_one_int((four.28 : int), (4 : int), ) : int)
Statement: return (0 : int)
FunDecl: NULL update_expected_a () ParamTypes: () ReturnType: int
Statement: Expression: ((expected_a : int) = ((1 : int) SUBTRACT ((2 : int) MULTIPLY (expected_a : int) : int) : int) : int)
Statement: return (0 : int)
FunDecl: NULL times_two (x.29, ) ParamTypes: (int, ) ReturnType: int
Statement: return ((x.29 : int) MULTIPLY (2 : int) : int)

check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
TAC Program:[Function: target ([]) instructions:[tmp.31 = counter - 4, CopyToOffset(one.25 + 0) = tmp.31 , tmp.32 = counter / 2, CopyToOffset(two.26 + 0) = tmp.32 , tmp.33 = -counter, tmp.34 = tmp.33 + 8, CopyToOffset(three.27 + 0) = tmp.34 , tmp.35 = counter - 1, CopyToOffset(four.28 + 0) = tmp.35 , Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30), tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0, Return 0], Function: update_expected_a ([]) instructions:[tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0, Return 0], Function: times_two (['x.29']) instructions:[tmp.64 = x.29 * 2, Return tmp.64, Return 0], Global: True counter = [c_int(5)], Global: True expected_a = [c_int(2)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'counter': counter int InitialVal: InitialList: [c_int(5)] Global: True, 'expected_a': expected_a int InitialVal: InitialList: [c_int(2)] Global: True, 'update_expected_a': update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'times_two': times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'z.23': z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>, 'a.24': a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>, 'one.25': one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>, 'two.26': two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>, 'three.27': three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>, 'four.28': four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>, 'x.29': x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>, 'tmp.31': tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>, 'tmp.32': tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>, 'tmp.33': tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>, 'tmp.34': tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>, 'tmp.35': tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>, 'tmp.36': tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>, 'tmp.37': tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>, 'tmp.38': tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>, 'tmp.39': tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>, 'tmp.42': tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>, 'tmp.43': tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>, 'tmp.44': tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>, 'tmp.45': tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>, 'tmp.46': tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>, 'tmp.47': tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>, 'tmp.48': tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>, 'tmp.49': tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>, 'tmp.50': tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>, 'tmp.51': tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>, 'tmp.52': tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>, 'tmp.53': tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>, 'tmp.54': tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>, 'tmp.55': tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>, 'tmp.56': tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>, 'tmp.57': tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>, 'tmp.58': tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>, 'tmp.59': tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>, 'tmp.60': tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>, 'tmp.61': tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>, 'tmp.62': tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>, 'tmp.63': tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>, 'tmp.64': tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>}
OPTIMIZING FUNCTION Function: target ([]) instructions:[tmp.31 = counter - 4, CopyToOffset(one.25 + 0) = tmp.31 , tmp.32 = counter / 2, CopyToOffset(two.26 + 0) = tmp.32 , tmp.33 = -counter, tmp.34 = tmp.33 + 8, CopyToOffset(three.27 + 0) = tmp.34 , tmp.35 = counter - 1, CopyToOffset(four.28 + 0) = tmp.35 , Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30), tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{expected_a, counter}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.31 = counter - 4, CopyToOffset(one.25 + 0) = tmp.31 , tmp.32 = counter / 2, CopyToOffset(two.26 + 0) = tmp.32 , tmp.33 = -counter, tmp.34 = tmp.33 + 8, CopyToOffset(three.27 + 0) = tmp.34 , tmp.35 = counter - 1, CopyToOffset(four.28 + 0) = tmp.35 , Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30), tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0, Return 0]
NEW LIST [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35, Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30), tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.31 = counter - 4
Label(continue_tmp.30)
tmp.38 = counter == 5
Copy z.23 = 4
Label(tmp.41)
Label(tmp.40)
Label(break_tmp.30)
Return 0











ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), Copy tmp.37 = tmp.36: set(), JumpIfZero(tmp.37, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), Copy tmp.39 = tmp.38: set(), JumpIfZero(tmp.39, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), Copy tmp.42 = a.24: set(), tmp.43 = times_two([tmp.42]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), Copy tmp.46 = a.24: set(), Copy tmp.47 = expected_a: set(), tmp.48 = check_one_int([tmp.46, tmp.47]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), Copy tmp.50 = one.25: set(), Copy tmp.51 = 1: set(), tmp.52 = check_one_int([tmp.50, tmp.51]): set(), Copy tmp.53 = two.26: set(), Copy tmp.54 = 2: set(), tmp.55 = check_one_int([tmp.53, tmp.54]): set(), Copy tmp.56 = three.27: set(), Copy tmp.57 = 3: set(), tmp.58 = check_one_int([tmp.56, tmp.57]): set(), Copy tmp.59 = four.28: set(), Copy tmp.60 = 4: set(), tmp.61 = check_one_int([tmp.59, tmp.60]): set(), Return 0: set()} ReachingCopies: set()
7 7: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6, 7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), Copy tmp.37 = tmp.36: set(), JumpIfZero(tmp.37, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), Copy tmp.39 = tmp.38: set(), JumpIfZero(tmp.39, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), Copy tmp.42 = a.24: set(), tmp.43 = times_two([tmp.42]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), Copy tmp.46 = a.24: set(), Copy tmp.47 = expected_a: set(), tmp.48 = check_one_int([tmp.46, tmp.47]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), Copy tmp.50 = one.25: set(), Copy tmp.51 = 1: set(), tmp.52 = check_one_int([tmp.50, tmp.51]): set(), Copy tmp.53 = two.26: set(), Copy tmp.54 = 2: set(), tmp.55 = check_one_int([tmp.53, tmp.54]): set(), Copy tmp.56 = three.27: set(), Copy tmp.57 = 3: set(), tmp.58 = check_one_int([tmp.56, tmp.57]): set(), Copy tmp.59 = four.28: set(), Copy tmp.60 = 4: set(), tmp.61 = check_one_int([tmp.59, tmp.60]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), Copy tmp.37 = tmp.36: set(), JumpIfZero(tmp.37, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), Copy tmp.39 = tmp.38: set(), JumpIfZero(tmp.39, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), Copy tmp.42 = a.24: set(), tmp.43 = times_two([tmp.42]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), Copy tmp.46 = a.24: set(), Copy tmp.47 = expected_a: set(), tmp.48 = check_one_int([tmp.46, tmp.47]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), Copy tmp.50 = one.25: set(), Copy tmp.51 = 1: set(), tmp.52 = check_one_int([tmp.50, tmp.51]): set(), Copy tmp.53 = two.26: set(), Copy tmp.54 = 2: set(), tmp.55 = check_one_int([tmp.53, tmp.54]): set(), Copy tmp.56 = three.27: set(), Copy tmp.57 = 3: set(), tmp.58 = check_one_int([tmp.56, tmp.57]): set(), Copy tmp.59 = four.28: set(), Copy tmp.60 = 4: set(), tmp.61 = check_one_int([tmp.59, tmp.60]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.37, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), Copy tmp.37 = tmp.36: set(), JumpIfZero(tmp.37, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.39, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), Copy tmp.39 = tmp.38: set(), JumpIfZero(tmp.39, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([tmp.42]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), Copy tmp.42 = a.24: set(), tmp.43 = times_two([tmp.42]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, tmp.48 = check_one_int([tmp.46, tmp.47]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), Copy tmp.46 = a.24: set(), Copy tmp.47 = expected_a: set(), tmp.48 = check_one_int([tmp.46, tmp.47]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), Copy tmp.50 = one.25, Copy tmp.51 = 1, tmp.52 = check_one_int([tmp.50, tmp.51]), Copy tmp.53 = two.26, Copy tmp.54 = 2, tmp.55 = check_one_int([tmp.53, tmp.54]), Copy tmp.56 = three.27, Copy tmp.57 = 3, tmp.58 = check_one_int([tmp.56, tmp.57]), Copy tmp.59 = four.28, Copy tmp.60 = 4, tmp.61 = check_one_int([tmp.59, tmp.60]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), Copy tmp.50 = one.25: set(), Copy tmp.51 = 1: set(), tmp.52 = check_one_int([tmp.50, tmp.51]): set(), Copy tmp.53 = two.26: set(), Copy tmp.54 = 2: set(), tmp.55 = check_one_int([tmp.53, tmp.54]): set(), Copy tmp.56 = three.27: set(), Copy tmp.57 = 3: set(), tmp.58 = check_one_int([tmp.56, tmp.57]): set(), Copy tmp.59 = four.28: set(), Copy tmp.60 = 4: set(), tmp.61 = check_one_int([tmp.59, tmp.60]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
--------------IMAP for block 0-------------------
tmp.31 = counter - 4 set()
Copy one.25 = tmp.31 set()
tmp.32 = counter / 2 {Copy one.25 = tmp.31}
Copy two.26 = tmp.32 {Copy one.25 = tmp.31}
tmp.33 = -counter {Copy two.26 = tmp.32, Copy one.25 = tmp.31}
tmp.34 = tmp.33 + 8 {Copy two.26 = tmp.32, Copy one.25 = tmp.31}
Copy three.27 = tmp.34 {Copy two.26 = tmp.32, Copy one.25 = tmp.31}
tmp.35 = counter - 1 {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Copy four.28 = tmp.35 {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Label(continue_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.36 = counter > 0 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Copy tmp.37 = tmp.36 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
JumpIfZero(tmp.37, break_tmp.30) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
tmp.38 = counter == 5 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.39 = tmp.38 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
JumpIfZero(tmp.39, tmp.41) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Copy z.23 = 4 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
<class 'parser.ConstInt'>
Jump(tmp.40) {Copy four.28 = tmp.35, Copy z.23 = 4, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy z.23 = 4, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.41) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.42 = a.24 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
tmp.43 = times_two([tmp.42]) {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.42 = a.24, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy z.23 = tmp.43 {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.42 = a.24, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy one.25 = tmp.31, Copy tmp.42 = a.24, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Label(tmp.40) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
tmp.44 = update_expected_a([]) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
tmp.45 = 1 - z.23 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy a.24 = tmp.45 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.46 = a.24 {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.47 = expected_a {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
tmp.48 = check_one_int([tmp.46, tmp.47]) {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
tmp.49 = counter - 1 {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
Copy counter = tmp.49 {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
Jump(continue_tmp.30) {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(break_tmp.30) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.50 = one.25 {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.51 = 1 {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.50 = one.25, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
<class 'parser.ConstInt'>
tmp.52 = check_one_int([tmp.50, tmp.51]) {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.50 = one.25, Copy two.26 = tmp.32, Copy tmp.51 = 1, Copy three.27 = tmp.34}
Copy tmp.53 = two.26 {Copy four.28 = tmp.35, Copy tmp.50 = one.25, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.51 = 1, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy tmp.54 = 2 {Copy four.28 = tmp.35, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
<class 'parser.ConstInt'>
tmp.55 = check_one_int([tmp.53, tmp.54]) {Copy four.28 = tmp.35, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
Copy tmp.56 = three.27 {Copy four.28 = tmp.35, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
Copy tmp.57 = 3 {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
<class 'parser.ConstInt'>
tmp.58 = check_one_int([tmp.56, tmp.57]) {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
Copy tmp.59 = four.28 {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
Copy tmp.60 = 4 {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
<class 'parser.ConstInt'>
tmp.61 = check_one_int([tmp.59, tmp.60]) {Copy four.28 = tmp.35, Copy tmp.60 = 4, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
Return 0 {Copy four.28 = tmp.35, Copy tmp.60 = 4, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
OLD ANNOT: {Copy tmp.56 = three.27, Copy tmp.54 = 2, Copy two.26 = tmp.32, Copy tmp.60 = 4, Copy tmp.51 = 1, Copy tmp.57 = 3, Copy tmp.53 = two.26, Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy counter = tmp.49, Copy tmp.59 = four.28, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy a.24 = tmp.45, Copy tmp.50 = one.25, Copy tmp.39 = tmp.38, Copy z.23 = 4, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.42 = a.24}
NEW ANNOT: {Copy four.28 = tmp.35, Copy tmp.60 = 4, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Label(continue_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.36 = counter > 0 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Copy tmp.37 = tmp.36 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
JumpIfZero(tmp.37, break_tmp.30) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy three.27 = tmp.34, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
NEW ANNOT: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: {Copy one.25 = tmp.31}, Copy two.26 = tmp.32: {Copy one.25 = tmp.31}, tmp.33 = -counter: {Copy two.26 = tmp.32, Copy one.25 = tmp.31}, tmp.34 = tmp.33 + 8: {Copy two.26 = tmp.32, Copy one.25 = tmp.31}, Copy three.27 = tmp.34: {Copy two.26 = tmp.32, Copy one.25 = tmp.31}, tmp.35 = counter - 1: {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Copy four.28 = tmp.35: {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, Copy tmp.37 = tmp.36, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.36 = counter > 0: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Copy tmp.37 = tmp.36: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, JumpIfZero(tmp.37, break_tmp.30): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
2 2: [tmp.38 = counter == 5, Copy tmp.39 = tmp.38, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.39 = tmp.38: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, JumpIfZero(tmp.39, tmp.41): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Jump(tmp.40): {Copy four.28 = tmp.35, Copy z.23 = 4, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy z.23 = 4, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
4 4: [Label(tmp.41), Copy tmp.42 = a.24, tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.42 = a.24: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, tmp.43 = times_two([tmp.42]): {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.42 = a.24, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy z.23 = tmp.43: {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.42 = a.24, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy one.25 = tmp.31, Copy tmp.42 = a.24, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, Copy tmp.46 = tmp.45, Copy tmp.47 = expected_a, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, tmp.44 = update_expected_a([]): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, tmp.45 = 1 - z.23: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy a.24 = tmp.45: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.46 = a.24: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy tmp.39 = tmp.38, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.47 = expected_a: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}, tmp.48 = check_one_int([tmp.46, tmp.47]): {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy tmp.47 = expected_a, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}, tmp.49 = counter - 1: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}, Copy counter = tmp.49: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}, Jump(continue_tmp.30): {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}} ReachingCopies: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy tmp.39 = tmp.38, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy tmp.46 = a.24, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.37 = tmp.36}
6 6: [Label(break_tmp.30), Copy tmp.50 = tmp.31, Copy tmp.51 = 1, tmp.52 = check_one_int([one.25, 1]), Copy tmp.53 = tmp.32, Copy tmp.54 = 2, tmp.55 = check_one_int([two.26, 2]), Copy tmp.56 = tmp.34, Copy tmp.57 = 3, tmp.58 = check_one_int([three.27, 3]), Copy tmp.59 = tmp.35, Copy tmp.60 = 4, tmp.61 = check_one_int([four.28, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.50 = one.25: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy tmp.37 = tmp.36, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.51 = 1: {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.50 = one.25, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, tmp.52 = check_one_int([tmp.50, tmp.51]): {Copy four.28 = tmp.35, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.50 = one.25, Copy two.26 = tmp.32, Copy tmp.51 = 1, Copy three.27 = tmp.34}, Copy tmp.53 = two.26: {Copy four.28 = tmp.35, Copy tmp.50 = one.25, Copy tmp.37 = tmp.36, Copy one.25 = tmp.31, Copy tmp.51 = 1, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy tmp.54 = 2: {Copy four.28 = tmp.35, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, tmp.55 = check_one_int([tmp.53, tmp.54]): {Copy four.28 = tmp.35, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, Copy tmp.56 = three.27: {Copy four.28 = tmp.35, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, Copy tmp.57 = 3: {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.51 = 1, Copy tmp.50 = one.25, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, tmp.58 = check_one_int([tmp.56, tmp.57]): {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, Copy tmp.59 = four.28: {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, Copy tmp.60 = 4: {Copy four.28 = tmp.35, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, tmp.61 = check_one_int([tmp.59, tmp.60]): {Copy four.28 = tmp.35, Copy tmp.60 = 4, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}, Return 0: {Copy four.28 = tmp.35, Copy tmp.60 = 4, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}} ReachingCopies: {Copy four.28 = tmp.35, Copy tmp.60 = 4, Copy tmp.56 = three.27, Copy tmp.50 = one.25, Copy tmp.51 = 1, Copy three.27 = tmp.34, Copy tmp.59 = four.28, Copy tmp.54 = 2, Copy one.25 = tmp.31, Copy tmp.57 = 3, Copy two.26 = tmp.32, Copy tmp.53 = two.26, Copy tmp.37 = tmp.36}
EXIT Exit: EXIT {6}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 6-------------------
Return 0 {expected_a, counter}
tmp.61 = check_one_int([four.28, 4]) {expected_a, counter}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.60 = 4 {expected_a, counter, four.28}
Copy tmp.59 = tmp.35 {expected_a, counter, four.28}
tmp.58 = check_one_int([three.27, 3]) {expected_a, counter, tmp.35, four.28}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.57 = 3 {counter, tmp.35, three.27, expected_a, four.28}
Copy tmp.56 = tmp.34 {counter, tmp.35, three.27, expected_a, four.28}
tmp.55 = check_one_int([two.26, 2]) {counter, tmp.34, tmp.35, three.27, expected_a, four.28}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.54 = 2 {counter, two.26, tmp.34, tmp.35, three.27, expected_a, four.28}
Copy tmp.53 = tmp.32 {counter, two.26, tmp.34, tmp.35, three.27, expected_a, four.28}
tmp.52 = check_one_int([one.25, 1]) {counter, tmp.35, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.51 = 1 {counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
Copy tmp.50 = tmp.31 {counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
Label(break_tmp.30) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
OLD ANNOT: set()
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
--------------LIVE for block 5-------------------
Jump(continue_tmp.30) set()
Copy counter = tmp.49 set()
tmp.49 = counter - 1 {tmp.49}
tmp.48 = check_one_int([a.24, expected_a]) {counter}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.47 = expected_a {expected_a, counter, a.24}
Copy tmp.46 = tmp.45 {expected_a, counter, a.24}
Copy a.24 = tmp.45 {tmp.45, counter, expected_a, a.24}
tmp.45 = 1 - z.23 {tmp.45, counter, expected_a}
tmp.44 = update_expected_a([]) {z.23, expected_a, counter}
Label(tmp.40) {z.23, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {z.23, expected_a, counter}
--------------LIVE for block 4-------------------
Copy z.23 = tmp.43 {z.23, expected_a, counter}
tmp.43 = times_two([a.24]) {expected_a, counter, tmp.43}
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.42 = a.24 {expected_a, counter, a.24}
Label(tmp.41) {expected_a, counter, a.24}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 3-------------------
Jump(tmp.40) {z.23, expected_a, counter}
Copy z.23 = 4 {z.23, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.38, tmp.41) {expected_a, counter, a.24}
Copy tmp.39 = tmp.38 {expected_a, counter, a.24, tmp.38}
tmp.38 = counter == 5 {expected_a, counter, a.24, tmp.38}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.36, break_tmp.30) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Copy tmp.37 = tmp.36 {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
tmp.36 = counter > 0 {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Label(continue_tmp.30) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
OLD ANNOT: set()
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
ADD PREDECESSORS.
--------------LIVE for block 0-------------------
Copy four.28 = tmp.35 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
tmp.35 = counter - 1 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, two.26, tmp.34}
Copy three.27 = tmp.34 {tmp.31, counter, one.25, three.27, expected_a, tmp.32, a.24, two.26, tmp.34}
tmp.34 = tmp.33 + 8 {tmp.31, counter, one.25, expected_a, tmp.32, a.24, two.26, tmp.34}
tmp.33 = -counter {tmp.31, counter, one.25, tmp.33, expected_a, tmp.32, a.24, two.26}
Copy two.26 = tmp.32 {tmp.31, counter, two.26, one.25, expected_a, tmp.32, a.24}
tmp.32 = counter / 2 {tmp.31, counter, one.25, expected_a, tmp.32, a.24}
Copy one.25 = tmp.31 {tmp.31, counter, one.25, expected_a, a.24}
tmp.31 = counter - 4 {tmp.31, counter, expected_a, a.24}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 5-------------------
Jump(continue_tmp.30) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Copy counter = tmp.49 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
tmp.49 = counter - 1 {tmp.31, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.49}
tmp.48 = check_one_int([a.24, expected_a]) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.47 = expected_a {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Copy tmp.46 = tmp.45 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Copy a.24 = tmp.45 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, tmp.45, two.26, tmp.34}
tmp.45 = 1 - z.23 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, tmp.45, two.26, tmp.34}
tmp.44 = update_expected_a([]) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
Label(tmp.40) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
OLD ANNOT: {z.23, counter, expected_a}
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
ADD PREDECESSORS.
ADD PREDECESSORS.
--------------LIVE for block 3-------------------
Jump(tmp.40) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
Copy z.23 = 4 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
OLD ANNOT: {expected_a, counter}
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
ADD PREDECESSORS.
--------------LIVE for block 4-------------------
Copy z.23 = tmp.43 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
tmp.43 = times_two([a.24]) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, tmp.43}
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.42 = a.24 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Label(tmp.41) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
OLD ANNOT: {expected_a, counter, a.24}
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.38, tmp.41) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Copy tmp.39 = tmp.38 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.38}
tmp.38 = counter == 5 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.38}
OLD ANNOT: {expected_a, counter, a.24}
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
ADD PREDECESSORS.
--------------LIVE for block 1-------------------
JumpIfZero(tmp.36, break_tmp.30) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Copy tmp.37 = tmp.36 {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
tmp.36 = counter > 0 {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
Label(continue_tmp.30) {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
OLD ANNOT: {tmp.31, counter, one.25, tmp.35, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
NEW ANNOT: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.37 = tmp.36 {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34} for node 1
Copy tmp.39 = tmp.38 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.38} for node 2
Copy tmp.42 = a.24 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34} for node 4
Copy tmp.46 = tmp.45 {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34} for node 5
Copy tmp.47 = expected_a {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34} for node 5
Copy tmp.50 = tmp.31 {counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34} for node 6
Copy tmp.51 = 1 {counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34} for node 6
Copy tmp.53 = tmp.32 {counter, two.26, tmp.34, tmp.35, three.27, expected_a, four.28} for node 6
Copy tmp.54 = 2 {counter, two.26, tmp.34, tmp.35, three.27, expected_a, four.28} for node 6
Copy tmp.56 = tmp.34 {counter, tmp.35, three.27, expected_a, four.28} for node 6
Copy tmp.57 = 3 {counter, tmp.35, three.27, expected_a, four.28} for node 6
Copy tmp.59 = tmp.35 {expected_a, counter, four.28} for node 6
Copy tmp.60 = 4 {expected_a, counter, four.28} for node 6
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: {tmp.31, counter, expected_a, a.24}, Copy one.25 = tmp.31: {tmp.31, counter, one.25, expected_a, a.24}, tmp.32 = counter / 2: {tmp.31, counter, one.25, expected_a, tmp.32, a.24}, Copy two.26 = tmp.32: {tmp.31, counter, two.26, one.25, expected_a, tmp.32, a.24}, tmp.33 = -counter: {tmp.31, counter, one.25, tmp.33, expected_a, tmp.32, a.24, two.26}, tmp.34 = tmp.33 + 8: {tmp.31, counter, one.25, expected_a, tmp.32, a.24, two.26, tmp.34}, Copy three.27 = tmp.34: {tmp.31, counter, one.25, three.27, expected_a, tmp.32, a.24, two.26, tmp.34}, tmp.35 = counter - 1: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, two.26, tmp.34}, Copy four.28 = tmp.35: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}} ReachingCopies: {expected_a, counter, a.24}
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, tmp.36 = counter > 0: {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, Copy tmp.37 = tmp.36: {tmp.31, counter, tmp.36, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, JumpIfZero(tmp.36, break_tmp.30): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}} ReachingCopies: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.38}, Copy tmp.39 = tmp.38: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.38}, JumpIfZero(tmp.38, tmp.41): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}} ReachingCopies: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}, Jump(tmp.40): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}} ReachingCopies: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, Copy tmp.42 = a.24: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, tmp.43 = times_two([a.24]): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, tmp.43}, Copy z.23 = tmp.43: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}} ReachingCopies: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}, tmp.44 = update_expected_a([]): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}, tmp.45 = 1 - z.23: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, tmp.45, two.26, tmp.34}, Copy a.24 = tmp.45: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, tmp.45, two.26, tmp.34}, Copy tmp.46 = tmp.45: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, Copy tmp.47 = expected_a: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, tmp.48 = check_one_int([a.24, expected_a]): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, tmp.49 = counter - 1: {tmp.31, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34, tmp.49}, Copy counter = tmp.49: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}, Jump(continue_tmp.30): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, a.24, four.28, two.26, tmp.34}} ReachingCopies: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34, z.23}
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}, Copy tmp.50 = tmp.31: {counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}, Copy tmp.51 = 1: {counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}, tmp.52 = check_one_int([one.25, 1]): {counter, tmp.35, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}, Copy tmp.53 = tmp.32: {counter, two.26, tmp.34, tmp.35, three.27, expected_a, four.28}, Copy tmp.54 = 2: {counter, two.26, tmp.34, tmp.35, three.27, expected_a, four.28}, tmp.55 = check_one_int([two.26, 2]): {counter, tmp.34, tmp.35, three.27, expected_a, four.28}, Copy tmp.56 = tmp.34: {counter, tmp.35, three.27, expected_a, four.28}, Copy tmp.57 = 3: {counter, tmp.35, three.27, expected_a, four.28}, tmp.58 = check_one_int([three.27, 3]): {expected_a, counter, tmp.35, four.28}, Copy tmp.59 = tmp.35: {expected_a, counter, four.28}, Copy tmp.60 = 4: {expected_a, counter, four.28}, tmp.61 = check_one_int([four.28, 4]): {expected_a, counter}, Return 0: {expected_a, counter}} ReachingCopies: {tmp.31, counter, tmp.35, one.25, three.27, expected_a, tmp.32, four.28, two.26, tmp.34}
EXIT Exit: EXIT {6}
--------------ADDRESS TAKEN ANALYSIS.------------------
{expected_a, counter}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35, Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30), tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0]
NEW LIST [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35, Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30), tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.31 = counter - 4
Label(continue_tmp.30)
tmp.38 = counter == 5
Copy z.23 = 4
Label(tmp.41)
Label(tmp.40)
Label(break_tmp.30)










ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([a.24, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([one.25, 1]): set(), tmp.55 = check_one_int([two.26, 2]): set(), tmp.58 = check_one_int([three.27, 3]): set(), tmp.61 = check_one_int([four.28, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([a.24, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([one.25, 1]): set(), tmp.55 = check_one_int([two.26, 2]): set(), tmp.58 = check_one_int([three.27, 3]): set(), tmp.61 = check_one_int([four.28, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([a.24, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([one.25, 1]): set(), tmp.55 = check_one_int([two.26, 2]): set(), tmp.58 = check_one_int([three.27, 3]): set(), tmp.61 = check_one_int([four.28, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: set(), Copy two.26 = tmp.32: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), Copy three.27 = tmp.34: set(), tmp.35 = counter - 1: set(), Copy four.28 = tmp.35: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([a.24, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([a.24, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([one.25, 1]), tmp.55 = check_one_int([two.26, 2]), tmp.58 = check_one_int([three.27, 3]), tmp.61 = check_one_int([four.28, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([one.25, 1]): set(), tmp.55 = check_one_int([two.26, 2]): set(), tmp.58 = check_one_int([three.27, 3]): set(), tmp.61 = check_one_int([four.28, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
--------------IMAP for block 0-------------------
tmp.31 = counter - 4 set()
Copy one.25 = tmp.31 set()
tmp.32 = counter / 2 {Copy one.25 = tmp.31}
Copy two.26 = tmp.32 {Copy one.25 = tmp.31}
tmp.33 = -counter {Copy two.26 = tmp.32, Copy one.25 = tmp.31}
tmp.34 = tmp.33 + 8 {Copy two.26 = tmp.32, Copy one.25 = tmp.31}
Copy three.27 = tmp.34 {Copy two.26 = tmp.32, Copy one.25 = tmp.31}
tmp.35 = counter - 1 {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Copy four.28 = tmp.35 {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Label(continue_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.36 = counter > 0 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
JumpIfZero(tmp.36, break_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
tmp.38 = counter == 5 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
JumpIfZero(tmp.38, tmp.41) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Copy z.23 = 4 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
<class 'parser.ConstInt'>
Jump(tmp.40) {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy z.23 = 4, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy z.23 = 4, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.41) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.43 = times_two([a.24]) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Copy z.23 = tmp.43 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Label(tmp.40) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.44 = update_expected_a([]) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.45 = 1 - z.23 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Copy a.24 = tmp.45 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.48 = check_one_int([a.24, expected_a]) {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
tmp.49 = counter - 1 {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Copy counter = tmp.49 {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
Jump(continue_tmp.30) {Copy four.28 = tmp.35, Copy counter = tmp.49, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy counter = tmp.49, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(break_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.52 = check_one_int([one.25, 1]) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.55 = check_one_int([two.26, 2]) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.58 = check_one_int([three.27, 3]) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.61 = check_one_int([four.28, 4]) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
Return 0 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy a.24 = tmp.45, Copy z.23 = 4, Copy three.27 = tmp.34, Copy counter = tmp.49, Copy one.25 = tmp.31, Copy two.26 = tmp.32}
NEW ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Label(continue_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
tmp.36 = counter > 0 {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
JumpIfZero(tmp.36, break_tmp.30) {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
OLD ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
NEW ANNOT: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, Copy one.25 = tmp.31, tmp.32 = counter / 2, Copy two.26 = tmp.32, tmp.33 = -counter, tmp.34 = tmp.33 + 8, Copy three.27 = tmp.34, tmp.35 = counter - 1, Copy four.28 = tmp.35] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), Copy one.25 = tmp.31: set(), tmp.32 = counter / 2: {Copy one.25 = tmp.31}, Copy two.26 = tmp.32: {Copy one.25 = tmp.31}, tmp.33 = -counter: {Copy two.26 = tmp.32, Copy one.25 = tmp.31}, tmp.34 = tmp.33 + 8: {Copy two.26 = tmp.32, Copy one.25 = tmp.31}, Copy three.27 = tmp.34: {Copy two.26 = tmp.32, Copy one.25 = tmp.31}, tmp.35 = counter - 1: {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Copy four.28 = tmp.35: {Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.36 = counter > 0: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, JumpIfZero(tmp.36, break_tmp.30): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, JumpIfZero(tmp.38, tmp.41): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Jump(tmp.40): {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy z.23 = 4, Copy two.26 = tmp.32, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy one.25 = tmp.31, Copy z.23 = 4, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.43 = times_two([a.24]): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Copy z.23 = tmp.43: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy z.23 = tmp.43, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.44 = update_expected_a([]): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.45 = 1 - z.23: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Copy a.24 = tmp.45: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.48 = check_one_int([a.24, expected_a]): {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, tmp.49 = counter - 1: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Copy counter = tmp.49: {Copy four.28 = tmp.35, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}, Jump(continue_tmp.30): {Copy four.28 = tmp.35, Copy counter = tmp.49, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy counter = tmp.49, Copy a.24 = tmp.45, Copy one.25 = tmp.31, Copy two.26 = tmp.32, Copy three.27 = tmp.34}
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.52 = check_one_int([one.25, 1]): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.55 = check_one_int([two.26, 2]): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.58 = check_one_int([three.27, 3]): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, tmp.61 = check_one_int([four.28, 4]): {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}, Return 0: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}} ReachingCopies: {Copy four.28 = tmp.35, Copy two.26 = tmp.32, Copy one.25 = tmp.31, Copy three.27 = tmp.34}
EXIT Exit: EXIT {6}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 6-------------------
Return 0 {expected_a, counter}
tmp.61 = check_one_int([tmp.35, 4]) {expected_a, counter}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.58 = check_one_int([tmp.34, 3]) {expected_a, counter, tmp.35}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.55 = check_one_int([tmp.32, 2]) {expected_a, counter, tmp.34, tmp.35}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.52 = check_one_int([tmp.31, 1]) {counter, tmp.34, tmp.35, expected_a, tmp.32}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Label(break_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
OLD ANNOT: set()
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
--------------LIVE for block 5-------------------
Jump(continue_tmp.30) set()
Copy counter = tmp.49 set()
tmp.49 = counter - 1 {tmp.49}
tmp.48 = check_one_int([tmp.45, expected_a]) {counter}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy a.24 = tmp.45 {tmp.45, counter, expected_a}
tmp.45 = 1 - z.23 {tmp.45, counter, expected_a}
tmp.44 = update_expected_a([]) {z.23, expected_a, counter}
Label(tmp.40) {z.23, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {z.23, expected_a, counter}
--------------LIVE for block 4-------------------
Copy z.23 = tmp.43 {z.23, expected_a, counter}
tmp.43 = times_two([a.24]) {expected_a, counter, tmp.43}
<class 'tacGenerator.TAC_VariableValue'>
Label(tmp.41) {expected_a, counter, a.24}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 3-------------------
Jump(tmp.40) {z.23, expected_a, counter}
Copy z.23 = 4 {z.23, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.38, tmp.41) {expected_a, counter, a.24}
tmp.38 = counter == 5 {expected_a, counter, a.24, tmp.38}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.36, break_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.36 = counter > 0 {tmp.31, counter, tmp.36, tmp.35, expected_a, tmp.32, a.24, tmp.34}
Label(continue_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
OLD ANNOT: set()
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
ADD PREDECESSORS.
--------------LIVE for block 0-------------------
Copy four.28 = tmp.35 {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.35 = counter - 1 {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
Copy three.27 = tmp.34 {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24}
tmp.34 = tmp.33 + 8 {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24}
tmp.33 = -counter {tmp.31, counter, tmp.33, expected_a, tmp.32, a.24}
Copy two.26 = tmp.32 {tmp.31, counter, expected_a, tmp.32, a.24}
tmp.32 = counter / 2 {tmp.31, counter, expected_a, tmp.32, a.24}
Copy one.25 = tmp.31 {tmp.31, counter, expected_a, a.24}
tmp.31 = counter - 4 {tmp.31, counter, expected_a, a.24}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 5-------------------
Jump(continue_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
Copy counter = tmp.49 {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.49 = counter - 1 {tmp.31, tmp.34, tmp.35, expected_a, tmp.49, tmp.32, a.24}
tmp.48 = check_one_int([tmp.45, expected_a]) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy a.24 = tmp.45 {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.45, tmp.34}
tmp.45 = 1 - z.23 {tmp.45, tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
tmp.44 = update_expected_a([]) {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
Label(tmp.40) {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
OLD ANNOT: {z.23, counter, expected_a}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
ADD PREDECESSORS.
ADD PREDECESSORS.
--------------LIVE for block 3-------------------
Jump(tmp.40) {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
Copy z.23 = 4 {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
OLD ANNOT: {expected_a, counter}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
ADD PREDECESSORS.
--------------LIVE for block 4-------------------
Copy z.23 = tmp.43 {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
tmp.43 = times_two([a.24]) {tmp.31, counter, tmp.34, tmp.35, tmp.43, expected_a, tmp.32}
<class 'tacGenerator.TAC_VariableValue'>
Label(tmp.41) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
OLD ANNOT: {expected_a, counter, a.24}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.38, tmp.41) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.38 = counter == 5 {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.34, tmp.38}
OLD ANNOT: {expected_a, counter, a.24}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
ADD PREDECESSORS.
--------------LIVE for block 1-------------------
JumpIfZero(tmp.36, break_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.36 = counter > 0 {tmp.31, counter, tmp.36, tmp.35, expected_a, tmp.32, a.24, tmp.34}
Label(continue_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
OLD ANNOT: {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.34}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy one.25 = tmp.31 {tmp.31, counter, expected_a, a.24} for node 0
Copy two.26 = tmp.32 {tmp.31, counter, expected_a, tmp.32, a.24} for node 0
Copy three.27 = tmp.34 {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24} for node 0
Copy four.28 = tmp.35 {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: {tmp.31, counter, expected_a, a.24}, Copy one.25 = tmp.31: {tmp.31, counter, expected_a, a.24}, tmp.32 = counter / 2: {tmp.31, counter, expected_a, tmp.32, a.24}, Copy two.26 = tmp.32: {tmp.31, counter, expected_a, tmp.32, a.24}, tmp.33 = -counter: {tmp.31, counter, tmp.33, expected_a, tmp.32, a.24}, tmp.34 = tmp.33 + 8: {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24}, Copy three.27 = tmp.34: {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24}, tmp.35 = counter - 1: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, Copy four.28 = tmp.35: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {expected_a, counter, a.24}
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, tmp.36 = counter > 0: {tmp.31, counter, tmp.36, tmp.35, expected_a, tmp.32, a.24, tmp.34}, JumpIfZero(tmp.36, break_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.34, tmp.38}, JumpIfZero(tmp.38, tmp.41): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}, Jump(tmp.40): {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, tmp.43 = times_two([a.24]): {tmp.31, counter, tmp.34, tmp.35, tmp.43, expected_a, tmp.32}, Copy z.23 = tmp.43: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}, tmp.44 = update_expected_a([]): {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}, tmp.45 = 1 - z.23: {tmp.45, tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}, Copy a.24 = tmp.45: {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.45, tmp.34}, tmp.48 = check_one_int([tmp.45, expected_a]): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, tmp.49 = counter - 1: {tmp.31, tmp.34, tmp.35, expected_a, tmp.49, tmp.32, a.24}, Copy counter = tmp.49: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, Jump(continue_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}, tmp.52 = check_one_int([tmp.31, 1]): {counter, tmp.34, tmp.35, expected_a, tmp.32}, tmp.55 = check_one_int([tmp.32, 2]): {expected_a, counter, tmp.34, tmp.35}, tmp.58 = check_one_int([tmp.34, 3]): {expected_a, counter, tmp.35}, tmp.61 = check_one_int([tmp.35, 4]): {expected_a, counter}, Return 0: {expected_a, counter}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
EXIT Exit: EXIT {6}
--------------ADDRESS TAKEN ANALYSIS.------------------
{expected_a, counter}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1, Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30), tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0]
NEW LIST [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1, Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30), tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.31 = counter - 4
Label(continue_tmp.30)
tmp.38 = counter == 5
Copy z.23 = 4
Label(tmp.41)
Label(tmp.40)
Label(break_tmp.30)










ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), tmp.32 = counter / 2: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), tmp.35 = counter - 1: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([tmp.45, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([tmp.31, 1]): set(), tmp.55 = check_one_int([tmp.32, 2]): set(), tmp.58 = check_one_int([tmp.34, 3]): set(), tmp.61 = check_one_int([tmp.35, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), tmp.32 = counter / 2: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), tmp.35 = counter - 1: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([tmp.45, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([tmp.31, 1]): set(), tmp.55 = check_one_int([tmp.32, 2]): set(), tmp.58 = check_one_int([tmp.34, 3]): set(), tmp.61 = check_one_int([tmp.35, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), tmp.32 = counter / 2: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), tmp.35 = counter - 1: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([tmp.45, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([tmp.31, 1]): set(), tmp.55 = check_one_int([tmp.32, 2]): set(), tmp.58 = check_one_int([tmp.34, 3]): set(), tmp.61 = check_one_int([tmp.35, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), tmp.32 = counter / 2: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), tmp.35 = counter - 1: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: set()
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([tmp.45, expected_a]): set(), tmp.49 = counter - 1: set(), Copy counter = tmp.49: set(), Jump(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([tmp.31, 1]): set(), tmp.55 = check_one_int([tmp.32, 2]): set(), tmp.58 = check_one_int([tmp.34, 3]): set(), tmp.61 = check_one_int([tmp.35, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
--------------IMAP for block 0-------------------
tmp.31 = counter - 4 set()
tmp.32 = counter / 2 set()
tmp.33 = -counter set()
tmp.34 = tmp.33 + 8 set()
tmp.35 = counter - 1 set()
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Label(continue_tmp.30) set()
tmp.36 = counter > 0 set()
JumpIfZero(tmp.36, break_tmp.30) set()
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
tmp.38 = counter == 5 set()
JumpIfZero(tmp.38, tmp.41) set()
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Copy z.23 = 4 set()
<class 'parser.ConstInt'>
Jump(tmp.40) {Copy z.23 = 4}
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: {Copy z.23 = 4}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.41) set()
tmp.43 = times_two([a.24]) set()
Copy z.23 = tmp.43 set()
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: {Copy z.23 = tmp.43}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Label(tmp.40) set()
tmp.44 = update_expected_a([]) set()
tmp.45 = 1 - z.23 set()
Copy a.24 = tmp.45 set()
tmp.48 = check_one_int([tmp.45, expected_a]) {Copy a.24 = tmp.45}
tmp.49 = counter - 1 {Copy a.24 = tmp.45}
Copy counter = tmp.49 {Copy a.24 = tmp.45}
Jump(continue_tmp.30) {Copy counter = tmp.49, Copy a.24 = tmp.45}
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: {Copy counter = tmp.49, Copy a.24 = tmp.45}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(break_tmp.30) set()
tmp.52 = check_one_int([tmp.31, 1]) set()
tmp.55 = check_one_int([tmp.32, 2]) set()
tmp.58 = check_one_int([tmp.34, 3]) set()
tmp.61 = check_one_int([tmp.35, 4]) set()
Return 0 set()
OLD ANNOT: {Copy counter = tmp.49, Copy z.23 = 4, Copy z.23 = tmp.43, Copy a.24 = tmp.45}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Label(continue_tmp.30) set()
tmp.36 = counter > 0 set()
JumpIfZero(tmp.36, break_tmp.30) set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: set(), tmp.32 = counter / 2: set(), tmp.33 = -counter: set(), tmp.34 = tmp.33 + 8: set(), tmp.35 = counter - 1: set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), tmp.36 = counter > 0: set(), JumpIfZero(tmp.36, break_tmp.30): set()} ReachingCopies: set()
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: set(), JumpIfZero(tmp.38, tmp.41): set()} ReachingCopies: set()
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: set(), Jump(tmp.40): {Copy z.23 = 4}} ReachingCopies: {Copy z.23 = 4}
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), tmp.43 = times_two([a.24]): set(), Copy z.23 = tmp.43: set()} ReachingCopies: {Copy z.23 = tmp.43}
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), tmp.44 = update_expected_a([]): set(), tmp.45 = 1 - z.23: set(), Copy a.24 = tmp.45: set(), tmp.48 = check_one_int([tmp.45, expected_a]): {Copy a.24 = tmp.45}, tmp.49 = counter - 1: {Copy a.24 = tmp.45}, Copy counter = tmp.49: {Copy a.24 = tmp.45}, Jump(continue_tmp.30): {Copy counter = tmp.49, Copy a.24 = tmp.45}} ReachingCopies: {Copy counter = tmp.49, Copy a.24 = tmp.45}
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), tmp.52 = check_one_int([tmp.31, 1]): set(), tmp.55 = check_one_int([tmp.32, 2]): set(), tmp.58 = check_one_int([tmp.34, 3]): set(), tmp.61 = check_one_int([tmp.35, 4]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 6-------------------
Return 0 {expected_a, counter}
tmp.61 = check_one_int([tmp.35, 4]) {expected_a, counter}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.58 = check_one_int([tmp.34, 3]) {expected_a, counter, tmp.35}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.55 = check_one_int([tmp.32, 2]) {expected_a, counter, tmp.34, tmp.35}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.52 = check_one_int([tmp.31, 1]) {counter, tmp.34, tmp.35, expected_a, tmp.32}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Label(break_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
OLD ANNOT: set()
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
--------------LIVE for block 5-------------------
Jump(continue_tmp.30) set()
Copy counter = tmp.49 set()
tmp.49 = counter - 1 {tmp.49}
tmp.48 = check_one_int([tmp.45, expected_a]) {counter}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy a.24 = tmp.45 {tmp.45, counter, expected_a}
tmp.45 = 1 - z.23 {tmp.45, counter, expected_a}
tmp.44 = update_expected_a([]) {z.23, expected_a, counter}
Label(tmp.40) {z.23, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {z.23, expected_a, counter}
--------------LIVE for block 4-------------------
Copy z.23 = tmp.43 {z.23, expected_a, counter}
tmp.43 = times_two([a.24]) {expected_a, counter, tmp.43}
<class 'tacGenerator.TAC_VariableValue'>
Label(tmp.41) {expected_a, counter, a.24}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 3-------------------
Jump(tmp.40) {z.23, expected_a, counter}
Copy z.23 = 4 {z.23, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.38, tmp.41) {expected_a, counter, a.24}
tmp.38 = counter == 5 {expected_a, counter, a.24, tmp.38}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.36, break_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.36 = counter > 0 {tmp.31, counter, tmp.36, tmp.35, expected_a, tmp.32, a.24, tmp.34}
Label(continue_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
OLD ANNOT: set()
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
ADD PREDECESSORS.
--------------LIVE for block 0-------------------
tmp.35 = counter - 1 {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.34 = tmp.33 + 8 {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24}
tmp.33 = -counter {tmp.31, counter, tmp.33, expected_a, tmp.32, a.24}
tmp.32 = counter / 2 {tmp.31, counter, expected_a, tmp.32, a.24}
tmp.31 = counter - 4 {tmp.31, counter, expected_a, a.24}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter, a.24}
--------------LIVE for block 5-------------------
Jump(continue_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
Copy counter = tmp.49 {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.49 = counter - 1 {tmp.31, tmp.34, tmp.35, expected_a, tmp.49, tmp.32, a.24}
tmp.48 = check_one_int([tmp.45, expected_a]) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy a.24 = tmp.45 {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.45, tmp.34}
tmp.45 = 1 - z.23 {tmp.45, tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
tmp.44 = update_expected_a([]) {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
Label(tmp.40) {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
OLD ANNOT: {z.23, counter, expected_a}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
ADD PREDECESSORS.
ADD PREDECESSORS.
--------------LIVE for block 3-------------------
Jump(tmp.40) {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
Copy z.23 = 4 {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
OLD ANNOT: {expected_a, counter}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
ADD PREDECESSORS.
--------------LIVE for block 4-------------------
Copy z.23 = tmp.43 {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
tmp.43 = times_two([a.24]) {tmp.31, counter, tmp.34, tmp.35, tmp.43, expected_a, tmp.32}
<class 'tacGenerator.TAC_VariableValue'>
Label(tmp.41) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
OLD ANNOT: {expected_a, counter, a.24}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.38, tmp.41) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.38 = counter == 5 {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.34, tmp.38}
OLD ANNOT: {expected_a, counter, a.24}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
ADD PREDECESSORS.
--------------LIVE for block 1-------------------
JumpIfZero(tmp.36, break_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
tmp.36 = counter > 0 {tmp.31, counter, tmp.36, tmp.35, expected_a, tmp.32, a.24, tmp.34}
Label(continue_tmp.30) {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
OLD ANNOT: {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.34}
NEW ANNOT: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1] Pred: {ENTRY} Suc: {1} iMap: {tmp.31 = counter - 4: {tmp.31, counter, expected_a, a.24}, tmp.32 = counter / 2: {tmp.31, counter, expected_a, tmp.32, a.24}, tmp.33 = -counter: {tmp.31, counter, tmp.33, expected_a, tmp.32, a.24}, tmp.34 = tmp.33 + 8: {tmp.31, counter, tmp.34, expected_a, tmp.32, a.24}, tmp.35 = counter - 1: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {expected_a, counter, a.24}
1 1: [Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, tmp.36 = counter > 0: {tmp.31, counter, tmp.36, tmp.35, expected_a, tmp.32, a.24, tmp.34}, JumpIfZero(tmp.36, break_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
2 2: [tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {tmp.38 = counter == 5: {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.34, tmp.38}, JumpIfZero(tmp.38, tmp.41): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
3 3: [Copy z.23 = 4, Jump(tmp.40)] Pred: {2} Suc: {5} iMap: {Copy z.23 = 4: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}, Jump(tmp.40): {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
4 4: [Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43] Pred: {2} Suc: {5} iMap: {Label(tmp.41): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, tmp.43 = times_two([a.24]): {tmp.31, counter, tmp.34, tmp.35, tmp.43, expected_a, tmp.32}, Copy z.23 = tmp.43: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}
5 5: [Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}, tmp.44 = update_expected_a([]): {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}, tmp.45 = 1 - z.23: {tmp.45, tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}, Copy a.24 = tmp.45: {tmp.31, counter, tmp.35, expected_a, tmp.32, a.24, tmp.45, tmp.34}, tmp.48 = check_one_int([tmp.45, expected_a]): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, tmp.49 = counter - 1: {tmp.31, tmp.34, tmp.35, expected_a, tmp.49, tmp.32, a.24}, Copy counter = tmp.49: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}, Jump(continue_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32, a.24}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, z.23, tmp.32}
6 6: [Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}, tmp.52 = check_one_int([tmp.31, 1]): {counter, tmp.34, tmp.35, expected_a, tmp.32}, tmp.55 = check_one_int([tmp.32, 2]): {expected_a, counter, tmp.34, tmp.35}, tmp.58 = check_one_int([tmp.34, 3]): {expected_a, counter, tmp.35}, tmp.61 = check_one_int([tmp.35, 4]): {expected_a, counter}, Return 0: {expected_a, counter}} ReachingCopies: {tmp.31, counter, tmp.34, tmp.35, expected_a, tmp.32}
EXIT Exit: EXIT {6}
OPTIMIZING FUNCTION Function: update_expected_a ([]) instructions:[tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{expected_a}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0, Return 0]
NEW LIST [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.62 = 2 * expected_a
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.62 = 2 * expected_a set()
tmp.63 = 1 - tmp.62 set()
Copy expected_a = tmp.63 set()
Return 0 {Copy expected_a = tmp.63}
OLD ANNOT: {Copy expected_a = tmp.63}
NEW ANNOT: {Copy expected_a = tmp.63}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: {Copy expected_a = tmp.63}} ReachingCopies: {Copy expected_a = tmp.63}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 0-------------------
Return 0 {expected_a, counter}
Copy expected_a = tmp.63 {expected_a, counter}
tmp.63 = 1 - tmp.62 {counter, tmp.63}
tmp.62 = 2 * expected_a {counter, tmp.62}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: {counter, tmp.62}, tmp.63 = 1 - tmp.62: {counter, tmp.63}, Copy expected_a = tmp.63: {expected_a, counter}, Return 0: {expected_a, counter}} ReachingCopies: {expected_a, counter}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{expected_a}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0]
NEW LIST [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.62 = 2 * expected_a


ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.62 = 2 * expected_a set()
tmp.63 = 1 - tmp.62 set()
Copy expected_a = tmp.63 set()
Return 0 {Copy expected_a = tmp.63}
OLD ANNOT: {Copy expected_a = tmp.63}
NEW ANNOT: {Copy expected_a = tmp.63}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: set(), tmp.63 = 1 - tmp.62: set(), Copy expected_a = tmp.63: set(), Return 0: {Copy expected_a = tmp.63}} ReachingCopies: {Copy expected_a = tmp.63}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 0-------------------
Return 0 {expected_a, counter}
Copy expected_a = tmp.63 {expected_a, counter}
tmp.63 = 1 - tmp.62 {counter, tmp.63}
tmp.62 = 2 * expected_a {counter, tmp.62}
OLD ANNOT: set()
NEW ANNOT: {expected_a, counter}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.62 = 2 * expected_a: {counter, tmp.62}, tmp.63 = 1 - tmp.62: {counter, tmp.63}, Copy expected_a = tmp.63: {expected_a, counter}, Return 0: {expected_a, counter}} ReachingCopies: {expected_a, counter}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: times_two (['x.29']) instructions:[tmp.64 = x.29 * 2, Return tmp.64, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.64 = x.29 * 2, Return tmp.64, Return 0]
NEW LIST [tmp.64 = x.29 * 2, Return tmp.64, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.64 = x.29 * 2
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.64 = x.29 * 2 set()
Return tmp.64 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 0-------------------
Return tmp.64 {expected_a, counter}
tmp.64 = x.29 * 2 {tmp.64, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {x.29, expected_a, counter}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: {tmp.64, expected_a, counter}, Return tmp.64: {expected_a, counter}} ReachingCopies: {x.29, expected_a, counter}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.64 = x.29 * 2, Return tmp.64]
NEW LIST [tmp.64 = x.29 * 2, Return tmp.64]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.64 = x.29 * 2


ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.64 = x.29 * 2 set()
Return tmp.64 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
counter counter int InitialVal: InitialList: [c_int(5)] Global: True
expected_a expected_a int InitialVal: InitialList: [c_int(2)] Global: True
update_expected_a update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True
times_two times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
z.23 z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>
a.24 a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>
one.25 one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>
two.26 two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>
three.27 three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>
four.28 four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>
x.29 x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>
tmp.33 tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>
tmp.34 tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>
tmp.37 tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>
tmp.43 tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>
--------------LIVE for block 0-------------------
Return tmp.64 {expected_a, counter}
tmp.64 = x.29 * 2 {tmp.64, expected_a, counter}
OLD ANNOT: set()
NEW ANNOT: {x.29, expected_a, counter}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = x.29 * 2, Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = x.29 * 2: {tmp.64, expected_a, counter}, Return tmp.64: {expected_a, counter}} ReachingCopies: {x.29, expected_a, counter}
EXIT Exit: EXIT {0}
TAC Program:[Function: target ([]) instructions:[tmp.31 = counter - 4, tmp.32 = counter / 2, tmp.33 = -counter, tmp.34 = tmp.33 + 8, tmp.35 = counter - 1, Label(continue_tmp.30), tmp.36 = counter > 0, JumpIfZero(tmp.36, break_tmp.30), tmp.38 = counter == 5, JumpIfZero(tmp.38, tmp.41), Copy z.23 = 4, Jump(tmp.40), Label(tmp.41), tmp.43 = times_two([a.24]), Copy z.23 = tmp.43, Label(tmp.40), tmp.44 = update_expected_a([]), tmp.45 = 1 - z.23, Copy a.24 = tmp.45, tmp.48 = check_one_int([tmp.45, expected_a]), tmp.49 = counter - 1, Copy counter = tmp.49, Jump(continue_tmp.30), Label(break_tmp.30), tmp.52 = check_one_int([tmp.31, 1]), tmp.55 = check_one_int([tmp.32, 2]), tmp.58 = check_one_int([tmp.34, 3]), tmp.61 = check_one_int([tmp.35, 4]), Return 0], Function: update_expected_a ([]) instructions:[tmp.62 = 2 * expected_a, tmp.63 = 1 - tmp.62, Copy expected_a = tmp.63, Return 0], Function: times_two (['x.29']) instructions:[tmp.64 = x.29 * 2, Return tmp.64], Global: True counter = [c_int(5)], Global: True expected_a = [c_int(2)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'counter': counter int InitialVal: InitialList: [c_int(5)] Global: True, 'expected_a': expected_a int InitialVal: InitialList: [c_int(2)] Global: True, 'update_expected_a': update_expected_a FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'times_two': times_two FunType: ParamTypes: [int] Return Type: int Defined: True Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'z.23': z.23 int <typeChecker.LocalAttributes object at 0x7f5609b58980>, 'a.24': a.24 int <typeChecker.LocalAttributes object at 0x7f5609b58a70>, 'one.25': one.25 int <typeChecker.LocalAttributes object at 0x7f5609b58b60>, 'two.26': two.26 int <typeChecker.LocalAttributes object at 0x7f5609b58ce0>, 'three.27': three.27 int <typeChecker.LocalAttributes object at 0x7f5609b58ec0>, 'four.28': four.28 int <typeChecker.LocalAttributes object at 0x7f5609b59100>, 'x.29': x.29 int <typeChecker.LocalAttributes object at 0x7f5609b5ac60>, 'tmp.31': tmp.31 int <typeChecker.LocalAttributes object at 0x7f5609b7c8c0>, 'tmp.32': tmp.32 int <typeChecker.LocalAttributes object at 0x7f5609b7c9b0>, 'tmp.33': tmp.33 int <typeChecker.LocalAttributes object at 0x7f5609b7cdd0>, 'tmp.34': tmp.34 int <typeChecker.LocalAttributes object at 0x7f5609b7cb90>, 'tmp.35': tmp.35 int <typeChecker.LocalAttributes object at 0x7f5609b7ce60>, 'tmp.36': tmp.36 int <typeChecker.LocalAttributes object at 0x7f5609b7d040>, 'tmp.37': tmp.37 int <typeChecker.LocalAttributes object at 0x7f5609b7d100>, 'tmp.38': tmp.38 int <typeChecker.LocalAttributes object at 0x7f5609b7d310>, 'tmp.39': tmp.39 int <typeChecker.LocalAttributes object at 0x7f5609b7d2b0>, 'tmp.42': tmp.42 int <typeChecker.LocalAttributes object at 0x7f5609b7da30>, 'tmp.43': tmp.43 int <typeChecker.LocalAttributes object at 0x7f5609b7d940>, 'tmp.44': tmp.44 int <typeChecker.LocalAttributes object at 0x7f5609b7d6a0>, 'tmp.45': tmp.45 int <typeChecker.LocalAttributes object at 0x7f5609b7dd60>, 'tmp.46': tmp.46 int <typeChecker.LocalAttributes object at 0x7f5609b7dc10>, 'tmp.47': tmp.47 int <typeChecker.LocalAttributes object at 0x7f5609b7e060>, 'tmp.48': tmp.48 int <typeChecker.LocalAttributes object at 0x7f5609b7df70>, 'tmp.49': tmp.49 int <typeChecker.LocalAttributes object at 0x7f5609b7e360>, 'tmp.50': tmp.50 int <typeChecker.LocalAttributes object at 0x7f5609b7e510>, 'tmp.51': tmp.51 int <typeChecker.LocalAttributes object at 0x7f5609b7e690>, 'tmp.52': tmp.52 int <typeChecker.LocalAttributes object at 0x7f5609b7e1b0>, 'tmp.53': tmp.53 int <typeChecker.LocalAttributes object at 0x7f5609b7e930>, 'tmp.54': tmp.54 int <typeChecker.LocalAttributes object at 0x7f5609b7ea80>, 'tmp.55': tmp.55 int <typeChecker.LocalAttributes object at 0x7f5609b7e810>, 'tmp.56': tmp.56 int <typeChecker.LocalAttributes object at 0x7f5609b7ecf0>, 'tmp.57': tmp.57 int <typeChecker.LocalAttributes object at 0x7f5609b7ee40>, 'tmp.58': tmp.58 int <typeChecker.LocalAttributes object at 0x7f5609b7ebd0>, 'tmp.59': tmp.59 int <typeChecker.LocalAttributes object at 0x7f5609b7f0b0>, 'tmp.60': tmp.60 int <typeChecker.LocalAttributes object at 0x7f5609b7f200>, 'tmp.61': tmp.61 int <typeChecker.LocalAttributes object at 0x7f5609b7ef90>, 'tmp.62': tmp.62 int <typeChecker.LocalAttributes object at 0x7f5609b7f7a0>, 'tmp.63': tmp.63 int <typeChecker.LocalAttributes object at 0x7f5609b7f620>, 'tmp.64': tmp.64 int <typeChecker.LocalAttributes object at 0x7f5609b7f4d0>}
IntParams: []
<class 'parser.IntType'>
<class 'parser.IntType'>
IntDests: [(Longword, Pseudo(tmp.43))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(a.24)
IntArgs: [(Longword, Pseudo(a.24))]
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.44))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.48))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.45)
Operand: Pseudo(expected_a)
IntArgs: [(Longword, Pseudo(tmp.45)), (Longword, Pseudo(expected_a))]
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.52))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.31)
Operand: Imm(1)
IntArgs: [(Longword, Pseudo(tmp.31)), (Longword, <assemblyGenerator.ImmediateOperand object at 0x7f5609b96b40>)]
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.55))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.32)
Operand: Imm(2)
IntArgs: [(Longword, Pseudo(tmp.32)), (Longword, <assemblyGenerator.ImmediateOperand object at 0x7f5609b96f90>)]
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.58))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.34)
Operand: Imm(3)
IntArgs: [(Longword, Pseudo(tmp.34)), (Longword, <assemblyGenerator.ImmediateOperand object at 0x7f5609b974a0>)]
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.61))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.35)
Operand: Imm(4)
IntArgs: [(Longword, Pseudo(tmp.35)), (Longword, <assemblyGenerator.ImmediateOperand object at 0x7f5609b97950>)]
DoubleArgs: []
StackArgs: []
IntParams: []
Operand: Pseudo(x.29)
IntParams: [(Longword, Pseudo(x.29))]
ASM Program: [Function target stackOffset: None global: True instructions:[AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.31)), AssType: Longword Binary(Sub, Imm(4), Pseudo(tmp.31)), AssType: Longword Mov(Pseudo(counter), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Imm(2)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.32)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.33)), AssType: Longword Unary(Neg, Pseudo(tmp.33)), AssType: Longword Mov(Pseudo(tmp.33), Pseudo(tmp.34)), AssType: Longword Binary(Add, Imm(8), Pseudo(tmp.34)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.35)), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.35)), Label(continue_tmp.30), AssType: Longword Cmp(Imm(0), Pseudo(counter)), AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), SetCC(ConcCodeType.G, Pseudo(tmp.36)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, break_tmp.30), AssType: Longword Cmp(Imm(5), Pseudo(counter)), AssType: Longword Mov(Imm(0), Pseudo(tmp.38)), SetCC(ConcCodeType.E, Pseudo(tmp.38)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.38)), JmpCC(ConcCodeType.E, tmp.41), AssType: Longword Mov(Imm(4), Pseudo(z.23)), Jmp(tmp.40), Label(tmp.41), AssType: Longword Mov(Pseudo(a.24), Reg(DI)), Call(times_two), AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)), AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23)), Label(tmp.40), Call(update_expected_a), AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)), AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)), AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)), AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)), AssType: Longword Mov(Pseudo(expected_a), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)), AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)), Jmp(continue_tmp.30), Label(break_tmp.30), AssType: Longword Mov(Pseudo(tmp.31), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.52)), AssType: Longword Mov(Pseudo(tmp.32), Reg(DI)), AssType: Longword Mov(Imm(2), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.55)), AssType: Longword Mov(Pseudo(tmp.34), Reg(DI)), AssType: Longword Mov(Imm(3), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.58)), AssType: Longword Mov(Pseudo(tmp.35), Reg(DI)), AssType: Longword Mov(Imm(4), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.61)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function update_expected_a stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(2), Pseudo(tmp.62)), AssType: Longword Binary(Mult, Pseudo(expected_a), Pseudo(tmp.62)), AssType: Longword Mov(Imm(1), Pseudo(tmp.63)), AssType: Longword Binary(Sub, Pseudo(tmp.62), Pseudo(tmp.63)), AssType: Longword Mov(Pseudo(tmp.63), Pseudo(expected_a)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function times_two stackOffset: None global: True instructions:[AssType: Longword Mov(Reg(DI), Pseudo(x.29)), AssType: Longword Mov(Pseudo(x.29), Pseudo(tmp.64)), AssType: Longword Binary(Mult, Imm(2), Pseudo(tmp.64)), AssType: Longword Mov(Pseudo(tmp.64), Reg(AX)), ret], Static Variable: Global = True Alignment = 4 : counter = [c_int(5)], Static Variable: Global = True Alignment = 4 : expected_a = [c_int(2)]]
Type Table:
 {}
Backend Symbol Table:
 {'check_one_int': Defined: False ReturnOnStack: False IntParams: OrderedSet([Reg(DI), Reg(SI)]) DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'check_5_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_12_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'counter': AssType: Longword IsStatic: True IsConstant: False, 'expected_a': AssType: Longword IsStatic: True IsConstant: False, 'update_expected_a': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'times_two': Defined: True ReturnOnStack: False IntParams: OrderedSet([Reg(DI)]) DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'target': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'z.23': AssType: Longword IsStatic: False IsConstant: False, 'a.24': AssType: Longword IsStatic: False IsConstant: False, 'one.25': AssType: Longword IsStatic: False IsConstant: False, 'two.26': AssType: Longword IsStatic: False IsConstant: False, 'three.27': AssType: Longword IsStatic: False IsConstant: False, 'four.28': AssType: Longword IsStatic: False IsConstant: False, 'x.29': AssType: Longword IsStatic: False IsConstant: False, 'tmp.31': AssType: Longword IsStatic: False IsConstant: False, 'tmp.32': AssType: Longword IsStatic: False IsConstant: False, 'tmp.33': AssType: Longword IsStatic: False IsConstant: False, 'tmp.34': AssType: Longword IsStatic: False IsConstant: False, 'tmp.35': AssType: Longword IsStatic: False IsConstant: False, 'tmp.36': AssType: Longword IsStatic: False IsConstant: False, 'tmp.37': AssType: Longword IsStatic: False IsConstant: False, 'tmp.38': AssType: Longword IsStatic: False IsConstant: False, 'tmp.39': AssType: Longword IsStatic: False IsConstant: False, 'tmp.42': AssType: Longword IsStatic: False IsConstant: False, 'tmp.43': AssType: Longword IsStatic: False IsConstant: False, 'tmp.44': AssType: Longword IsStatic: False IsConstant: False, 'tmp.45': AssType: Longword IsStatic: False IsConstant: False, 'tmp.46': AssType: Longword IsStatic: False IsConstant: False, 'tmp.47': AssType: Longword IsStatic: False IsConstant: False, 'tmp.48': AssType: Longword IsStatic: False IsConstant: False, 'tmp.49': AssType: Longword IsStatic: False IsConstant: False, 'tmp.50': AssType: Longword IsStatic: False IsConstant: False, 'tmp.51': AssType: Longword IsStatic: False IsConstant: False, 'tmp.52': AssType: Longword IsStatic: False IsConstant: False, 'tmp.53': AssType: Longword IsStatic: False IsConstant: False, 'tmp.54': AssType: Longword IsStatic: False IsConstant: False, 'tmp.55': AssType: Longword IsStatic: False IsConstant: False, 'tmp.56': AssType: Longword IsStatic: False IsConstant: False, 'tmp.57': AssType: Longword IsStatic: False IsConstant: False, 'tmp.58': AssType: Longword IsStatic: False IsConstant: False, 'tmp.59': AssType: Longword IsStatic: False IsConstant: False, 'tmp.60': AssType: Longword IsStatic: False IsConstant: False, 'tmp.61': AssType: Longword IsStatic: False IsConstant: False, 'tmp.62': AssType: Longword IsStatic: False IsConstant: False, 'tmp.63': AssType: Longword IsStatic: False IsConstant: False, 'tmp.64': AssType: Longword IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION target
[<RegisterType.DI: 0>, <RegisterType.SI: 1>, <RegisterType.DX: 2>, <RegisterType.CX: 3>, <RegisterType.R8: 4>, <RegisterType.R9: 5>, <RegisterType.AX: 6>, <RegisterType.BX: 7>, <RegisterType.R10: 8>, <RegisterType.R11: 9>, <RegisterType.R12: 10>, <RegisterType.R13: 11>, <RegisterType.R14: 12>, <RegisterType.R15: 13>, <RegisterType.SP: 14>, <RegisterType.BP: 15>]
-----------Building interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(_)
    Reg(_) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(_)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(_)
    Reg(_) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(_)
    Reg(_) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(_)
    Reg(_) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
Reg(_)
    Reg(_) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Reg(_)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(SI)
        Reg(R8d)
        Reg(R9d)
        Reg(_)
        Reg(_)
        Reg(_)
tmp.31
    tmp.31 spillCost: 0.0 color: None pruned: False
tmp.32
    tmp.32 spillCost: 0.0 color: None pruned: False
tmp.33
    tmp.33 spillCost: 0.0 color: None pruned: False
tmp.34
    tmp.34 spillCost: 0.0 color: None pruned: False
tmp.35
    tmp.35 spillCost: 0.0 color: None pruned: False
tmp.36
    tmp.36 spillCost: 0.0 color: None pruned: False
tmp.38
    tmp.38 spillCost: 0.0 color: None pruned: False
z.23
    z.23 spillCost: 0.0 color: None pruned: False
a.24
    a.24 spillCost: 0.0 color: None pruned: False
tmp.43
    tmp.43 spillCost: 0.0 color: None pruned: False
tmp.44
    tmp.44 spillCost: 0.0 color: None pruned: False
tmp.45
    tmp.45 spillCost: 0.0 color: None pruned: False
tmp.48
    tmp.48 spillCost: 0.0 color: None pruned: False
tmp.49
    tmp.49 spillCost: 0.0 color: None pruned: False
tmp.52
    tmp.52 spillCost: 0.0 color: None pruned: False
tmp.55
    tmp.55 spillCost: 0.0 color: None pruned: False
tmp.58
    tmp.58 spillCost: 0.0 color: None pruned: False
tmp.61
    tmp.61 spillCost: 0.0 color: None pruned: False
AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.31))
Label(continue_tmp.30)
AssType: Longword Cmp(Imm(5), Pseudo(counter))
AssType: Longword Mov(Imm(4), Pseudo(z.23))
Label(tmp.41)
Label(tmp.40)
Label(break_tmp.30)
-------------LABELS-----------------
continue_tmp.30 1: [Label(continue_tmp.30), AssType: Longword Cmp(Imm(0), Pseudo(counter)), AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), SetCC(ConcCodeType.G, Pseudo(tmp.36)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, break_tmp.30)] Pred: set() Suc: set() iMap: {Label(continue_tmp.30): set(), AssType: Longword Cmp(Imm(0), Pseudo(counter)): set(), AssType: Longword Mov(Imm(0), Pseudo(tmp.36)): set(), SetCC(ConcCodeType.G, Pseudo(tmp.36)): set(), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)): set(), JmpCC(ConcCodeType.E, break_tmp.30): set()} ReachingCopies: set()
tmp.41 4: [Label(tmp.41), AssType: Longword Mov(Pseudo(a.24), Reg(DI)), Call(times_two), AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)), AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23))] Pred: set() Suc: set() iMap: {Label(tmp.41): set(), AssType: Longword Mov(Pseudo(a.24), Reg(DI)): set(), Call(times_two): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)): set(), AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23)): set()} ReachingCopies: set()
tmp.40 5: [Label(tmp.40), Call(update_expected_a), AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)), AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)), AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)), AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)), AssType: Longword Mov(Pseudo(expected_a), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)), AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)), Jmp(continue_tmp.30)] Pred: set() Suc: set() iMap: {Label(tmp.40): set(), Call(update_expected_a): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)): set(), AssType: Longword Mov(Imm(1), Pseudo(tmp.45)): set(), AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)): set(), AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)): set(), AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)): set(), AssType: Longword Mov(Pseudo(expected_a), Reg(SI)): set(), Call(check_one_int): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)): set(), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)): set(), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)): set(), AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)): set(), Jmp(continue_tmp.30): set()} ReachingCopies: set()
break_tmp.30 6: [Label(break_tmp.30), AssType: Longword Mov(Pseudo(tmp.31), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.52)), AssType: Longword Mov(Pseudo(tmp.32), Reg(DI)), AssType: Longword Mov(Imm(2), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.55)), AssType: Longword Mov(Pseudo(tmp.34), Reg(DI)), AssType: Longword Mov(Imm(3), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.58)), AssType: Longword Mov(Pseudo(tmp.35), Reg(DI)), AssType: Longword Mov(Imm(4), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.61)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: set() Suc: set() iMap: {Label(break_tmp.30): set(), AssType: Longword Mov(Pseudo(tmp.31), Reg(DI)): set(), AssType: Longword Mov(Imm(1), Reg(SI)): set(), Call(check_one_int): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.52)): set(), AssType: Longword Mov(Pseudo(tmp.32), Reg(DI)): set(), AssType: Longword Mov(Imm(2), Reg(SI)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.55)): set(), AssType: Longword Mov(Pseudo(tmp.34), Reg(DI)): set(), AssType: Longword Mov(Imm(3), Reg(SI)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.58)): set(), AssType: Longword Mov(Pseudo(tmp.35), Reg(DI)): set(), AssType: Longword Mov(Imm(4), Reg(SI)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.61)): set(), AssType: Longword Mov(Imm(0), Reg(AX)): set(), ret: set()} ReachingCopies: set()










-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.31)), AssType: Longword Binary(Sub, Imm(4), Pseudo(tmp.31)), AssType: Longword Mov(Pseudo(counter), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Imm(2)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.32)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.33)), AssType: Longword Unary(Neg, Pseudo(tmp.33)), AssType: Longword Mov(Pseudo(tmp.33), Pseudo(tmp.34)), AssType: Longword Binary(Add, Imm(8), Pseudo(tmp.34)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.35)), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.35))] Pred: {ENTRY} Suc: {1} iMap: {AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.31)): set(), AssType: Longword Binary(Sub, Imm(4), Pseudo(tmp.31)): set(), AssType: Longword Mov(Pseudo(counter), Reg(AX)): set(), AssType: {self.assType} Cdq: set(), AssType: Longword Idiv(Imm(2)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.32)): set(), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.33)): set(), AssType: Longword Unary(Neg, Pseudo(tmp.33)): set(), AssType: Longword Mov(Pseudo(tmp.33), Pseudo(tmp.34)): set(), AssType: Longword Binary(Add, Imm(8), Pseudo(tmp.34)): set(), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.35)): set(), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.35)): set()} ReachingCopies: set()
1 1: [Label(continue_tmp.30), AssType: Longword Cmp(Imm(0), Pseudo(counter)), AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), SetCC(ConcCodeType.G, Pseudo(tmp.36)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, break_tmp.30)] Pred: {0, 5} Suc: {2, 6} iMap: {Label(continue_tmp.30): set(), AssType: Longword Cmp(Imm(0), Pseudo(counter)): set(), AssType: Longword Mov(Imm(0), Pseudo(tmp.36)): set(), SetCC(ConcCodeType.G, Pseudo(tmp.36)): set(), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)): set(), JmpCC(ConcCodeType.E, break_tmp.30): set()} ReachingCopies: set()
2 2: [AssType: Longword Cmp(Imm(5), Pseudo(counter)), AssType: Longword Mov(Imm(0), Pseudo(tmp.38)), SetCC(ConcCodeType.E, Pseudo(tmp.38)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.38)), JmpCC(ConcCodeType.E, tmp.41)] Pred: {1} Suc: {3, 4} iMap: {AssType: Longword Cmp(Imm(5), Pseudo(counter)): set(), AssType: Longword Mov(Imm(0), Pseudo(tmp.38)): set(), SetCC(ConcCodeType.E, Pseudo(tmp.38)): set(), AssType: Longword Cmp(Imm(0), Pseudo(tmp.38)): set(), JmpCC(ConcCodeType.E, tmp.41): set()} ReachingCopies: set()
3 3: [AssType: Longword Mov(Imm(4), Pseudo(z.23)), Jmp(tmp.40)] Pred: {2} Suc: {5} iMap: {AssType: Longword Mov(Imm(4), Pseudo(z.23)): set(), Jmp(tmp.40): set()} ReachingCopies: set()
4 4: [Label(tmp.41), AssType: Longword Mov(Pseudo(a.24), Reg(DI)), Call(times_two), AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)), AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23))] Pred: {2} Suc: {5} iMap: {Label(tmp.41): set(), AssType: Longword Mov(Pseudo(a.24), Reg(DI)): set(), Call(times_two): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)): set(), AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23)): set()} ReachingCopies: set()
5 5: [Label(tmp.40), Call(update_expected_a), AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)), AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)), AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)), AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)), AssType: Longword Mov(Pseudo(expected_a), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)), AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)), Jmp(continue_tmp.30)] Pred: {3, 4} Suc: {1} iMap: {Label(tmp.40): set(), Call(update_expected_a): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)): set(), AssType: Longword Mov(Imm(1), Pseudo(tmp.45)): set(), AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)): set(), AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)): set(), AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)): set(), AssType: Longword Mov(Pseudo(expected_a), Reg(SI)): set(), Call(check_one_int): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)): set(), AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)): set(), AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)): set(), AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)): set(), Jmp(continue_tmp.30): set()} ReachingCopies: set()
6 6: [Label(break_tmp.30), AssType: Longword Mov(Pseudo(tmp.31), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.52)), AssType: Longword Mov(Pseudo(tmp.32), Reg(DI)), AssType: Longword Mov(Imm(2), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.55)), AssType: Longword Mov(Pseudo(tmp.34), Reg(DI)), AssType: Longword Mov(Imm(3), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.58)), AssType: Longword Mov(Pseudo(tmp.35), Reg(DI)), AssType: Longword Mov(Imm(4), Reg(SI)), Call(check_one_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.61)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {1} Suc: {EXIT} iMap: {Label(break_tmp.30): set(), AssType: Longword Mov(Pseudo(tmp.31), Reg(DI)): set(), AssType: Longword Mov(Imm(1), Reg(SI)): set(), Call(check_one_int): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.52)): set(), AssType: Longword Mov(Pseudo(tmp.32), Reg(DI)): set(), AssType: Longword Mov(Imm(2), Reg(SI)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.55)): set(), AssType: Longword Mov(Pseudo(tmp.34), Reg(DI)): set(), AssType: Longword Mov(Imm(3), Reg(SI)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.58)): set(), AssType: Longword Mov(Pseudo(tmp.35), Reg(DI)): set(), AssType: Longword Mov(Imm(4), Reg(SI)): set(), AssType: Longword Mov(Reg(AX), Pseudo(tmp.61)): set(), AssType: Longword Mov(Imm(0), Reg(AX)): set(), ret: set()} ReachingCopies: set()
EXIT Exit: EXIT {6}
--------------LIVE for block 6-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.61)) set()
AssType: Longword Mov(Imm(4), Reg(SI)) {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.35), Reg(DI)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.58)) {Reg(AX), Pseudo(tmp.35)}
AssType: Longword Mov(Imm(3), Reg(SI)) {Reg(AX), Pseudo(tmp.35)}
AssType: Longword Mov(Pseudo(tmp.34), Reg(DI)) {Reg(AX), Pseudo(tmp.35)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.55)) {Reg(AX), Pseudo(tmp.35), Pseudo(tmp.34)}
AssType: Longword Mov(Imm(2), Reg(SI)) {Reg(AX), Pseudo(tmp.35), Pseudo(tmp.34)}
AssType: Longword Mov(Pseudo(tmp.32), Reg(DI)) {Reg(AX), Pseudo(tmp.35), Pseudo(tmp.34)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.52)) {Pseudo(tmp.32), Reg(AX), Pseudo(tmp.35), Pseudo(tmp.34)}
Call(check_one_int) {Pseudo(tmp.32), Reg(AX), Pseudo(tmp.35), Pseudo(tmp.34)}
AssType: Longword Mov(Imm(1), Reg(SI)) {Reg(DI), Pseudo(tmp.34), Pseudo(tmp.35), Reg(SI), Pseudo(tmp.32)}
AssType: Longword Mov(Pseudo(tmp.31), Reg(DI)) {Reg(DI), Pseudo(tmp.32), Pseudo(tmp.34), Pseudo(tmp.35)}
Label(break_tmp.30) {Pseudo(tmp.31), Pseudo(tmp.32), Pseudo(tmp.34), Pseudo(tmp.35)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.31), Pseudo(tmp.32), Pseudo(tmp.34), Pseudo(tmp.35)}
--------------LIVE for block 5-------------------
Jmp(continue_tmp.30) set()
AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)) set()
AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)) {Pseudo(tmp.49)}
AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)) {Pseudo(tmp.49)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)) {Pseudo(counter)}
Call(check_one_int) {Pseudo(counter), Reg(AX)}
AssType: Longword Mov(Pseudo(expected_a), Reg(SI)) {Reg(DI), Pseudo(counter), Reg(SI)}
AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)) {Reg(DI), Pseudo(expected_a), Pseudo(counter)}
AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)) {Pseudo(tmp.45), Pseudo(counter), Pseudo(expected_a)}
AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(counter), Pseudo(expected_a)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.45)) {Pseudo(z.23), Pseudo(tmp.45), Pseudo(counter), Pseudo(expected_a)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)) {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter)}
Call(update_expected_a) {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter), Reg(AX)}
Label(tmp.40) {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter)}
--------------LIVE for block 4-------------------
AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23)) {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)) {Pseudo(expected_a), Pseudo(counter), Pseudo(tmp.43)}
Call(times_two) {Pseudo(expected_a), Pseudo(counter), Reg(AX)}
AssType: Longword Mov(Pseudo(a.24), Reg(DI)) {Reg(DI), Pseudo(expected_a), Pseudo(counter)}
Label(tmp.41) {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
--------------LIVE for block 3-------------------
Jmp(tmp.40) {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter)}
AssType: Longword Mov(Imm(4), Pseudo(z.23)) {Pseudo(z.23), Pseudo(expected_a), Pseudo(counter)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(expected_a), Pseudo(counter)}
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.41) {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.38)) {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
SetCC(ConcCodeType.E, Pseudo(tmp.38)) {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24), Pseudo(tmp.38)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.38)) {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
AssType: Longword Cmp(Imm(5), Pseudo(counter)) {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, break_tmp.30) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
SetCC(ConcCodeType.G, Pseudo(tmp.36)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.36), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Cmp(Imm(0), Pseudo(counter)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
Label(continue_tmp.30) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
ADD PREDECESSORS.
--------------LIVE for block 0-------------------
AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.35)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.35)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Binary(Add, Imm(8), Pseudo(tmp.34)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(tmp.33), Pseudo(tmp.34)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Unary(Neg, Pseudo(tmp.33)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.33), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.33)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.33), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.32)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Idiv(Imm(2)) {Pseudo(tmp.31), Pseudo(counter), Reg(AX), Pseudo(expected_a), Pseudo(a.24)}
AssType: {self.assType} Cdq {Pseudo(tmp.31), Pseudo(counter), Reg(DX), Reg(AX), Pseudo(expected_a), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(counter), Reg(AX)) {Pseudo(tmp.31), Pseudo(counter), Reg(AX), Pseudo(expected_a), Pseudo(a.24)}
AssType: Longword Binary(Sub, Imm(4), Pseudo(tmp.31)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(expected_a), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.31)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(expected_a), Pseudo(a.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
--------------LIVE for block 5-------------------
Jmp(continue_tmp.30) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(tmp.49), Pseudo(counter)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Binary(Sub, Imm(1), Pseudo(tmp.49)) {Pseudo(tmp.31), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.49), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Pseudo(counter), Pseudo(tmp.49)) {Pseudo(tmp.31), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.49), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.48)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
Call(check_one_int) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34), Reg(AX)}
AssType: Longword Mov(Pseudo(expected_a), Reg(SI)) {Reg(DI), Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34), Reg(SI)}
AssType: Longword Mov(Pseudo(tmp.45), Reg(DI)) {Reg(DI), Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34)}
AssType: Longword Mov(Pseudo(tmp.45), Pseudo(a.24)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.45), Pseudo(tmp.34)}
AssType: Longword Binary(Sub, Pseudo(z.23), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.45)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(tmp.45), Pseudo(tmp.34), Pseudo(z.23)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.44)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(z.23), Pseudo(tmp.32)}
Call(update_expected_a) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(tmp.34), Reg(AX), Pseudo(z.23)}
Label(tmp.40) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(z.23), Pseudo(tmp.32)}
OLD ANNOT: {Pseudo(z.23), Pseudo(counter), Pseudo(expected_a)}
NEW ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(z.23), Pseudo(tmp.32)}
ADD PREDECESSORS.
ADD PREDECESSORS.
--------------LIVE for block 3-------------------
Jmp(tmp.40) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(z.23), Pseudo(tmp.32)}
AssType: Longword Mov(Imm(4), Pseudo(z.23)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(z.23), Pseudo(tmp.32)}
OLD ANNOT: {Pseudo(expected_a), Pseudo(counter)}
NEW ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32)}
ADD PREDECESSORS.
--------------LIVE for block 4-------------------
AssType: Longword Mov(Pseudo(tmp.43), Pseudo(z.23)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(z.23), Pseudo(tmp.32)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.43)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(tmp.43), Pseudo(expected_a), Pseudo(tmp.32)}
Call(times_two) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Reg(AX), Pseudo(expected_a), Pseudo(tmp.32)}
AssType: Longword Mov(Pseudo(a.24), Reg(DI)) {Reg(DI), Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32)}
Label(tmp.41) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
OLD ANNOT: {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
NEW ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.41) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.38)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
SetCC(ConcCodeType.E, Pseudo(tmp.38)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34), Pseudo(tmp.38)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.38)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Cmp(Imm(5), Pseudo(counter)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
OLD ANNOT: {Pseudo(expected_a), Pseudo(counter), Pseudo(a.24)}
NEW ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
ADD PREDECESSORS.
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, break_tmp.30) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
SetCC(ConcCodeType.G, Pseudo(tmp.36)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.36), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
AssType: Longword Cmp(Imm(0), Pseudo(counter)) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
Label(continue_tmp.30) {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
OLD ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24), Pseudo(tmp.34)}
NEW ANNOT: {Pseudo(tmp.31), Pseudo(counter), Pseudo(tmp.34), Pseudo(tmp.35), Pseudo(expected_a), Pseudo(tmp.32), Pseudo(a.24)}
-----------Adding edges to interference graph.------------------
