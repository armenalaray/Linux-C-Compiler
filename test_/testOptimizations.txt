False
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
9
['/home/alejandro/CComp/code/cd.py', '-S', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: codeEmission
NoLink: False
NotAssembly: True
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('int', <TokenType.INT_KW: 4>, 1), ('check_one_int', <TokenType.IDENTIFIER: 2>, 1), ('(', <TokenType.OPEN_PAREN: 7>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('actual', <TokenType.IDENTIFIER: 2>, 1), (',', <TokenType.COMMA: 38>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('expected', <TokenType.IDENTIFIER: 2>, 1), (')', <TokenType.CLOSE_PAREN: 8>, 1), (';', <TokenType.SEMICOLON: 11>, 1), ('int', <TokenType.INT_KW: 4>, 2), ('check_5_ints', <TokenType.IDENTIFIER: 2>, 2), ('(', <TokenType.OPEN_PAREN: 7>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('a', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('b', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('c', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('d', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('e', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('start', <TokenType.IDENTIFIER: 2>, 2), (')', <TokenType.CLOSE_PAREN: 8>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('int', <TokenType.INT_KW: 4>, 3), ('check_12_ints', <TokenType.IDENTIFIER: 2>, 3), ('(', <TokenType.OPEN_PAREN: 7>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('a', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('b', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('c', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('d', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('e', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('f', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('g', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('h', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('i', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 4), ('j', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('k', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('l', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('start', <TokenType.IDENTIFIER: 2>, 4), (')', <TokenType.CLOSE_PAREN: 8>, 4), (';', <TokenType.SEMICOLON: 11>, 4), ('int', <TokenType.INT_KW: 4>, 5), ('check_one_uchar', <TokenType.IDENTIFIER: 2>, 5), ('(', <TokenType.OPEN_PAREN: 7>, 5), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 5), ('char', <TokenType.CHAR_KW: 52>, 5), ('actual', <TokenType.IDENTIFIER: 2>, 5), (',', <TokenType.COMMA: 38>, 5), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 5), ('char', <TokenType.CHAR_KW: 52>, 5), ('expected', <TokenType.IDENTIFIER: 2>, 5), (')', <TokenType.CLOSE_PAREN: 8>, 5), (';', <TokenType.SEMICOLON: 11>, 5), ('int', <TokenType.INT_KW: 4>, 6), ('check_one_uint', <TokenType.IDENTIFIER: 2>, 6), ('(', <TokenType.OPEN_PAREN: 7>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 6), ('int', <TokenType.INT_KW: 4>, 6), ('actual', <TokenType.IDENTIFIER: 2>, 6), (',', <TokenType.COMMA: 38>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 6), ('int', <TokenType.INT_KW: 4>, 6), ('expected', <TokenType.IDENTIFIER: 2>, 6), (')', <TokenType.CLOSE_PAREN: 8>, 6), (';', <TokenType.SEMICOLON: 11>, 6), ('int', <TokenType.INT_KW: 4>, 7), ('check_one_long', <TokenType.IDENTIFIER: 2>, 7), ('(', <TokenType.OPEN_PAREN: 7>, 7), ('long', <TokenType.LONG_KW: 41>, 7), ('actual', <TokenType.IDENTIFIER: 2>, 7), (',', <TokenType.COMMA: 38>, 7), ('long', <TokenType.LONG_KW: 41>, 7), ('expected', <TokenType.IDENTIFIER: 2>, 7), (')', <TokenType.CLOSE_PAREN: 8>, 7), (';', <TokenType.SEMICOLON: 11>, 7), ('int', <TokenType.INT_KW: 4>, 8), ('check_one_ulong', <TokenType.IDENTIFIER: 2>, 8), ('(', <TokenType.OPEN_PAREN: 7>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('long', <TokenType.LONG_KW: 41>, 8), ('actual', <TokenType.IDENTIFIER: 2>, 8), (',', <TokenType.COMMA: 38>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('long', <TokenType.LONG_KW: 41>, 8), ('expected', <TokenType.IDENTIFIER: 2>, 8), (')', <TokenType.CLOSE_PAREN: 8>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('int', <TokenType.INT_KW: 4>, 9), ('check_one_double', <TokenType.IDENTIFIER: 2>, 9), ('(', <TokenType.OPEN_PAREN: 7>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('actual', <TokenType.IDENTIFIER: 2>, 9), (',', <TokenType.COMMA: 38>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('expected', <TokenType.IDENTIFIER: 2>, 9), (')', <TokenType.CLOSE_PAREN: 8>, 9), (';', <TokenType.SEMICOLON: 11>, 9), ('int', <TokenType.INT_KW: 4>, 10), ('check_12_longs', <TokenType.IDENTIFIER: 2>, 10), ('(', <TokenType.OPEN_PAREN: 7>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('a', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('b', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('c', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('d', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('e', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('f', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('g', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 11), ('h', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('i', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('j', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('k', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('l', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('start', <TokenType.IDENTIFIER: 2>, 11), (')', <TokenType.CLOSE_PAREN: 8>, 11), (';', <TokenType.SEMICOLON: 11>, 11), ('int', <TokenType.INT_KW: 4>, 12), ('check_six_chars', <TokenType.IDENTIFIER: 2>, 12), ('(', <TokenType.OPEN_PAREN: 7>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('a', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('b', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('c', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('d', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('e', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('f', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('int', <TokenType.INT_KW: 4>, 12), ('start', <TokenType.IDENTIFIER: 2>, 12), (')', <TokenType.CLOSE_PAREN: 8>, 12), (';', <TokenType.SEMICOLON: 11>, 12), ('int', <TokenType.INT_KW: 4>, 13), ('check_14_doubles', <TokenType.IDENTIFIER: 2>, 13), ('(', <TokenType.OPEN_PAREN: 7>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('a', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('b', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('c', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('d', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('e', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('f', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('g', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('h', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('i', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('j', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('k', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('l', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('m', <TokenType.IDENTIFIER: 2>, 15), (',', <TokenType.COMMA: 38>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('n', <TokenType.IDENTIFIER: 2>, 15), (',', <TokenType.COMMA: 38>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('start', <TokenType.IDENTIFIER: 2>, 15), (')', <TokenType.CLOSE_PAREN: 8>, 15), (';', <TokenType.SEMICOLON: 11>, 15), ('int', <TokenType.INT_KW: 4>, 16), ('check_12_vals', <TokenType.IDENTIFIER: 2>, 16), ('(', <TokenType.OPEN_PAREN: 7>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('a', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('b', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('c', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('d', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('e', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('f', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('g', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('h', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('i', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 17), ('j', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('long', <TokenType.LONG_KW: 41>, 17), ('*', <TokenType.ASTERISK: 17>, 17), ('k', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('double', <TokenType.DOUBLE_KW: 48>, 17), ('*', <TokenType.ASTERISK: 17>, 17), ('l', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('int', <TokenType.INT_KW: 4>, 17), ('start', <TokenType.IDENTIFIER: 2>, 17), (')', <TokenType.CLOSE_PAREN: 8>, 17), (';', <TokenType.SEMICOLON: 11>, 17), ('int', <TokenType.INT_KW: 4>, 18), ('id', <TokenType.IDENTIFIER: 2>, 18), ('(', <TokenType.OPEN_PAREN: 7>, 18), ('int', <TokenType.INT_KW: 4>, 18), ('x', <TokenType.IDENTIFIER: 2>, 18), (')', <TokenType.CLOSE_PAREN: 8>, 18), (';', <TokenType.SEMICOLON: 11>, 18), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('dbl_id', <TokenType.IDENTIFIER: 2>, 19), ('(', <TokenType.OPEN_PAREN: 7>, 19), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('x', <TokenType.IDENTIFIER: 2>, 19), (')', <TokenType.CLOSE_PAREN: 8>, 19), (';', <TokenType.SEMICOLON: 11>, 19), ('long', <TokenType.LONG_KW: 41>, 20), ('long_id', <TokenType.IDENTIFIER: 2>, 20), ('(', <TokenType.OPEN_PAREN: 7>, 20), ('long', <TokenType.LONG_KW: 41>, 20), ('l', <TokenType.IDENTIFIER: 2>, 20), (')', <TokenType.CLOSE_PAREN: 8>, 20), (';', <TokenType.SEMICOLON: 11>, 20), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 21), ('unsigned_id', <TokenType.IDENTIFIER: 2>, 21), ('(', <TokenType.OPEN_PAREN: 7>, 21), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 21), ('u', <TokenType.IDENTIFIER: 2>, 21), (')', <TokenType.CLOSE_PAREN: 8>, 21), (';', <TokenType.SEMICOLON: 11>, 21), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 22), ('char', <TokenType.CHAR_KW: 52>, 22), ('uchar_id', <TokenType.IDENTIFIER: 2>, 22), ('(', <TokenType.OPEN_PAREN: 7>, 22), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 22), ('char', <TokenType.CHAR_KW: 52>, 22), ('uc', <TokenType.IDENTIFIER: 2>, 22), (')', <TokenType.CLOSE_PAREN: 8>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('double', <TokenType.DOUBLE_KW: 48>, 23), ('glob', <TokenType.IDENTIFIER: 2>, 23), ('=', <TokenType.EQUAL: 28>, 23), ('10.0', <TokenType.DOUBLE_CONSTANT: 47>, 23), (';', <TokenType.SEMICOLON: 11>, 23), ('double', <TokenType.DOUBLE_KW: 48>, 24), ('glob2', <TokenType.IDENTIFIER: 2>, 24), ('=', <TokenType.EQUAL: 28>, 24), ('0.0', <TokenType.DOUBLE_CONSTANT: 47>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('double', <TokenType.DOUBLE_KW: 48>, 25), ('target', <TokenType.IDENTIFIER: 2>, 25), ('(', <TokenType.OPEN_PAREN: 7>, 25), ('void', <TokenType.VOID_KW: 5>, 25), (')', <TokenType.CLOSE_PAREN: 8>, 25), ('{', <TokenType.OPEN_BRACE: 9>, 25), ('double', <TokenType.DOUBLE_KW: 48>, 26), ('x', <TokenType.IDENTIFIER: 2>, 26), ('=', <TokenType.EQUAL: 28>, 26), ('glob', <TokenType.IDENTIFIER: 2>, 26), ('+', <TokenType.PLUS: 18>, 26), ('1.0', <TokenType.DOUBLE_CONSTANT: 47>, 26), (';', <TokenType.SEMICOLON: 11>, 26), ('glob2', <TokenType.IDENTIFIER: 2>, 27), ('=', <TokenType.EQUAL: 28>, 27), ('x', <TokenType.IDENTIFIER: 2>, 27), ('+', <TokenType.PLUS: 18>, 27), ('glob', <TokenType.IDENTIFIER: 2>, 27), (';', <TokenType.SEMICOLON: 11>, 27), ('return', <TokenType.RETURN_KW: 6>, 28), ('x', <TokenType.IDENTIFIER: 2>, 28), (';', <TokenType.SEMICOLON: 11>, 28), ('}', <TokenType.CLOSE_BRACE: 10>, 29), ('int', <TokenType.INT_KW: 4>, 30), ('main', <TokenType.IDENTIFIER: 2>, 30), ('(', <TokenType.OPEN_PAREN: 7>, 30), ('void', <TokenType.VOID_KW: 5>, 30), (')', <TokenType.CLOSE_PAREN: 8>, 30), ('{', <TokenType.OPEN_BRACE: 9>, 30), ('double', <TokenType.DOUBLE_KW: 48>, 31), ('retval', <TokenType.IDENTIFIER: 2>, 31), ('=', <TokenType.EQUAL: 28>, 31), ('target', <TokenType.IDENTIFIER: 2>, 31), ('(', <TokenType.OPEN_PAREN: 7>, 31), (')', <TokenType.CLOSE_PAREN: 8>, 31), (';', <TokenType.SEMICOLON: 11>, 31), ('check_one_double', <TokenType.IDENTIFIER: 2>, 32), ('(', <TokenType.OPEN_PAREN: 7>, 32), ('retval', <TokenType.IDENTIFIER: 2>, 32), (',', <TokenType.COMMA: 38>, 32), ('11.0', <TokenType.DOUBLE_CONSTANT: 47>, 32), (')', <TokenType.CLOSE_PAREN: 8>, 32), (';', <TokenType.SEMICOLON: 11>, 32), ('check_one_double', <TokenType.IDENTIFIER: 2>, 33), ('(', <TokenType.OPEN_PAREN: 7>, 33), ('glob2', <TokenType.IDENTIFIER: 2>, 33), (',', <TokenType.COMMA: 38>, 33), ('21.0', <TokenType.DOUBLE_CONSTANT: 47>, 33), (')', <TokenType.CLOSE_PAREN: 8>, 33), (';', <TokenType.SEMICOLON: 11>, 33), ('return', <TokenType.RETURN_KW: 6>, 34), ('0', <TokenType.INT_CONSTANT: 3>, 34), (';', <TokenType.SEMICOLON: 11>, 34), ('}', <TokenType.CLOSE_BRACE: 10>, 35)]
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f7183028320>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_int) [int (IdenDeclarator: actual), int (IdenDeclarator: expected)])
FunType: ParamTypes: [int, int] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71830285f0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_5_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71830283b0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), int (IdenDeclarator: k), int (IdenDeclarator: l), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f7183028320>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
int (FunDeclarator: (IdenDeclarator: check_one_uchar) [unsigned char (IdenDeclarator: actual), unsigned char (IdenDeclarator: expected)])
FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f7183028920>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Int'>]
[<class 'parser.Unsigned'>, <class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_uint) [uint (IdenDeclarator: actual), uint (IdenDeclarator: expected)])
FunType: ParamTypes: [uint, uint] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f7183028e00>]
[<class 'parser.Int'>]
int
[<class 'parser.Long'>]
[<class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_one_long) [long (IdenDeclarator: actual), long (IdenDeclarator: expected)])
FunType: ParamTypes: [long, long] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f7183029100>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Long'>]
[<class 'parser.Unsigned'>, <class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_one_ulong) [ulong (IdenDeclarator: actual), ulong (IdenDeclarator: expected)])
FunType: ParamTypes: [ulong, ulong] Return Type: int
<parser.Int object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: check_one_double) [double (IdenDeclarator: actual), double (IdenDeclarator: expected)])
FunType: ParamTypes: [double, double] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71831e28a0>]
[<class 'parser.Int'>]
int
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_12_longs) [long (IdenDeclarator: a), long (IdenDeclarator: b), long (IdenDeclarator: c), long (IdenDeclarator: d), long (IdenDeclarator: e), long (IdenDeclarator: f), long (IdenDeclarator: g), long (IdenDeclarator: h), long (IdenDeclarator: i), long (IdenDeclarator: j), long (IdenDeclarator: k), long (IdenDeclarator: l), long (IdenDeclarator: start)])
FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int
<parser.Int object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Int'>]
int
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_six_chars) [char (IdenDeclarator: a), char (IdenDeclarator: b), char (IdenDeclarator: c), char (IdenDeclarator: d), char (IdenDeclarator: e), char (IdenDeclarator: f), int (IdenDeclarator: start)])
FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71831e28a0>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: check_14_doubles) [double (IdenDeclarator: a), double (IdenDeclarator: b), double (IdenDeclarator: c), double (IdenDeclarator: d), double (IdenDeclarator: e), double (IdenDeclarator: f), double (IdenDeclarator: g), double (IdenDeclarator: h), double (IdenDeclarator: i), double (IdenDeclarator: j), double (IdenDeclarator: k), double (IdenDeclarator: l), double (IdenDeclarator: m), double (IdenDeclarator: n), double (IdenDeclarator: start)])
FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int
<parser.Int object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Long'>]
[<class 'parser.Double'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_vals) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), long (PointerDeclarator: (IdenDeclarator: k)), double (PointerDeclarator: (IdenDeclarator: l)), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71831e28a0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: id) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
<parser.Double object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Double'>]
double
[<class 'parser.Double'>]
double (FunDeclarator: (IdenDeclarator: dbl_id) [double (IdenDeclarator: x)])
FunType: ParamTypes: [double] Return Type: double
<parser.Long object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71831e28a0>]
[<class 'parser.Long'>]
long
[<class 'parser.Long'>]
long (FunDeclarator: (IdenDeclarator: long_id) [long (IdenDeclarator: l)])
FunType: ParamTypes: [long] Return Type: long
<parser.Unsigned object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Unsigned'>]
uint
[<class 'parser.Unsigned'>]
uint (FunDeclarator: (IdenDeclarator: unsigned_id) [uint (IdenDeclarator: u)])
FunType: ParamTypes: [uint] Return Type: uint
<parser.Unsigned object at 0x7f718326a1e0>
<parser.Char object at 0x7f718302acf0>
[<parser.TypeS object at 0x7f71831e28a0>, <parser.TypeS object at 0x7f718302ade0>]
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
unsigned char
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
unsigned char (FunDeclarator: (IdenDeclarator: uchar_id) [unsigned char (IdenDeclarator: uc)])
FunType: ParamTypes: [unsigned char] Return Type: unsigned char
<parser.Double object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob)
double
<parser.Double object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71831e28a0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob2)
double
<parser.Double object at 0x7f71831e28a0>
[<parser.TypeS object at 0x7f718326a1e0>]
[<class 'parser.Double'>]
double
double (FunDeclarator: (IdenDeclarator: target) [])
FunType: ParamTypes: [] Return Type: double
<parser.Double object at 0x7f718302b800>
[<parser.TypeS object at 0x7f718302b830>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: x)
double
<parser.Int object at 0x7f718326a1e0>
[<parser.TypeS object at 0x7f71831e28a0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: main) [])
FunType: ParamTypes: [] Return Type: int
<parser.Double object at 0x7f718302bd10>
[<parser.TypeS object at 0x7f718302bd70>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: retval)
double
0
0
AST Program:
FunDecl: NULL check_one_int (actual, expected, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a, b, c, d, e, start, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual, expected, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual, expected, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual, expected, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual, expected, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual, expected, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a, b, c, d, e, f, start, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a, b, c, d, e, f, g, h, i, j, k, l, m, n, start, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob = SI: (10.0)
VarDecl: NULL double glob2 = SI: (0.0)
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double x = SI: ((glob) ADD (1.0))
Statement: Expression: ((glob2) = ((x) ADD (glob)))
Statement: return (x)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double retval = SI: (target())
Statement: Expression: (check_one_double((retval), (11.0), ))
Statement: Expression: (check_one_double((glob2), (21.0), ))
Statement: return (0)

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob = SI: (10.0)
VarDecl: NULL double glob2 = SI: (0.0)
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double x.84 = SI: ((glob) ADD (1.0))
Statement: Expression: ((glob2) = ((x.84) ADD (glob)))
Statement: return (x.84)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double retval.85 = SI: (target())
Statement: Expression: (check_one_double((retval.85), (11.0), ))
Statement: Expression: (check_one_double((glob2), (21.0), ))
Statement: return (0)

[(retval.85 RetType: double), (11.0 RetType: double)]
[(glob2 RetType: double), (21.0 RetType: double)]
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob = SI: (10.0 : double) : double
VarDecl: NULL double glob2 = SI: (0.0 : double) : double
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double x.84 = SI: ((glob : double) ADD (1.0 : double) : double) : double
Statement: Expression: ((glob2 : double) = ((x.84 : double) ADD (glob : double) : double) : double)
Statement: return (x.84 : double)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double retval.85 = SI: (target() : double) : double
Statement: Expression: (check_one_double((retval.85 : double), (11.0 : double), ) : int)
Statement: Expression: (check_one_double((glob2 : double), (21.0 : double), ) : int)
Statement: return (0 : int)

Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'glob': glob double InitialVal: InitialList: [c_double(10.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: double Defined: True Global: True, 'x.84': x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'retval.85': retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>}
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob = SI: (10.0 : double) : double
VarDecl: NULL double glob2 = SI: (0.0 : double) : double
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double x.84 = SI: ((glob : double) ADD (1.0 : double) : double) : double
Statement: Expression: ((glob2 : double) = ((x.84 : double) ADD (glob : double) : double) : double)
Statement: return (x.84 : double)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double retval.85 = SI: (target() : double) : double
Statement: Expression: (check_one_double((retval.85 : double), (11.0 : double), ) : int)
Statement: Expression: (check_one_double((glob2 : double), (21.0 : double), ) : int)
Statement: return (0 : int)

check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob double InitialVal: InitialList: [c_double(10.0)] Global: True
glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True
target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>
main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>
tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>
tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>
tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>
tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>
tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>
tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>
tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>
tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>
tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>
TAC Program:[Function: target ([]) instructions:[tmp.86 = glob + 1.0, CopyToOffset(x.84 + 0) = tmp.86 , tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84, Return 0], Function: main ([]) instructions:[tmp.88 = target([]), CopyToOffset(retval.85 + 0) = tmp.88 , Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0, Return 0], Global: True glob = [c_double(10.0)], Global: True glob2 = [c_double(0.0)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'glob': glob double InitialVal: InitialList: [c_double(10.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: double Defined: True Global: True, 'x.84': x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'retval.85': retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>, 'tmp.86': tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>, 'tmp.87': tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>, 'tmp.88': tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>, 'tmp.89': tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>, 'tmp.90': tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>, 'tmp.91': tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>, 'tmp.92': tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>, 'tmp.93': tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>, 'tmp.94': tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>}
OPTIMIZING FUNCTION Function: target ([]) instructions:[tmp.86 = glob + 1.0, CopyToOffset(x.84 + 0) = tmp.86 , tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2, glob}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.86 = glob + 1.0, CopyToOffset(x.84 + 0) = tmp.86 , tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84, Return 0]
NEW LIST [tmp.86 = glob + 1.0, Copy x.84 = tmp.86, tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.86 = glob + 1.0
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, Copy x.84 = tmp.86, tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), Copy x.84 = tmp.86: set(), tmp.87 = x.84 + glob: set(), Copy glob2 = tmp.87: set(), Return x.84: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, Copy x.84 = tmp.86, tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), Copy x.84 = tmp.86: set(), tmp.87 = x.84 + glob: set(), Copy glob2 = tmp.87: set(), Return x.84: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, Copy x.84 = tmp.86, tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), Copy x.84 = tmp.86: set(), tmp.87 = x.84 + glob: set(), Copy glob2 = tmp.87: set(), Return x.84: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, Copy x.84 = tmp.86, tmp.87 = x.84 + glob, Copy glob2 = tmp.87, Return x.84] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), Copy x.84 = tmp.86: set(), tmp.87 = x.84 + glob: set(), Copy glob2 = tmp.87: set(), Return x.84: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.86 = glob + 1.0 set()
Copy x.84 = tmp.86 set()
tmp.87 = x.84 + glob {Copy x.84 = tmp.86}
Copy glob2 = tmp.87 {Copy x.84 = tmp.86}
Return x.84 {Copy glob2 = tmp.87, Copy x.84 = tmp.86}
OLD ANNOT: {Copy glob2 = tmp.87, Copy x.84 = tmp.86}
NEW ANNOT: {Copy glob2 = tmp.87, Copy x.84 = tmp.86}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, Copy x.84 = tmp.86, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), Copy x.84 = tmp.86: set(), tmp.87 = x.84 + glob: {Copy x.84 = tmp.86}, Copy glob2 = tmp.87: {Copy x.84 = tmp.86}, Return x.84: {Copy glob2 = tmp.87, Copy x.84 = tmp.86}} ReachingCopies: {Copy glob2 = tmp.87, Copy x.84 = tmp.86}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob glob double InitialVal: InitialList: [c_double(10.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
x.84 x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
retval.85 retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>
tmp.86 tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>
tmp.87 tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>
tmp.90 tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>
tmp.92 tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>
tmp.93 tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>
tmp.94 tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>
--------------LIVE for block 0-------------------
Return tmp.86 {glob2, glob}
Copy glob2 = tmp.87 {tmp.86, glob2, glob}
tmp.87 = tmp.86 + glob {tmp.86, tmp.87, glob}
Copy x.84 = tmp.86 {tmp.86, glob}
tmp.86 = glob + 1.0 {tmp.86, glob}
OLD ANNOT: set()
NEW ANNOT: {glob}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy x.84 = tmp.86 {tmp.86, glob} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: {tmp.86, glob}, Copy x.84 = tmp.86: {tmp.86, glob}, tmp.87 = tmp.86 + glob: {tmp.86, tmp.87, glob}, Copy glob2 = tmp.87: {tmp.86, glob2, glob}, Return tmp.86: {glob2, glob}} ReachingCopies: {glob}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2, glob}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86]
NEW LIST [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.86 = glob + 1.0


ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), tmp.87 = tmp.86 + glob: set(), Copy glob2 = tmp.87: set(), Return tmp.86: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), tmp.87 = tmp.86 + glob: set(), Copy glob2 = tmp.87: set(), Return tmp.86: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), tmp.87 = tmp.86 + glob: set(), Copy glob2 = tmp.87: set(), Return tmp.86: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), tmp.87 = tmp.86 + glob: set(), Copy glob2 = tmp.87: set(), Return tmp.86: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.86 = glob + 1.0 set()
tmp.87 = tmp.86 + glob set()
Copy glob2 = tmp.87 set()
Return tmp.86 {Copy glob2 = tmp.87}
OLD ANNOT: {Copy glob2 = tmp.87}
NEW ANNOT: {Copy glob2 = tmp.87}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: set(), tmp.87 = tmp.86 + glob: set(), Copy glob2 = tmp.87: set(), Return tmp.86: {Copy glob2 = tmp.87}} ReachingCopies: {Copy glob2 = tmp.87}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob glob double InitialVal: InitialList: [c_double(10.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
x.84 x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
retval.85 retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>
tmp.86 tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>
tmp.87 tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>
tmp.90 tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>
tmp.92 tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>
tmp.93 tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>
tmp.94 tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>
--------------LIVE for block 0-------------------
Return tmp.86 {glob2, glob}
Copy glob2 = tmp.87 {tmp.86, glob2, glob}
tmp.87 = tmp.86 + glob {tmp.86, tmp.87, glob}
tmp.86 = glob + 1.0 {tmp.86, glob}
OLD ANNOT: set()
NEW ANNOT: {glob}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.86 = glob + 1.0: {tmp.86, glob}, tmp.87 = tmp.86 + glob: {tmp.86, tmp.87, glob}, Copy glob2 = tmp.87: {tmp.86, glob2, glob}, Return tmp.86: {glob2, glob}} ReachingCopies: {glob}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: main ([]) instructions:[tmp.88 = target([]), CopyToOffset(retval.85 + 0) = tmp.88 , Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.88 = target([]), CopyToOffset(retval.85 + 0) = tmp.88 , Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0, Return 0]
NEW LIST [tmp.88 = target([]), Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0, Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.88 = target([])
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), Copy tmp.89 = retval.85: set(), Copy tmp.90 = 11.0: set(), tmp.91 = check_one_double([tmp.89, tmp.90]): set(), Copy tmp.92 = glob2: set(), Copy tmp.93 = 21.0: set(), tmp.94 = check_one_double([tmp.92, tmp.93]): set(), Return 0: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), Copy tmp.89 = retval.85: set(), Copy tmp.90 = 11.0: set(), tmp.91 = check_one_double([tmp.89, tmp.90]): set(), Copy tmp.92 = glob2: set(), Copy tmp.93 = 21.0: set(), tmp.94 = check_one_double([tmp.92, tmp.93]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), Copy tmp.89 = retval.85: set(), Copy tmp.90 = 11.0: set(), tmp.91 = check_one_double([tmp.89, tmp.90]): set(), Copy tmp.92 = glob2: set(), Copy tmp.93 = 21.0: set(), tmp.94 = check_one_double([tmp.92, tmp.93]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0, tmp.91 = check_one_double([tmp.89, tmp.90]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([tmp.92, tmp.93]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), Copy tmp.89 = retval.85: set(), Copy tmp.90 = 11.0: set(), tmp.91 = check_one_double([tmp.89, tmp.90]): set(), Copy tmp.92 = glob2: set(), Copy tmp.93 = 21.0: set(), tmp.94 = check_one_double([tmp.92, tmp.93]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.88 = target([]) set()
Copy retval.85 = tmp.88 set()
Copy tmp.89 = retval.85 {Copy retval.85 = tmp.88}
Copy tmp.90 = 11.0 {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85}
<class 'parser.ConstDouble'>
tmp.91 = check_one_double([tmp.89, tmp.90]) {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}
Copy tmp.92 = glob2 {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}
Copy tmp.93 = 21.0 {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.92 = glob2, Copy tmp.90 = 11.0}
<class 'parser.ConstDouble'>
tmp.94 = check_one_double([tmp.92, tmp.93]) {Copy retval.85 = tmp.88, Copy tmp.93 = 21.0, Copy tmp.92 = glob2, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}
Return 0 {Copy retval.85 = tmp.88, Copy tmp.93 = 21.0, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}
OLD ANNOT: {Copy tmp.92 = glob2, Copy tmp.93 = 21.0, Copy tmp.89 = retval.85, Copy retval.85 = tmp.88, Copy tmp.90 = 11.0}
NEW ANNOT: {Copy retval.85 = tmp.88, Copy tmp.93 = 21.0, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, Copy tmp.89 = tmp.88, Copy tmp.90 = 11.0, tmp.91 = check_one_double([retval.85, 11.0]), Copy tmp.92 = glob2, Copy tmp.93 = 21.0, tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), Copy tmp.89 = retval.85: {Copy retval.85 = tmp.88}, Copy tmp.90 = 11.0: {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85}, tmp.91 = check_one_double([tmp.89, tmp.90]): {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}, Copy tmp.92 = glob2: {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}, Copy tmp.93 = 21.0: {Copy retval.85 = tmp.88, Copy tmp.89 = retval.85, Copy tmp.92 = glob2, Copy tmp.90 = 11.0}, tmp.94 = check_one_double([tmp.92, tmp.93]): {Copy retval.85 = tmp.88, Copy tmp.93 = 21.0, Copy tmp.92 = glob2, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}, Return 0: {Copy retval.85 = tmp.88, Copy tmp.93 = 21.0, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}} ReachingCopies: {Copy retval.85 = tmp.88, Copy tmp.93 = 21.0, Copy tmp.89 = retval.85, Copy tmp.90 = 11.0}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob glob double InitialVal: InitialList: [c_double(10.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
x.84 x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
retval.85 retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>
tmp.86 tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>
tmp.87 tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>
tmp.90 tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>
tmp.92 tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>
tmp.93 tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>
tmp.94 tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>
--------------LIVE for block 0-------------------
Return 0 {glob2, glob}
tmp.94 = check_one_double([glob2, 21.0]) {glob2, glob}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.93 = 21.0 {glob2, glob}
Copy tmp.92 = glob2 {glob2, glob}
tmp.91 = check_one_double([retval.85, 11.0]) {glob2, glob}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.90 = 11.0 {glob2, retval.85, glob}
Copy tmp.89 = tmp.88 {glob2, retval.85, glob}
Copy retval.85 = tmp.88 {glob2, retval.85, glob, tmp.88}
tmp.88 = target([]) {glob2, glob, tmp.88}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.89 = tmp.88 {glob2, retval.85, glob} for node 0
Copy tmp.90 = 11.0 {glob2, retval.85, glob} for node 0
Copy tmp.92 = glob2 {glob2, glob} for node 0
Copy tmp.93 = 21.0 {glob2, glob} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): {glob2, glob, tmp.88}, Copy retval.85 = tmp.88: {glob2, retval.85, glob, tmp.88}, Copy tmp.89 = tmp.88: {glob2, retval.85, glob}, Copy tmp.90 = 11.0: {glob2, retval.85, glob}, tmp.91 = check_one_double([retval.85, 11.0]): {glob2, glob}, Copy tmp.92 = glob2: {glob2, glob}, Copy tmp.93 = 21.0: {glob2, glob}, tmp.94 = check_one_double([glob2, 21.0]): {glob2, glob}, Return 0: {glob2, glob}} ReachingCopies: {glob2, glob}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0]
NEW LIST [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.88 = target([])


ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), tmp.91 = check_one_double([retval.85, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), tmp.91 = check_one_double([retval.85, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), tmp.91 = check_one_double([retval.85, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([retval.85, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), tmp.91 = check_one_double([retval.85, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.88 = target([]) set()
Copy retval.85 = tmp.88 set()
tmp.91 = check_one_double([retval.85, 11.0]) {Copy retval.85 = tmp.88}
tmp.94 = check_one_double([glob2, 21.0]) {Copy retval.85 = tmp.88}
Return 0 {Copy retval.85 = tmp.88}
OLD ANNOT: {Copy retval.85 = tmp.88}
NEW ANNOT: {Copy retval.85 = tmp.88}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), Copy retval.85 = tmp.88, tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), Copy retval.85 = tmp.88: set(), tmp.91 = check_one_double([retval.85, 11.0]): {Copy retval.85 = tmp.88}, tmp.94 = check_one_double([glob2, 21.0]): {Copy retval.85 = tmp.88}, Return 0: {Copy retval.85 = tmp.88}} ReachingCopies: {Copy retval.85 = tmp.88}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob glob double InitialVal: InitialList: [c_double(10.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
x.84 x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
retval.85 retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>
tmp.86 tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>
tmp.87 tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>
tmp.90 tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>
tmp.92 tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>
tmp.93 tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>
tmp.94 tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>
--------------LIVE for block 0-------------------
Return 0 {glob2, glob}
tmp.94 = check_one_double([glob2, 21.0]) {glob2, glob}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.91 = check_one_double([tmp.88, 11.0]) {glob2, glob}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy retval.85 = tmp.88 {glob2, glob, tmp.88}
tmp.88 = target([]) {glob2, glob, tmp.88}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy retval.85 = tmp.88 {glob2, glob, tmp.88} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): {glob2, glob, tmp.88}, Copy retval.85 = tmp.88: {glob2, glob, tmp.88}, tmp.91 = check_one_double([tmp.88, 11.0]): {glob2, glob}, tmp.94 = check_one_double([glob2, 21.0]): {glob2, glob}, Return 0: {glob2, glob}} ReachingCopies: {glob2, glob}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0]
NEW LIST [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.88 = target([])


ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), tmp.91 = check_one_double([tmp.88, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), tmp.91 = check_one_double([tmp.88, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), tmp.91 = check_one_double([tmp.88, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), tmp.91 = check_one_double([tmp.88, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.88 = target([]) set()
tmp.91 = check_one_double([tmp.88, 11.0]) set()
tmp.94 = check_one_double([glob2, 21.0]) set()
Return 0 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): set(), tmp.91 = check_one_double([tmp.88, 11.0]): set(), tmp.94 = check_one_double([glob2, 21.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob glob double InitialVal: InitialList: [c_double(10.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
x.84 x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
retval.85 retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>
tmp.86 tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>
tmp.87 tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>
tmp.90 tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>
tmp.92 tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>
tmp.93 tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>
tmp.94 tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>
--------------LIVE for block 0-------------------
Return 0 {glob2, glob}
tmp.94 = check_one_double([glob2, 21.0]) {glob2, glob}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.91 = check_one_double([tmp.88, 11.0]) {glob2, glob}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.88 = target([]) {glob2, glob, tmp.88}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.88 = target([]): {glob2, glob, tmp.88}, tmp.91 = check_one_double([tmp.88, 11.0]): {glob2, glob}, tmp.94 = check_one_double([glob2, 21.0]): {glob2, glob}, Return 0: {glob2, glob}} ReachingCopies: {glob2, glob}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2, glob}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob2}
TAC Program:[Function: target ([]) instructions:[tmp.86 = glob + 1.0, tmp.87 = tmp.86 + glob, Copy glob2 = tmp.87, Return tmp.86], Function: main ([]) instructions:[tmp.88 = target([]), tmp.91 = check_one_double([tmp.88, 11.0]), tmp.94 = check_one_double([glob2, 21.0]), Return 0], Global: True glob = [c_double(10.0)], Global: True glob2 = [c_double(0.0)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'glob': glob double InitialVal: InitialList: [c_double(10.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(0.0)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: double Defined: True Global: True, 'x.84': x.84 double <typeChecker.LocalAttributes object at 0x7f71830408c0>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'retval.85': retval.85 double <typeChecker.LocalAttributes object at 0x7f7183040e30>, 'tmp.86': tmp.86 double <typeChecker.LocalAttributes object at 0x7f7183042ae0>, 'tmp.87': tmp.87 double <typeChecker.LocalAttributes object at 0x7f7183042e40>, 'tmp.88': tmp.88 double <typeChecker.LocalAttributes object at 0x7f7183042d20>, 'tmp.89': tmp.89 double <typeChecker.LocalAttributes object at 0x7f7183043200>, 'tmp.90': tmp.90 double <typeChecker.LocalAttributes object at 0x7f7183043350>, 'tmp.91': tmp.91 int <typeChecker.LocalAttributes object at 0x7f71830430e0>, 'tmp.92': tmp.92 double <typeChecker.LocalAttributes object at 0x7f71830435c0>, 'tmp.93': tmp.93 double <typeChecker.LocalAttributes object at 0x7f7183043710>, 'tmp.94': tmp.94 int <typeChecker.LocalAttributes object at 0x7f71830434a0>}
All Aliased Vars:
 {glob2, glob}
IntParams: []
IntParams: []
IntDests: []
DoubleDests: [Pseudo(tmp.88)]
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.91))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.88)
Operand: Data(tmp.96, 0)
IntArgs: []
DoubleArgs: [Pseudo(tmp.88), <assemblyGenerator.DataOperand object at 0x7f7182e702c0>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.94))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob2)
Operand: Data(tmp.97, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob2), <assemblyGenerator.DataOperand object at 0x7f7182e712b0>]
StackArgs: []
ASM Program: [Static Constant: Alignment = 8 : tmp.95 = c_double(1.0), Function target stackOffset: None global: True instructions:[AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)), AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)), AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)), AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)), AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)), AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)), ret], Static Constant: Alignment = 8 : tmp.96 = c_double(11.0), Static Constant: Alignment = 8 : tmp.97 = c_double(21.0), Function main stackOffset: None global: True instructions:[Call(target), AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)), AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.91)), AssType: Double Mov(Pseudo(glob2), Reg(XMM0)), AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.94)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = True Alignment = 8 : glob = [c_double(10.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(0.0)]]
Type Table:
 {}
Backend Symbol Table:
 {'tmp.95': AssType: Double IsStatic: True IsConstant: True, 'tmp.96': AssType: Double IsStatic: True IsConstant: True, 'tmp.97': AssType: Double IsStatic: True IsConstant: True, 'check_one_int': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_5_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_uchar': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_uint': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_long': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_ulong': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_double': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet([Reg(XMM0), Reg(XMM1)]) ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_longs': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_six_chars': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_14_doubles': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_vals': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'dbl_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'long_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'unsigned_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'uchar_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'glob': AssType: Double IsStatic: True IsConstant: False, 'glob2': AssType: Double IsStatic: True IsConstant: False, 'target': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet([Reg(XMM0)]) CalleeSavedRegs: set(), 'x.84': AssType: Double IsStatic: False IsConstant: False, 'main': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'retval.85': AssType: Double IsStatic: False IsConstant: False, 'tmp.86': AssType: Double IsStatic: False IsConstant: False, 'tmp.87': AssType: Double IsStatic: False IsConstant: False, 'tmp.88': AssType: Double IsStatic: False IsConstant: False, 'tmp.89': AssType: Double IsStatic: False IsConstant: False, 'tmp.90': AssType: Double IsStatic: False IsConstant: False, 'tmp.91': AssType: Longword IsStatic: False IsConstant: False, 'tmp.92': AssType: Double IsStatic: False IsConstant: False, 'tmp.93': AssType: Double IsStatic: False IsConstant: False, 'tmp.94': AssType: Longword IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION target
-----------Building INTEGER interference graph.------------------
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)), AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)), AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)), AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)), AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)), AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)), set()), (AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)), set()), (AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)), set()), (AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)), set()), (AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)), set()), (AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)) {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)) {Pseudo(tmp.86)}
AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)) {Pseudo(tmp.86), Pseudo(tmp.87)}
AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)) {Pseudo(tmp.86), Pseudo(tmp.87), Pseudo(glob)}
AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)) {Pseudo(tmp.86), Pseudo(glob)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)) {Pseudo(tmp.86), Pseudo(glob)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(DX)
        Reg(DI)
        Reg(SI)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DI)
        Reg(AX)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(R9d)
        Reg(AX)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e5dac0>, <RegisterAllocation.Node object at 0x7f7182e5d6d0>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e72780>, <RegisterAllocation.Node object at 0x7f7182e72870>, <RegisterAllocation.Node object at 0x7f7182e72960>, <RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e5d6d0>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e72780>, <RegisterAllocation.Node object at 0x7f7182e72870>, <RegisterAllocation.Node object at 0x7f7182e72960>, <RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e72780>, <RegisterAllocation.Node object at 0x7f7182e72870>, <RegisterAllocation.Node object at 0x7f7182e72960>, <RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72780>, <RegisterAllocation.Node object at 0x7f7182e72870>, <RegisterAllocation.Node object at 0x7f7182e72960>, <RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72870>, <RegisterAllocation.Node object at 0x7f7182e72960>, <RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72960>, <RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72a50>, <RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72b40>, <RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72c30>, <RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72d20>, <RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72e10>, <RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72f00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for target: set()
------------------REGISTER INTEGER MAP.--------------------
{}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86))                      AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86))
AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86))           AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86))
AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87))                    AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87))
AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87))              AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87))
AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2))                     AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2))
AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0))                         AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)), AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)), AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)), AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)), AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)), AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)), set()), (AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)), set()), (AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)), set()), (AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)), set()), (AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)), set()), (AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0)) {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2)) {Pseudo(tmp.86)}
AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87)) {Pseudo(tmp.86), Pseudo(tmp.87)}
AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87)) {Pseudo(tmp.86), Pseudo(tmp.87), Pseudo(glob)}
AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86)) {Pseudo(tmp.86), Pseudo(glob)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86)) {Pseudo(tmp.86), Pseudo(glob)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Pseudo(tmp.86)
    Pseudo(tmp.86) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.87)
Pseudo(tmp.87)
    Pseudo(tmp.87) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.86)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
Pseudo(tmp.86) Pseudo(tmp.86) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.87) Pseudo(tmp.87) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f71830392e0>, <RegisterAllocation.Node object at 0x7f7182e72ae0>, <RegisterAllocation.Node object at 0x7f7182e72a20>, <RegisterAllocation.Node object at 0x7f7182e72930>, <RegisterAllocation.Node object at 0x7f7182e72840>, <RegisterAllocation.Node object at 0x7f7182e73bf0>, <RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72ae0>, <RegisterAllocation.Node object at 0x7f7182e72a20>, <RegisterAllocation.Node object at 0x7f7182e72930>, <RegisterAllocation.Node object at 0x7f7182e72840>, <RegisterAllocation.Node object at 0x7f7182e73bf0>, <RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72a20>, <RegisterAllocation.Node object at 0x7f7182e72930>, <RegisterAllocation.Node object at 0x7f7182e72840>, <RegisterAllocation.Node object at 0x7f7182e73bf0>, <RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72930>, <RegisterAllocation.Node object at 0x7f7182e72840>, <RegisterAllocation.Node object at 0x7f7182e73bf0>, <RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72840>, <RegisterAllocation.Node object at 0x7f7182e73bf0>, <RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73bf0>, <RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73d70>, <RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73ce0>, <RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73e00>, <RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73e90>, <RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72720>, <RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72690>, <RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e738f0>, <RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73950>, <RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e7ba40>, <RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e7ba10>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
Pseudo(tmp.86) Pseudo(tmp.86) spillCost: 4.0 color: 2 pruned: False
Pseudo(tmp.87) Pseudo(tmp.87) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for target: set()
------------------REGISTER DOUBLE MAP.--------------------
{Pseudo(tmp.86): Reg(XMM12), Pseudo(tmp.87): Reg(XMM13)}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Double Mov(Pseudo(glob), Reg(XMM12))                          AssType: Double Mov(Pseudo(glob), Pseudo(tmp.86))
AssType: Double Binary(Add, Data(tmp.95, 0), Reg(XMM12))               AssType: Double Binary(Add, Data(tmp.95, 0), Pseudo(tmp.86))
AssType: Double Mov(Reg(XMM12), Reg(XMM13))                            AssType: Double Mov(Pseudo(tmp.86), Pseudo(tmp.87))
AssType: Double Binary(Add, Pseudo(glob), Reg(XMM13))                  AssType: Double Binary(Add, Pseudo(glob), Pseudo(tmp.87))
AssType: Double Mov(Reg(XMM13), Pseudo(glob2))                         AssType: Double Mov(Pseudo(tmp.87), Pseudo(glob2))
AssType: Double Mov(Reg(XMM12), Reg(XMM0))                             AssType: Double Mov(Pseudo(tmp.86), Reg(XMM0))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION main
-----------Building INTEGER interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)), AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.91)), AssType: Double Mov(Pseudo(glob2), Reg(XMM0)), AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.94)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)), set()), (AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.91)), set()), (AssType: Double Mov(Pseudo(glob2), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.94)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.94)) set()
Call(check_one_double) {Reg(AX)}
AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)) set()
AssType: Double Mov(Pseudo(glob2), Reg(XMM0)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.91)) {Pseudo(glob2)}
Call(check_one_double) {Pseudo(glob2), Reg(AX)}
AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)) {Pseudo(glob2)}
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)) {Pseudo(glob2)}
AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)) {Pseudo(glob2), Pseudo(tmp.88)}
Call(target) {Pseudo(glob2), Reg(XMM0)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob2)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(DX)
        Reg(DI)
        Reg(SI)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DI)
        Reg(AX)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(R9d)
        Reg(AX)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(R15d)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R14d)
        Reg(R8d)
        Reg(BX)
        Reg(CX)
        Reg(SI)
        Reg(DX)
        Reg(DI)
        Reg(AX)
Pseudo(tmp.91)
    Pseudo(tmp.91) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.94)
    Pseudo(tmp.94) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.91) Pseudo(tmp.91) spillCost: 1.0 color: None pruned: False
Pseudo(tmp.94) Pseudo(tmp.94) spillCost: 1.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73110>, <RegisterAllocation.Node object at 0x7f7182e736b0>, <RegisterAllocation.Node object at 0x7f7182e73140>, <RegisterAllocation.Node object at 0x7f7182e72c90>, <RegisterAllocation.Node object at 0x7f7182e72660>, <RegisterAllocation.Node object at 0x7f7182e73470>, <RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e736b0>, <RegisterAllocation.Node object at 0x7f7182e73140>, <RegisterAllocation.Node object at 0x7f7182e72c90>, <RegisterAllocation.Node object at 0x7f7182e72660>, <RegisterAllocation.Node object at 0x7f7182e73470>, <RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73140>, <RegisterAllocation.Node object at 0x7f7182e72c90>, <RegisterAllocation.Node object at 0x7f7182e72660>, <RegisterAllocation.Node object at 0x7f7182e73470>, <RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72c90>, <RegisterAllocation.Node object at 0x7f7182e72660>, <RegisterAllocation.Node object at 0x7f7182e73470>, <RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72660>, <RegisterAllocation.Node object at 0x7f7182e73470>, <RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73470>, <RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e733e0>, <RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73b30>, <RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e73b60>, <RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72060>, <RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e72f00>, <RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e7bb60>, <RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e7a0c0>, <RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e79fd0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.91) Pseudo(tmp.91) spillCost: 1.0 color: 1 pruned: False
Pseudo(tmp.94) Pseudo(tmp.94) spillCost: 1.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for main: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.91): Reg(R9d), Pseudo(tmp.94): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
Call(target)                                                           Call(target)
AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88))                         AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88))
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0))                         AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0))
AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1))                        AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.91))
AssType: Double Mov(Pseudo(glob2), Reg(XMM0))                          AssType: Double Mov(Pseudo(glob2), Reg(XMM0))
AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1))                        AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.94))
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)), AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Double Mov(Pseudo(glob2), Reg(XMM0)), AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)), set()), (AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Double Mov(Pseudo(glob2), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Reg(R9d)) set()
Call(check_one_double) {Reg(AX)}
AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)) set()
AssType: Double Mov(Pseudo(glob2), Reg(XMM0)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Pseudo(glob2)}
Call(check_one_double) {Pseudo(glob2), Reg(AX)}
AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)) {Pseudo(glob2)}
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)) {Pseudo(glob2)}
AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88)) {Pseudo(glob2), Pseudo(tmp.88)}
Call(target) {Pseudo(glob2), Reg(XMM0)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob2)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM2)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM8)
        Reg(XMM6)
Pseudo(tmp.88)
    Pseudo(tmp.88) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
Pseudo(tmp.88) Pseudo(tmp.88) spillCost: 2.0 color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e79460>, <RegisterAllocation.Node object at 0x7f7182e78bf0>, <RegisterAllocation.Node object at 0x7f7182e78fe0>, <RegisterAllocation.Node object at 0x7f7182e789b0>, <RegisterAllocation.Node object at 0x7f7182e78f80>, <RegisterAllocation.Node object at 0x7f7182e787d0>, <RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e78bf0>, <RegisterAllocation.Node object at 0x7f7182e78fe0>, <RegisterAllocation.Node object at 0x7f7182e789b0>, <RegisterAllocation.Node object at 0x7f7182e78f80>, <RegisterAllocation.Node object at 0x7f7182e787d0>, <RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e78fe0>, <RegisterAllocation.Node object at 0x7f7182e789b0>, <RegisterAllocation.Node object at 0x7f7182e78f80>, <RegisterAllocation.Node object at 0x7f7182e787d0>, <RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e789b0>, <RegisterAllocation.Node object at 0x7f7182e78f80>, <RegisterAllocation.Node object at 0x7f7182e787d0>, <RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e78f80>, <RegisterAllocation.Node object at 0x7f7182e787d0>, <RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e787d0>, <RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e786e0>, <RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e78470>, <RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e785c0>, <RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e785f0>, <RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e782c0>, <RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e7a600>, <RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e78200>, <RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e78230>, <RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f7182e84f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
Pseudo(tmp.88) Pseudo(tmp.88) spillCost: 2.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for main: set()
------------------REGISTER DOUBLE MAP.--------------------
{Pseudo(tmp.88): Reg(XMM13)}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
Call(target)                                                           Call(target)
AssType: Double Mov(Reg(XMM0), Reg(XMM13))                             AssType: Double Mov(Reg(XMM0), Pseudo(tmp.88))
AssType: Double Mov(Reg(XMM13), Reg(XMM0))                             AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0))
AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1))                        AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Double Mov(Pseudo(glob2), Reg(XMM0))                          AssType: Double Mov(Pseudo(glob2), Reg(XMM0))
AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1))                        AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret
ASM Program: [Static Constant: Alignment = 8 : tmp.95 = c_double(1.0), Function target stackOffset: 0 global: True instructions:[AssType: Double Mov(Data(glob, 0), Reg(XMM12)), AssType: Double Binary(Add, Data(tmp.95, 0), Reg(XMM12)), AssType: Double Mov(Reg(XMM12), Reg(XMM13)), AssType: Double Binary(Add, Data(glob, 0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Data(glob2, 0)), AssType: Double Mov(Reg(XMM12), Reg(XMM0)), ret], Static Constant: Alignment = 8 : tmp.96 = c_double(11.0), Static Constant: Alignment = 8 : tmp.97 = c_double(21.0), Function main stackOffset: 0 global: True instructions:[Call(target), AssType: Double Mov(Reg(XMM0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Reg(XMM0)), AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Double Mov(Data(glob2, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = True Alignment = 8 : glob = [c_double(10.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(0.0)]]
original: 0
rounded: 16
adjustment: 16
original: 0
rounded: 16
adjustment: 16
ASM Program: [Static Constant: Alignment = 8 : tmp.95 = c_double(1.0), Function target stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Double Mov(Data(glob, 0), Reg(XMM12)), AssType: Double Binary(Add, Data(tmp.95, 0), Reg(XMM12)), AssType: Double Mov(Reg(XMM12), Reg(XMM13)), AssType: Double Binary(Add, Data(glob, 0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Data(glob2, 0)), AssType: Double Mov(Reg(XMM12), Reg(XMM0)), ret], Static Constant: Alignment = 8 : tmp.96 = c_double(11.0), Static Constant: Alignment = 8 : tmp.97 = c_double(21.0), Function main stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), Call(target), AssType: Double Mov(Reg(XMM0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Reg(XMM0)), AssType: Double Mov(Data(tmp.96, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Double Mov(Data(glob2, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.97, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = True Alignment = 8 : glob = [c_double(10.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(0.0)]]
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
	.section .rodata
	.align 8
tmp.95:
	.double 1.0
	.globl target
	.text
target:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	movsd glob+0(%rip), %xmm12
	addsd tmp.95+0(%rip), %xmm12
	movsd %xmm12, %xmm13
	addsd glob+0(%rip), %xmm13
	movsd %xmm13, glob2+0(%rip)
	movsd %xmm12, %xmm0
	movq %rbp, %rsp
	popq %rbp
	ret
	.section .rodata
	.align 8
tmp.96:
	.double 11.0
	.section .rodata
	.align 8
tmp.97:
	.double 21.0
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	call target
	movsd %xmm0, %xmm13
	movsd %xmm13, %xmm0
	movsd tmp.96+0(%rip), %xmm1
	call check_one_double
	movl %eax, %r9d
	movsd glob2+0(%rip), %xmm0
	movsd tmp.97+0(%rip), %xmm1
	call check_one_double
	movl %eax, %r9d
	movl $0, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl glob
	.data
	.align 8
glob:
	.double 10.0
	.globl glob2
	.data
	.align 8
glob2:
	.double 0.0
	.section	.note.GNU-stack,"",@progbits

