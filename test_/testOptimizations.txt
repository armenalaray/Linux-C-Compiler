False
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
9
['/home/alejandro/CComp/code/cd.py', '-s', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: codeEmission
NoLink: False
NotAssembly: True
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('int', <TokenType.INT_KW: 4>, 1), ('check_one_int', <TokenType.IDENTIFIER: 2>, 1), ('(', <TokenType.OPEN_PAREN: 7>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('actual', <TokenType.IDENTIFIER: 2>, 1), (',', <TokenType.COMMA: 38>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('expected', <TokenType.IDENTIFIER: 2>, 1), (')', <TokenType.CLOSE_PAREN: 8>, 1), (';', <TokenType.SEMICOLON: 11>, 1), ('int', <TokenType.INT_KW: 4>, 2), ('check_5_ints', <TokenType.IDENTIFIER: 2>, 2), ('(', <TokenType.OPEN_PAREN: 7>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('a', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('b', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('c', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('d', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('e', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('start', <TokenType.IDENTIFIER: 2>, 2), (')', <TokenType.CLOSE_PAREN: 8>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('int', <TokenType.INT_KW: 4>, 3), ('check_12_ints', <TokenType.IDENTIFIER: 2>, 3), ('(', <TokenType.OPEN_PAREN: 7>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('a', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('b', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('c', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('d', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('e', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('f', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('g', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('h', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('i', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 4), ('j', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('k', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('l', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('start', <TokenType.IDENTIFIER: 2>, 4), (')', <TokenType.CLOSE_PAREN: 8>, 4), (';', <TokenType.SEMICOLON: 11>, 4), ('int', <TokenType.INT_KW: 4>, 5), ('id', <TokenType.IDENTIFIER: 2>, 5), ('(', <TokenType.OPEN_PAREN: 7>, 5), ('int', <TokenType.INT_KW: 4>, 5), ('x', <TokenType.IDENTIFIER: 2>, 5), (')', <TokenType.CLOSE_PAREN: 8>, 5), (';', <TokenType.SEMICOLON: 11>, 5), ('int', <TokenType.INT_KW: 4>, 6), ('flag', <TokenType.IDENTIFIER: 2>, 6), ('=', <TokenType.EQUAL: 28>, 6), ('1', <TokenType.INT_CONSTANT: 3>, 6), (';', <TokenType.SEMICOLON: 11>, 6), ('int', <TokenType.INT_KW: 4>, 7), ('target', <TokenType.IDENTIFIER: 2>, 7), ('(', <TokenType.OPEN_PAREN: 7>, 7), ('void', <TokenType.VOID_KW: 5>, 7), (')', <TokenType.CLOSE_PAREN: 8>, 7), ('{', <TokenType.OPEN_BRACE: 9>, 7), ('int', <TokenType.INT_KW: 4>, 8), ('coalesce_into_eax', <TokenType.IDENTIFIER: 2>, 8), ('=', <TokenType.EQUAL: 28>, 8), ('0', <TokenType.INT_CONSTANT: 3>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('if', <TokenType.IF_KW: 31>, 9), ('(', <TokenType.OPEN_PAREN: 7>, 9), ('flag', <TokenType.IDENTIFIER: 2>, 9), (')', <TokenType.CLOSE_PAREN: 8>, 9), ('{', <TokenType.OPEN_BRACE: 9>, 9), ('coalesce_into_eax', <TokenType.IDENTIFIER: 2>, 10), ('=', <TokenType.EQUAL: 28>, 10), ('id', <TokenType.IDENTIFIER: 2>, 10), ('(', <TokenType.OPEN_PAREN: 7>, 10), ('10', <TokenType.INT_CONSTANT: 3>, 10), (')', <TokenType.CLOSE_PAREN: 8>, 10), (';', <TokenType.SEMICOLON: 11>, 10), ('}', <TokenType.CLOSE_BRACE: 10>, 11), ('int', <TokenType.INT_KW: 4>, 12), ('high_degree', <TokenType.IDENTIFIER: 2>, 12), ('=', <TokenType.EQUAL: 28>, 12), ('2', <TokenType.INT_CONSTANT: 3>, 12), ('*', <TokenType.ASTERISK: 17>, 12), ('coalesce_into_eax', <TokenType.IDENTIFIER: 2>, 12), (';', <TokenType.SEMICOLON: 11>, 12), ('if', <TokenType.IF_KW: 31>, 13), ('(', <TokenType.OPEN_PAREN: 7>, 13), ('coalesce_into_eax', <TokenType.IDENTIFIER: 2>, 13), ('!=', <TokenType.EXCLAMATIONEQUAL: 25>, 13), ('10', <TokenType.INT_CONSTANT: 3>, 13), (')', <TokenType.CLOSE_PAREN: 8>, 13), ('{', <TokenType.OPEN_BRACE: 9>, 13), ('return', <TokenType.RETURN_KW: 6>, 14), ('-', <TokenType.HYPHEN: 13>, 14), ('1', <TokenType.INT_CONSTANT: 3>, 14), (';', <TokenType.SEMICOLON: 11>, 14), ('}', <TokenType.CLOSE_BRACE: 10>, 15), ('int', <TokenType.INT_KW: 4>, 16), ('twelve', <TokenType.IDENTIFIER: 2>, 16), ('=', <TokenType.EQUAL: 28>, 16), ('32', <TokenType.INT_CONSTANT: 3>, 16), ('-', <TokenType.HYPHEN: 13>, 16), ('high_degree', <TokenType.IDENTIFIER: 2>, 16), (';', <TokenType.SEMICOLON: 11>, 16), ('int', <TokenType.INT_KW: 4>, 17), ('eleven', <TokenType.IDENTIFIER: 2>, 17), ('=', <TokenType.EQUAL: 28>, 17), ('23', <TokenType.INT_CONSTANT: 3>, 17), ('-', <TokenType.HYPHEN: 13>, 17), ('twelve', <TokenType.IDENTIFIER: 2>, 17), (';', <TokenType.SEMICOLON: 11>, 17), ('int', <TokenType.INT_KW: 4>, 18), ('ten', <TokenType.IDENTIFIER: 2>, 18), ('=', <TokenType.EQUAL: 28>, 18), ('21', <TokenType.INT_CONSTANT: 3>, 18), ('-', <TokenType.HYPHEN: 13>, 18), ('eleven', <TokenType.IDENTIFIER: 2>, 18), (';', <TokenType.SEMICOLON: 11>, 18), ('int', <TokenType.INT_KW: 4>, 19), ('nine', <TokenType.IDENTIFIER: 2>, 19), ('=', <TokenType.EQUAL: 28>, 19), ('19', <TokenType.INT_CONSTANT: 3>, 19), ('-', <TokenType.HYPHEN: 13>, 19), ('ten', <TokenType.IDENTIFIER: 2>, 19), (';', <TokenType.SEMICOLON: 11>, 19), ('int', <TokenType.INT_KW: 4>, 20), ('eight', <TokenType.IDENTIFIER: 2>, 20), ('=', <TokenType.EQUAL: 28>, 20), ('17', <TokenType.INT_CONSTANT: 3>, 20), ('-', <TokenType.HYPHEN: 13>, 20), ('nine', <TokenType.IDENTIFIER: 2>, 20), (';', <TokenType.SEMICOLON: 11>, 20), ('int', <TokenType.INT_KW: 4>, 21), ('seven', <TokenType.IDENTIFIER: 2>, 21), ('=', <TokenType.EQUAL: 28>, 21), ('15', <TokenType.INT_CONSTANT: 3>, 21), ('-', <TokenType.HYPHEN: 13>, 21), ('eight', <TokenType.IDENTIFIER: 2>, 21), (';', <TokenType.SEMICOLON: 11>, 21), ('int', <TokenType.INT_KW: 4>, 22), ('six', <TokenType.IDENTIFIER: 2>, 22), ('=', <TokenType.EQUAL: 28>, 22), ('13', <TokenType.INT_CONSTANT: 3>, 22), ('-', <TokenType.HYPHEN: 13>, 22), ('seven', <TokenType.IDENTIFIER: 2>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('int', <TokenType.INT_KW: 4>, 23), ('five', <TokenType.IDENTIFIER: 2>, 23), ('=', <TokenType.EQUAL: 28>, 23), ('11', <TokenType.INT_CONSTANT: 3>, 23), ('-', <TokenType.HYPHEN: 13>, 23), ('six', <TokenType.IDENTIFIER: 2>, 23), (';', <TokenType.SEMICOLON: 11>, 23), ('int', <TokenType.INT_KW: 4>, 24), ('four', <TokenType.IDENTIFIER: 2>, 24), ('=', <TokenType.EQUAL: 28>, 24), ('24', <TokenType.INT_CONSTANT: 3>, 24), ('-', <TokenType.HYPHEN: 13>, 24), ('high_degree', <TokenType.IDENTIFIER: 2>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('int', <TokenType.INT_KW: 4>, 25), ('three', <TokenType.IDENTIFIER: 2>, 25), ('=', <TokenType.EQUAL: 28>, 25), ('23', <TokenType.INT_CONSTANT: 3>, 25), ('-', <TokenType.HYPHEN: 13>, 25), ('high_degree', <TokenType.IDENTIFIER: 2>, 25), (';', <TokenType.SEMICOLON: 11>, 25), ('int', <TokenType.INT_KW: 4>, 26), ('two', <TokenType.IDENTIFIER: 2>, 26), ('=', <TokenType.EQUAL: 28>, 26), ('22', <TokenType.INT_CONSTANT: 3>, 26), ('-', <TokenType.HYPHEN: 13>, 26), ('high_degree', <TokenType.IDENTIFIER: 2>, 26), (';', <TokenType.SEMICOLON: 11>, 26), ('int', <TokenType.INT_KW: 4>, 27), ('one', <TokenType.IDENTIFIER: 2>, 27), ('=', <TokenType.EQUAL: 28>, 27), ('21', <TokenType.INT_CONSTANT: 3>, 27), ('-', <TokenType.HYPHEN: 13>, 27), ('high_degree', <TokenType.IDENTIFIER: 2>, 27), (';', <TokenType.SEMICOLON: 11>, 27), ('check_5_ints', <TokenType.IDENTIFIER: 2>, 28), ('(', <TokenType.OPEN_PAREN: 7>, 28), ('one', <TokenType.IDENTIFIER: 2>, 28), (',', <TokenType.COMMA: 38>, 28), ('two', <TokenType.IDENTIFIER: 2>, 28), (',', <TokenType.COMMA: 38>, 28), ('three', <TokenType.IDENTIFIER: 2>, 28), (',', <TokenType.COMMA: 38>, 28), ('four', <TokenType.IDENTIFIER: 2>, 28), (',', <TokenType.COMMA: 38>, 28), ('five', <TokenType.IDENTIFIER: 2>, 28), (',', <TokenType.COMMA: 38>, 28), ('1', <TokenType.INT_CONSTANT: 3>, 28), (')', <TokenType.CLOSE_PAREN: 8>, 28), (';', <TokenType.SEMICOLON: 11>, 28), ('return', <TokenType.RETURN_KW: 6>, 29), ('0', <TokenType.INT_CONSTANT: 3>, 29), (';', <TokenType.SEMICOLON: 11>, 29), ('}', <TokenType.CLOSE_BRACE: 10>, 30), ('int', <TokenType.INT_KW: 4>, 31), ('main', <TokenType.IDENTIFIER: 2>, 31), ('(', <TokenType.OPEN_PAREN: 7>, 31), ('void', <TokenType.VOID_KW: 5>, 31), (')', <TokenType.CLOSE_PAREN: 8>, 31), ('{', <TokenType.OPEN_BRACE: 9>, 32), ('return', <TokenType.RETURN_KW: 6>, 33), ('target', <TokenType.IDENTIFIER: 2>, 33), ('(', <TokenType.OPEN_PAREN: 7>, 33), (')', <TokenType.CLOSE_PAREN: 8>, 33), (';', <TokenType.SEMICOLON: 11>, 33), ('}', <TokenType.CLOSE_BRACE: 10>, 34)]
<parser.Int object at 0x7f3637b45f10>
[<parser.TypeS object at 0x7f3637cba0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_int) [int (IdenDeclarator: actual), int (IdenDeclarator: expected)])
FunType: ParamTypes: [int, int] Return Type: int
<parser.Int object at 0x7f3637cba0c0>
[<parser.TypeS object at 0x7f3637b45f10>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_5_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f3637b45f10>
[<parser.TypeS object at 0x7f3637cba0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), int (IdenDeclarator: k), int (IdenDeclarator: l), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f3637cba0c0>
[<parser.TypeS object at 0x7f3637a68bc0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: id) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
<parser.Int object at 0x7f3637cba0c0>
[<parser.TypeS object at 0x7f3637b45f10>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: flag)
int
<parser.Int object at 0x7f3637b45f10>
[<parser.TypeS object at 0x7f3637cba0c0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: target) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f3637a69610>
[<parser.TypeS object at 0x7f3637a696d0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: coalesce_into_eax)
int
<parser.Int object at 0x7f3637a69d00>
[<parser.TypeS object at 0x7f3637a69d30>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: high_degree)
int
<parser.Int object at 0x7f3637a6a180>
[<parser.TypeS object at 0x7f3637a6a1b0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: twelve)
int
<parser.Int object at 0x7f3637a6a1b0>
[<parser.TypeS object at 0x7f3637a6a180>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: eleven)
int
<parser.Int object at 0x7f3637a6a180>
[<parser.TypeS object at 0x7f3637a6a1b0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: ten)
int
<parser.Int object at 0x7f3637a6a1b0>
[<parser.TypeS object at 0x7f3637a6a180>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: nine)
int
<parser.Int object at 0x7f3637a6a180>
[<parser.TypeS object at 0x7f3637a6a1b0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: eight)
int
<parser.Int object at 0x7f3637a6a1b0>
[<parser.TypeS object at 0x7f3637a6a180>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: seven)
int
<parser.Int object at 0x7f3637a6a180>
[<parser.TypeS object at 0x7f3637a6a1b0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: six)
int
<parser.Int object at 0x7f3637a6a1b0>
[<parser.TypeS object at 0x7f3637a6a180>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: five)
int
<parser.Int object at 0x7f3637a6a180>
[<parser.TypeS object at 0x7f3637a6a1b0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: four)
int
<parser.Int object at 0x7f3637a6a1b0>
[<parser.TypeS object at 0x7f3637a6a180>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: three)
int
<parser.Int object at 0x7f3637a6a180>
[<parser.TypeS object at 0x7f3637a6a1b0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: two)
int
<parser.Int object at 0x7f3637a6a1b0>
[<parser.TypeS object at 0x7f3637a6a180>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: one)
int
<parser.Int object at 0x7f3637cba0c0>
[<parser.TypeS object at 0x7f3637b45f10>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: main) [])
FunType: ParamTypes: [] Return Type: int
0
1
1
0
AST Program:
FunDecl: NULL check_one_int (actual, expected, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a, b, c, d, e, start, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int flag = SI: (1)
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int coalesce_into_eax = SI: (0)
Statement: if ((flag))
	Statement: Expression: ((coalesce_into_eax) = (id((10), )))
Declaration:
VarDecl: NULL int high_degree = SI: ((2) MULTIPLY (coalesce_into_eax))
Statement: if (((coalesce_into_eax) NOTEQUAL (10)))
	Statement: return (NEGATE (1))
Declaration:
VarDecl: NULL int twelve = SI: ((32) SUBTRACT (high_degree))
Declaration:
VarDecl: NULL int eleven = SI: ((23) SUBTRACT (twelve))
Declaration:
VarDecl: NULL int ten = SI: ((21) SUBTRACT (eleven))
Declaration:
VarDecl: NULL int nine = SI: ((19) SUBTRACT (ten))
Declaration:
VarDecl: NULL int eight = SI: ((17) SUBTRACT (nine))
Declaration:
VarDecl: NULL int seven = SI: ((15) SUBTRACT (eight))
Declaration:
VarDecl: NULL int six = SI: ((13) SUBTRACT (seven))
Declaration:
VarDecl: NULL int five = SI: ((11) SUBTRACT (six))
Declaration:
VarDecl: NULL int four = SI: ((24) SUBTRACT (high_degree))
Declaration:
VarDecl: NULL int three = SI: ((23) SUBTRACT (high_degree))
Declaration:
VarDecl: NULL int two = SI: ((22) SUBTRACT (high_degree))
Declaration:
VarDecl: NULL int one = SI: ((21) SUBTRACT (high_degree))
Statement: Expression: (check_5_ints((one), (two), (three), (four), (five), (1), ))
Statement: return (0)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target())

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
1
1
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x.21, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int flag = SI: (1)
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int coalesce_into_eax.22 = SI: (0)
Statement: if ((flag))
	Statement: Expression: ((coalesce_into_eax.22) = (id((10), )))
Declaration:
VarDecl: NULL int high_degree.23 = SI: ((2) MULTIPLY (coalesce_into_eax.22))
Statement: if (((coalesce_into_eax.22) NOTEQUAL (10)))
	Statement: return (NEGATE (1))
Declaration:
VarDecl: NULL int twelve.24 = SI: ((32) SUBTRACT (high_degree.23))
Declaration:
VarDecl: NULL int eleven.25 = SI: ((23) SUBTRACT (twelve.24))
Declaration:
VarDecl: NULL int ten.26 = SI: ((21) SUBTRACT (eleven.25))
Declaration:
VarDecl: NULL int nine.27 = SI: ((19) SUBTRACT (ten.26))
Declaration:
VarDecl: NULL int eight.28 = SI: ((17) SUBTRACT (nine.27))
Declaration:
VarDecl: NULL int seven.29 = SI: ((15) SUBTRACT (eight.28))
Declaration:
VarDecl: NULL int six.30 = SI: ((13) SUBTRACT (seven.29))
Declaration:
VarDecl: NULL int five.31 = SI: ((11) SUBTRACT (six.30))
Declaration:
VarDecl: NULL int four.32 = SI: ((24) SUBTRACT (high_degree.23))
Declaration:
VarDecl: NULL int three.33 = SI: ((23) SUBTRACT (high_degree.23))
Declaration:
VarDecl: NULL int two.34 = SI: ((22) SUBTRACT (high_degree.23))
Declaration:
VarDecl: NULL int one.35 = SI: ((21) SUBTRACT (high_degree.23))
Statement: Expression: (check_5_ints((one.35), (two.34), (three.33), (four.32), (five.31), (1), ))
Statement: return (0)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target())

[(10 RetType: int)]
[(one.35 RetType: int), (two.34 RetType: int), (three.33 RetType: int), (four.32 RetType: int), (five.31 RetType: int), (1 RetType: int)]
0
1
1
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x.21, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int flag = SI: (1 : int) : int
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int coalesce_into_eax.22 = SI: (0 : int) : int
Statement: if ((flag : int))
	Statement: Expression: ((coalesce_into_eax.22 : int) = (id((10 : int), ) : int) : int)
Declaration:
VarDecl: NULL int high_degree.23 = SI: ((2 : int) MULTIPLY (coalesce_into_eax.22 : int) : int) : int
Statement: if (((coalesce_into_eax.22 : int) NOTEQUAL (10 : int) : int))
	Statement: return (NEGATE (1 : int) : int)
Declaration:
VarDecl: NULL int twelve.24 = SI: ((32 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int eleven.25 = SI: ((23 : int) SUBTRACT (twelve.24 : int) : int) : int
Declaration:
VarDecl: NULL int ten.26 = SI: ((21 : int) SUBTRACT (eleven.25 : int) : int) : int
Declaration:
VarDecl: NULL int nine.27 = SI: ((19 : int) SUBTRACT (ten.26 : int) : int) : int
Declaration:
VarDecl: NULL int eight.28 = SI: ((17 : int) SUBTRACT (nine.27 : int) : int) : int
Declaration:
VarDecl: NULL int seven.29 = SI: ((15 : int) SUBTRACT (eight.28 : int) : int) : int
Declaration:
VarDecl: NULL int six.30 = SI: ((13 : int) SUBTRACT (seven.29 : int) : int) : int
Declaration:
VarDecl: NULL int five.31 = SI: ((11 : int) SUBTRACT (six.30 : int) : int) : int
Declaration:
VarDecl: NULL int four.32 = SI: ((24 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int three.33 = SI: ((23 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int two.34 = SI: ((22 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int one.35 = SI: ((21 : int) SUBTRACT (high_degree.23 : int) : int) : int
Statement: Expression: (check_5_ints((one.35 : int), (two.34 : int), (three.33 : int), (four.32 : int), (five.31 : int), (1 : int), ) : int)
Statement: return (0 : int)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target() : int)

Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'flag': flag int InitialVal: InitialList: [c_int(1)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'coalesce_into_eax.22': coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>, 'high_degree.23': high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>, 'twelve.24': twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>, 'eleven.25': eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>, 'ten.26': ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>, 'nine.27': nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>, 'eight.28': eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>, 'seven.29': seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>, 'six.30': six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>, 'five.31': five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>, 'four.32': four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>, 'three.33': three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>, 'two.34': two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>, 'one.35': one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True}
0
1
1
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL id (x.21, ) ParamTypes: (int, ) ReturnType: int

VarDecl: NULL int flag = SI: (1 : int) : int
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL int coalesce_into_eax.22 = SI: (0 : int) : int
Statement: if ((flag : int))
	Statement: Expression: ((coalesce_into_eax.22 : int) = (id((10 : int), ) : int) : int)
Declaration:
VarDecl: NULL int high_degree.23 = SI: ((2 : int) MULTIPLY (coalesce_into_eax.22 : int) : int) : int
Statement: if (((coalesce_into_eax.22 : int) NOTEQUAL (10 : int) : int))
	Statement: return (NEGATE (1 : int) : int)
Declaration:
VarDecl: NULL int twelve.24 = SI: ((32 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int eleven.25 = SI: ((23 : int) SUBTRACT (twelve.24 : int) : int) : int
Declaration:
VarDecl: NULL int ten.26 = SI: ((21 : int) SUBTRACT (eleven.25 : int) : int) : int
Declaration:
VarDecl: NULL int nine.27 = SI: ((19 : int) SUBTRACT (ten.26 : int) : int) : int
Declaration:
VarDecl: NULL int eight.28 = SI: ((17 : int) SUBTRACT (nine.27 : int) : int) : int
Declaration:
VarDecl: NULL int seven.29 = SI: ((15 : int) SUBTRACT (eight.28 : int) : int) : int
Declaration:
VarDecl: NULL int six.30 = SI: ((13 : int) SUBTRACT (seven.29 : int) : int) : int
Declaration:
VarDecl: NULL int five.31 = SI: ((11 : int) SUBTRACT (six.30 : int) : int) : int
Declaration:
VarDecl: NULL int four.32 = SI: ((24 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int three.33 = SI: ((23 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int two.34 = SI: ((22 : int) SUBTRACT (high_degree.23 : int) : int) : int
Declaration:
VarDecl: NULL int one.35 = SI: ((21 : int) SUBTRACT (high_degree.23 : int) : int) : int
Statement: Expression: (check_5_ints((one.35 : int), (two.34 : int), (three.33 : int), (four.32 : int), (five.31 : int), (1 : int), ) : int)
Statement: return (0 : int)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target() : int)

check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
flag int InitialVal: InitialList: [c_int(1)] Global: True
target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>
high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>
twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>
eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>
ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>
nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>
eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>
seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>
six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>
five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>
four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>
three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>
two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>
one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>
main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>
tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>
tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>
tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>
tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>
tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>
tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>
tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>
tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>
tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>
tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>
tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>
tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>
tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>
tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>
tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>
tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>
tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>
tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>
tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>
tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>
tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>
tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>
tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>
tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>
tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>
tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>
TAC Program:[Function: target ([]) instructions:[CopyToOffset(coalesce_into_eax.22 + 0) = 0 , Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37), Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, CopyToOffset(high_degree.23 + 0) = tmp.40 , tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - high_degree.23, CopyToOffset(twelve.24 + 0) = tmp.45 , tmp.46 = 23 - twelve.24, CopyToOffset(eleven.25 + 0) = tmp.46 , tmp.47 = 21 - eleven.25, CopyToOffset(ten.26 + 0) = tmp.47 , tmp.48 = 19 - ten.26, CopyToOffset(nine.27 + 0) = tmp.48 , tmp.49 = 17 - nine.27, CopyToOffset(eight.28 + 0) = tmp.49 , tmp.50 = 15 - eight.28, CopyToOffset(seven.29 + 0) = tmp.50 , tmp.51 = 13 - seven.29, CopyToOffset(six.30 + 0) = tmp.51 , tmp.52 = 11 - six.30, CopyToOffset(five.31 + 0) = tmp.52 , tmp.53 = 24 - high_degree.23, CopyToOffset(four.32 + 0) = tmp.53 , tmp.54 = 23 - high_degree.23, CopyToOffset(three.33 + 0) = tmp.54 , tmp.55 = 22 - high_degree.23, CopyToOffset(two.34 + 0) = tmp.55 , tmp.56 = 21 - high_degree.23, CopyToOffset(one.35 + 0) = tmp.56 , Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0, Return 0], Function: main ([]) instructions:[tmp.64 = target([]), Return tmp.64, Return 0], Global: True flag = [c_int(1)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'flag': flag int InitialVal: InitialList: [c_int(1)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'coalesce_into_eax.22': coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>, 'high_degree.23': high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>, 'twelve.24': twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>, 'eleven.25': eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>, 'ten.26': ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>, 'nine.27': nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>, 'eight.28': eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>, 'seven.29': seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>, 'six.30': six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>, 'five.31': five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>, 'four.32': four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>, 'three.33': three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>, 'two.34': two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>, 'one.35': one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'tmp.36': tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>, 'tmp.38': tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>, 'tmp.39': tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>, 'tmp.40': tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>, 'tmp.41': tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>, 'tmp.42': tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>, 'tmp.44': tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>, 'tmp.45': tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>, 'tmp.46': tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>, 'tmp.47': tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>, 'tmp.48': tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>, 'tmp.49': tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>, 'tmp.50': tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>, 'tmp.51': tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>, 'tmp.52': tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>, 'tmp.53': tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>, 'tmp.54': tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>, 'tmp.55': tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>, 'tmp.56': tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>, 'tmp.57': tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>, 'tmp.58': tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>, 'tmp.59': tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>, 'tmp.60': tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>, 'tmp.61': tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>, 'tmp.62': tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>, 'tmp.63': tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>, 'tmp.64': tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>}
OPTIMIZING FUNCTION Function: target ([]) instructions:[CopyToOffset(coalesce_into_eax.22 + 0) = 0 , Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37), Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, CopyToOffset(high_degree.23 + 0) = tmp.40 , tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - high_degree.23, CopyToOffset(twelve.24 + 0) = tmp.45 , tmp.46 = 23 - twelve.24, CopyToOffset(eleven.25 + 0) = tmp.46 , tmp.47 = 21 - eleven.25, CopyToOffset(ten.26 + 0) = tmp.47 , tmp.48 = 19 - ten.26, CopyToOffset(nine.27 + 0) = tmp.48 , tmp.49 = 17 - nine.27, CopyToOffset(eight.28 + 0) = tmp.49 , tmp.50 = 15 - eight.28, CopyToOffset(seven.29 + 0) = tmp.50 , tmp.51 = 13 - seven.29, CopyToOffset(six.30 + 0) = tmp.51 , tmp.52 = 11 - six.30, CopyToOffset(five.31 + 0) = tmp.52 , tmp.53 = 24 - high_degree.23, CopyToOffset(four.32 + 0) = tmp.53 , tmp.54 = 23 - high_degree.23, CopyToOffset(three.33 + 0) = tmp.54 , tmp.55 = 22 - high_degree.23, CopyToOffset(two.34 + 0) = tmp.55 , tmp.56 = 21 - high_degree.23, CopyToOffset(one.35 + 0) = tmp.56 , Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(coalesce_into_eax.22 + 0) = 0 , Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37), Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, CopyToOffset(high_degree.23 + 0) = tmp.40 , tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - high_degree.23, CopyToOffset(twelve.24 + 0) = tmp.45 , tmp.46 = 23 - twelve.24, CopyToOffset(eleven.25 + 0) = tmp.46 , tmp.47 = 21 - eleven.25, CopyToOffset(ten.26 + 0) = tmp.47 , tmp.48 = 19 - ten.26, CopyToOffset(nine.27 + 0) = tmp.48 , tmp.49 = 17 - nine.27, CopyToOffset(eight.28 + 0) = tmp.49 , tmp.50 = 15 - eight.28, CopyToOffset(seven.29 + 0) = tmp.50 , tmp.51 = 13 - seven.29, CopyToOffset(six.30 + 0) = tmp.51 , tmp.52 = 11 - six.30, CopyToOffset(five.31 + 0) = tmp.52 , tmp.53 = 24 - high_degree.23, CopyToOffset(four.32 + 0) = tmp.53 , tmp.54 = 23 - high_degree.23, CopyToOffset(three.33 + 0) = tmp.54 , tmp.55 = 22 - high_degree.23, CopyToOffset(two.34 + 0) = tmp.55 , tmp.56 = 21 - high_degree.23, CopyToOffset(one.35 + 0) = tmp.56 , Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0, Return 0]
NEW LIST [Copy coalesce_into_eax.22 = 0, Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37), Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, Copy high_degree.23 = tmp.40, tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - high_degree.23, Copy twelve.24 = tmp.45, tmp.46 = 23 - twelve.24, Copy eleven.25 = tmp.46, tmp.47 = 21 - eleven.25, Copy ten.26 = tmp.47, tmp.48 = 19 - ten.26, Copy nine.27 = tmp.48, tmp.49 = 17 - nine.27, Copy eight.28 = tmp.49, tmp.50 = 15 - eight.28, Copy seven.29 = tmp.50, tmp.51 = 13 - seven.29, Copy six.30 = tmp.51, tmp.52 = 11 - six.30, Copy five.31 = tmp.52, tmp.53 = 24 - high_degree.23, Copy four.32 = tmp.53, tmp.54 = 23 - high_degree.23, Copy three.33 = tmp.54, tmp.55 = 22 - high_degree.23, Copy two.34 = tmp.55, tmp.56 = 21 - high_degree.23, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy coalesce_into_eax.22 = 0
Copy tmp.38 = 10
Label(tmp.37)
tmp.44 = -1
Label(tmp.43)
Return 0









ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), Copy tmp.36 = flag: set(), JumpIfZero(tmp.36, tmp.37): set()} ReachingCopies: set()
1 1: [Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {Copy tmp.38 = 10: set(), tmp.39 = id([tmp.38]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, Copy high_degree.23 = tmp.40, tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), Copy high_degree.23 = tmp.40: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), Copy tmp.42 = tmp.41: set(), JumpIfZero(tmp.42, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - high_degree.23, Copy twelve.24 = tmp.45, tmp.46 = 23 - twelve.24, Copy eleven.25 = tmp.46, tmp.47 = 21 - eleven.25, Copy ten.26 = tmp.47, tmp.48 = 19 - ten.26, Copy nine.27 = tmp.48, tmp.49 = 17 - nine.27, Copy eight.28 = tmp.49, tmp.50 = 15 - eight.28, Copy seven.29 = tmp.50, tmp.51 = 13 - seven.29, Copy six.30 = tmp.51, tmp.52 = 11 - six.30, Copy five.31 = tmp.52, tmp.53 = 24 - high_degree.23, Copy four.32 = tmp.53, tmp.54 = 23 - high_degree.23, Copy three.33 = tmp.54, tmp.55 = 22 - high_degree.23, Copy two.34 = tmp.55, tmp.56 = 21 - high_degree.23, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - high_degree.23: set(), Copy twelve.24 = tmp.45: set(), tmp.46 = 23 - twelve.24: set(), Copy eleven.25 = tmp.46: set(), tmp.47 = 21 - eleven.25: set(), Copy ten.26 = tmp.47: set(), tmp.48 = 19 - ten.26: set(), Copy nine.27 = tmp.48: set(), tmp.49 = 17 - nine.27: set(), Copy eight.28 = tmp.49: set(), tmp.50 = 15 - eight.28: set(), Copy seven.29 = tmp.50: set(), tmp.51 = 13 - seven.29: set(), Copy six.30 = tmp.51: set(), tmp.52 = 11 - six.30: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - high_degree.23: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - high_degree.23: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - high_degree.23: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - high_degree.23: set(), Copy one.35 = tmp.56: set(), Copy tmp.57 = one.35: set(), Copy tmp.58 = two.34: set(), Copy tmp.59 = three.33: set(), Copy tmp.60 = four.32: set(), Copy tmp.61 = five.31: set(), Copy tmp.62 = 1: set(), tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]): set(), Return 0: set()} ReachingCopies: set()
5 5: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4, 5}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), Copy tmp.36 = flag: set(), JumpIfZero(tmp.36, tmp.37): set()} ReachingCopies: set()
1 1: [Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {Copy tmp.38 = 10: set(), tmp.39 = id([tmp.38]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, Copy high_degree.23 = tmp.40, tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), Copy high_degree.23 = tmp.40: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), Copy tmp.42 = tmp.41: set(), JumpIfZero(tmp.42, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - high_degree.23, Copy twelve.24 = tmp.45, tmp.46 = 23 - twelve.24, Copy eleven.25 = tmp.46, tmp.47 = 21 - eleven.25, Copy ten.26 = tmp.47, tmp.48 = 19 - ten.26, Copy nine.27 = tmp.48, tmp.49 = 17 - nine.27, Copy eight.28 = tmp.49, tmp.50 = 15 - eight.28, Copy seven.29 = tmp.50, tmp.51 = 13 - seven.29, Copy six.30 = tmp.51, tmp.52 = 11 - six.30, Copy five.31 = tmp.52, tmp.53 = 24 - high_degree.23, Copy four.32 = tmp.53, tmp.54 = 23 - high_degree.23, Copy three.33 = tmp.54, tmp.55 = 22 - high_degree.23, Copy two.34 = tmp.55, tmp.56 = 21 - high_degree.23, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - high_degree.23: set(), Copy twelve.24 = tmp.45: set(), tmp.46 = 23 - twelve.24: set(), Copy eleven.25 = tmp.46: set(), tmp.47 = 21 - eleven.25: set(), Copy ten.26 = tmp.47: set(), tmp.48 = 19 - ten.26: set(), Copy nine.27 = tmp.48: set(), tmp.49 = 17 - nine.27: set(), Copy eight.28 = tmp.49: set(), tmp.50 = 15 - eight.28: set(), Copy seven.29 = tmp.50: set(), tmp.51 = 13 - seven.29: set(), Copy six.30 = tmp.51: set(), tmp.52 = 11 - six.30: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - high_degree.23: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - high_degree.23: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - high_degree.23: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - high_degree.23: set(), Copy one.35 = tmp.56: set(), Copy tmp.57 = one.35: set(), Copy tmp.58 = two.34: set(), Copy tmp.59 = three.33: set(), Copy tmp.60 = four.32: set(), Copy tmp.61 = five.31: set(), Copy tmp.62 = 1: set(), tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), Copy tmp.36 = flag: set(), JumpIfZero(tmp.36, tmp.37): set()} ReachingCopies: set()
1 1: [Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {Copy tmp.38 = 10: set(), tmp.39 = id([tmp.38]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, Copy high_degree.23 = tmp.40, tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), Copy high_degree.23 = tmp.40: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), Copy tmp.42 = tmp.41: set(), JumpIfZero(tmp.42, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - high_degree.23, Copy twelve.24 = tmp.45, tmp.46 = 23 - twelve.24, Copy eleven.25 = tmp.46, tmp.47 = 21 - eleven.25, Copy ten.26 = tmp.47, tmp.48 = 19 - ten.26, Copy nine.27 = tmp.48, tmp.49 = 17 - nine.27, Copy eight.28 = tmp.49, tmp.50 = 15 - eight.28, Copy seven.29 = tmp.50, tmp.51 = 13 - seven.29, Copy six.30 = tmp.51, tmp.52 = 11 - six.30, Copy five.31 = tmp.52, tmp.53 = 24 - high_degree.23, Copy four.32 = tmp.53, tmp.54 = 23 - high_degree.23, Copy three.33 = tmp.54, tmp.55 = 22 - high_degree.23, Copy two.34 = tmp.55, tmp.56 = 21 - high_degree.23, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - high_degree.23: set(), Copy twelve.24 = tmp.45: set(), tmp.46 = 23 - twelve.24: set(), Copy eleven.25 = tmp.46: set(), tmp.47 = 21 - eleven.25: set(), Copy ten.26 = tmp.47: set(), tmp.48 = 19 - ten.26: set(), Copy nine.27 = tmp.48: set(), tmp.49 = 17 - nine.27: set(), Copy eight.28 = tmp.49: set(), tmp.50 = 15 - eight.28: set(), Copy seven.29 = tmp.50: set(), tmp.51 = 13 - seven.29: set(), Copy six.30 = tmp.51: set(), tmp.52 = 11 - six.30: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - high_degree.23: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - high_degree.23: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - high_degree.23: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - high_degree.23: set(), Copy one.35 = tmp.56: set(), Copy tmp.57 = one.35: set(), Copy tmp.58 = two.34: set(), Copy tmp.59 = three.33: set(), Copy tmp.60 = four.32: set(), Copy tmp.61 = five.31: set(), Copy tmp.62 = 1: set(), tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, Copy tmp.36 = flag, JumpIfZero(tmp.36, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), Copy tmp.36 = flag: set(), JumpIfZero(tmp.36, tmp.37): set()} ReachingCopies: set()
1 1: [Copy tmp.38 = 10, tmp.39 = id([tmp.38]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {Copy tmp.38 = 10: set(), tmp.39 = id([tmp.38]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, Copy high_degree.23 = tmp.40, tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.42, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), Copy high_degree.23 = tmp.40: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), Copy tmp.42 = tmp.41: set(), JumpIfZero(tmp.42, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - high_degree.23, Copy twelve.24 = tmp.45, tmp.46 = 23 - twelve.24, Copy eleven.25 = tmp.46, tmp.47 = 21 - eleven.25, Copy ten.26 = tmp.47, tmp.48 = 19 - ten.26, Copy nine.27 = tmp.48, tmp.49 = 17 - nine.27, Copy eight.28 = tmp.49, tmp.50 = 15 - eight.28, Copy seven.29 = tmp.50, tmp.51 = 13 - seven.29, Copy six.30 = tmp.51, tmp.52 = 11 - six.30, Copy five.31 = tmp.52, tmp.53 = 24 - high_degree.23, Copy four.32 = tmp.53, tmp.54 = 23 - high_degree.23, Copy three.33 = tmp.54, tmp.55 = 22 - high_degree.23, Copy two.34 = tmp.55, tmp.56 = 21 - high_degree.23, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy tmp.58 = two.34, Copy tmp.59 = three.33, Copy tmp.60 = four.32, Copy tmp.61 = five.31, Copy tmp.62 = 1, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - high_degree.23: set(), Copy twelve.24 = tmp.45: set(), tmp.46 = 23 - twelve.24: set(), Copy eleven.25 = tmp.46: set(), tmp.47 = 21 - eleven.25: set(), Copy ten.26 = tmp.47: set(), tmp.48 = 19 - ten.26: set(), Copy nine.27 = tmp.48: set(), tmp.49 = 17 - nine.27: set(), Copy eight.28 = tmp.49: set(), tmp.50 = 15 - eight.28: set(), Copy seven.29 = tmp.50: set(), tmp.51 = 13 - seven.29: set(), Copy six.30 = tmp.51: set(), tmp.52 = 11 - six.30: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - high_degree.23: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - high_degree.23: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - high_degree.23: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - high_degree.23: set(), Copy one.35 = tmp.56: set(), Copy tmp.57 = one.35: set(), Copy tmp.58 = two.34: set(), Copy tmp.59 = three.33: set(), Copy tmp.60 = four.32: set(), Copy tmp.61 = five.31: set(), Copy tmp.62 = 1: set(), tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------IMAP for block 0-------------------
Copy coalesce_into_eax.22 = 0 set()
<class 'parser.ConstInt'>
Copy tmp.36 = flag {Copy coalesce_into_eax.22 = 0}
JumpIfZero(tmp.36, tmp.37) {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0}
OLD ANNOT: {Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy coalesce_into_eax.22 = tmp.39, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.38 = 10, Copy tmp.36 = flag, Copy tmp.61 = five.31, Copy twelve.24 = tmp.45, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy coalesce_into_eax.22 = 0, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
NEW ANNOT: {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Copy tmp.38 = 10 {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0}
<class 'parser.ConstInt'>
tmp.39 = id([tmp.38]) {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0, Copy tmp.38 = 10}
Copy coalesce_into_eax.22 = tmp.39 {Copy coalesce_into_eax.22 = 0, Copy tmp.38 = 10}
OLD ANNOT: {Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy coalesce_into_eax.22 = tmp.39, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.38 = 10, Copy tmp.36 = flag, Copy tmp.61 = five.31, Copy twelve.24 = tmp.45, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy coalesce_into_eax.22 = 0, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
NEW ANNOT: {Copy coalesce_into_eax.22 = tmp.39, Copy tmp.38 = 10}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.37) set()
tmp.40 = 2 * coalesce_into_eax.22 set()
Copy high_degree.23 = tmp.40 set()
tmp.41 = coalesce_into_eax.22 != 10 {Copy high_degree.23 = tmp.40}
Copy tmp.42 = tmp.41 {Copy high_degree.23 = tmp.40}
JumpIfZero(tmp.42, tmp.43) {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
OLD ANNOT: {Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy coalesce_into_eax.22 = tmp.39, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.38 = 10, Copy tmp.36 = flag, Copy tmp.61 = five.31, Copy twelve.24 = tmp.45, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy coalesce_into_eax.22 = 0, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
NEW ANNOT: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
tmp.44 = -1 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
Return tmp.44 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
OLD ANNOT: {Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy coalesce_into_eax.22 = tmp.39, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.38 = 10, Copy tmp.36 = flag, Copy tmp.61 = five.31, Copy twelve.24 = tmp.45, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy coalesce_into_eax.22 = 0, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
NEW ANNOT: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.43) {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
tmp.45 = 32 - high_degree.23 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
Copy twelve.24 = tmp.45 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
tmp.46 = 23 - twelve.24 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45}
Copy eleven.25 = tmp.46 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45}
tmp.47 = 21 - eleven.25 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eleven.25 = tmp.46}
Copy ten.26 = tmp.47 {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eleven.25 = tmp.46}
tmp.48 = 19 - ten.26 {Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy nine.27 = tmp.48 {Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
tmp.49 = 17 - nine.27 {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}
Copy eight.28 = tmp.49 {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}
tmp.50 = 15 - eight.28 {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eight.28 = tmp.49, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}
Copy seven.29 = tmp.50 {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eight.28 = tmp.49, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}
tmp.51 = 13 - seven.29 {Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy six.30 = tmp.51 {Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
tmp.52 = 11 - six.30 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy five.31 = tmp.52 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
tmp.53 = 24 - high_degree.23 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy four.32 = tmp.53 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
tmp.54 = 23 - high_degree.23 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy three.33 = tmp.54 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
tmp.55 = 22 - high_degree.23 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy two.34 = tmp.55 {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
tmp.56 = 21 - high_degree.23 {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy one.35 = tmp.56 {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy tmp.57 = one.35 {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy one.35 = tmp.56, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy tmp.58 = two.34 {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}
Copy tmp.59 = three.33 {Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy four.32 = tmp.53, Copy ten.26 = tmp.47}
Copy tmp.60 = four.32 {Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy four.32 = tmp.53, Copy ten.26 = tmp.47}
Copy tmp.61 = five.31 {Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy four.32 = tmp.53, Copy ten.26 = tmp.47}
Copy tmp.62 = 1 {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
<class 'parser.ConstInt'>
tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]) {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
Return 0 {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
OLD ANNOT: {Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy coalesce_into_eax.22 = tmp.39, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.38 = 10, Copy tmp.36 = flag, Copy tmp.61 = five.31, Copy twelve.24 = tmp.45, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy coalesce_into_eax.22 = 0, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
NEW ANNOT: {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, Copy tmp.36 = flag, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), Copy tmp.36 = flag: {Copy coalesce_into_eax.22 = 0}, JumpIfZero(tmp.36, tmp.37): {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0}} ReachingCopies: {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0}
1 1: [Copy tmp.38 = 10, tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {Copy tmp.38 = 10: {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0}, tmp.39 = id([tmp.38]): {Copy tmp.36 = flag, Copy coalesce_into_eax.22 = 0, Copy tmp.38 = 10}, Copy coalesce_into_eax.22 = tmp.39: {Copy coalesce_into_eax.22 = 0, Copy tmp.38 = 10}} ReachingCopies: {Copy coalesce_into_eax.22 = tmp.39, Copy tmp.38 = 10}
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, Copy high_degree.23 = tmp.40, tmp.41 = coalesce_into_eax.22 != 10, Copy tmp.42 = tmp.41, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), Copy high_degree.23 = tmp.40: set(), tmp.41 = coalesce_into_eax.22 != 10: {Copy high_degree.23 = tmp.40}, Copy tmp.42 = tmp.41: {Copy high_degree.23 = tmp.40}, JumpIfZero(tmp.42, tmp.43): {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}} ReachingCopies: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}, Return tmp.44: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}} ReachingCopies: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, Copy twelve.24 = tmp.45, tmp.46 = 23 - tmp.45, Copy eleven.25 = tmp.46, tmp.47 = 21 - tmp.46, Copy ten.26 = tmp.47, tmp.48 = 19 - tmp.47, Copy nine.27 = tmp.48, tmp.49 = 17 - tmp.48, Copy eight.28 = tmp.49, tmp.50 = 15 - tmp.49, Copy seven.29 = tmp.50, tmp.51 = 13 - tmp.50, Copy six.30 = tmp.51, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, Copy tmp.57 = tmp.56, Copy tmp.58 = tmp.55, Copy tmp.59 = tmp.54, Copy tmp.60 = tmp.53, Copy tmp.61 = tmp.52, Copy tmp.62 = 1, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}, tmp.45 = 32 - high_degree.23: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}, Copy twelve.24 = tmp.45: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41}, tmp.46 = 23 - twelve.24: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45}, Copy eleven.25 = tmp.46: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45}, tmp.47 = 21 - eleven.25: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eleven.25 = tmp.46}, Copy ten.26 = tmp.47: {Copy high_degree.23 = tmp.40, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eleven.25 = tmp.46}, tmp.48 = 19 - ten.26: {Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy nine.27 = tmp.48: {Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, tmp.49 = 17 - nine.27: {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}, Copy eight.28 = tmp.49: {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}, tmp.50 = 15 - eight.28: {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eight.28 = tmp.49, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}, Copy seven.29 = tmp.50: {Copy eleven.25 = tmp.46, Copy tmp.42 = tmp.41, Copy twelve.24 = tmp.45, Copy eight.28 = tmp.49, Copy high_degree.23 = tmp.40, Copy ten.26 = tmp.47, Copy nine.27 = tmp.48}, tmp.51 = 13 - seven.29: {Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy six.30 = tmp.51: {Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, tmp.52 = 11 - six.30: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy five.31 = tmp.52: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, tmp.53 = 24 - high_degree.23: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy four.32 = tmp.53: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, tmp.54 = 23 - high_degree.23: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy three.33 = tmp.54: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, tmp.55 = 22 - high_degree.23: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy two.34 = tmp.55: {Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, tmp.56 = 21 - high_degree.23: {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy one.35 = tmp.56: {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy tmp.57 = one.35: {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy one.35 = tmp.56, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy tmp.58 = two.34: {Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy high_degree.23 = tmp.40, Copy nine.27 = tmp.48, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy eight.28 = tmp.49, Copy four.32 = tmp.53, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy ten.26 = tmp.47, Copy eleven.25 = tmp.46}, Copy tmp.59 = three.33: {Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy four.32 = tmp.53, Copy ten.26 = tmp.47}, Copy tmp.60 = four.32: {Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy four.32 = tmp.53, Copy ten.26 = tmp.47}, Copy tmp.61 = five.31: {Copy twelve.24 = tmp.45, Copy three.33 = tmp.54, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.42 = tmp.41, Copy four.32 = tmp.53, Copy ten.26 = tmp.47}, Copy tmp.62 = 1: {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}, tmp.63 = check_5_ints([tmp.57, tmp.58, tmp.59, tmp.60, tmp.61, tmp.62]): {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}, Return 0: {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}} ReachingCopies: {Copy tmp.61 = five.31, Copy three.33 = tmp.54, Copy twelve.24 = tmp.45, Copy nine.27 = tmp.48, Copy eight.28 = tmp.49, Copy tmp.60 = four.32, Copy one.35 = tmp.56, Copy tmp.57 = one.35, Copy seven.29 = tmp.50, Copy eleven.25 = tmp.46, Copy two.34 = tmp.55, Copy tmp.59 = three.33, Copy six.30 = tmp.51, Copy high_degree.23 = tmp.40, Copy tmp.58 = two.34, Copy five.31 = tmp.52, Copy tmp.62 = 1, Copy four.32 = tmp.53, Copy tmp.42 = tmp.41, Copy ten.26 = tmp.47}
EXIT Exit: EXIT {3, 4}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
flag flag int InitialVal: InitialList: [c_int(1)] Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
coalesce_into_eax.22 coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>
high_degree.23 high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>
twelve.24 twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>
eleven.25 eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>
ten.26 ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>
nine.27 nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>
eight.28 eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>
seven.29 seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>
six.30 six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>
five.31 five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>
four.32 four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>
three.33 three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>
two.34 two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>
one.35 one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>
--------------LIVE for block 4-------------------
Return 0 {flag}
tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]) {flag}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.62 = 1 {three.33, two.34, five.31, flag, four.32, one.35}
Copy tmp.61 = tmp.52 {three.33, two.34, five.31, flag, four.32, one.35}
Copy tmp.60 = tmp.53 {three.33, four.32, two.34, five.31, flag, tmp.52, one.35}
Copy tmp.59 = tmp.54 {two.34, five.31, tmp.52, tmp.53, three.33, flag, four.32, one.35}
Copy tmp.58 = tmp.55 {two.34, five.31, tmp.54, tmp.52, tmp.53, three.33, flag, four.32, one.35}
Copy tmp.57 = tmp.56 {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32, one.35}
Copy one.35 = tmp.56 {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, tmp.56, three.33, flag, four.32, one.35}
tmp.56 = 21 - tmp.40 {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, tmp.56, three.33, flag, four.32}
Copy two.34 = tmp.55 {tmp.40, two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32}
tmp.55 = 22 - tmp.40 {tmp.40, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32}
Copy three.33 = tmp.54 {tmp.40, five.31, tmp.54, tmp.52, tmp.53, three.33, flag, four.32}
tmp.54 = 23 - tmp.40 {flag, tmp.40, four.32, five.31, tmp.54, tmp.52, tmp.53}
Copy four.32 = tmp.53 {tmp.40, four.32, five.31, flag, tmp.52, tmp.53}
tmp.53 = 24 - tmp.40 {tmp.40, five.31, flag, tmp.52, tmp.53}
Copy five.31 = tmp.52 {five.31, flag, tmp.52, tmp.40}
tmp.52 = 11 - tmp.51 {flag, tmp.52, tmp.40}
Copy six.30 = tmp.51 {tmp.51, flag, tmp.40}
tmp.51 = 13 - tmp.50 {tmp.51, flag, tmp.40}
Copy seven.29 = tmp.50 {flag, tmp.40, tmp.50}
tmp.50 = 15 - tmp.49 {flag, tmp.40, tmp.50}
Copy eight.28 = tmp.49 {flag, tmp.40, tmp.49}
tmp.49 = 17 - tmp.48 {flag, tmp.40, tmp.49}
Copy nine.27 = tmp.48 {flag, tmp.48, tmp.40}
tmp.48 = 19 - tmp.47 {flag, tmp.48, tmp.40}
Copy ten.26 = tmp.47 {flag, tmp.40, tmp.47}
tmp.47 = 21 - tmp.46 {flag, tmp.40, tmp.47}
Copy eleven.25 = tmp.46 {tmp.46, flag, tmp.40}
tmp.46 = 23 - tmp.45 {tmp.46, flag, tmp.40}
Copy twelve.24 = tmp.45 {tmp.45, flag, tmp.40}
tmp.45 = 32 - tmp.40 {tmp.45, flag, tmp.40}
Label(tmp.43) {flag, tmp.40}
OLD ANNOT: set()
NEW ANNOT: {flag, tmp.40}
--------------LIVE for block 3-------------------
Return tmp.44 {flag}
tmp.44 = -1 {flag, tmp.44}
OLD ANNOT: set()
NEW ANNOT: {flag}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.41, tmp.43) {flag, tmp.40}
Copy tmp.42 = tmp.41 {flag, tmp.41, tmp.40}
tmp.41 = coalesce_into_eax.22 != 10 {flag, tmp.41, tmp.40}
Copy high_degree.23 = tmp.40 {coalesce_into_eax.22, flag, tmp.40}
tmp.40 = 2 * coalesce_into_eax.22 {coalesce_into_eax.22, flag, tmp.40}
Label(tmp.37) {coalesce_into_eax.22, flag}
OLD ANNOT: set()
NEW ANNOT: {coalesce_into_eax.22, flag}
--------------LIVE for block 1-------------------
Copy coalesce_into_eax.22 = tmp.39 {coalesce_into_eax.22, flag}
tmp.39 = id([10]) {flag, tmp.39}
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.38 = 10 {flag}
OLD ANNOT: set()
NEW ANNOT: {flag}
--------------LIVE for block 0-------------------
JumpIfZero(flag, tmp.37) {coalesce_into_eax.22, flag}
Copy tmp.36 = flag {coalesce_into_eax.22, flag}
Copy coalesce_into_eax.22 = 0 {coalesce_into_eax.22, flag}
OLD ANNOT: set()
NEW ANNOT: {flag}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.36 = flag {coalesce_into_eax.22, flag} for node 0
Copy tmp.38 = 10 {flag} for node 1
Copy high_degree.23 = tmp.40 {coalesce_into_eax.22, flag, tmp.40} for node 2
Copy tmp.42 = tmp.41 {flag, tmp.41, tmp.40} for node 2
Copy twelve.24 = tmp.45 {tmp.45, flag, tmp.40} for node 4
Copy eleven.25 = tmp.46 {tmp.46, flag, tmp.40} for node 4
Copy ten.26 = tmp.47 {flag, tmp.40, tmp.47} for node 4
Copy nine.27 = tmp.48 {flag, tmp.48, tmp.40} for node 4
Copy eight.28 = tmp.49 {flag, tmp.40, tmp.49} for node 4
Copy seven.29 = tmp.50 {flag, tmp.40, tmp.50} for node 4
Copy six.30 = tmp.51 {tmp.51, flag, tmp.40} for node 4
Copy tmp.57 = tmp.56 {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32, one.35} for node 4
Copy tmp.58 = tmp.55 {two.34, five.31, tmp.54, tmp.52, tmp.53, three.33, flag, four.32, one.35} for node 4
Copy tmp.59 = tmp.54 {two.34, five.31, tmp.52, tmp.53, three.33, flag, four.32, one.35} for node 4
Copy tmp.60 = tmp.53 {three.33, four.32, two.34, five.31, flag, tmp.52, one.35} for node 4
Copy tmp.61 = tmp.52 {three.33, two.34, five.31, flag, four.32, one.35} for node 4
Copy tmp.62 = 1 {three.33, two.34, five.31, flag, four.32, one.35} for node 4
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: {coalesce_into_eax.22, flag}, Copy tmp.36 = flag: {coalesce_into_eax.22, flag}, JumpIfZero(flag, tmp.37): {coalesce_into_eax.22, flag}} ReachingCopies: {flag}
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {Copy tmp.38 = 10: {flag}, tmp.39 = id([10]): {flag, tmp.39}, Copy coalesce_into_eax.22 = tmp.39: {coalesce_into_eax.22, flag}} ReachingCopies: {flag}
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): {coalesce_into_eax.22, flag}, tmp.40 = 2 * coalesce_into_eax.22: {coalesce_into_eax.22, flag, tmp.40}, Copy high_degree.23 = tmp.40: {coalesce_into_eax.22, flag, tmp.40}, tmp.41 = coalesce_into_eax.22 != 10: {flag, tmp.41, tmp.40}, Copy tmp.42 = tmp.41: {flag, tmp.41, tmp.40}, JumpIfZero(tmp.41, tmp.43): {flag, tmp.40}} ReachingCopies: {coalesce_into_eax.22, flag}
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: {flag, tmp.44}, Return tmp.44: {flag}} ReachingCopies: {flag}
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): {flag, tmp.40}, tmp.45 = 32 - tmp.40: {tmp.45, flag, tmp.40}, Copy twelve.24 = tmp.45: {tmp.45, flag, tmp.40}, tmp.46 = 23 - tmp.45: {tmp.46, flag, tmp.40}, Copy eleven.25 = tmp.46: {tmp.46, flag, tmp.40}, tmp.47 = 21 - tmp.46: {flag, tmp.40, tmp.47}, Copy ten.26 = tmp.47: {flag, tmp.40, tmp.47}, tmp.48 = 19 - tmp.47: {flag, tmp.48, tmp.40}, Copy nine.27 = tmp.48: {flag, tmp.48, tmp.40}, tmp.49 = 17 - tmp.48: {flag, tmp.40, tmp.49}, Copy eight.28 = tmp.49: {flag, tmp.40, tmp.49}, tmp.50 = 15 - tmp.49: {flag, tmp.40, tmp.50}, Copy seven.29 = tmp.50: {flag, tmp.40, tmp.50}, tmp.51 = 13 - tmp.50: {tmp.51, flag, tmp.40}, Copy six.30 = tmp.51: {tmp.51, flag, tmp.40}, tmp.52 = 11 - tmp.51: {flag, tmp.52, tmp.40}, Copy five.31 = tmp.52: {five.31, flag, tmp.52, tmp.40}, tmp.53 = 24 - tmp.40: {tmp.40, five.31, flag, tmp.52, tmp.53}, Copy four.32 = tmp.53: {tmp.40, four.32, five.31, flag, tmp.52, tmp.53}, tmp.54 = 23 - tmp.40: {flag, tmp.40, four.32, five.31, tmp.54, tmp.52, tmp.53}, Copy three.33 = tmp.54: {tmp.40, five.31, tmp.54, tmp.52, tmp.53, three.33, flag, four.32}, tmp.55 = 22 - tmp.40: {tmp.40, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32}, Copy two.34 = tmp.55: {tmp.40, two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32}, tmp.56 = 21 - tmp.40: {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, tmp.56, three.33, flag, four.32}, Copy one.35 = tmp.56: {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, tmp.56, three.33, flag, four.32, one.35}, Copy tmp.57 = tmp.56: {two.34, five.31, tmp.54, tmp.52, tmp.53, tmp.55, three.33, flag, four.32, one.35}, Copy tmp.58 = tmp.55: {two.34, five.31, tmp.54, tmp.52, tmp.53, three.33, flag, four.32, one.35}, Copy tmp.59 = tmp.54: {two.34, five.31, tmp.52, tmp.53, three.33, flag, four.32, one.35}, Copy tmp.60 = tmp.53: {three.33, four.32, two.34, five.31, flag, tmp.52, one.35}, Copy tmp.61 = tmp.52: {three.33, two.34, five.31, flag, four.32, one.35}, Copy tmp.62 = 1: {three.33, two.34, five.31, flag, four.32, one.35}, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]): {flag}, Return 0: {flag}} ReachingCopies: {flag, tmp.40}
EXIT Exit: EXIT {3, 4}
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37), tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0]
NEW LIST [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37), tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy coalesce_into_eax.22 = 0
tmp.39 = id([10])
Label(tmp.37)
tmp.44 = -1
Label(tmp.43)








ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - tmp.40: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - tmp.40: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - tmp.40: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - tmp.40: set(), Copy one.35 = tmp.56: set(), tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - tmp.40: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - tmp.40: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - tmp.40: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - tmp.40: set(), Copy one.35 = tmp.56: set(), tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - tmp.40: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - tmp.40: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - tmp.40: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - tmp.40: set(), Copy one.35 = tmp.56: set(), tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - tmp.40: set(), Copy four.32 = tmp.53: set(), tmp.54 = 23 - tmp.40: set(), Copy three.33 = tmp.54: set(), tmp.55 = 22 - tmp.40: set(), Copy two.34 = tmp.55: set(), tmp.56 = 21 - tmp.40: set(), Copy one.35 = tmp.56: set(), tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------IMAP for block 0-------------------
Copy coalesce_into_eax.22 = 0 set()
<class 'parser.ConstInt'>
JumpIfZero(flag, tmp.37) {Copy coalesce_into_eax.22 = 0}
OLD ANNOT: {Copy two.34 = tmp.55, Copy three.33 = tmp.54, Copy five.31 = tmp.52, Copy coalesce_into_eax.22 = 0, Copy four.32 = tmp.53, Copy coalesce_into_eax.22 = tmp.39, Copy one.35 = tmp.56}
NEW ANNOT: {Copy coalesce_into_eax.22 = 0}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.39 = id([10]) {Copy coalesce_into_eax.22 = 0}
Copy coalesce_into_eax.22 = tmp.39 {Copy coalesce_into_eax.22 = 0}
OLD ANNOT: {Copy two.34 = tmp.55, Copy three.33 = tmp.54, Copy five.31 = tmp.52, Copy coalesce_into_eax.22 = 0, Copy four.32 = tmp.53, Copy coalesce_into_eax.22 = tmp.39, Copy one.35 = tmp.56}
NEW ANNOT: {Copy coalesce_into_eax.22 = tmp.39}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.37) set()
tmp.40 = 2 * coalesce_into_eax.22 set()
tmp.41 = coalesce_into_eax.22 != 10 set()
JumpIfZero(tmp.41, tmp.43) set()
OLD ANNOT: {Copy two.34 = tmp.55, Copy three.33 = tmp.54, Copy five.31 = tmp.52, Copy coalesce_into_eax.22 = 0, Copy four.32 = tmp.53, Copy coalesce_into_eax.22 = tmp.39, Copy one.35 = tmp.56}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
tmp.44 = -1 set()
Return tmp.44 set()
OLD ANNOT: {Copy two.34 = tmp.55, Copy three.33 = tmp.54, Copy five.31 = tmp.52, Copy coalesce_into_eax.22 = 0, Copy four.32 = tmp.53, Copy coalesce_into_eax.22 = tmp.39, Copy one.35 = tmp.56}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.43) set()
tmp.45 = 32 - tmp.40 set()
tmp.46 = 23 - tmp.45 set()
tmp.47 = 21 - tmp.46 set()
tmp.48 = 19 - tmp.47 set()
tmp.49 = 17 - tmp.48 set()
tmp.50 = 15 - tmp.49 set()
tmp.51 = 13 - tmp.50 set()
tmp.52 = 11 - tmp.51 set()
Copy five.31 = tmp.52 set()
tmp.53 = 24 - tmp.40 {Copy five.31 = tmp.52}
Copy four.32 = tmp.53 {Copy five.31 = tmp.52}
tmp.54 = 23 - tmp.40 {Copy five.31 = tmp.52, Copy four.32 = tmp.53}
Copy three.33 = tmp.54 {Copy five.31 = tmp.52, Copy four.32 = tmp.53}
tmp.55 = 22 - tmp.40 {Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}
Copy two.34 = tmp.55 {Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}
tmp.56 = 21 - tmp.40 {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}
Copy one.35 = tmp.56 {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}
tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]) {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54, Copy one.35 = tmp.56}
Return 0 {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54, Copy one.35 = tmp.56}
OLD ANNOT: {Copy two.34 = tmp.55, Copy three.33 = tmp.54, Copy five.31 = tmp.52, Copy coalesce_into_eax.22 = 0, Copy four.32 = tmp.53, Copy coalesce_into_eax.22 = tmp.39, Copy one.35 = tmp.56}
NEW ANNOT: {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54, Copy one.35 = tmp.56}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): {Copy coalesce_into_eax.22 = 0}} ReachingCopies: {Copy coalesce_into_eax.22 = 0}
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): {Copy coalesce_into_eax.22 = 0}, Copy coalesce_into_eax.22 = tmp.39: {Copy coalesce_into_eax.22 = 0}} ReachingCopies: {Copy coalesce_into_eax.22 = tmp.39}
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, Copy five.31 = tmp.52, tmp.53 = 24 - tmp.40, Copy four.32 = tmp.53, tmp.54 = 23 - tmp.40, Copy three.33 = tmp.54, tmp.55 = 22 - tmp.40, Copy two.34 = tmp.55, tmp.56 = 21 - tmp.40, Copy one.35 = tmp.56, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), Copy five.31 = tmp.52: set(), tmp.53 = 24 - tmp.40: {Copy five.31 = tmp.52}, Copy four.32 = tmp.53: {Copy five.31 = tmp.52}, tmp.54 = 23 - tmp.40: {Copy five.31 = tmp.52, Copy four.32 = tmp.53}, Copy three.33 = tmp.54: {Copy five.31 = tmp.52, Copy four.32 = tmp.53}, tmp.55 = 22 - tmp.40: {Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}, Copy two.34 = tmp.55: {Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}, tmp.56 = 21 - tmp.40: {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}, Copy one.35 = tmp.56: {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54}, tmp.63 = check_5_ints([one.35, two.34, three.33, four.32, five.31, 1]): {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54, Copy one.35 = tmp.56}, Return 0: {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54, Copy one.35 = tmp.56}} ReachingCopies: {Copy two.34 = tmp.55, Copy five.31 = tmp.52, Copy four.32 = tmp.53, Copy three.33 = tmp.54, Copy one.35 = tmp.56}
EXIT Exit: EXIT {3, 4}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
flag flag int InitialVal: InitialList: [c_int(1)] Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
coalesce_into_eax.22 coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>
high_degree.23 high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>
twelve.24 twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>
eleven.25 eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>
ten.26 ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>
nine.27 nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>
eight.28 eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>
seven.29 seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>
six.30 six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>
five.31 five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>
four.32 four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>
three.33 three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>
two.34 two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>
one.35 one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>
--------------LIVE for block 4-------------------
Return 0 {flag}
tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]) {flag}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy one.35 = tmp.56 {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56}
tmp.56 = 21 - tmp.40 {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56}
Copy two.34 = tmp.55 {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52}
tmp.55 = 22 - tmp.40 {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52}
Copy three.33 = tmp.54 {flag, tmp.40, tmp.54, tmp.52, tmp.53}
tmp.54 = 23 - tmp.40 {flag, tmp.40, tmp.54, tmp.52, tmp.53}
Copy four.32 = tmp.53 {tmp.53, flag, tmp.52, tmp.40}
tmp.53 = 24 - tmp.40 {tmp.53, flag, tmp.52, tmp.40}
Copy five.31 = tmp.52 {flag, tmp.52, tmp.40}
tmp.52 = 11 - tmp.51 {flag, tmp.52, tmp.40}
tmp.51 = 13 - tmp.50 {tmp.51, flag, tmp.40}
tmp.50 = 15 - tmp.49 {flag, tmp.40, tmp.50}
tmp.49 = 17 - tmp.48 {flag, tmp.40, tmp.49}
tmp.48 = 19 - tmp.47 {flag, tmp.48, tmp.40}
tmp.47 = 21 - tmp.46 {flag, tmp.40, tmp.47}
tmp.46 = 23 - tmp.45 {tmp.46, flag, tmp.40}
tmp.45 = 32 - tmp.40 {tmp.45, flag, tmp.40}
Label(tmp.43) {flag, tmp.40}
OLD ANNOT: set()
NEW ANNOT: {flag, tmp.40}
--------------LIVE for block 3-------------------
Return tmp.44 {flag}
tmp.44 = -1 {flag, tmp.44}
OLD ANNOT: set()
NEW ANNOT: {flag}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.41, tmp.43) {flag, tmp.40}
tmp.41 = coalesce_into_eax.22 != 10 {flag, tmp.41, tmp.40}
tmp.40 = 2 * coalesce_into_eax.22 {coalesce_into_eax.22, flag, tmp.40}
Label(tmp.37) {coalesce_into_eax.22, flag}
OLD ANNOT: set()
NEW ANNOT: {coalesce_into_eax.22, flag}
--------------LIVE for block 1-------------------
Copy coalesce_into_eax.22 = tmp.39 {coalesce_into_eax.22, flag}
tmp.39 = id([10]) {flag, tmp.39}
<class 'tacGenerator.TAC_ConstantValue'>
OLD ANNOT: set()
NEW ANNOT: {flag}
--------------LIVE for block 0-------------------
JumpIfZero(flag, tmp.37) {coalesce_into_eax.22, flag}
Copy coalesce_into_eax.22 = 0 {coalesce_into_eax.22, flag}
OLD ANNOT: set()
NEW ANNOT: {flag}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy five.31 = tmp.52 {flag, tmp.52, tmp.40} for node 4
Copy four.32 = tmp.53 {tmp.53, flag, tmp.52, tmp.40} for node 4
Copy three.33 = tmp.54 {flag, tmp.40, tmp.54, tmp.52, tmp.53} for node 4
Copy two.34 = tmp.55 {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52} for node 4
Copy one.35 = tmp.56 {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56} for node 4
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: {coalesce_into_eax.22, flag}, JumpIfZero(flag, tmp.37): {coalesce_into_eax.22, flag}} ReachingCopies: {flag}
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): {flag, tmp.39}, Copy coalesce_into_eax.22 = tmp.39: {coalesce_into_eax.22, flag}} ReachingCopies: {flag}
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): {coalesce_into_eax.22, flag}, tmp.40 = 2 * coalesce_into_eax.22: {coalesce_into_eax.22, flag, tmp.40}, tmp.41 = coalesce_into_eax.22 != 10: {flag, tmp.41, tmp.40}, JumpIfZero(tmp.41, tmp.43): {flag, tmp.40}} ReachingCopies: {coalesce_into_eax.22, flag}
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: {flag, tmp.44}, Return tmp.44: {flag}} ReachingCopies: {flag}
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): {flag, tmp.40}, tmp.45 = 32 - tmp.40: {tmp.45, flag, tmp.40}, tmp.46 = 23 - tmp.45: {tmp.46, flag, tmp.40}, tmp.47 = 21 - tmp.46: {flag, tmp.40, tmp.47}, tmp.48 = 19 - tmp.47: {flag, tmp.48, tmp.40}, tmp.49 = 17 - tmp.48: {flag, tmp.40, tmp.49}, tmp.50 = 15 - tmp.49: {flag, tmp.40, tmp.50}, tmp.51 = 13 - tmp.50: {tmp.51, flag, tmp.40}, tmp.52 = 11 - tmp.51: {flag, tmp.52, tmp.40}, Copy five.31 = tmp.52: {flag, tmp.52, tmp.40}, tmp.53 = 24 - tmp.40: {tmp.53, flag, tmp.52, tmp.40}, Copy four.32 = tmp.53: {tmp.53, flag, tmp.52, tmp.40}, tmp.54 = 23 - tmp.40: {flag, tmp.40, tmp.54, tmp.52, tmp.53}, Copy three.33 = tmp.54: {flag, tmp.40, tmp.54, tmp.52, tmp.53}, tmp.55 = 22 - tmp.40: {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52}, Copy two.34 = tmp.55: {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52}, tmp.56 = 21 - tmp.40: {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56}, Copy one.35 = tmp.56: {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56}, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): {flag}, Return 0: {flag}} ReachingCopies: {flag, tmp.40}
EXIT Exit: EXIT {3, 4}
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37), tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0]
NEW LIST [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37), tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy coalesce_into_eax.22 = 0
tmp.39 = id([10])
Label(tmp.37)
tmp.44 = -1
Label(tmp.43)








ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), tmp.53 = 24 - tmp.40: set(), tmp.54 = 23 - tmp.40: set(), tmp.55 = 22 - tmp.40: set(), tmp.56 = 21 - tmp.40: set(), tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), tmp.53 = 24 - tmp.40: set(), tmp.54 = 23 - tmp.40: set(), tmp.55 = 22 - tmp.40: set(), tmp.56 = 21 - tmp.40: set(), tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), tmp.53 = 24 - tmp.40: set(), tmp.54 = 23 - tmp.40: set(), tmp.55 = 22 - tmp.40: set(), tmp.56 = 21 - tmp.40: set(), tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): set()} ReachingCopies: set()
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): set(), Copy coalesce_into_eax.22 = tmp.39: set()} ReachingCopies: set()
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), tmp.53 = 24 - tmp.40: set(), tmp.54 = 23 - tmp.40: set(), tmp.55 = 22 - tmp.40: set(), tmp.56 = 21 - tmp.40: set(), tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------IMAP for block 0-------------------
Copy coalesce_into_eax.22 = 0 set()
<class 'parser.ConstInt'>
JumpIfZero(flag, tmp.37) {Copy coalesce_into_eax.22 = 0}
OLD ANNOT: {Copy coalesce_into_eax.22 = tmp.39, Copy coalesce_into_eax.22 = 0}
NEW ANNOT: {Copy coalesce_into_eax.22 = 0}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.39 = id([10]) {Copy coalesce_into_eax.22 = 0}
Copy coalesce_into_eax.22 = tmp.39 {Copy coalesce_into_eax.22 = 0}
OLD ANNOT: {Copy coalesce_into_eax.22 = tmp.39, Copy coalesce_into_eax.22 = 0}
NEW ANNOT: {Copy coalesce_into_eax.22 = tmp.39}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.37) set()
tmp.40 = 2 * coalesce_into_eax.22 set()
tmp.41 = coalesce_into_eax.22 != 10 set()
JumpIfZero(tmp.41, tmp.43) set()
OLD ANNOT: {Copy coalesce_into_eax.22 = tmp.39, Copy coalesce_into_eax.22 = 0}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
tmp.44 = -1 set()
Return tmp.44 set()
OLD ANNOT: {Copy coalesce_into_eax.22 = tmp.39, Copy coalesce_into_eax.22 = 0}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.43) set()
tmp.45 = 32 - tmp.40 set()
tmp.46 = 23 - tmp.45 set()
tmp.47 = 21 - tmp.46 set()
tmp.48 = 19 - tmp.47 set()
tmp.49 = 17 - tmp.48 set()
tmp.50 = 15 - tmp.49 set()
tmp.51 = 13 - tmp.50 set()
tmp.52 = 11 - tmp.51 set()
tmp.53 = 24 - tmp.40 set()
tmp.54 = 23 - tmp.40 set()
tmp.55 = 22 - tmp.40 set()
tmp.56 = 21 - tmp.40 set()
tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]) set()
Return 0 set()
OLD ANNOT: {Copy coalesce_into_eax.22 = tmp.39, Copy coalesce_into_eax.22 = 0}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: set(), JumpIfZero(flag, tmp.37): {Copy coalesce_into_eax.22 = 0}} ReachingCopies: {Copy coalesce_into_eax.22 = 0}
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): {Copy coalesce_into_eax.22 = 0}, Copy coalesce_into_eax.22 = tmp.39: {Copy coalesce_into_eax.22 = 0}} ReachingCopies: {Copy coalesce_into_eax.22 = tmp.39}
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): set(), tmp.40 = 2 * coalesce_into_eax.22: set(), tmp.41 = coalesce_into_eax.22 != 10: set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: set(), Return tmp.44: set()} ReachingCopies: set()
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): set(), tmp.45 = 32 - tmp.40: set(), tmp.46 = 23 - tmp.45: set(), tmp.47 = 21 - tmp.46: set(), tmp.48 = 19 - tmp.47: set(), tmp.49 = 17 - tmp.48: set(), tmp.50 = 15 - tmp.49: set(), tmp.51 = 13 - tmp.50: set(), tmp.52 = 11 - tmp.51: set(), tmp.53 = 24 - tmp.40: set(), tmp.54 = 23 - tmp.40: set(), tmp.55 = 22 - tmp.40: set(), tmp.56 = 21 - tmp.40: set(), tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
flag flag int InitialVal: InitialList: [c_int(1)] Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
coalesce_into_eax.22 coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>
high_degree.23 high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>
twelve.24 twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>
eleven.25 eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>
ten.26 ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>
nine.27 nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>
eight.28 eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>
seven.29 seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>
six.30 six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>
five.31 five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>
four.32 four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>
three.33 three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>
two.34 two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>
one.35 one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>
--------------LIVE for block 4-------------------
Return 0 {flag}
tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]) {flag}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.56 = 21 - tmp.40 {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56}
tmp.55 = 22 - tmp.40 {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52}
tmp.54 = 23 - tmp.40 {flag, tmp.40, tmp.54, tmp.52, tmp.53}
tmp.53 = 24 - tmp.40 {tmp.53, flag, tmp.52, tmp.40}
tmp.52 = 11 - tmp.51 {flag, tmp.52, tmp.40}
tmp.51 = 13 - tmp.50 {tmp.51, flag, tmp.40}
tmp.50 = 15 - tmp.49 {flag, tmp.40, tmp.50}
tmp.49 = 17 - tmp.48 {flag, tmp.40, tmp.49}
tmp.48 = 19 - tmp.47 {flag, tmp.48, tmp.40}
tmp.47 = 21 - tmp.46 {flag, tmp.40, tmp.47}
tmp.46 = 23 - tmp.45 {tmp.46, flag, tmp.40}
tmp.45 = 32 - tmp.40 {tmp.45, flag, tmp.40}
Label(tmp.43) {flag, tmp.40}
OLD ANNOT: set()
NEW ANNOT: {flag, tmp.40}
--------------LIVE for block 3-------------------
Return tmp.44 {flag}
tmp.44 = -1 {flag, tmp.44}
OLD ANNOT: set()
NEW ANNOT: {flag}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.41, tmp.43) {flag, tmp.40}
tmp.41 = coalesce_into_eax.22 != 10 {flag, tmp.41, tmp.40}
tmp.40 = 2 * coalesce_into_eax.22 {coalesce_into_eax.22, flag, tmp.40}
Label(tmp.37) {coalesce_into_eax.22, flag}
OLD ANNOT: set()
NEW ANNOT: {coalesce_into_eax.22, flag}
--------------LIVE for block 1-------------------
Copy coalesce_into_eax.22 = tmp.39 {coalesce_into_eax.22, flag}
tmp.39 = id([10]) {flag, tmp.39}
<class 'tacGenerator.TAC_ConstantValue'>
OLD ANNOT: set()
NEW ANNOT: {flag}
--------------LIVE for block 0-------------------
JumpIfZero(flag, tmp.37) {coalesce_into_eax.22, flag}
Copy coalesce_into_eax.22 = 0 {coalesce_into_eax.22, flag}
OLD ANNOT: set()
NEW ANNOT: {flag}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy coalesce_into_eax.22 = 0: {coalesce_into_eax.22, flag}, JumpIfZero(flag, tmp.37): {coalesce_into_eax.22, flag}} ReachingCopies: {flag}
1 1: [tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39] Pred: {0} Suc: {2} iMap: {tmp.39 = id([10]): {flag, tmp.39}, Copy coalesce_into_eax.22 = tmp.39: {coalesce_into_eax.22, flag}} ReachingCopies: {flag}
2 2: [Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: {Label(tmp.37): {coalesce_into_eax.22, flag}, tmp.40 = 2 * coalesce_into_eax.22: {coalesce_into_eax.22, flag, tmp.40}, tmp.41 = coalesce_into_eax.22 != 10: {flag, tmp.41, tmp.40}, JumpIfZero(tmp.41, tmp.43): {flag, tmp.40}} ReachingCopies: {coalesce_into_eax.22, flag}
3 3: [tmp.44 = -1, Return tmp.44] Pred: {2} Suc: {EXIT} iMap: {tmp.44 = -1: {flag, tmp.44}, Return tmp.44: {flag}} ReachingCopies: {flag}
4 4: [Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0] Pred: {2} Suc: {EXIT} iMap: {Label(tmp.43): {flag, tmp.40}, tmp.45 = 32 - tmp.40: {tmp.45, flag, tmp.40}, tmp.46 = 23 - tmp.45: {tmp.46, flag, tmp.40}, tmp.47 = 21 - tmp.46: {flag, tmp.40, tmp.47}, tmp.48 = 19 - tmp.47: {flag, tmp.48, tmp.40}, tmp.49 = 17 - tmp.48: {flag, tmp.40, tmp.49}, tmp.50 = 15 - tmp.49: {flag, tmp.40, tmp.50}, tmp.51 = 13 - tmp.50: {tmp.51, flag, tmp.40}, tmp.52 = 11 - tmp.51: {flag, tmp.52, tmp.40}, tmp.53 = 24 - tmp.40: {tmp.53, flag, tmp.52, tmp.40}, tmp.54 = 23 - tmp.40: {flag, tmp.40, tmp.54, tmp.52, tmp.53}, tmp.55 = 22 - tmp.40: {flag, tmp.40, tmp.54, tmp.55, tmp.53, tmp.52}, tmp.56 = 21 - tmp.40: {flag, tmp.54, tmp.55, tmp.53, tmp.52, tmp.56}, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]): {flag}, Return 0: {flag}} ReachingCopies: {flag, tmp.40}
EXIT Exit: EXIT {3, 4}
OPTIMIZING FUNCTION Function: main ([]) instructions:[tmp.64 = target([]), Return tmp.64, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.64 = target([]), Return tmp.64, Return 0]
NEW LIST [tmp.64 = target([]), Return tmp.64, Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.64 = target([])
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.64 = target([]) set()
Return tmp.64 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
flag flag int InitialVal: InitialList: [c_int(1)] Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
coalesce_into_eax.22 coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>
high_degree.23 high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>
twelve.24 twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>
eleven.25 eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>
ten.26 ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>
nine.27 nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>
eight.28 eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>
seven.29 seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>
six.30 six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>
five.31 five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>
four.32 four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>
three.33 three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>
two.34 two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>
one.35 one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>
--------------LIVE for block 0-------------------
Return tmp.64 {flag}
tmp.64 = target([]) {flag, tmp.64}
OLD ANNOT: set()
NEW ANNOT: {flag}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): {flag, tmp.64}, Return tmp.64: {flag}} ReachingCopies: {flag}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.64 = target([]), Return tmp.64]
NEW LIST [tmp.64 = target([]), Return tmp.64]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.64 = target([])


ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.64 = target([]) set()
Return tmp.64 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): set(), Return tmp.64: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
flag flag int InitialVal: InitialList: [c_int(1)] Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
coalesce_into_eax.22 coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>
high_degree.23 high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>
twelve.24 twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>
eleven.25 eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>
ten.26 ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>
nine.27 nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>
eight.28 eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>
seven.29 seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>
six.30 six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>
five.31 five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>
four.32 four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>
three.33 three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>
two.34 two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>
one.35 one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>
tmp.38 tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>
tmp.39 tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>
tmp.42 tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>
tmp.46 tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>
tmp.47 tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>
tmp.50 tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>
tmp.51 tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>
tmp.54 tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>
tmp.55 tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>
tmp.56 tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>
tmp.59 tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>
tmp.60 tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>
tmp.63 tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>
tmp.64 tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>
--------------LIVE for block 0-------------------
Return tmp.64 {flag}
tmp.64 = target([]) {flag, tmp.64}
OLD ANNOT: set()
NEW ANNOT: {flag}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.64 = target([]), Return tmp.64] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.64 = target([]): {flag, tmp.64}, Return tmp.64: {flag}} ReachingCopies: {flag}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
TAC Program:[Function: target ([]) instructions:[Copy coalesce_into_eax.22 = 0, JumpIfZero(flag, tmp.37), tmp.39 = id([10]), Copy coalesce_into_eax.22 = tmp.39, Label(tmp.37), tmp.40 = 2 * coalesce_into_eax.22, tmp.41 = coalesce_into_eax.22 != 10, JumpIfZero(tmp.41, tmp.43), tmp.44 = -1, Return tmp.44, Label(tmp.43), tmp.45 = 32 - tmp.40, tmp.46 = 23 - tmp.45, tmp.47 = 21 - tmp.46, tmp.48 = 19 - tmp.47, tmp.49 = 17 - tmp.48, tmp.50 = 15 - tmp.49, tmp.51 = 13 - tmp.50, tmp.52 = 11 - tmp.51, tmp.53 = 24 - tmp.40, tmp.54 = 23 - tmp.40, tmp.55 = 22 - tmp.40, tmp.56 = 21 - tmp.40, tmp.63 = check_5_ints([tmp.56, tmp.55, tmp.54, tmp.53, tmp.52, 1]), Return 0], Function: main ([]) instructions:[tmp.64 = target([]), Return tmp.64], Global: True flag = [c_int(1)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'flag': flag int InitialVal: InitialList: [c_int(1)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'coalesce_into_eax.22': coalesce_into_eax.22 int <typeChecker.LocalAttributes object at 0x7f3637a86bd0>, 'high_degree.23': high_degree.23 int <typeChecker.LocalAttributes object at 0x7f3637a87050>, 'twelve.24': twelve.24 int <typeChecker.LocalAttributes object at 0x7f3637a87560>, 'eleven.25': eleven.25 int <typeChecker.LocalAttributes object at 0x7f3637a877a0>, 'ten.26': ten.26 int <typeChecker.LocalAttributes object at 0x7f3637a879e0>, 'nine.27': nine.27 int <typeChecker.LocalAttributes object at 0x7f3637a87c20>, 'eight.28': eight.28 int <typeChecker.LocalAttributes object at 0x7f3637a87e60>, 'seven.29': seven.29 int <typeChecker.LocalAttributes object at 0x7f3637a900e0>, 'six.30': six.30 int <typeChecker.LocalAttributes object at 0x7f3637a90320>, 'five.31': five.31 int <typeChecker.LocalAttributes object at 0x7f3637a90560>, 'four.32': four.32 int <typeChecker.LocalAttributes object at 0x7f3637a907a0>, 'three.33': three.33 int <typeChecker.LocalAttributes object at 0x7f3637a909e0>, 'two.34': two.34 int <typeChecker.LocalAttributes object at 0x7f3637a90c20>, 'one.35': one.35 int <typeChecker.LocalAttributes object at 0x7f3637a90e60>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'tmp.36': tmp.36 int <typeChecker.LocalAttributes object at 0x7f3637a91820>, 'tmp.38': tmp.38 int <typeChecker.LocalAttributes object at 0x7f3637a936b0>, 'tmp.39': tmp.39 int <typeChecker.LocalAttributes object at 0x7f3637a935f0>, 'tmp.40': tmp.40 int <typeChecker.LocalAttributes object at 0x7f3637a933b0>, 'tmp.41': tmp.41 int <typeChecker.LocalAttributes object at 0x7f3637a93830>, 'tmp.42': tmp.42 int <typeChecker.LocalAttributes object at 0x7f3637a93320>, 'tmp.44': tmp.44 int <typeChecker.LocalAttributes object at 0x7f3637a93c80>, 'tmp.45': tmp.45 int <typeChecker.LocalAttributes object at 0x7f3637a93d40>, 'tmp.46': tmp.46 int <typeChecker.LocalAttributes object at 0x7f3637a93f20>, 'tmp.47': tmp.47 int <typeChecker.LocalAttributes object at 0x7f3637a9c140>, 'tmp.48': tmp.48 int <typeChecker.LocalAttributes object at 0x7f3637a9c320>, 'tmp.49': tmp.49 int <typeChecker.LocalAttributes object at 0x7f3637a9c560>, 'tmp.50': tmp.50 int <typeChecker.LocalAttributes object at 0x7f3637a9c740>, 'tmp.51': tmp.51 int <typeChecker.LocalAttributes object at 0x7f3637a9c920>, 'tmp.52': tmp.52 int <typeChecker.LocalAttributes object at 0x7f3637a9cb30>, 'tmp.53': tmp.53 int <typeChecker.LocalAttributes object at 0x7f3637a9cd40>, 'tmp.54': tmp.54 int <typeChecker.LocalAttributes object at 0x7f3637a9cf20>, 'tmp.55': tmp.55 int <typeChecker.LocalAttributes object at 0x7f3637a9d100>, 'tmp.56': tmp.56 int <typeChecker.LocalAttributes object at 0x7f3637a9d2e0>, 'tmp.57': tmp.57 int <typeChecker.LocalAttributes object at 0x7f3637a9d5e0>, 'tmp.58': tmp.58 int <typeChecker.LocalAttributes object at 0x7f3637a9d730>, 'tmp.59': tmp.59 int <typeChecker.LocalAttributes object at 0x7f3637a9d880>, 'tmp.60': tmp.60 int <typeChecker.LocalAttributes object at 0x7f3637a9d9d0>, 'tmp.61': tmp.61 int <typeChecker.LocalAttributes object at 0x7f3637a9db20>, 'tmp.62': tmp.62 int <typeChecker.LocalAttributes object at 0x7f3637a9dc70>, 'tmp.63': tmp.63 int <typeChecker.LocalAttributes object at 0x7f3637a9d4c0>, 'tmp.64': tmp.64 int <typeChecker.LocalAttributes object at 0x7f3637a9deb0>}
All Aliased Vars:
 {flag}
IntParams: []
IntDests: [(Longword, Pseudo(tmp.39))]
DoubleDests: []
ReturnInMemory: False
Operand: Imm(10)
IntArgs: [(Longword, <assemblyGenerator.ImmediateOperand object at 0x7f3637a9e000>)]
DoubleArgs: []
StackArgs: []
<class 'parser.IntType'>
IntDests: [(Longword, Pseudo(tmp.63))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.56)
Operand: Pseudo(tmp.55)
Operand: Pseudo(tmp.54)
Operand: Pseudo(tmp.53)
Operand: Pseudo(tmp.52)
Operand: Imm(1)
IntArgs: [(Longword, Pseudo(tmp.56)), (Longword, Pseudo(tmp.55)), (Longword, Pseudo(tmp.54)), (Longword, Pseudo(tmp.53)), (Longword, Pseudo(tmp.52)), (Longword, <assemblyGenerator.ImmediateOperand object at 0x7f36378e2c60>)]
DoubleArgs: []
StackArgs: []
IntParams: []
IntDests: [(Longword, Pseudo(tmp.64))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
ASM Program: [Function target stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(0), Pseudo(coalesce_into_eax.22)), AssType: Longword Cmp(Imm(0), Pseudo(flag)), JmpCC(ConcCodeType.E, tmp.37), AssType: Longword Mov(Imm(10), Reg(DI)), Call(id), AssType: Longword Mov(Reg(AX), Pseudo(tmp.39)), AssType: Longword Mov(Pseudo(tmp.39), Pseudo(coalesce_into_eax.22)), Label(tmp.37), AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)), AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22)), AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), SetCC(ConcCodeType.NE, Pseudo(tmp.41)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43), AssType: Longword Mov(Imm(1), Pseudo(tmp.44)), AssType: Longword Unary(Neg, Pseudo(tmp.44)), AssType: Longword Mov(Pseudo(tmp.44), Reg(AX)), ret, Label(tmp.43), AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), AssType: Longword Mov(Imm(11), Pseudo(tmp.52)), AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52)), AssType: Longword Mov(Imm(24), Pseudo(tmp.53)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53)), AssType: Longword Mov(Imm(23), Pseudo(tmp.54)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54)), AssType: Longword Mov(Imm(22), Pseudo(tmp.55)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55)), AssType: Longword Mov(Imm(21), Pseudo(tmp.56)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56)), AssType: Longword Mov(Pseudo(tmp.56), Reg(DI)), AssType: Longword Mov(Pseudo(tmp.55), Reg(SI)), AssType: Longword Mov(Pseudo(tmp.54), Reg(DX)), AssType: Longword Mov(Pseudo(tmp.53), Reg(CX)), AssType: Longword Mov(Pseudo(tmp.52), Reg(R8d)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Reg(AX), Pseudo(tmp.63)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function main stackOffset: None global: True instructions:[Call(target), AssType: Longword Mov(Reg(AX), Pseudo(tmp.64)), AssType: Longword Mov(Pseudo(tmp.64), Reg(AX)), ret], Static Variable: Global = True Alignment = 4 : flag = [c_int(1)]]
Type Table:
 {}
Backend Symbol Table:
 {'check_one_int': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_5_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet([Reg(DI), Reg(SI), Reg(DX), Reg(CX), Reg(R8d), Reg(R9d)]) DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'id': Defined: False ReturnOnStack: False IntParams: OrderedSet([Reg(DI)]) DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'flag': AssType: Longword IsStatic: True IsConstant: False, 'target': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'coalesce_into_eax.22': AssType: Longword IsStatic: False IsConstant: False, 'high_degree.23': AssType: Longword IsStatic: False IsConstant: False, 'twelve.24': AssType: Longword IsStatic: False IsConstant: False, 'eleven.25': AssType: Longword IsStatic: False IsConstant: False, 'ten.26': AssType: Longword IsStatic: False IsConstant: False, 'nine.27': AssType: Longword IsStatic: False IsConstant: False, 'eight.28': AssType: Longword IsStatic: False IsConstant: False, 'seven.29': AssType: Longword IsStatic: False IsConstant: False, 'six.30': AssType: Longword IsStatic: False IsConstant: False, 'five.31': AssType: Longword IsStatic: False IsConstant: False, 'four.32': AssType: Longword IsStatic: False IsConstant: False, 'three.33': AssType: Longword IsStatic: False IsConstant: False, 'two.34': AssType: Longword IsStatic: False IsConstant: False, 'one.35': AssType: Longword IsStatic: False IsConstant: False, 'main': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'tmp.36': AssType: Longword IsStatic: False IsConstant: False, 'tmp.38': AssType: Longword IsStatic: False IsConstant: False, 'tmp.39': AssType: Longword IsStatic: False IsConstant: False, 'tmp.40': AssType: Longword IsStatic: False IsConstant: False, 'tmp.41': AssType: Longword IsStatic: False IsConstant: False, 'tmp.42': AssType: Longword IsStatic: False IsConstant: False, 'tmp.44': AssType: Longword IsStatic: False IsConstant: False, 'tmp.45': AssType: Longword IsStatic: False IsConstant: False, 'tmp.46': AssType: Longword IsStatic: False IsConstant: False, 'tmp.47': AssType: Longword IsStatic: False IsConstant: False, 'tmp.48': AssType: Longword IsStatic: False IsConstant: False, 'tmp.49': AssType: Longword IsStatic: False IsConstant: False, 'tmp.50': AssType: Longword IsStatic: False IsConstant: False, 'tmp.51': AssType: Longword IsStatic: False IsConstant: False, 'tmp.52': AssType: Longword IsStatic: False IsConstant: False, 'tmp.53': AssType: Longword IsStatic: False IsConstant: False, 'tmp.54': AssType: Longword IsStatic: False IsConstant: False, 'tmp.55': AssType: Longword IsStatic: False IsConstant: False, 'tmp.56': AssType: Longword IsStatic: False IsConstant: False, 'tmp.57': AssType: Longword IsStatic: False IsConstant: False, 'tmp.58': AssType: Longword IsStatic: False IsConstant: False, 'tmp.59': AssType: Longword IsStatic: False IsConstant: False, 'tmp.60': AssType: Longword IsStatic: False IsConstant: False, 'tmp.61': AssType: Longword IsStatic: False IsConstant: False, 'tmp.62': AssType: Longword IsStatic: False IsConstant: False, 'tmp.63': AssType: Longword IsStatic: False IsConstant: False, 'tmp.64': AssType: Longword IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION target
-------------------START COALESCING INTEGER.----------------------
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(0), Pseudo(coalesce_into_eax.22))
AssType: Longword Mov(Imm(10), Reg(DI))
Label(tmp.37)
AssType: Longword Mov(Imm(1), Pseudo(tmp.44))
Label(tmp.43)
-------------LABELS-----------------
tmp.37 2: [Label(tmp.37), AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)), AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22)), AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), SetCC(ConcCodeType.NE, Pseudo(tmp.41)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: set() Suc: set() iMap: [(Label(tmp.37), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), set()), (AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)), set()), (AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set()), (SetCC(ConcCodeType.NE, Pseudo(tmp.41)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
tmp.43 4: [Label(tmp.43), AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), AssType: Longword Mov(Imm(11), Pseudo(tmp.52)), AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52)), AssType: Longword Mov(Imm(24), Pseudo(tmp.53)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53)), AssType: Longword Mov(Imm(23), Pseudo(tmp.54)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54)), AssType: Longword Mov(Imm(22), Pseudo(tmp.55)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55)), AssType: Longword Mov(Imm(21), Pseudo(tmp.56)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56)), AssType: Longword Mov(Pseudo(tmp.56), Reg(DI)), AssType: Longword Mov(Pseudo(tmp.55), Reg(SI)), AssType: Longword Mov(Pseudo(tmp.54), Reg(DX)), AssType: Longword Mov(Pseudo(tmp.53), Reg(CX)), AssType: Longword Mov(Pseudo(tmp.52), Reg(R8d)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Reg(AX), Pseudo(tmp.63)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), set()), (AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), set()), (AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), set()), (AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), set()), (AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), set()), (AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), set()), (AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), set()), (AssType: Longword Mov(Imm(11), Pseudo(tmp.52)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52)), set()), (AssType: Longword Mov(Imm(24), Pseudo(tmp.53)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53)), set()), (AssType: Longword Mov(Imm(23), Pseudo(tmp.54)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54)), set()), (AssType: Longword Mov(Imm(22), Pseudo(tmp.55)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55)), set()), (AssType: Longword Mov(Imm(21), Pseudo(tmp.56)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56)), set()), (AssType: Longword Mov(Pseudo(tmp.56), Reg(DI)), set()), (AssType: Longword Mov(Pseudo(tmp.55), Reg(SI)), set()), (AssType: Longword Mov(Pseudo(tmp.54), Reg(DX)), set()), (AssType: Longword Mov(Pseudo(tmp.53), Reg(CX)), set()), (AssType: Longword Mov(Pseudo(tmp.52), Reg(R8d)), set()), (AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Call(check_5_ints), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.63)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), Pseudo(coalesce_into_eax.22)), AssType: Longword Cmp(Imm(0), Pseudo(flag)), JmpCC(ConcCodeType.E, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Mov(Imm(0), Pseudo(coalesce_into_eax.22)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(flag)), set()), (JmpCC(ConcCodeType.E, tmp.37), set())] ReachingCopies: set()
1 1: [AssType: Longword Mov(Imm(10), Reg(DI)), Call(id), AssType: Longword Mov(Reg(AX), Pseudo(tmp.39)), AssType: Longword Mov(Pseudo(tmp.39), Pseudo(coalesce_into_eax.22))] Pred: {0} Suc: {2} iMap: [(AssType: Longword Mov(Imm(10), Reg(DI)), set()), (Call(id), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.39)), set()), (AssType: Longword Mov(Pseudo(tmp.39), Pseudo(coalesce_into_eax.22)), set())] ReachingCopies: set()
2 2: [Label(tmp.37), AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)), AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22)), AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), SetCC(ConcCodeType.NE, Pseudo(tmp.41)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: [(Label(tmp.37), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), set()), (AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)), set()), (AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set()), (SetCC(ConcCodeType.NE, Pseudo(tmp.41)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
3 3: [AssType: Longword Mov(Imm(1), Pseudo(tmp.44)), AssType: Longword Unary(Neg, Pseudo(tmp.44)), AssType: Longword Mov(Pseudo(tmp.44), Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.44)), set()), (AssType: Longword Unary(Neg, Pseudo(tmp.44)), set()), (AssType: Longword Mov(Pseudo(tmp.44), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
4 4: [Label(tmp.43), AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), AssType: Longword Mov(Imm(11), Pseudo(tmp.52)), AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52)), AssType: Longword Mov(Imm(24), Pseudo(tmp.53)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53)), AssType: Longword Mov(Imm(23), Pseudo(tmp.54)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54)), AssType: Longword Mov(Imm(22), Pseudo(tmp.55)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55)), AssType: Longword Mov(Imm(21), Pseudo(tmp.56)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56)), AssType: Longword Mov(Pseudo(tmp.56), Reg(DI)), AssType: Longword Mov(Pseudo(tmp.55), Reg(SI)), AssType: Longword Mov(Pseudo(tmp.54), Reg(DX)), AssType: Longword Mov(Pseudo(tmp.53), Reg(CX)), AssType: Longword Mov(Pseudo(tmp.52), Reg(R8d)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Reg(AX), Pseudo(tmp.63)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), set()), (AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), set()), (AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), set()), (AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), set()), (AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), set()), (AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), set()), (AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), set()), (AssType: Longword Mov(Imm(11), Pseudo(tmp.52)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52)), set()), (AssType: Longword Mov(Imm(24), Pseudo(tmp.53)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53)), set()), (AssType: Longword Mov(Imm(23), Pseudo(tmp.54)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54)), set()), (AssType: Longword Mov(Imm(22), Pseudo(tmp.55)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55)), set()), (AssType: Longword Mov(Imm(21), Pseudo(tmp.56)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56)), set()), (AssType: Longword Mov(Pseudo(tmp.56), Reg(DI)), set()), (AssType: Longword Mov(Pseudo(tmp.55), Reg(SI)), set()), (AssType: Longword Mov(Pseudo(tmp.54), Reg(DX)), set()), (AssType: Longword Mov(Pseudo(tmp.53), Reg(CX)), set()), (AssType: Longword Mov(Pseudo(tmp.52), Reg(R8d)), set()), (AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Call(check_5_ints), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.63)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------LIVE for block 4-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.63)) set()
Call(check_5_ints) {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(R9d), Reg(DX)}
AssType: Longword Mov(Pseudo(tmp.52), Reg(R8d)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(DX)}
AssType: Longword Mov(Pseudo(tmp.53), Reg(CX)) {Reg(CX), Reg(DI), Reg(SI), Pseudo(tmp.52), Reg(DX)}
AssType: Longword Mov(Pseudo(tmp.54), Reg(DX)) {Reg(DI), Reg(SI), Pseudo(tmp.52), Pseudo(tmp.53), Reg(DX)}
AssType: Longword Mov(Pseudo(tmp.55), Reg(SI)) {Reg(DI), Reg(SI), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.53)}
AssType: Longword Mov(Pseudo(tmp.56), Reg(DI)) {Reg(DI), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.53), Pseudo(tmp.55)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56)) {Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.53), Pseudo(tmp.55), Pseudo(tmp.56)}
AssType: Longword Mov(Imm(21), Pseudo(tmp.56)) {Pseudo(tmp.40), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.53), Pseudo(tmp.55), Pseudo(tmp.56)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55)) {Pseudo(tmp.40), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.53), Pseudo(tmp.55)}
AssType: Longword Mov(Imm(22), Pseudo(tmp.55)) {Pseudo(tmp.40), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.53), Pseudo(tmp.55)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54)) {Pseudo(tmp.53), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(23), Pseudo(tmp.54)) {Pseudo(tmp.53), Pseudo(tmp.54), Pseudo(tmp.52), Pseudo(tmp.40)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53)) {Pseudo(tmp.53), Pseudo(tmp.52), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(24), Pseudo(tmp.53)) {Pseudo(tmp.53), Pseudo(tmp.52), Pseudo(tmp.40)}
AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52)) {Pseudo(tmp.52), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(11), Pseudo(tmp.52)) {Pseudo(tmp.51), Pseudo(tmp.52), Pseudo(tmp.40)}
AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)) {Pseudo(tmp.51), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(13), Pseudo(tmp.51)) {Pseudo(tmp.51), Pseudo(tmp.40), Pseudo(tmp.50)}
AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)) {Pseudo(tmp.40), Pseudo(tmp.50)}
AssType: Longword Mov(Imm(15), Pseudo(tmp.50)) {Pseudo(tmp.40), Pseudo(tmp.50), Pseudo(tmp.49)}
AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)) {Pseudo(tmp.40), Pseudo(tmp.49)}
AssType: Longword Mov(Imm(17), Pseudo(tmp.49)) {Pseudo(tmp.48), Pseudo(tmp.40), Pseudo(tmp.49)}
AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)) {Pseudo(tmp.48), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(19), Pseudo(tmp.48)) {Pseudo(tmp.48), Pseudo(tmp.40), Pseudo(tmp.47)}
AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)) {Pseudo(tmp.40), Pseudo(tmp.47)}
AssType: Longword Mov(Imm(21), Pseudo(tmp.47)) {Pseudo(tmp.46), Pseudo(tmp.40), Pseudo(tmp.47)}
AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)) {Pseudo(tmp.46), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(23), Pseudo(tmp.46)) {Pseudo(tmp.45), Pseudo(tmp.46), Pseudo(tmp.40)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(32), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.40)}
Label(tmp.43) {Pseudo(tmp.40)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.40)}
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.44), Reg(AX)) {Reg(AX)}
AssType: Longword Unary(Neg, Pseudo(tmp.44)) {Pseudo(tmp.44)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.44)) {Pseudo(tmp.44)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.40)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.40)}
SetCC(ConcCodeType.NE, Pseudo(tmp.41)) {Pseudo(tmp.41), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.40)}
AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22)) {Pseudo(tmp.40)}
AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)) {Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(2), Pseudo(tmp.40)) {Pseudo(coalesce_into_eax.22), Pseudo(tmp.40)}
Label(tmp.37) {Pseudo(coalesce_into_eax.22)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(coalesce_into_eax.22)}
--------------LIVE for block 1-------------------
AssType: Longword Mov(Pseudo(tmp.39), Pseudo(coalesce_into_eax.22)) {Pseudo(coalesce_into_eax.22)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.39)) {Pseudo(tmp.39)}
Call(id) {Reg(AX)}
AssType: Longword Mov(Imm(10), Reg(DI)) {Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.37) {Pseudo(coalesce_into_eax.22)}
AssType: Longword Cmp(Imm(0), Pseudo(flag)) {Pseudo(coalesce_into_eax.22)}
AssType: Longword Mov(Imm(0), Pseudo(coalesce_into_eax.22)) {Pseudo(coalesce_into_eax.22), Pseudo(flag)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(R13d)
        Reg(R8d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.52)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Reg(R15d)
        Reg(R12d)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(R14d)
        Reg(SI)
        Reg(R9d)
        Pseudo(tmp.54)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Reg(R15d)
        Reg(R12d)
        Pseudo(tmp.55)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.54)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R13d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Pseudo(coalesce_into_eax.22)
    Pseudo(coalesce_into_eax.22) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
Pseudo(tmp.39)
    Pseudo(tmp.39) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.40)
    Pseudo(tmp.40) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.47)
        Pseudo(tmp.45)
        Pseudo(tmp.51)
        Pseudo(tmp.48)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Pseudo(tmp.54)
        Pseudo(tmp.55)
        Pseudo(tmp.56)
        Pseudo(coalesce_into_eax.22)
        Pseudo(tmp.46)
        Pseudo(tmp.49)
        Pseudo(tmp.41)
        Pseudo(tmp.50)
Pseudo(tmp.41)
    Pseudo(tmp.41) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
Pseudo(tmp.44)
    Pseudo(tmp.44) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.45)
    Pseudo(tmp.45) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.46)
        Pseudo(tmp.40)
Pseudo(tmp.46)
    Pseudo(tmp.46) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.45)
        Pseudo(tmp.40)
        Pseudo(tmp.47)
Pseudo(tmp.47)
    Pseudo(tmp.47) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.46)
        Pseudo(tmp.48)
        Pseudo(tmp.40)
Pseudo(tmp.48)
    Pseudo(tmp.48) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
        Pseudo(tmp.47)
        Pseudo(tmp.49)
Pseudo(tmp.49)
    Pseudo(tmp.49) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.48)
        Pseudo(tmp.40)
        Pseudo(tmp.50)
Pseudo(tmp.50)
    Pseudo(tmp.50) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.51)
        Pseudo(tmp.40)
        Pseudo(tmp.49)
Pseudo(tmp.51)
    Pseudo(tmp.51) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.52)
        Pseudo(tmp.40)
        Pseudo(tmp.50)
Pseudo(tmp.52)
    Pseudo(tmp.52) spillCost: 0.0 color: None pruned: False
        Reg(CX)
        Pseudo(tmp.40)
        Reg(DI)
        Reg(SI)
        Pseudo(tmp.51)
        Pseudo(tmp.54)
        Pseudo(tmp.55)
        Pseudo(tmp.53)
        Pseudo(tmp.56)
        Reg(DX)
Pseudo(tmp.53)
    Pseudo(tmp.53) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
        Reg(DI)
        Reg(SI)
        Pseudo(tmp.54)
        Pseudo(tmp.52)
        Pseudo(tmp.55)
        Pseudo(tmp.56)
        Reg(DX)
Pseudo(tmp.54)
    Pseudo(tmp.54) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
        Reg(DI)
        Reg(SI)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Pseudo(tmp.55)
        Pseudo(tmp.56)
Pseudo(tmp.55)
    Pseudo(tmp.55) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
        Reg(DI)
        Pseudo(tmp.54)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Pseudo(tmp.56)
Pseudo(tmp.56)
    Pseudo(tmp.56) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
        Pseudo(tmp.54)
        Pseudo(tmp.52)
        Pseudo(tmp.53)
        Pseudo(tmp.55)
Pseudo(tmp.63)
    Pseudo(tmp.63) spillCost: 0.0 color: None pruned: False
COALESCING Pseudo(tmp.39) INTO Reg(AX)
COALESCING Pseudo(coalesce_into_eax.22) INTO Reg(AX)
COALESCING Pseudo(tmp.44) INTO Reg(AX)
COALESCING Pseudo(tmp.56) INTO Reg(DI)
COALESCING Pseudo(tmp.55) INTO Reg(SI)
COALESCING Pseudo(tmp.54) INTO Reg(DX)
COALESCING Pseudo(tmp.53) INTO Reg(CX)
COALESCING Pseudo(tmp.52) INTO Reg(R8d)
COALESCING Pseudo(tmp.63) INTO Reg(AX)
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(0), Reg(AX))
AssType: Longword Mov(Imm(10), Reg(DI))
Label(tmp.37)
AssType: Longword Mov(Imm(1), Reg(AX))
Label(tmp.43)
-------------LABELS-----------------
tmp.37 2: [Label(tmp.37), AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), AssType: Longword Binary(Mult, Reg(AX), Pseudo(tmp.40)), AssType: Longword Cmp(Imm(10), Reg(AX)), AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), SetCC(ConcCodeType.NE, Pseudo(tmp.41)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: set() Suc: set() iMap: [(Label(tmp.37), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), set()), (AssType: Longword Binary(Mult, Reg(AX), Pseudo(tmp.40)), set()), (AssType: Longword Cmp(Imm(10), Reg(AX)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set()), (SetCC(ConcCodeType.NE, Pseudo(tmp.41)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
tmp.43 4: [Label(tmp.43), AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), AssType: Longword Mov(Imm(11), Reg(R8d)), AssType: Longword Binary(Sub, Pseudo(tmp.51), Reg(R8d)), AssType: Longword Mov(Imm(24), Reg(CX)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(CX)), AssType: Longword Mov(Imm(23), Reg(DX)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DX)), AssType: Longword Mov(Imm(22), Reg(SI)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(SI)), AssType: Longword Mov(Imm(21), Reg(DI)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), set()), (AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), set()), (AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), set()), (AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), set()), (AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), set()), (AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), set()), (AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), set()), (AssType: Longword Mov(Imm(11), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.51), Reg(R8d)), set()), (AssType: Longword Mov(Imm(24), Reg(CX)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(CX)), set()), (AssType: Longword Mov(Imm(23), Reg(DX)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DX)), set()), (AssType: Longword Mov(Imm(22), Reg(SI)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(SI)), set()), (AssType: Longword Mov(Imm(21), Reg(DI)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DI)), set()), (AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Call(check_5_ints), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), Reg(AX)), AssType: Longword Cmp(Imm(0), Pseudo(flag)), JmpCC(ConcCodeType.E, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Mov(Imm(0), Reg(AX)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(flag)), set()), (JmpCC(ConcCodeType.E, tmp.37), set())] ReachingCopies: set()
1 1: [AssType: Longword Mov(Imm(10), Reg(DI)), Call(id)] Pred: {0} Suc: {2} iMap: [(AssType: Longword Mov(Imm(10), Reg(DI)), set()), (Call(id), set())] ReachingCopies: set()
2 2: [Label(tmp.37), AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), AssType: Longword Binary(Mult, Reg(AX), Pseudo(tmp.40)), AssType: Longword Cmp(Imm(10), Reg(AX)), AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), SetCC(ConcCodeType.NE, Pseudo(tmp.41)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: [(Label(tmp.37), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.40)), set()), (AssType: Longword Binary(Mult, Reg(AX), Pseudo(tmp.40)), set()), (AssType: Longword Cmp(Imm(10), Reg(AX)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set()), (SetCC(ConcCodeType.NE, Pseudo(tmp.41)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
3 3: [AssType: Longword Mov(Imm(1), Reg(AX)), AssType: Longword Unary(Neg, Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Reg(AX)), set()), (AssType: Longword Unary(Neg, Reg(AX)), set()), (ret, set())] ReachingCopies: set()
4 4: [Label(tmp.43), AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), AssType: Longword Mov(Imm(11), Reg(R8d)), AssType: Longword Binary(Sub, Pseudo(tmp.51), Reg(R8d)), AssType: Longword Mov(Imm(24), Reg(CX)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(CX)), AssType: Longword Mov(Imm(23), Reg(DX)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DX)), AssType: Longword Mov(Imm(22), Reg(SI)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(SI)), AssType: Longword Mov(Imm(21), Reg(DI)), AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(32), Pseudo(tmp.45)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)), set()), (AssType: Longword Mov(Imm(23), Pseudo(tmp.46)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)), set()), (AssType: Longword Mov(Imm(21), Pseudo(tmp.47)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)), set()), (AssType: Longword Mov(Imm(19), Pseudo(tmp.48)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)), set()), (AssType: Longword Mov(Imm(17), Pseudo(tmp.49)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)), set()), (AssType: Longword Mov(Imm(15), Pseudo(tmp.50)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)), set()), (AssType: Longword Mov(Imm(13), Pseudo(tmp.51)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)), set()), (AssType: Longword Mov(Imm(11), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.51), Reg(R8d)), set()), (AssType: Longword Mov(Imm(24), Reg(CX)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(CX)), set()), (AssType: Longword Mov(Imm(23), Reg(DX)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DX)), set()), (AssType: Longword Mov(Imm(22), Reg(SI)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(SI)), set()), (AssType: Longword Mov(Imm(21), Reg(DI)), set()), (AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DI)), set()), (AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Call(check_5_ints), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------LIVE for block 4-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Call(check_5_ints) set()
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(R9d), Reg(DX)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DI)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(DX)}
AssType: Longword Mov(Imm(21), Reg(DI)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Pseudo(tmp.40), Reg(DX)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(SI)) {Reg(CX), Reg(R8d), Pseudo(tmp.40), Reg(SI), Reg(DX)}
AssType: Longword Mov(Imm(22), Reg(SI)) {Reg(CX), Reg(R8d), Pseudo(tmp.40), Reg(SI), Reg(DX)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DX)) {Reg(CX), Pseudo(tmp.40), Reg(R8d), Reg(DX)}
AssType: Longword Mov(Imm(23), Reg(DX)) {Reg(CX), Pseudo(tmp.40), Reg(R8d), Reg(DX)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(CX)) {Reg(CX), Pseudo(tmp.40), Reg(R8d)}
AssType: Longword Mov(Imm(24), Reg(CX)) {Reg(CX), Pseudo(tmp.40), Reg(R8d)}
AssType: Longword Binary(Sub, Pseudo(tmp.51), Reg(R8d)) {Reg(R8d), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(11), Reg(R8d)) {Pseudo(tmp.51), Reg(R8d), Pseudo(tmp.40)}
AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51)) {Pseudo(tmp.51), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(13), Pseudo(tmp.51)) {Pseudo(tmp.51), Pseudo(tmp.40), Pseudo(tmp.50)}
AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50)) {Pseudo(tmp.40), Pseudo(tmp.50)}
AssType: Longword Mov(Imm(15), Pseudo(tmp.50)) {Pseudo(tmp.40), Pseudo(tmp.50), Pseudo(tmp.49)}
AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49)) {Pseudo(tmp.40), Pseudo(tmp.49)}
AssType: Longword Mov(Imm(17), Pseudo(tmp.49)) {Pseudo(tmp.48), Pseudo(tmp.40), Pseudo(tmp.49)}
AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48)) {Pseudo(tmp.48), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(19), Pseudo(tmp.48)) {Pseudo(tmp.48), Pseudo(tmp.40), Pseudo(tmp.47)}
AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47)) {Pseudo(tmp.40), Pseudo(tmp.47)}
AssType: Longword Mov(Imm(21), Pseudo(tmp.47)) {Pseudo(tmp.46), Pseudo(tmp.40), Pseudo(tmp.47)}
AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46)) {Pseudo(tmp.46), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(23), Pseudo(tmp.46)) {Pseudo(tmp.45), Pseudo(tmp.46), Pseudo(tmp.40)}
AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(32), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.40)}
Label(tmp.43) {Pseudo(tmp.40)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.40)}
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Unary(Neg, Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.40)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.40)}
SetCC(ConcCodeType.NE, Pseudo(tmp.41)) {Pseudo(tmp.41), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.40)}
AssType: Longword Cmp(Imm(10), Reg(AX)) {Pseudo(tmp.40)}
AssType: Longword Binary(Mult, Reg(AX), Pseudo(tmp.40)) {Reg(AX), Pseudo(tmp.40)}
AssType: Longword Mov(Imm(2), Pseudo(tmp.40)) {Reg(AX), Pseudo(tmp.40)}
Label(tmp.37) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX)}
--------------LIVE for block 1-------------------
Call(id) {Reg(AX)}
AssType: Longword Mov(Imm(10), Reg(DI)) {Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.37) {Reg(AX)}
AssType: Longword Cmp(Imm(0), Pseudo(flag)) {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX), Pseudo(flag)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.40)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(R13d)
        Reg(R8d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.40)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.40)
        Reg(R15d)
        Reg(R12d)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(R14d)
        Reg(SI)
        Reg(R9d)
        Pseudo(tmp.40)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.40)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Pseudo(tmp.40)
        Pseudo(tmp.51)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R13d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Pseudo(tmp.40)
    Pseudo(tmp.40) spillCost: 0.0 color: None pruned: False
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Pseudo(tmp.47)
        Pseudo(tmp.45)
        Pseudo(tmp.51)
        Pseudo(tmp.48)
        Reg(DX)
        Reg(AX)
        Pseudo(tmp.46)
        Reg(R8d)
        Pseudo(tmp.49)
        Pseudo(tmp.41)
        Pseudo(tmp.50)
Pseudo(tmp.41)
    Pseudo(tmp.41) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
Pseudo(tmp.45)
    Pseudo(tmp.45) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.46)
        Pseudo(tmp.40)
Pseudo(tmp.46)
    Pseudo(tmp.46) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.45)
        Pseudo(tmp.40)
        Pseudo(tmp.47)
Pseudo(tmp.47)
    Pseudo(tmp.47) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.46)
        Pseudo(tmp.48)
        Pseudo(tmp.40)
Pseudo(tmp.48)
    Pseudo(tmp.48) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.40)
        Pseudo(tmp.47)
        Pseudo(tmp.49)
Pseudo(tmp.49)
    Pseudo(tmp.49) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.48)
        Pseudo(tmp.40)
        Pseudo(tmp.50)
Pseudo(tmp.50)
    Pseudo(tmp.50) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.51)
        Pseudo(tmp.40)
        Pseudo(tmp.49)
Pseudo(tmp.51)
    Pseudo(tmp.51) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.40)
        Pseudo(tmp.50)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.40) Pseudo(tmp.40) spillCost: 7.0 color: None pruned: False
Pseudo(tmp.41) Pseudo(tmp.41) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.45) Pseudo(tmp.45) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.46) Pseudo(tmp.46) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.47) Pseudo(tmp.47) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.48) Pseudo(tmp.48) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.49) Pseudo(tmp.49) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.50) Pseudo(tmp.50) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.51) Pseudo(tmp.51) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378daf90>, <RegisterAllocation.Node object at 0x7f36378daf60>, <RegisterAllocation.Node object at 0x7f36378f31a0>, <RegisterAllocation.Node object at 0x7f36378f3680>, <RegisterAllocation.Node object at 0x7f36378f3320>, <RegisterAllocation.Node object at 0x7f36378f3dd0>, <RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378daf90>, <RegisterAllocation.Node object at 0x7f36378f31a0>, <RegisterAllocation.Node object at 0x7f36378f3680>, <RegisterAllocation.Node object at 0x7f36378f3320>, <RegisterAllocation.Node object at 0x7f36378f3dd0>, <RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f31a0>, <RegisterAllocation.Node object at 0x7f36378f3680>, <RegisterAllocation.Node object at 0x7f36378f3320>, <RegisterAllocation.Node object at 0x7f36378f3dd0>, <RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f3680>, <RegisterAllocation.Node object at 0x7f36378f3320>, <RegisterAllocation.Node object at 0x7f36378f3dd0>, <RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f3320>, <RegisterAllocation.Node object at 0x7f36378f3dd0>, <RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f3dd0>, <RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f3920>, <RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637901790>, <RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902030>, <RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637900ce0>, <RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902ae0>, <RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902b70>, <RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9730>, <RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f96a0>, <RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9760>, <RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9790>, <RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f97c0>, <RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f97f0>, <RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9820>, <RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9850>, <RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9700>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 8 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 3 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 7 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 6 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 5 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 4 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.40) Pseudo(tmp.40) spillCost: 7.0 color: 3 pruned: False
Pseudo(tmp.41) Pseudo(tmp.41) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.45) Pseudo(tmp.45) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.46) Pseudo(tmp.46) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.47) Pseudo(tmp.47) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.48) Pseudo(tmp.48) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.49) Pseudo(tmp.49) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.50) Pseudo(tmp.50) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.51) Pseudo(tmp.51) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{8: Reg(AX), 3: Reg(BX), 7: Reg(CX), 6: Reg(DX), 5: Reg(DI), 4: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for target: {Reg(BX)}
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.40): Reg(BX), Pseudo(tmp.41): Reg(R9d), Pseudo(tmp.45): Reg(R9d), Pseudo(tmp.46): Reg(R8d), Pseudo(tmp.47): Reg(R9d), Pseudo(tmp.48): Reg(R8d), Pseudo(tmp.49): Reg(R9d), Pseudo(tmp.50): Reg(R8d), Pseudo(tmp.51): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(0), Reg(AX))             AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Pseudo(coalesce_into_eax.22))
AssType: Longword Cmp(Imm(0), Pseudo(flag))        AssType: Longword Cmp(Imm(0), Pseudo(flag))                            AssType: Longword Cmp(Imm(0), Pseudo(flag))
JmpCC(ConcCodeType.E, tmp.37)                      JmpCC(ConcCodeType.E, tmp.37)                                          JmpCC(ConcCodeType.E, tmp.37)
AssType: Longword Mov(Imm(10), Reg(DI))            AssType: Longword Mov(Imm(10), Reg(DI))                                AssType: Longword Mov(Imm(10), Reg(DI))
Call(id)                                           Call(id)                                                               Call(id)
Label(tmp.37)                                      Label(tmp.37)                                                          AssType: Longword Mov(Reg(AX), Pseudo(tmp.39))
AssType: Longword Mov(Imm(2), Reg(BX))             AssType: Longword Mov(Imm(2), Pseudo(tmp.40))                          AssType: Longword Mov(Pseudo(tmp.39), Pseudo(coalesce_into_eax.22))
AssType: Longword Binary(Mult, Reg(AX), Reg(BX))   AssType: Longword Binary(Mult, Reg(AX), Pseudo(tmp.40))                Label(tmp.37)
AssType: Longword Cmp(Imm(10), Reg(AX))            AssType: Longword Cmp(Imm(10), Reg(AX))                                AssType: Longword Mov(Imm(2), Pseudo(tmp.40))
AssType: Longword Mov(Imm(0), Reg(R9d))            AssType: Longword Mov(Imm(0), Pseudo(tmp.41))                          AssType: Longword Binary(Mult, Pseudo(coalesce_into_eax.22), Pseudo(tmp.40))
SetCC(ConcCodeType.NE, Reg(R9d))                   SetCC(ConcCodeType.NE, Pseudo(tmp.41))                                 AssType: Longword Cmp(Imm(10), Pseudo(coalesce_into_eax.22))
AssType: Longword Cmp(Imm(0), Reg(R9d))            AssType: Longword Cmp(Imm(0), Pseudo(tmp.41))                          AssType: Longword Mov(Imm(0), Pseudo(tmp.41))
JmpCC(ConcCodeType.E, tmp.43)                      JmpCC(ConcCodeType.E, tmp.43)                                          SetCC(ConcCodeType.NE, Pseudo(tmp.41))
AssType: Longword Mov(Imm(1), Reg(AX))             AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Cmp(Imm(0), Pseudo(tmp.41))
AssType: Longword Unary(Neg, Reg(AX))              AssType: Longword Unary(Neg, Reg(AX))                                  JmpCC(ConcCodeType.E, tmp.43)
ret                                                ret                                                                    AssType: Longword Mov(Imm(1), Pseudo(tmp.44))
Label(tmp.43)                                      Label(tmp.43)                                                          AssType: Longword Unary(Neg, Pseudo(tmp.44))
AssType: Longword Mov(Imm(32), Reg(R9d))           AssType: Longword Mov(Imm(32), Pseudo(tmp.45))                         AssType: Longword Mov(Pseudo(tmp.44), Reg(AX))
AssType: Longword Binary(Sub, Reg(BX), Reg(R9d))   AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45))          ret
AssType: Longword Mov(Imm(23), Reg(R8d))           AssType: Longword Mov(Imm(23), Pseudo(tmp.46))                         Label(tmp.43)
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))  AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46))          AssType: Longword Mov(Imm(32), Pseudo(tmp.45))
AssType: Longword Mov(Imm(21), Reg(R9d))           AssType: Longword Mov(Imm(21), Pseudo(tmp.47))                         AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.45))
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))  AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47))          AssType: Longword Mov(Imm(23), Pseudo(tmp.46))
AssType: Longword Mov(Imm(19), Reg(R8d))           AssType: Longword Mov(Imm(19), Pseudo(tmp.48))                         AssType: Longword Binary(Sub, Pseudo(tmp.45), Pseudo(tmp.46))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))  AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48))          AssType: Longword Mov(Imm(21), Pseudo(tmp.47))
AssType: Longword Mov(Imm(17), Reg(R9d))           AssType: Longword Mov(Imm(17), Pseudo(tmp.49))                         AssType: Longword Binary(Sub, Pseudo(tmp.46), Pseudo(tmp.47))
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))  AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49))          AssType: Longword Mov(Imm(19), Pseudo(tmp.48))
AssType: Longword Mov(Imm(15), Reg(R8d))           AssType: Longword Mov(Imm(15), Pseudo(tmp.50))                         AssType: Longword Binary(Sub, Pseudo(tmp.47), Pseudo(tmp.48))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))  AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50))          AssType: Longword Mov(Imm(17), Pseudo(tmp.49))
AssType: Longword Mov(Imm(13), Reg(R9d))           AssType: Longword Mov(Imm(13), Pseudo(tmp.51))                         AssType: Longword Binary(Sub, Pseudo(tmp.48), Pseudo(tmp.49))
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))  AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51))          AssType: Longword Mov(Imm(15), Pseudo(tmp.50))
AssType: Longword Mov(Imm(11), Reg(R8d))           AssType: Longword Mov(Imm(11), Reg(R8d))                               AssType: Longword Binary(Sub, Pseudo(tmp.49), Pseudo(tmp.50))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))  AssType: Longword Binary(Sub, Pseudo(tmp.51), Reg(R8d))                AssType: Longword Mov(Imm(13), Pseudo(tmp.51))
AssType: Longword Mov(Imm(24), Reg(CX))            AssType: Longword Mov(Imm(24), Reg(CX))                                AssType: Longword Binary(Sub, Pseudo(tmp.50), Pseudo(tmp.51))
AssType: Longword Binary(Sub, Reg(BX), Reg(CX))    AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(CX))                 AssType: Longword Mov(Imm(11), Pseudo(tmp.52))
AssType: Longword Mov(Imm(23), Reg(DX))            AssType: Longword Mov(Imm(23), Reg(DX))                                AssType: Longword Binary(Sub, Pseudo(tmp.51), Pseudo(tmp.52))
AssType: Longword Binary(Sub, Reg(BX), Reg(DX))    AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DX))                 AssType: Longword Mov(Imm(24), Pseudo(tmp.53))
AssType: Longword Mov(Imm(22), Reg(SI))            AssType: Longword Mov(Imm(22), Reg(SI))                                AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.53))
AssType: Longword Binary(Sub, Reg(BX), Reg(SI))    AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(SI))                 AssType: Longword Mov(Imm(23), Pseudo(tmp.54))
AssType: Longword Mov(Imm(21), Reg(DI))            AssType: Longword Mov(Imm(21), Reg(DI))                                AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.54))
AssType: Longword Binary(Sub, Reg(BX), Reg(DI))    AssType: Longword Binary(Sub, Pseudo(tmp.40), Reg(DI))                 AssType: Longword Mov(Imm(22), Pseudo(tmp.55))
AssType: Longword Mov(Imm(1), Reg(R9d))            AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.55))
Call(check_5_ints)                                 Call(check_5_ints)                                                     AssType: Longword Mov(Imm(21), Pseudo(tmp.56))
AssType: Longword Mov(Imm(0), Reg(AX))             AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Binary(Sub, Pseudo(tmp.40), Pseudo(tmp.56))
ret                                                ret                                                                    AssType: Longword Mov(Pseudo(tmp.56), Reg(DI))
-------------------START COALESCING DOUBLE.----------------------
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(0), Reg(AX))
AssType: Longword Mov(Imm(10), Reg(DI))
Label(tmp.37)
AssType: Longword Mov(Imm(1), Reg(AX))
Label(tmp.43)
-------------LABELS-----------------
tmp.37 2: [Label(tmp.37), AssType: Longword Mov(Imm(2), Reg(BX)), AssType: Longword Binary(Mult, Reg(AX), Reg(BX)), AssType: Longword Cmp(Imm(10), Reg(AX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.NE, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.43)] Pred: set() Suc: set() iMap: [(Label(tmp.37), set()), (AssType: Longword Mov(Imm(2), Reg(BX)), set()), (AssType: Longword Binary(Mult, Reg(AX), Reg(BX)), set()), (AssType: Longword Cmp(Imm(10), Reg(AX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.NE, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
tmp.43 4: [Label(tmp.43), AssType: Longword Mov(Imm(32), Reg(R9d)), AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)), AssType: Longword Mov(Imm(23), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(21), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(19), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(17), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(15), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(13), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(11), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(24), Reg(CX)), AssType: Longword Binary(Sub, Reg(BX), Reg(CX)), AssType: Longword Mov(Imm(23), Reg(DX)), AssType: Longword Binary(Sub, Reg(BX), Reg(DX)), AssType: Longword Mov(Imm(22), Reg(SI)), AssType: Longword Binary(Sub, Reg(BX), Reg(SI)), AssType: Longword Mov(Imm(21), Reg(DI)), AssType: Longword Binary(Sub, Reg(BX), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(32), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)), set()), (AssType: Longword Mov(Imm(23), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(21), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), set()), (AssType: Longword Mov(Imm(19), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(17), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), set()), (AssType: Longword Mov(Imm(15), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(13), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), set()), (AssType: Longword Mov(Imm(11), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(24), Reg(CX)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(CX)), set()), (AssType: Longword Mov(Imm(23), Reg(DX)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(DX)), set()), (AssType: Longword Mov(Imm(22), Reg(SI)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(SI)), set()), (AssType: Longword Mov(Imm(21), Reg(DI)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(DI)), set()), (AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Call(check_5_ints), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), Reg(AX)), AssType: Longword Cmp(Imm(0), Pseudo(flag)), JmpCC(ConcCodeType.E, tmp.37)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Mov(Imm(0), Reg(AX)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(flag)), set()), (JmpCC(ConcCodeType.E, tmp.37), set())] ReachingCopies: set()
1 1: [AssType: Longword Mov(Imm(10), Reg(DI)), Call(id)] Pred: {0} Suc: {2} iMap: [(AssType: Longword Mov(Imm(10), Reg(DI)), set()), (Call(id), set())] ReachingCopies: set()
2 2: [Label(tmp.37), AssType: Longword Mov(Imm(2), Reg(BX)), AssType: Longword Binary(Mult, Reg(AX), Reg(BX)), AssType: Longword Cmp(Imm(10), Reg(AX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.NE, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {0, 1} Suc: {3, 4} iMap: [(Label(tmp.37), set()), (AssType: Longword Mov(Imm(2), Reg(BX)), set()), (AssType: Longword Binary(Mult, Reg(AX), Reg(BX)), set()), (AssType: Longword Cmp(Imm(10), Reg(AX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.NE, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
3 3: [AssType: Longword Mov(Imm(1), Reg(AX)), AssType: Longword Unary(Neg, Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Reg(AX)), set()), (AssType: Longword Unary(Neg, Reg(AX)), set()), (ret, set())] ReachingCopies: set()
4 4: [Label(tmp.43), AssType: Longword Mov(Imm(32), Reg(R9d)), AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)), AssType: Longword Mov(Imm(23), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(21), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(19), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(17), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(15), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(13), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(11), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(24), Reg(CX)), AssType: Longword Binary(Sub, Reg(BX), Reg(CX)), AssType: Longword Mov(Imm(23), Reg(DX)), AssType: Longword Binary(Sub, Reg(BX), Reg(DX)), AssType: Longword Mov(Imm(22), Reg(SI)), AssType: Longword Binary(Sub, Reg(BX), Reg(SI)), AssType: Longword Mov(Imm(21), Reg(DI)), AssType: Longword Binary(Sub, Reg(BX), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(32), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)), set()), (AssType: Longword Mov(Imm(23), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(21), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), set()), (AssType: Longword Mov(Imm(19), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(17), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), set()), (AssType: Longword Mov(Imm(15), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(13), Reg(R9d)), set()), (AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), set()), (AssType: Longword Mov(Imm(11), Reg(R8d)), set()), (AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(24), Reg(CX)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(CX)), set()), (AssType: Longword Mov(Imm(23), Reg(DX)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(DX)), set()), (AssType: Longword Mov(Imm(22), Reg(SI)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(SI)), set()), (AssType: Longword Mov(Imm(21), Reg(DI)), set()), (AssType: Longword Binary(Sub, Reg(BX), Reg(DI)), set()), (AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Call(check_5_ints), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
--------------LIVE for block 4-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Call(check_5_ints) set()
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(R9d), Reg(DX)}
AssType: Longword Binary(Sub, Reg(BX), Reg(DI)) {Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(DX)}
AssType: Longword Mov(Imm(21), Reg(DI)) {Reg(BX), Reg(CX), Reg(R8d), Reg(DI), Reg(SI), Reg(DX)}
AssType: Longword Binary(Sub, Reg(BX), Reg(SI)) {Reg(BX), Reg(CX), Reg(R8d), Reg(SI), Reg(DX)}
AssType: Longword Mov(Imm(22), Reg(SI)) {Reg(BX), Reg(CX), Reg(R8d), Reg(SI), Reg(DX)}
AssType: Longword Binary(Sub, Reg(BX), Reg(DX)) {Reg(BX), Reg(CX), Reg(R8d), Reg(DX)}
AssType: Longword Mov(Imm(23), Reg(DX)) {Reg(BX), Reg(CX), Reg(R8d), Reg(DX)}
AssType: Longword Binary(Sub, Reg(BX), Reg(CX)) {Reg(BX), Reg(CX), Reg(R8d)}
AssType: Longword Mov(Imm(24), Reg(CX)) {Reg(BX), Reg(CX), Reg(R8d)}
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)) {Reg(BX), Reg(R8d)}
AssType: Longword Mov(Imm(11), Reg(R8d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)) {Reg(BX), Reg(R9d)}
AssType: Longword Mov(Imm(13), Reg(R9d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)) {Reg(BX), Reg(R8d)}
AssType: Longword Mov(Imm(15), Reg(R8d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)) {Reg(BX), Reg(R9d)}
AssType: Longword Mov(Imm(17), Reg(R9d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)) {Reg(BX), Reg(R8d)}
AssType: Longword Mov(Imm(19), Reg(R8d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)) {Reg(BX), Reg(R9d)}
AssType: Longword Mov(Imm(21), Reg(R9d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)) {Reg(BX), Reg(R8d)}
AssType: Longword Mov(Imm(23), Reg(R8d)) {Reg(BX), Reg(R8d), Reg(R9d)}
AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)) {Reg(BX), Reg(R9d)}
AssType: Longword Mov(Imm(32), Reg(R9d)) {Reg(BX), Reg(R9d)}
Label(tmp.43) {Reg(BX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(BX)}
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Unary(Neg, Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.43) {Reg(BX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(BX)}
SetCC(ConcCodeType.NE, Reg(R9d)) {Reg(BX), Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(BX)}
AssType: Longword Cmp(Imm(10), Reg(AX)) {Reg(BX)}
AssType: Longword Binary(Mult, Reg(AX), Reg(BX)) {Reg(BX), Reg(AX)}
AssType: Longword Mov(Imm(2), Reg(BX)) {Reg(BX), Reg(AX)}
Label(tmp.37) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX)}
--------------LIVE for block 1-------------------
Call(id) {Reg(AX)}
AssType: Longword Mov(Imm(10), Reg(DI)) {Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.37) {Reg(AX)}
AssType: Longword Cmp(Imm(0), Pseudo(flag)) {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX), Pseudo(flag)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM3)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36379030e0>, <RegisterAllocation.Node object at 0x7f3637902990>, <RegisterAllocation.Node object at 0x7f3637902a80>, <RegisterAllocation.Node object at 0x7f3637902c60>, <RegisterAllocation.Node object at 0x7f3637902900>, <RegisterAllocation.Node object at 0x7f36379024b0>, <RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902990>, <RegisterAllocation.Node object at 0x7f3637902a80>, <RegisterAllocation.Node object at 0x7f3637902c60>, <RegisterAllocation.Node object at 0x7f3637902900>, <RegisterAllocation.Node object at 0x7f36379024b0>, <RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902a80>, <RegisterAllocation.Node object at 0x7f3637902c60>, <RegisterAllocation.Node object at 0x7f3637902900>, <RegisterAllocation.Node object at 0x7f36379024b0>, <RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902c60>, <RegisterAllocation.Node object at 0x7f3637902900>, <RegisterAllocation.Node object at 0x7f36379024b0>, <RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902900>, <RegisterAllocation.Node object at 0x7f36379024b0>, <RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36379024b0>, <RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902660>, <RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36379026f0>, <RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f3637902480>, <RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36379022d0>, <RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378d9a60>, <RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378ce990>, <RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378cd790>, <RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378d52e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for target: {Reg(BX)}
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
AssType: Longword Cmp(Imm(0), Pseudo(flag))                            AssType: Longword Cmp(Imm(0), Pseudo(flag))                            AssType: Longword Cmp(Imm(0), Pseudo(flag))
JmpCC(ConcCodeType.E, tmp.37)                                          JmpCC(ConcCodeType.E, tmp.37)                                          JmpCC(ConcCodeType.E, tmp.37)
AssType: Longword Mov(Imm(10), Reg(DI))                                AssType: Longword Mov(Imm(10), Reg(DI))                                AssType: Longword Mov(Imm(10), Reg(DI))
Call(id)                                                               Call(id)                                                               Call(id)
Label(tmp.37)                                                          Label(tmp.37)                                                          Label(tmp.37)
AssType: Longword Mov(Imm(2), Reg(BX))                                 AssType: Longword Mov(Imm(2), Reg(BX))                                 AssType: Longword Mov(Imm(2), Reg(BX))
AssType: Longword Binary(Mult, Reg(AX), Reg(BX))                       AssType: Longword Binary(Mult, Reg(AX), Reg(BX))                       AssType: Longword Binary(Mult, Reg(AX), Reg(BX))
AssType: Longword Cmp(Imm(10), Reg(AX))                                AssType: Longword Cmp(Imm(10), Reg(AX))                                AssType: Longword Cmp(Imm(10), Reg(AX))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.NE, Reg(R9d))                                       SetCC(ConcCodeType.NE, Reg(R9d))                                       SetCC(ConcCodeType.NE, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.43)                                          JmpCC(ConcCodeType.E, tmp.43)                                          JmpCC(ConcCodeType.E, tmp.43)
AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Mov(Imm(1), Reg(AX))
AssType: Longword Unary(Neg, Reg(AX))                                  AssType: Longword Unary(Neg, Reg(AX))                                  AssType: Longword Unary(Neg, Reg(AX))
ret                                                                    ret                                                                    ret
Label(tmp.43)                                                          Label(tmp.43)                                                          Label(tmp.43)
AssType: Longword Mov(Imm(32), Reg(R9d))                               AssType: Longword Mov(Imm(32), Reg(R9d))                               AssType: Longword Mov(Imm(32), Reg(R9d))
AssType: Longword Binary(Sub, Reg(BX), Reg(R9d))                       AssType: Longword Binary(Sub, Reg(BX), Reg(R9d))                       AssType: Longword Binary(Sub, Reg(BX), Reg(R9d))
AssType: Longword Mov(Imm(23), Reg(R8d))                               AssType: Longword Mov(Imm(23), Reg(R8d))                               AssType: Longword Mov(Imm(23), Reg(R8d))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))
AssType: Longword Mov(Imm(21), Reg(R9d))                               AssType: Longword Mov(Imm(21), Reg(R9d))                               AssType: Longword Mov(Imm(21), Reg(R9d))
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))                      AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))                      AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))
AssType: Longword Mov(Imm(19), Reg(R8d))                               AssType: Longword Mov(Imm(19), Reg(R8d))                               AssType: Longword Mov(Imm(19), Reg(R8d))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))
AssType: Longword Mov(Imm(17), Reg(R9d))                               AssType: Longword Mov(Imm(17), Reg(R9d))                               AssType: Longword Mov(Imm(17), Reg(R9d))
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))                      AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))                      AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))
AssType: Longword Mov(Imm(15), Reg(R8d))                               AssType: Longword Mov(Imm(15), Reg(R8d))                               AssType: Longword Mov(Imm(15), Reg(R8d))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))
AssType: Longword Mov(Imm(13), Reg(R9d))                               AssType: Longword Mov(Imm(13), Reg(R9d))                               AssType: Longword Mov(Imm(13), Reg(R9d))
AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))                      AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))                      AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d))
AssType: Longword Mov(Imm(11), Reg(R8d))                               AssType: Longword Mov(Imm(11), Reg(R8d))                               AssType: Longword Mov(Imm(11), Reg(R8d))
AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))                      AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d))
AssType: Longword Mov(Imm(24), Reg(CX))                                AssType: Longword Mov(Imm(24), Reg(CX))                                AssType: Longword Mov(Imm(24), Reg(CX))
AssType: Longword Binary(Sub, Reg(BX), Reg(CX))                        AssType: Longword Binary(Sub, Reg(BX), Reg(CX))                        AssType: Longword Binary(Sub, Reg(BX), Reg(CX))
AssType: Longword Mov(Imm(23), Reg(DX))                                AssType: Longword Mov(Imm(23), Reg(DX))                                AssType: Longword Mov(Imm(23), Reg(DX))
AssType: Longword Binary(Sub, Reg(BX), Reg(DX))                        AssType: Longword Binary(Sub, Reg(BX), Reg(DX))                        AssType: Longword Binary(Sub, Reg(BX), Reg(DX))
AssType: Longword Mov(Imm(22), Reg(SI))                                AssType: Longword Mov(Imm(22), Reg(SI))                                AssType: Longword Mov(Imm(22), Reg(SI))
AssType: Longword Binary(Sub, Reg(BX), Reg(SI))                        AssType: Longword Binary(Sub, Reg(BX), Reg(SI))                        AssType: Longword Binary(Sub, Reg(BX), Reg(SI))
AssType: Longword Mov(Imm(21), Reg(DI))                                AssType: Longword Mov(Imm(21), Reg(DI))                                AssType: Longword Mov(Imm(21), Reg(DI))
AssType: Longword Binary(Sub, Reg(BX), Reg(DI))                        AssType: Longword Binary(Sub, Reg(BX), Reg(DI))                        AssType: Longword Binary(Sub, Reg(BX), Reg(DI))
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Call(check_5_ints)                                                     Call(check_5_ints)                                                     Call(check_5_ints)
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret                                                                    ret
REGISTER ALLOCATE FUNCTION main
-------------------START COALESCING INTEGER.----------------------
-----------Building INTEGER interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), AssType: Longword Mov(Reg(AX), Pseudo(tmp.64)), AssType: Longword Mov(Pseudo(tmp.64), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.64)), set()), (AssType: Longword Mov(Pseudo(tmp.64), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.64), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.64)) {Pseudo(tmp.64)}
Call(target) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(R13d)
        Reg(R8d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(R14d)
        Reg(SI)
        Reg(R9d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R13d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Pseudo(tmp.64)
    Pseudo(tmp.64) spillCost: 0.0 color: None pruned: False
COALESCING Pseudo(tmp.64) INTO Reg(AX)
-----------Building INTEGER interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
Call(target) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(R13d)
        Reg(R8d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(R14d)
        Reg(SI)
        Reg(R9d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R13d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R15d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(CX)
        Reg(DI)
        Reg(SI)
        Reg(R9d)
        Reg(R14d)
        Reg(R12d)
        Reg(DX)
        Reg(AX)
        Reg(R8d)
        Reg(R13d)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f9f70>, <RegisterAllocation.Node object at 0x7f36378bddc0>, <RegisterAllocation.Node object at 0x7f36378bda30>, <RegisterAllocation.Node object at 0x7f36378bde20>, <RegisterAllocation.Node object at 0x7f36378bd490>, <RegisterAllocation.Node object at 0x7f36378be840>, <RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378bddc0>, <RegisterAllocation.Node object at 0x7f36378bda30>, <RegisterAllocation.Node object at 0x7f36378bde20>, <RegisterAllocation.Node object at 0x7f36378bd490>, <RegisterAllocation.Node object at 0x7f36378be840>, <RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378bda30>, <RegisterAllocation.Node object at 0x7f36378bde20>, <RegisterAllocation.Node object at 0x7f36378bd490>, <RegisterAllocation.Node object at 0x7f36378be840>, <RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378bde20>, <RegisterAllocation.Node object at 0x7f36378bd490>, <RegisterAllocation.Node object at 0x7f36378be840>, <RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378bd490>, <RegisterAllocation.Node object at 0x7f36378be840>, <RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378be840>, <RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378bfef0>, <RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378bd2b0>, <RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378d6ba0>, <RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378d6f60>, <RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378d6870>, <RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378d6810>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for main: set()
------------------REGISTER INTEGER MAP.--------------------
{}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
Call(target)                                       Call(target)                                                           Call(target)
ret                                                ret                                                                    AssType: Longword Mov(Reg(AX), Pseudo(tmp.64))
-------------------START COALESCING DOUBLE.----------------------
-----------Building DOUBLE interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
Call(target) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM3)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM2)
        Reg(XMM12)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM6)
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM3)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f31a0>, <RegisterAllocation.Node object at 0x7f36378f0980>, <RegisterAllocation.Node object at 0x7f36378f15e0>, <RegisterAllocation.Node object at 0x7f36378f0500>, <RegisterAllocation.Node object at 0x7f36378f0ec0>, <RegisterAllocation.Node object at 0x7f36378f1820>, <RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f0980>, <RegisterAllocation.Node object at 0x7f36378f15e0>, <RegisterAllocation.Node object at 0x7f36378f0500>, <RegisterAllocation.Node object at 0x7f36378f0ec0>, <RegisterAllocation.Node object at 0x7f36378f1820>, <RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f15e0>, <RegisterAllocation.Node object at 0x7f36378f0500>, <RegisterAllocation.Node object at 0x7f36378f0ec0>, <RegisterAllocation.Node object at 0x7f36378f1820>, <RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f0500>, <RegisterAllocation.Node object at 0x7f36378f0ec0>, <RegisterAllocation.Node object at 0x7f36378f1820>, <RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f0ec0>, <RegisterAllocation.Node object at 0x7f36378f1820>, <RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f1820>, <RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f1d60>, <RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f1ee0>, <RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f1b80>, <RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f1d00>, <RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f2c00>, <RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f3740>, <RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f2ae0>, <RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f36378f2ff0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for main: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
Call(target)                                                           Call(target)                                                           Call(target)
ret                                                                    ret                                                                    ret
ASM Program: [Function target stackOffset: 0 global: True instructions:[AssType: Longword Mov(Imm(0), Reg(AX)), AssType: Longword Cmp(Imm(0), Data(flag, 0)), JmpCC(ConcCodeType.E, tmp.37), AssType: Longword Mov(Imm(10), Reg(DI)), Call(id), Label(tmp.37), AssType: Longword Mov(Imm(2), Reg(BX)), AssType: Longword Binary(Mult, Reg(AX), Reg(BX)), AssType: Longword Cmp(Imm(10), Reg(AX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.NE, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.43), AssType: Longword Mov(Imm(1), Reg(AX)), AssType: Longword Unary(Neg, Reg(AX)), ret, Label(tmp.43), AssType: Longword Mov(Imm(32), Reg(R9d)), AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)), AssType: Longword Mov(Imm(23), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(21), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(19), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(17), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(15), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(13), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(11), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(24), Reg(CX)), AssType: Longword Binary(Sub, Reg(BX), Reg(CX)), AssType: Longword Mov(Imm(23), Reg(DX)), AssType: Longword Binary(Sub, Reg(BX), Reg(DX)), AssType: Longword Mov(Imm(22), Reg(SI)), AssType: Longword Binary(Sub, Reg(BX), Reg(SI)), AssType: Longword Mov(Imm(21), Reg(DI)), AssType: Longword Binary(Sub, Reg(BX), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function main stackOffset: 0 global: True instructions:[Call(target), ret], Static Variable: Global = True Alignment = 4 : flag = [c_int(1)]]
original: 8
rounded: 16
adjustment: 8
<class 'assemblyGenerator.RegisterOperand'>
<class 'assemblyGenerator.RegisterOperand'>
original: 0
rounded: 16
adjustment: 16
ASM Program: [Function target stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(8), Reg(SP)), Push(Reg(BX)), AssType: Longword Mov(Imm(0), Reg(AX)), AssType: Longword Cmp(Imm(0), Data(flag, 0)), JmpCC(ConcCodeType.E, tmp.37), AssType: Longword Mov(Imm(10), Reg(DI)), Call(id), Label(tmp.37), AssType: Longword Mov(Imm(2), Reg(BX)), AssType: Longword Binary(Mult, Reg(AX), Reg(BX)), AssType: Longword Cmp(Imm(10), Reg(AX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.NE, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.43), AssType: Longword Mov(Imm(1), Reg(AX)), AssType: Longword Unary(Neg, Reg(AX)), Pop(Reg(BX)), ret, Label(tmp.43), AssType: Longword Mov(Imm(32), Reg(R9d)), AssType: Longword Binary(Sub, Reg(BX), Reg(R9d)), AssType: Longword Mov(Imm(23), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(21), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(19), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(17), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(15), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(13), Reg(R9d)), AssType: Longword Binary(Sub, Reg(R8d), Reg(R9d)), AssType: Longword Mov(Imm(11), Reg(R8d)), AssType: Longword Binary(Sub, Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(24), Reg(CX)), AssType: Longword Binary(Sub, Reg(BX), Reg(CX)), AssType: Longword Mov(Imm(23), Reg(DX)), AssType: Longword Binary(Sub, Reg(BX), Reg(DX)), AssType: Longword Mov(Imm(22), Reg(SI)), AssType: Longword Binary(Sub, Reg(BX), Reg(SI)), AssType: Longword Mov(Imm(21), Reg(DI)), AssType: Longword Binary(Sub, Reg(BX), Reg(DI)), AssType: Longword Mov(Imm(1), Reg(R9d)), Call(check_5_ints), AssType: Longword Mov(Imm(0), Reg(AX)), Pop(Reg(BX)), ret], Function main stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), Call(target), ret], Static Variable: Global = True Alignment = 4 : flag = [c_int(1)]]
<class 'assemblyGenerator.Longword'>
	.globl target
	.text
target:
	pushq %rbp
	movq %rsp, %rbp
	subq $8, %rsp
	pushq %rbx
	movl $0, %eax
	cmpl $0, flag+0(%rip)
	jE .Ltmp.37
	movl $10, %edi
	call id
.Ltmp.37:
	movl $2, %ebx
	imul %eax, %ebx
	cmpl $10, %eax
	movl $0, %r9d
	setNE %r9b
	cmpl $0, %r9d
	jE .Ltmp.43
	movl $1, %eax
	negl %eax
	popq %rbx
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.43:
	movl $32, %r9d
	subl %ebx, %r9d
	movl $23, %r8d
	subl %r9d, %r8d
	movl $21, %r9d
	subl %r8d, %r9d
	movl $19, %r8d
	subl %r9d, %r8d
	movl $17, %r9d
	subl %r8d, %r9d
	movl $15, %r8d
	subl %r9d, %r8d
	movl $13, %r9d
	subl %r8d, %r9d
	movl $11, %r8d
	subl %r9d, %r8d
	movl $24, %ecx
	subl %ebx, %ecx
	movl $23, %edx
	subl %ebx, %edx
	movl $22, %esi
	subl %ebx, %esi
	movl $21, %edi
	subl %ebx, %edi
	movl $1, %r9d
	call check_5_ints
	movl $0, %eax
	popq %rbx
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	call target
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl flag
	.data
	.align 4
flag:
	.long 1
	.section	.note.GNU-stack,"",@progbits

