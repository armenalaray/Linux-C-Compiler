False
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
9
['/home/alejandro/CComp/code/cd.py', '--codegen', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: assemblyGeneration
NoLink: False
NotAssembly: False
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('int', <TokenType.INT_KW: 4>, 1), ('check_one_int', <TokenType.IDENTIFIER: 2>, 1), ('(', <TokenType.OPEN_PAREN: 7>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('actual', <TokenType.IDENTIFIER: 2>, 1), (',', <TokenType.COMMA: 38>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('expected', <TokenType.IDENTIFIER: 2>, 1), (')', <TokenType.CLOSE_PAREN: 8>, 1), (';', <TokenType.SEMICOLON: 11>, 1), ('int', <TokenType.INT_KW: 4>, 2), ('check_5_ints', <TokenType.IDENTIFIER: 2>, 2), ('(', <TokenType.OPEN_PAREN: 7>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('a', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('b', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('c', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('d', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('e', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('start', <TokenType.IDENTIFIER: 2>, 2), (')', <TokenType.CLOSE_PAREN: 8>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('int', <TokenType.INT_KW: 4>, 3), ('check_12_ints', <TokenType.IDENTIFIER: 2>, 3), ('(', <TokenType.OPEN_PAREN: 7>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('a', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('b', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('c', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('d', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('e', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('f', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('g', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('h', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('i', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 4), ('j', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('k', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('l', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('start', <TokenType.IDENTIFIER: 2>, 4), (')', <TokenType.CLOSE_PAREN: 8>, 4), (';', <TokenType.SEMICOLON: 11>, 4), ('int', <TokenType.INT_KW: 4>, 5), ('check_one_uchar', <TokenType.IDENTIFIER: 2>, 5), ('(', <TokenType.OPEN_PAREN: 7>, 5), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 5), ('char', <TokenType.CHAR_KW: 52>, 5), ('actual', <TokenType.IDENTIFIER: 2>, 5), (',', <TokenType.COMMA: 38>, 5), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 5), ('char', <TokenType.CHAR_KW: 52>, 5), ('expected', <TokenType.IDENTIFIER: 2>, 5), (')', <TokenType.CLOSE_PAREN: 8>, 5), (';', <TokenType.SEMICOLON: 11>, 5), ('int', <TokenType.INT_KW: 4>, 6), ('check_one_uint', <TokenType.IDENTIFIER: 2>, 6), ('(', <TokenType.OPEN_PAREN: 7>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 6), ('int', <TokenType.INT_KW: 4>, 6), ('actual', <TokenType.IDENTIFIER: 2>, 6), (',', <TokenType.COMMA: 38>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 6), ('int', <TokenType.INT_KW: 4>, 6), ('expected', <TokenType.IDENTIFIER: 2>, 6), (')', <TokenType.CLOSE_PAREN: 8>, 6), (';', <TokenType.SEMICOLON: 11>, 6), ('int', <TokenType.INT_KW: 4>, 7), ('check_one_long', <TokenType.IDENTIFIER: 2>, 7), ('(', <TokenType.OPEN_PAREN: 7>, 7), ('long', <TokenType.LONG_KW: 41>, 7), ('actual', <TokenType.IDENTIFIER: 2>, 7), (',', <TokenType.COMMA: 38>, 7), ('long', <TokenType.LONG_KW: 41>, 7), ('expected', <TokenType.IDENTIFIER: 2>, 7), (')', <TokenType.CLOSE_PAREN: 8>, 7), (';', <TokenType.SEMICOLON: 11>, 7), ('int', <TokenType.INT_KW: 4>, 8), ('check_one_ulong', <TokenType.IDENTIFIER: 2>, 8), ('(', <TokenType.OPEN_PAREN: 7>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('long', <TokenType.LONG_KW: 41>, 8), ('actual', <TokenType.IDENTIFIER: 2>, 8), (',', <TokenType.COMMA: 38>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('long', <TokenType.LONG_KW: 41>, 8), ('expected', <TokenType.IDENTIFIER: 2>, 8), (')', <TokenType.CLOSE_PAREN: 8>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('int', <TokenType.INT_KW: 4>, 9), ('check_one_double', <TokenType.IDENTIFIER: 2>, 9), ('(', <TokenType.OPEN_PAREN: 7>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('actual', <TokenType.IDENTIFIER: 2>, 9), (',', <TokenType.COMMA: 38>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('expected', <TokenType.IDENTIFIER: 2>, 9), (')', <TokenType.CLOSE_PAREN: 8>, 9), (';', <TokenType.SEMICOLON: 11>, 9), ('int', <TokenType.INT_KW: 4>, 10), ('check_12_longs', <TokenType.IDENTIFIER: 2>, 10), ('(', <TokenType.OPEN_PAREN: 7>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('a', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('b', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('c', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('d', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('e', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('f', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('g', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 11), ('h', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('i', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('j', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('k', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('l', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('start', <TokenType.IDENTIFIER: 2>, 11), (')', <TokenType.CLOSE_PAREN: 8>, 11), (';', <TokenType.SEMICOLON: 11>, 11), ('int', <TokenType.INT_KW: 4>, 12), ('check_six_chars', <TokenType.IDENTIFIER: 2>, 12), ('(', <TokenType.OPEN_PAREN: 7>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('a', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('b', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('c', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('d', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('e', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('f', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('int', <TokenType.INT_KW: 4>, 12), ('start', <TokenType.IDENTIFIER: 2>, 12), (')', <TokenType.CLOSE_PAREN: 8>, 12), (';', <TokenType.SEMICOLON: 11>, 12), ('int', <TokenType.INT_KW: 4>, 13), ('check_14_doubles', <TokenType.IDENTIFIER: 2>, 13), ('(', <TokenType.OPEN_PAREN: 7>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('a', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('b', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('c', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('d', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('e', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('f', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('g', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('h', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('i', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('j', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('k', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('l', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('m', <TokenType.IDENTIFIER: 2>, 15), (',', <TokenType.COMMA: 38>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('n', <TokenType.IDENTIFIER: 2>, 15), (',', <TokenType.COMMA: 38>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('start', <TokenType.IDENTIFIER: 2>, 15), (')', <TokenType.CLOSE_PAREN: 8>, 15), (';', <TokenType.SEMICOLON: 11>, 15), ('int', <TokenType.INT_KW: 4>, 16), ('check_12_vals', <TokenType.IDENTIFIER: 2>, 16), ('(', <TokenType.OPEN_PAREN: 7>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('a', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('b', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('c', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('d', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('e', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('f', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('g', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('h', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('i', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 17), ('j', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('long', <TokenType.LONG_KW: 41>, 17), ('*', <TokenType.ASTERISK: 17>, 17), ('k', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('double', <TokenType.DOUBLE_KW: 48>, 17), ('*', <TokenType.ASTERISK: 17>, 17), ('l', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('int', <TokenType.INT_KW: 4>, 17), ('start', <TokenType.IDENTIFIER: 2>, 17), (')', <TokenType.CLOSE_PAREN: 8>, 17), (';', <TokenType.SEMICOLON: 11>, 17), ('int', <TokenType.INT_KW: 4>, 18), ('id', <TokenType.IDENTIFIER: 2>, 18), ('(', <TokenType.OPEN_PAREN: 7>, 18), ('int', <TokenType.INT_KW: 4>, 18), ('x', <TokenType.IDENTIFIER: 2>, 18), (')', <TokenType.CLOSE_PAREN: 8>, 18), (';', <TokenType.SEMICOLON: 11>, 18), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('dbl_id', <TokenType.IDENTIFIER: 2>, 19), ('(', <TokenType.OPEN_PAREN: 7>, 19), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('x', <TokenType.IDENTIFIER: 2>, 19), (')', <TokenType.CLOSE_PAREN: 8>, 19), (';', <TokenType.SEMICOLON: 11>, 19), ('long', <TokenType.LONG_KW: 41>, 20), ('long_id', <TokenType.IDENTIFIER: 2>, 20), ('(', <TokenType.OPEN_PAREN: 7>, 20), ('long', <TokenType.LONG_KW: 41>, 20), ('l', <TokenType.IDENTIFIER: 2>, 20), (')', <TokenType.CLOSE_PAREN: 8>, 20), (';', <TokenType.SEMICOLON: 11>, 20), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 21), ('unsigned_id', <TokenType.IDENTIFIER: 2>, 21), ('(', <TokenType.OPEN_PAREN: 7>, 21), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 21), ('u', <TokenType.IDENTIFIER: 2>, 21), (')', <TokenType.CLOSE_PAREN: 8>, 21), (';', <TokenType.SEMICOLON: 11>, 21), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 22), ('char', <TokenType.CHAR_KW: 52>, 22), ('uchar_id', <TokenType.IDENTIFIER: 2>, 22), ('(', <TokenType.OPEN_PAREN: 7>, 22), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 22), ('char', <TokenType.CHAR_KW: 52>, 22), ('uc', <TokenType.IDENTIFIER: 2>, 22), (')', <TokenType.CLOSE_PAREN: 8>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('int', <TokenType.INT_KW: 4>, 23), ('callee', <TokenType.IDENTIFIER: 2>, 23), ('(', <TokenType.OPEN_PAREN: 7>, 23), ('double', <TokenType.DOUBLE_KW: 48>, 23), ('a', <TokenType.IDENTIFIER: 2>, 23), (',', <TokenType.COMMA: 38>, 23), ('double', <TokenType.DOUBLE_KW: 48>, 23), ('b', <TokenType.IDENTIFIER: 2>, 23), (',', <TokenType.COMMA: 38>, 23), ('double', <TokenType.DOUBLE_KW: 48>, 23), ('c', <TokenType.IDENTIFIER: 2>, 23), (')', <TokenType.CLOSE_PAREN: 8>, 23), (';', <TokenType.SEMICOLON: 11>, 23), ('double', <TokenType.DOUBLE_KW: 48>, 24), ('glob1', <TokenType.IDENTIFIER: 2>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('double', <TokenType.DOUBLE_KW: 48>, 25), ('glob2', <TokenType.IDENTIFIER: 2>, 25), (';', <TokenType.SEMICOLON: 11>, 25), ('double', <TokenType.DOUBLE_KW: 48>, 26), ('glob3', <TokenType.IDENTIFIER: 2>, 26), (';', <TokenType.SEMICOLON: 11>, 26), ('double', <TokenType.DOUBLE_KW: 48>, 27), ('glob4', <TokenType.IDENTIFIER: 2>, 27), (';', <TokenType.SEMICOLON: 11>, 27), ('double', <TokenType.DOUBLE_KW: 48>, 28), ('glob5', <TokenType.IDENTIFIER: 2>, 28), (';', <TokenType.SEMICOLON: 11>, 28), ('double', <TokenType.DOUBLE_KW: 48>, 29), ('glob6', <TokenType.IDENTIFIER: 2>, 29), (';', <TokenType.SEMICOLON: 11>, 29), ('double', <TokenType.DOUBLE_KW: 48>, 30), ('glob7', <TokenType.IDENTIFIER: 2>, 30), (';', <TokenType.SEMICOLON: 11>, 30), ('double', <TokenType.DOUBLE_KW: 48>, 31), ('glob8', <TokenType.IDENTIFIER: 2>, 31), (';', <TokenType.SEMICOLON: 11>, 31), ('double', <TokenType.DOUBLE_KW: 48>, 32), ('glob9', <TokenType.IDENTIFIER: 2>, 32), (';', <TokenType.SEMICOLON: 11>, 32), ('double', <TokenType.DOUBLE_KW: 48>, 33), ('glob10', <TokenType.IDENTIFIER: 2>, 33), (';', <TokenType.SEMICOLON: 11>, 33), ('double', <TokenType.DOUBLE_KW: 48>, 34), ('glob11', <TokenType.IDENTIFIER: 2>, 34), (';', <TokenType.SEMICOLON: 11>, 34), ('int', <TokenType.INT_KW: 4>, 35), ('target', <TokenType.IDENTIFIER: 2>, 35), ('(', <TokenType.OPEN_PAREN: 7>, 35), ('double', <TokenType.DOUBLE_KW: 48>, 35), ('one', <TokenType.IDENTIFIER: 2>, 35), (',', <TokenType.COMMA: 38>, 35), ('double', <TokenType.DOUBLE_KW: 48>, 35), ('two', <TokenType.IDENTIFIER: 2>, 35), (',', <TokenType.COMMA: 38>, 35), ('double', <TokenType.DOUBLE_KW: 48>, 35), ('three', <TokenType.IDENTIFIER: 2>, 35), (')', <TokenType.CLOSE_PAREN: 8>, 35), ('{', <TokenType.OPEN_BRACE: 9>, 35), ('double', <TokenType.DOUBLE_KW: 48>, 36), ('four', <TokenType.IDENTIFIER: 2>, 36), ('=', <TokenType.EQUAL: 28>, 36), ('three', <TokenType.IDENTIFIER: 2>, 36), ('+', <TokenType.PLUS: 18>, 36), ('one', <TokenType.IDENTIFIER: 2>, 36), (';', <TokenType.SEMICOLON: 11>, 36), ('double', <TokenType.DOUBLE_KW: 48>, 37), ('five', <TokenType.IDENTIFIER: 2>, 37), ('=', <TokenType.EQUAL: 28>, 37), ('two', <TokenType.IDENTIFIER: 2>, 37), ('+', <TokenType.PLUS: 18>, 37), ('three', <TokenType.IDENTIFIER: 2>, 37), (';', <TokenType.SEMICOLON: 11>, 37), ('double', <TokenType.DOUBLE_KW: 48>, 38), ('six', <TokenType.IDENTIFIER: 2>, 38), ('=', <TokenType.EQUAL: 28>, 38), ('three', <TokenType.IDENTIFIER: 2>, 38), ('*', <TokenType.ASTERISK: 17>, 38), ('two', <TokenType.IDENTIFIER: 2>, 38), (';', <TokenType.SEMICOLON: 11>, 38), ('double', <TokenType.DOUBLE_KW: 48>, 39), ('seven', <TokenType.IDENTIFIER: 2>, 39), ('=', <TokenType.EQUAL: 28>, 39), ('13.', <TokenType.DOUBLE_CONSTANT: 47>, 39), ('-', <TokenType.HYPHEN: 13>, 39), ('six', <TokenType.IDENTIFIER: 2>, 39), (';', <TokenType.SEMICOLON: 11>, 39), ('double', <TokenType.DOUBLE_KW: 48>, 40), ('eight', <TokenType.IDENTIFIER: 2>, 40), ('=', <TokenType.EQUAL: 28>, 40), ('four', <TokenType.IDENTIFIER: 2>, 40), ('*', <TokenType.ASTERISK: 17>, 40), ('two', <TokenType.IDENTIFIER: 2>, 40), (';', <TokenType.SEMICOLON: 11>, 40), ('double', <TokenType.DOUBLE_KW: 48>, 41), ('nine', <TokenType.IDENTIFIER: 2>, 41), ('=', <TokenType.EQUAL: 28>, 41), ('three', <TokenType.IDENTIFIER: 2>, 41), ('*', <TokenType.ASTERISK: 17>, 41), ('three', <TokenType.IDENTIFIER: 2>, 41), (';', <TokenType.SEMICOLON: 11>, 41), ('double', <TokenType.DOUBLE_KW: 48>, 42), ('ten', <TokenType.IDENTIFIER: 2>, 42), ('=', <TokenType.EQUAL: 28>, 42), ('five', <TokenType.IDENTIFIER: 2>, 42), ('*', <TokenType.ASTERISK: 17>, 42), ('two', <TokenType.IDENTIFIER: 2>, 42), (';', <TokenType.SEMICOLON: 11>, 42), ('double', <TokenType.DOUBLE_KW: 48>, 43), ('eleven', <TokenType.IDENTIFIER: 2>, 43), ('=', <TokenType.EQUAL: 28>, 43), ('seven', <TokenType.IDENTIFIER: 2>, 43), ('*', <TokenType.ASTERISK: 17>, 43), ('two', <TokenType.IDENTIFIER: 2>, 43), ('-', <TokenType.HYPHEN: 13>, 43), ('three', <TokenType.IDENTIFIER: 2>, 43), (';', <TokenType.SEMICOLON: 11>, 43), ('double', <TokenType.DOUBLE_KW: 48>, 44), ('twelve', <TokenType.IDENTIFIER: 2>, 44), ('=', <TokenType.EQUAL: 28>, 44), ('eight', <TokenType.IDENTIFIER: 2>, 44), ('*', <TokenType.ASTERISK: 17>, 44), ('four', <TokenType.IDENTIFIER: 2>, 44), ('-', <TokenType.HYPHEN: 13>, 44), ('20.', <TokenType.DOUBLE_CONSTANT: 47>, 44), (';', <TokenType.SEMICOLON: 11>, 44), ('double', <TokenType.DOUBLE_KW: 48>, 45), ('thirteen', <TokenType.IDENTIFIER: 2>, 45), ('=', <TokenType.EQUAL: 28>, 45), ('(', <TokenType.OPEN_PAREN: 7>, 45), ('nine', <TokenType.IDENTIFIER: 2>, 45), ('+', <TokenType.PLUS: 18>, 45), ('ten', <TokenType.IDENTIFIER: 2>, 45), (')', <TokenType.CLOSE_PAREN: 8>, 45), ('-', <TokenType.HYPHEN: 13>, 45), ('six', <TokenType.IDENTIFIER: 2>, 45), (';', <TokenType.SEMICOLON: 11>, 45), ('double', <TokenType.DOUBLE_KW: 48>, 46), ('fourteen', <TokenType.IDENTIFIER: 2>, 46), ('=', <TokenType.EQUAL: 28>, 46), ('eleven', <TokenType.IDENTIFIER: 2>, 46), ('+', <TokenType.PLUS: 18>, 46), ('3', <TokenType.INT_CONSTANT: 3>, 46), (';', <TokenType.SEMICOLON: 11>, 46), ('glob1', <TokenType.IDENTIFIER: 2>, 47), ('=', <TokenType.EQUAL: 28>, 47), ('one', <TokenType.IDENTIFIER: 2>, 47), (';', <TokenType.SEMICOLON: 11>, 47), ('glob2', <TokenType.IDENTIFIER: 2>, 48), ('=', <TokenType.EQUAL: 28>, 48), ('two', <TokenType.IDENTIFIER: 2>, 48), (';', <TokenType.SEMICOLON: 11>, 48), ('glob3', <TokenType.IDENTIFIER: 2>, 49), ('=', <TokenType.EQUAL: 28>, 49), ('three', <TokenType.IDENTIFIER: 2>, 49), (';', <TokenType.SEMICOLON: 11>, 49), ('glob4', <TokenType.IDENTIFIER: 2>, 50), ('=', <TokenType.EQUAL: 28>, 50), ('four', <TokenType.IDENTIFIER: 2>, 50), (';', <TokenType.SEMICOLON: 11>, 50), ('glob5', <TokenType.IDENTIFIER: 2>, 51), ('=', <TokenType.EQUAL: 28>, 51), ('five', <TokenType.IDENTIFIER: 2>, 51), (';', <TokenType.SEMICOLON: 11>, 51), ('glob6', <TokenType.IDENTIFIER: 2>, 52), ('=', <TokenType.EQUAL: 28>, 52), ('six', <TokenType.IDENTIFIER: 2>, 52), (';', <TokenType.SEMICOLON: 11>, 52), ('glob7', <TokenType.IDENTIFIER: 2>, 53), ('=', <TokenType.EQUAL: 28>, 53), ('seven', <TokenType.IDENTIFIER: 2>, 53), (';', <TokenType.SEMICOLON: 11>, 53), ('glob8', <TokenType.IDENTIFIER: 2>, 54), ('=', <TokenType.EQUAL: 28>, 54), ('eight', <TokenType.IDENTIFIER: 2>, 54), (';', <TokenType.SEMICOLON: 11>, 54), ('glob9', <TokenType.IDENTIFIER: 2>, 55), ('=', <TokenType.EQUAL: 28>, 55), ('nine', <TokenType.IDENTIFIER: 2>, 55), (';', <TokenType.SEMICOLON: 11>, 55), ('glob10', <TokenType.IDENTIFIER: 2>, 56), ('=', <TokenType.EQUAL: 28>, 56), ('ten', <TokenType.IDENTIFIER: 2>, 56), (';', <TokenType.SEMICOLON: 11>, 56), ('glob11', <TokenType.IDENTIFIER: 2>, 57), ('=', <TokenType.EQUAL: 28>, 57), ('eleven', <TokenType.IDENTIFIER: 2>, 57), (';', <TokenType.SEMICOLON: 11>, 57), ('callee', <TokenType.IDENTIFIER: 2>, 58), ('(', <TokenType.OPEN_PAREN: 7>, 58), ('twelve', <TokenType.IDENTIFIER: 2>, 58), (',', <TokenType.COMMA: 38>, 58), ('thirteen', <TokenType.IDENTIFIER: 2>, 58), (',', <TokenType.COMMA: 38>, 58), ('fourteen', <TokenType.IDENTIFIER: 2>, 58), (')', <TokenType.CLOSE_PAREN: 8>, 58), (';', <TokenType.SEMICOLON: 11>, 58), ('check_14_doubles', <TokenType.IDENTIFIER: 2>, 59), ('(', <TokenType.OPEN_PAREN: 7>, 59), ('glob1', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob2', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob3', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob4', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob5', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob6', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob7', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob8', <TokenType.IDENTIFIER: 2>, 59), (',', <TokenType.COMMA: 38>, 59), ('glob9', <TokenType.IDENTIFIER: 2>, 60), (',', <TokenType.COMMA: 38>, 60), ('glob10', <TokenType.IDENTIFIER: 2>, 60), (',', <TokenType.COMMA: 38>, 60), ('glob11', <TokenType.IDENTIFIER: 2>, 60), (',', <TokenType.COMMA: 38>, 60), ('12.', <TokenType.DOUBLE_CONSTANT: 47>, 60), (',', <TokenType.COMMA: 38>, 60), ('13.', <TokenType.DOUBLE_CONSTANT: 47>, 60), (',', <TokenType.COMMA: 38>, 60), ('14.', <TokenType.DOUBLE_CONSTANT: 47>, 60), (',', <TokenType.COMMA: 38>, 60), ('1', <TokenType.INT_CONSTANT: 3>, 60), (')', <TokenType.CLOSE_PAREN: 8>, 60), (';', <TokenType.SEMICOLON: 11>, 60), ('return', <TokenType.RETURN_KW: 6>, 61), ('0', <TokenType.INT_CONSTANT: 3>, 61), (';', <TokenType.SEMICOLON: 11>, 61), ('}', <TokenType.CLOSE_BRACE: 10>, 62)]
<parser.Int object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_int) [int (IdenDeclarator: actual), int (IdenDeclarator: expected)])
FunType: ParamTypes: [int, int] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_5_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), int (IdenDeclarator: k), int (IdenDeclarator: l), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1585fec440>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
int (FunDeclarator: (IdenDeclarator: check_one_uchar) [unsigned char (IdenDeclarator: actual), unsigned char (IdenDeclarator: expected)])
FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1585fec890>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Int'>]
[<class 'parser.Unsigned'>, <class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_uint) [uint (IdenDeclarator: actual), uint (IdenDeclarator: expected)])
FunType: ParamTypes: [uint, uint] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Long'>]
[<class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_one_long) [long (IdenDeclarator: actual), long (IdenDeclarator: expected)])
FunType: ParamTypes: [long, long] Return Type: int
<parser.Int object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Long'>]
[<class 'parser.Unsigned'>, <class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_one_ulong) [ulong (IdenDeclarator: actual), ulong (IdenDeclarator: expected)])
FunType: ParamTypes: [ulong, ulong] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: check_one_double) [double (IdenDeclarator: actual), double (IdenDeclarator: expected)])
FunType: ParamTypes: [double, double] Return Type: int
<parser.Int object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Int'>]
int
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_12_longs) [long (IdenDeclarator: a), long (IdenDeclarator: b), long (IdenDeclarator: c), long (IdenDeclarator: d), long (IdenDeclarator: e), long (IdenDeclarator: f), long (IdenDeclarator: g), long (IdenDeclarator: h), long (IdenDeclarator: i), long (IdenDeclarator: j), long (IdenDeclarator: k), long (IdenDeclarator: l), long (IdenDeclarator: start)])
FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_six_chars) [char (IdenDeclarator: a), char (IdenDeclarator: b), char (IdenDeclarator: c), char (IdenDeclarator: d), char (IdenDeclarator: e), char (IdenDeclarator: f), int (IdenDeclarator: start)])
FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int
<parser.Int object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: check_14_doubles) [double (IdenDeclarator: a), double (IdenDeclarator: b), double (IdenDeclarator: c), double (IdenDeclarator: d), double (IdenDeclarator: e), double (IdenDeclarator: f), double (IdenDeclarator: g), double (IdenDeclarator: h), double (IdenDeclarator: i), double (IdenDeclarator: j), double (IdenDeclarator: k), double (IdenDeclarator: l), double (IdenDeclarator: m), double (IdenDeclarator: n), double (IdenDeclarator: start)])
FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Long'>]
[<class 'parser.Double'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_vals) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), long (PointerDeclarator: (IdenDeclarator: k)), double (PointerDeclarator: (IdenDeclarator: l)), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int
<parser.Int object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: id) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Double'>]
double
[<class 'parser.Double'>]
double (FunDeclarator: (IdenDeclarator: dbl_id) [double (IdenDeclarator: x)])
FunType: ParamTypes: [double] Return Type: double
<parser.Long object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Long'>]
long
[<class 'parser.Long'>]
long (FunDeclarator: (IdenDeclarator: long_id) [long (IdenDeclarator: l)])
FunType: ParamTypes: [long] Return Type: long
<parser.Unsigned object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Unsigned'>]
uint
[<class 'parser.Unsigned'>]
uint (FunDeclarator: (IdenDeclarator: unsigned_id) [uint (IdenDeclarator: u)])
FunType: ParamTypes: [uint] Return Type: uint
<parser.Unsigned object at 0x7f1589e3e060>
<parser.Char object at 0x7f1585feec30>
[<parser.TypeS object at 0x7f15862b9e50>, <parser.TypeS object at 0x7f1585feec00>]
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
unsigned char
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
unsigned char (FunDeclarator: (IdenDeclarator: uchar_id) [unsigned char (IdenDeclarator: uc)])
FunType: ParamTypes: [unsigned char] Return Type: unsigned char
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: callee) [double (IdenDeclarator: a), double (IdenDeclarator: b), double (IdenDeclarator: c)])
FunType: ParamTypes: [double, double, double] Return Type: int
<parser.Double object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob1)
double
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1585fef320>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob2)
double
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1585fef590>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob3)
double
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob4)
double
<parser.Double object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob5)
double
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob6)
double
<parser.Double object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob7)
double
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob8)
double
<parser.Double object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob9)
double
<parser.Double object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob10)
double
<parser.Double object at 0x7f1589e3e060>
[<parser.TypeS object at 0x7f15862b9e50>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob11)
double
<parser.Int object at 0x7f15862b9e50>
[<parser.TypeS object at 0x7f1589e3e060>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: target) [double (IdenDeclarator: one), double (IdenDeclarator: two), double (IdenDeclarator: three)])
FunType: ParamTypes: [double, double, double] Return Type: int
<parser.Double object at 0x7f1585ff0080>
[<parser.TypeS object at 0x7f1585ff00b0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: four)
double
<parser.Double object at 0x7f1585ff00b0>
[<parser.TypeS object at 0x7f1585ff0080>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: five)
double
<parser.Double object at 0x7f1585ff0080>
[<parser.TypeS object at 0x7f1585ff00b0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: six)
double
<parser.Double object at 0x7f1585ff00b0>
[<parser.TypeS object at 0x7f1585ff0080>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: seven)
double
<parser.Double object at 0x7f1585ff0080>
[<parser.TypeS object at 0x7f1585ff00b0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: eight)
double
<parser.Double object at 0x7f1585ff00b0>
[<parser.TypeS object at 0x7f1585ff0080>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: nine)
double
<parser.Double object at 0x7f1585ff0080>
[<parser.TypeS object at 0x7f1585ff00b0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: ten)
double
<parser.Double object at 0x7f1585ff00b0>
[<parser.TypeS object at 0x7f1585ff0080>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: eleven)
double
<parser.Double object at 0x7f1585ff0080>
[<parser.TypeS object at 0x7f1585ff00b0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: twelve)
double
<parser.Double object at 0x7f1585ff00b0>
[<parser.TypeS object at 0x7f1585ff0080>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: thirteen)
double
<parser.Double object at 0x7f1585ff0080>
[<parser.TypeS object at 0x7f1585ff00b0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: fourteen)
double
0
AST Program:
FunDecl: NULL check_one_int (actual, expected, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a, b, c, d, e, start, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual, expected, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual, expected, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual, expected, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual, expected, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual, expected, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a, b, c, d, e, f, start, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a, b, c, d, e, f, g, h, i, j, k, l, m, n, start, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

FunDecl: NULL callee (a, b, c, ) ParamTypes: (double, double, double, ) ReturnType: int

VarDecl: NULL double glob1
VarDecl: NULL double glob2
VarDecl: NULL double glob3
VarDecl: NULL double glob4
VarDecl: NULL double glob5
VarDecl: NULL double glob6
VarDecl: NULL double glob7
VarDecl: NULL double glob8
VarDecl: NULL double glob9
VarDecl: NULL double glob10
VarDecl: NULL double glob11
FunDecl: NULL target (one, two, three, ) ParamTypes: (double, double, double, ) ReturnType: int
Declaration:
VarDecl: NULL double four = SI: ((three) ADD (one))
Declaration:
VarDecl: NULL double five = SI: ((two) ADD (three))
Declaration:
VarDecl: NULL double six = SI: ((three) MULTIPLY (two))
Declaration:
VarDecl: NULL double seven = SI: ((13.0) SUBTRACT (six))
Declaration:
VarDecl: NULL double eight = SI: ((four) MULTIPLY (two))
Declaration:
VarDecl: NULL double nine = SI: ((three) MULTIPLY (three))
Declaration:
VarDecl: NULL double ten = SI: ((five) MULTIPLY (two))
Declaration:
VarDecl: NULL double eleven = SI: (((seven) MULTIPLY (two)) SUBTRACT (three))
Declaration:
VarDecl: NULL double twelve = SI: (((eight) MULTIPLY (four)) SUBTRACT (20.0))
Declaration:
VarDecl: NULL double thirteen = SI: (((nine) ADD (ten)) SUBTRACT (six))
Declaration:
VarDecl: NULL double fourteen = SI: ((eleven) ADD (3))
Statement: Expression: ((glob1) = (one))
Statement: Expression: ((glob2) = (two))
Statement: Expression: ((glob3) = (three))
Statement: Expression: ((glob4) = (four))
Statement: Expression: ((glob5) = (five))
Statement: Expression: ((glob6) = (six))
Statement: Expression: ((glob7) = (seven))
Statement: Expression: ((glob8) = (eight))
Statement: Expression: ((glob9) = (nine))
Statement: Expression: ((glob10) = (ten))
Statement: Expression: ((glob11) = (eleven))
Statement: Expression: (callee((twelve), (thirteen), (fourteen), ))
Statement: Expression: (check_14_doubles((glob1), (glob2), (glob3), (glob4), (glob5), (glob6), (glob7), (glob8), (glob9), (glob10), (glob11), (12.0), (13.0), (14.0), (1), ))
Statement: return (0)

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

FunDecl: NULL callee (a.84, b.85, c.86, ) ParamTypes: (double, double, double, ) ReturnType: int

VarDecl: NULL double glob1
VarDecl: NULL double glob2
VarDecl: NULL double glob3
VarDecl: NULL double glob4
VarDecl: NULL double glob5
VarDecl: NULL double glob6
VarDecl: NULL double glob7
VarDecl: NULL double glob8
VarDecl: NULL double glob9
VarDecl: NULL double glob10
VarDecl: NULL double glob11
FunDecl: NULL target (one.87, two.88, three.89, ) ParamTypes: (double, double, double, ) ReturnType: int
Declaration:
VarDecl: NULL double four.90 = SI: ((three.89) ADD (one.87))
Declaration:
VarDecl: NULL double five.91 = SI: ((two.88) ADD (three.89))
Declaration:
VarDecl: NULL double six.92 = SI: ((three.89) MULTIPLY (two.88))
Declaration:
VarDecl: NULL double seven.93 = SI: ((13.0) SUBTRACT (six.92))
Declaration:
VarDecl: NULL double eight.94 = SI: ((four.90) MULTIPLY (two.88))
Declaration:
VarDecl: NULL double nine.95 = SI: ((three.89) MULTIPLY (three.89))
Declaration:
VarDecl: NULL double ten.96 = SI: ((five.91) MULTIPLY (two.88))
Declaration:
VarDecl: NULL double eleven.97 = SI: (((seven.93) MULTIPLY (two.88)) SUBTRACT (three.89))
Declaration:
VarDecl: NULL double twelve.98 = SI: (((eight.94) MULTIPLY (four.90)) SUBTRACT (20.0))
Declaration:
VarDecl: NULL double thirteen.99 = SI: (((nine.95) ADD (ten.96)) SUBTRACT (six.92))
Declaration:
VarDecl: NULL double fourteen.100 = SI: ((eleven.97) ADD (3))
Statement: Expression: ((glob1) = (one.87))
Statement: Expression: ((glob2) = (two.88))
Statement: Expression: ((glob3) = (three.89))
Statement: Expression: ((glob4) = (four.90))
Statement: Expression: ((glob5) = (five.91))
Statement: Expression: ((glob6) = (six.92))
Statement: Expression: ((glob7) = (seven.93))
Statement: Expression: ((glob8) = (eight.94))
Statement: Expression: ((glob9) = (nine.95))
Statement: Expression: ((glob10) = (ten.96))
Statement: Expression: ((glob11) = (eleven.97))
Statement: Expression: (callee((twelve.98), (thirteen.99), (fourteen.100), ))
Statement: Expression: (check_14_doubles((glob1), (glob2), (glob3), (glob4), (glob5), (glob6), (glob7), (glob8), (glob9), (glob10), (glob11), (12.0), (13.0), (14.0), (1), ))
Statement: return (0)

[(twelve.98 RetType: double), (thirteen.99 RetType: double), (fourteen.100 RetType: double)]
[(glob1 RetType: double), (glob2 RetType: double), (glob3 RetType: double), (glob4 RetType: double), (glob5 RetType: double), (glob6 RetType: double), (glob7 RetType: double), (glob8 RetType: double), (glob9 RetType: double), (glob10 RetType: double), (glob11 RetType: double), (12.0 RetType: double), (13.0 RetType: double), (14.0 RetType: double), ((double) (1 RetType: int) RetType: double)]
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

FunDecl: NULL callee (a.84, b.85, c.86, ) ParamTypes: (double, double, double, ) ReturnType: int

VarDecl: NULL double glob1
VarDecl: NULL double glob2
VarDecl: NULL double glob3
VarDecl: NULL double glob4
VarDecl: NULL double glob5
VarDecl: NULL double glob6
VarDecl: NULL double glob7
VarDecl: NULL double glob8
VarDecl: NULL double glob9
VarDecl: NULL double glob10
VarDecl: NULL double glob11
FunDecl: NULL target (one.87, two.88, three.89, ) ParamTypes: (double, double, double, ) ReturnType: int
Declaration:
VarDecl: NULL double four.90 = SI: ((three.89 : double) ADD (one.87 : double) : double) : double
Declaration:
VarDecl: NULL double five.91 = SI: ((two.88 : double) ADD (three.89 : double) : double) : double
Declaration:
VarDecl: NULL double six.92 = SI: ((three.89 : double) MULTIPLY (two.88 : double) : double) : double
Declaration:
VarDecl: NULL double seven.93 = SI: ((13.0 : double) SUBTRACT (six.92 : double) : double) : double
Declaration:
VarDecl: NULL double eight.94 = SI: ((four.90 : double) MULTIPLY (two.88 : double) : double) : double
Declaration:
VarDecl: NULL double nine.95 = SI: ((three.89 : double) MULTIPLY (three.89 : double) : double) : double
Declaration:
VarDecl: NULL double ten.96 = SI: ((five.91 : double) MULTIPLY (two.88 : double) : double) : double
Declaration:
VarDecl: NULL double eleven.97 = SI: (((seven.93 : double) MULTIPLY (two.88 : double) : double) SUBTRACT (three.89 : double) : double) : double
Declaration:
VarDecl: NULL double twelve.98 = SI: (((eight.94 : double) MULTIPLY (four.90 : double) : double) SUBTRACT (20.0 : double) : double) : double
Declaration:
VarDecl: NULL double thirteen.99 = SI: (((nine.95 : double) ADD (ten.96 : double) : double) SUBTRACT (six.92 : double) : double) : double
Declaration:
VarDecl: NULL double fourteen.100 = SI: ((eleven.97 : double) ADD ((double) (3 : int) : double) : double) : double
Statement: Expression: ((glob1 : double) = (one.87 : double) : double)
Statement: Expression: ((glob2 : double) = (two.88 : double) : double)
Statement: Expression: ((glob3 : double) = (three.89 : double) : double)
Statement: Expression: ((glob4 : double) = (four.90 : double) : double)
Statement: Expression: ((glob5 : double) = (five.91 : double) : double)
Statement: Expression: ((glob6 : double) = (six.92 : double) : double)
Statement: Expression: ((glob7 : double) = (seven.93 : double) : double)
Statement: Expression: ((glob8 : double) = (eight.94 : double) : double)
Statement: Expression: ((glob9 : double) = (nine.95 : double) : double)
Statement: Expression: ((glob10 : double) = (ten.96 : double) : double)
Statement: Expression: ((glob11 : double) = (eleven.97 : double) : double)
Statement: Expression: (callee((twelve.98 : double), (thirteen.99 : double), (fourteen.100 : double), ) : int)
Statement: Expression: (check_14_doubles((glob1 : double), (glob2 : double), (glob3 : double), (glob4 : double), (glob5 : double), (glob6 : double), (glob7 : double), (glob8 : double), (glob9 : double), (glob10 : double), (glob11 : double), (12.0 : double), (13.0 : double), (14.0 : double), ((double) (1 : int) : double), ) : int)
Statement: return (0 : int)

Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'callee': callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True, 'glob1': glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True, 'glob2': glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True, 'glob3': glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True, 'glob4': glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True, 'glob5': glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True, 'glob6': glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True, 'glob7': glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True, 'glob8': glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True, 'glob9': glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True, 'glob10': glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True, 'glob11': glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True, 'target': target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True, 'one.87': one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>, 'two.88': two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>, 'three.89': three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>, 'four.90': four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>, 'five.91': five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>, 'six.92': six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>, 'seven.93': seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>, 'eight.94': eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>, 'nine.95': nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>, 'ten.96': ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>, 'eleven.97': eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>, 'twelve.98': twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>, 'thirteen.99': thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>, 'fourteen.100': fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>}
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

FunDecl: NULL callee (a.84, b.85, c.86, ) ParamTypes: (double, double, double, ) ReturnType: int

VarDecl: NULL double glob1
VarDecl: NULL double glob2
VarDecl: NULL double glob3
VarDecl: NULL double glob4
VarDecl: NULL double glob5
VarDecl: NULL double glob6
VarDecl: NULL double glob7
VarDecl: NULL double glob8
VarDecl: NULL double glob9
VarDecl: NULL double glob10
VarDecl: NULL double glob11
FunDecl: NULL target (one.87, two.88, three.89, ) ParamTypes: (double, double, double, ) ReturnType: int
Declaration:
VarDecl: NULL double four.90 = SI: ((three.89 : double) ADD (one.87 : double) : double) : double
Declaration:
VarDecl: NULL double five.91 = SI: ((two.88 : double) ADD (three.89 : double) : double) : double
Declaration:
VarDecl: NULL double six.92 = SI: ((three.89 : double) MULTIPLY (two.88 : double) : double) : double
Declaration:
VarDecl: NULL double seven.93 = SI: ((13.0 : double) SUBTRACT (six.92 : double) : double) : double
Declaration:
VarDecl: NULL double eight.94 = SI: ((four.90 : double) MULTIPLY (two.88 : double) : double) : double
Declaration:
VarDecl: NULL double nine.95 = SI: ((three.89 : double) MULTIPLY (three.89 : double) : double) : double
Declaration:
VarDecl: NULL double ten.96 = SI: ((five.91 : double) MULTIPLY (two.88 : double) : double) : double
Declaration:
VarDecl: NULL double eleven.97 = SI: (((seven.93 : double) MULTIPLY (two.88 : double) : double) SUBTRACT (three.89 : double) : double) : double
Declaration:
VarDecl: NULL double twelve.98 = SI: (((eight.94 : double) MULTIPLY (four.90 : double) : double) SUBTRACT (20.0 : double) : double) : double
Declaration:
VarDecl: NULL double thirteen.99 = SI: (((nine.95 : double) ADD (ten.96 : double) : double) SUBTRACT (six.92 : double) : double) : double
Declaration:
VarDecl: NULL double fourteen.100 = SI: ((eleven.97 : double) ADD ((double) (3 : int) : double) : double) : double
Statement: Expression: ((glob1 : double) = (one.87 : double) : double)
Statement: Expression: ((glob2 : double) = (two.88 : double) : double)
Statement: Expression: ((glob3 : double) = (three.89 : double) : double)
Statement: Expression: ((glob4 : double) = (four.90 : double) : double)
Statement: Expression: ((glob5 : double) = (five.91 : double) : double)
Statement: Expression: ((glob6 : double) = (six.92 : double) : double)
Statement: Expression: ((glob7 : double) = (seven.93 : double) : double)
Statement: Expression: ((glob8 : double) = (eight.94 : double) : double)
Statement: Expression: ((glob9 : double) = (nine.95 : double) : double)
Statement: Expression: ((glob10 : double) = (ten.96 : double) : double)
Statement: Expression: ((glob11 : double) = (eleven.97 : double) : double)
Statement: Expression: (callee((twelve.98 : double), (thirteen.99 : double), (fourteen.100 : double), ) : int)
Statement: Expression: (check_14_doubles((glob1 : double), (glob2 : double), (glob3 : double), (glob4 : double), (glob5 : double), (glob6 : double), (glob7 : double), (glob8 : double), (glob9 : double), (glob10 : double), (glob11 : double), (12.0 : double), (13.0 : double), (14.0 : double), ((double) (1 : int) : double), ) : int)
Statement: return (0 : int)

check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True
glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True
glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True
glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True
glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True
glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True
glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True
glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True
glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True
glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True
glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True
glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True
target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True
one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>
two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>
three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>
four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>
five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>
six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>
seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>
eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>
nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>
ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>
eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>
twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>
thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>
fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>
tmp.101 double <typeChecker.LocalAttributes object at 0x7f1586019f70>
tmp.102 double <typeChecker.LocalAttributes object at 0x7f158601bd70>
tmp.103 double <typeChecker.LocalAttributes object at 0x7f158601bfb0>
tmp.104 double <typeChecker.LocalAttributes object at 0x7f15860201d0>
tmp.105 double <typeChecker.LocalAttributes object at 0x7f1586020380>
tmp.106 double <typeChecker.LocalAttributes object at 0x7f1586020560>
tmp.107 double <typeChecker.LocalAttributes object at 0x7f1586020740>
tmp.108 double <typeChecker.LocalAttributes object at 0x7f1586020a70>
tmp.109 double <typeChecker.LocalAttributes object at 0x7f1586020c50>
tmp.110 double <typeChecker.LocalAttributes object at 0x7f1586020e00>
tmp.111 double <typeChecker.LocalAttributes object at 0x7f1586020ce0>
tmp.112 double <typeChecker.LocalAttributes object at 0x7f15860211c0>
tmp.113 double <typeChecker.LocalAttributes object at 0x7f15860210a0>
tmp.114 double <typeChecker.LocalAttributes object at 0x7f15860193a0>
tmp.115 double <typeChecker.LocalAttributes object at 0x7f1586021400>
tmp.116 double <typeChecker.LocalAttributes object at 0x7f1586021970>
tmp.117 double <typeChecker.LocalAttributes object at 0x7f1586021ee0>
tmp.118 double <typeChecker.LocalAttributes object at 0x7f1586022030>
tmp.119 int <typeChecker.LocalAttributes object at 0x7f1586021c40>
tmp.120 double <typeChecker.LocalAttributes object at 0x7f1586022270>
tmp.121 double <typeChecker.LocalAttributes object at 0x7f15860223c0>
tmp.122 double <typeChecker.LocalAttributes object at 0x7f1586022510>
tmp.123 double <typeChecker.LocalAttributes object at 0x7f1586022660>
tmp.124 double <typeChecker.LocalAttributes object at 0x7f15860227b0>
tmp.125 double <typeChecker.LocalAttributes object at 0x7f1586022900>
tmp.126 double <typeChecker.LocalAttributes object at 0x7f1586022a50>
tmp.127 double <typeChecker.LocalAttributes object at 0x7f1586022ba0>
tmp.128 double <typeChecker.LocalAttributes object at 0x7f1586022cf0>
tmp.129 double <typeChecker.LocalAttributes object at 0x7f1586022e40>
tmp.130 double <typeChecker.LocalAttributes object at 0x7f1586022f90>
tmp.131 double <typeChecker.LocalAttributes object at 0x7f1586023110>
tmp.132 double <typeChecker.LocalAttributes object at 0x7f1586023290>
tmp.133 double <typeChecker.LocalAttributes object at 0x7f15860233e0>
tmp.134 double <typeChecker.LocalAttributes object at 0x7f1586023680>
tmp.135 double <typeChecker.LocalAttributes object at 0x7f1586023530>
tmp.136 int <typeChecker.LocalAttributes object at 0x7f15860231a0>
TAC Program:[Function: target (['one.87', 'two.88', 'three.89']) instructions:[tmp.101 = three.89 + one.87, CopyToOffset(four.90 + 0) = tmp.101 , tmp.102 = two.88 + three.89, CopyToOffset(five.91 + 0) = tmp.102 , tmp.103 = three.89 * two.88, CopyToOffset(six.92 + 0) = tmp.103 , tmp.104 = 13.0 - six.92, CopyToOffset(seven.93 + 0) = tmp.104 , tmp.105 = four.90 * two.88, CopyToOffset(eight.94 + 0) = tmp.105 , tmp.106 = three.89 * three.89, CopyToOffset(nine.95 + 0) = tmp.106 , tmp.107 = five.91 * two.88, CopyToOffset(ten.96 + 0) = tmp.107 , tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, CopyToOffset(eleven.97 + 0) = tmp.109 , tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, CopyToOffset(twelve.98 + 0) = tmp.111 , tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, CopyToOffset(thirteen.99 + 0) = tmp.113 , IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, CopyToOffset(fourteen.100 + 0) = tmp.115 , Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0, Return 0], Global: True glob1 = [c_double(0.0)], Global: True glob2 = [c_double(0.0)], Global: True glob3 = [c_double(0.0)], Global: True glob4 = [c_double(0.0)], Global: True glob5 = [c_double(0.0)], Global: True glob6 = [c_double(0.0)], Global: True glob7 = [c_double(0.0)], Global: True glob8 = [c_double(0.0)], Global: True glob9 = [c_double(0.0)], Global: True glob10 = [c_double(0.0)], Global: True glob11 = [c_double(0.0)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'callee': callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True, 'glob1': glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True, 'glob2': glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True, 'glob3': glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True, 'glob4': glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True, 'glob5': glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True, 'glob6': glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True, 'glob7': glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True, 'glob8': glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True, 'glob9': glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True, 'glob10': glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True, 'glob11': glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True, 'target': target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True, 'one.87': one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>, 'two.88': two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>, 'three.89': three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>, 'four.90': four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>, 'five.91': five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>, 'six.92': six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>, 'seven.93': seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>, 'eight.94': eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>, 'nine.95': nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>, 'ten.96': ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>, 'eleven.97': eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>, 'twelve.98': twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>, 'thirteen.99': thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>, 'fourteen.100': fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>, 'tmp.101': tmp.101 double <typeChecker.LocalAttributes object at 0x7f1586019f70>, 'tmp.102': tmp.102 double <typeChecker.LocalAttributes object at 0x7f158601bd70>, 'tmp.103': tmp.103 double <typeChecker.LocalAttributes object at 0x7f158601bfb0>, 'tmp.104': tmp.104 double <typeChecker.LocalAttributes object at 0x7f15860201d0>, 'tmp.105': tmp.105 double <typeChecker.LocalAttributes object at 0x7f1586020380>, 'tmp.106': tmp.106 double <typeChecker.LocalAttributes object at 0x7f1586020560>, 'tmp.107': tmp.107 double <typeChecker.LocalAttributes object at 0x7f1586020740>, 'tmp.108': tmp.108 double <typeChecker.LocalAttributes object at 0x7f1586020a70>, 'tmp.109': tmp.109 double <typeChecker.LocalAttributes object at 0x7f1586020c50>, 'tmp.110': tmp.110 double <typeChecker.LocalAttributes object at 0x7f1586020e00>, 'tmp.111': tmp.111 double <typeChecker.LocalAttributes object at 0x7f1586020ce0>, 'tmp.112': tmp.112 double <typeChecker.LocalAttributes object at 0x7f15860211c0>, 'tmp.113': tmp.113 double <typeChecker.LocalAttributes object at 0x7f15860210a0>, 'tmp.114': tmp.114 double <typeChecker.LocalAttributes object at 0x7f15860193a0>, 'tmp.115': tmp.115 double <typeChecker.LocalAttributes object at 0x7f1586021400>, 'tmp.116': tmp.116 double <typeChecker.LocalAttributes object at 0x7f1586021970>, 'tmp.117': tmp.117 double <typeChecker.LocalAttributes object at 0x7f1586021ee0>, 'tmp.118': tmp.118 double <typeChecker.LocalAttributes object at 0x7f1586022030>, 'tmp.119': tmp.119 int <typeChecker.LocalAttributes object at 0x7f1586021c40>, 'tmp.120': tmp.120 double <typeChecker.LocalAttributes object at 0x7f1586022270>, 'tmp.121': tmp.121 double <typeChecker.LocalAttributes object at 0x7f15860223c0>, 'tmp.122': tmp.122 double <typeChecker.LocalAttributes object at 0x7f1586022510>, 'tmp.123': tmp.123 double <typeChecker.LocalAttributes object at 0x7f1586022660>, 'tmp.124': tmp.124 double <typeChecker.LocalAttributes object at 0x7f15860227b0>, 'tmp.125': tmp.125 double <typeChecker.LocalAttributes object at 0x7f1586022900>, 'tmp.126': tmp.126 double <typeChecker.LocalAttributes object at 0x7f1586022a50>, 'tmp.127': tmp.127 double <typeChecker.LocalAttributes object at 0x7f1586022ba0>, 'tmp.128': tmp.128 double <typeChecker.LocalAttributes object at 0x7f1586022cf0>, 'tmp.129': tmp.129 double <typeChecker.LocalAttributes object at 0x7f1586022e40>, 'tmp.130': tmp.130 double <typeChecker.LocalAttributes object at 0x7f1586022f90>, 'tmp.131': tmp.131 double <typeChecker.LocalAttributes object at 0x7f1586023110>, 'tmp.132': tmp.132 double <typeChecker.LocalAttributes object at 0x7f1586023290>, 'tmp.133': tmp.133 double <typeChecker.LocalAttributes object at 0x7f15860233e0>, 'tmp.134': tmp.134 double <typeChecker.LocalAttributes object at 0x7f1586023680>, 'tmp.135': tmp.135 double <typeChecker.LocalAttributes object at 0x7f1586023530>, 'tmp.136': tmp.136 int <typeChecker.LocalAttributes object at 0x7f15860231a0>}
OPTIMIZING FUNCTION Function: target (['one.87', 'two.88', 'three.89']) instructions:[tmp.101 = three.89 + one.87, CopyToOffset(four.90 + 0) = tmp.101 , tmp.102 = two.88 + three.89, CopyToOffset(five.91 + 0) = tmp.102 , tmp.103 = three.89 * two.88, CopyToOffset(six.92 + 0) = tmp.103 , tmp.104 = 13.0 - six.92, CopyToOffset(seven.93 + 0) = tmp.104 , tmp.105 = four.90 * two.88, CopyToOffset(eight.94 + 0) = tmp.105 , tmp.106 = three.89 * three.89, CopyToOffset(nine.95 + 0) = tmp.106 , tmp.107 = five.91 * two.88, CopyToOffset(ten.96 + 0) = tmp.107 , tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, CopyToOffset(eleven.97 + 0) = tmp.109 , tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, CopyToOffset(twelve.98 + 0) = tmp.111 , tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, CopyToOffset(thirteen.99 + 0) = tmp.113 , IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, CopyToOffset(fourteen.100 + 0) = tmp.115 , Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.101 = three.89 + one.87, CopyToOffset(four.90 + 0) = tmp.101 , tmp.102 = two.88 + three.89, CopyToOffset(five.91 + 0) = tmp.102 , tmp.103 = three.89 * two.88, CopyToOffset(six.92 + 0) = tmp.103 , tmp.104 = 13.0 - six.92, CopyToOffset(seven.93 + 0) = tmp.104 , tmp.105 = four.90 * two.88, CopyToOffset(eight.94 + 0) = tmp.105 , tmp.106 = three.89 * three.89, CopyToOffset(nine.95 + 0) = tmp.106 , tmp.107 = five.91 * two.88, CopyToOffset(ten.96 + 0) = tmp.107 , tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, CopyToOffset(eleven.97 + 0) = tmp.109 , tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, CopyToOffset(twelve.98 + 0) = tmp.111 , tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, CopyToOffset(thirteen.99 + 0) = tmp.113 , IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, CopyToOffset(fourteen.100 + 0) = tmp.115 , Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0, Return 0]
NEW LIST [tmp.101 = three.89 + one.87, Copy four.90 = tmp.101, tmp.102 = two.88 + three.89, Copy five.91 = tmp.102, tmp.103 = three.89 * two.88, Copy six.92 = tmp.103, tmp.104 = 13.0 - six.92, Copy seven.93 = tmp.104, tmp.105 = four.90 * two.88, Copy eight.94 = tmp.105, tmp.106 = three.89 * three.89, Copy nine.95 = tmp.106, tmp.107 = five.91 * two.88, Copy ten.96 = tmp.107, tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, Copy eleven.97 = tmp.109, tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.101 = three.89 + one.87
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, Copy four.90 = tmp.101, tmp.102 = two.88 + three.89, Copy five.91 = tmp.102, tmp.103 = three.89 * two.88, Copy six.92 = tmp.103, tmp.104 = 13.0 - six.92, Copy seven.93 = tmp.104, tmp.105 = four.90 * two.88, Copy eight.94 = tmp.105, tmp.106 = three.89 * three.89, Copy nine.95 = tmp.106, tmp.107 = five.91 * two.88, Copy ten.96 = tmp.107, tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, Copy eleven.97 = tmp.109, tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), Copy four.90 = tmp.101: set(), tmp.102 = two.88 + three.89: set(), Copy five.91 = tmp.102: set(), tmp.103 = three.89 * two.88: set(), Copy six.92 = tmp.103: set(), tmp.104 = 13.0 - six.92: set(), Copy seven.93 = tmp.104: set(), tmp.105 = four.90 * two.88: set(), Copy eight.94 = tmp.105: set(), tmp.106 = three.89 * three.89: set(), Copy nine.95 = tmp.106: set(), tmp.107 = five.91 * two.88: set(), Copy ten.96 = tmp.107: set(), tmp.108 = seven.93 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), Copy eleven.97 = tmp.109: set(), tmp.110 = eight.94 * four.90: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = nine.95 + ten.96: set(), tmp.113 = tmp.112 - six.92: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = eleven.97 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = four.90: set(), Copy glob5 = five.91: set(), Copy glob6 = six.92: set(), Copy glob7 = seven.93: set(), Copy glob8 = eight.94: set(), Copy glob9 = nine.95: set(), Copy glob10 = ten.96: set(), Copy glob11 = eleven.97: set(), Copy tmp.116 = twelve.98: set(), Copy tmp.117 = thirteen.99: set(), Copy tmp.118 = fourteen.100: set(), tmp.119 = callee([tmp.116, tmp.117, tmp.118]): set(), Copy tmp.120 = glob1: set(), Copy tmp.121 = glob2: set(), Copy tmp.122 = glob3: set(), Copy tmp.123 = glob4: set(), Copy tmp.124 = glob5: set(), Copy tmp.125 = glob6: set(), Copy tmp.126 = glob7: set(), Copy tmp.127 = glob8: set(), Copy tmp.128 = glob9: set(), Copy tmp.129 = glob10: set(), Copy tmp.130 = glob11: set(), Copy tmp.131 = 12.0: set(), Copy tmp.132 = 13.0: set(), Copy tmp.133 = 14.0: set(), IntToDouble tmp.134 = 1: set(), Copy tmp.135 = tmp.134: set(), tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]): set(), Return 0: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, Copy four.90 = tmp.101, tmp.102 = two.88 + three.89, Copy five.91 = tmp.102, tmp.103 = three.89 * two.88, Copy six.92 = tmp.103, tmp.104 = 13.0 - six.92, Copy seven.93 = tmp.104, tmp.105 = four.90 * two.88, Copy eight.94 = tmp.105, tmp.106 = three.89 * three.89, Copy nine.95 = tmp.106, tmp.107 = five.91 * two.88, Copy ten.96 = tmp.107, tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, Copy eleven.97 = tmp.109, tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), Copy four.90 = tmp.101: set(), tmp.102 = two.88 + three.89: set(), Copy five.91 = tmp.102: set(), tmp.103 = three.89 * two.88: set(), Copy six.92 = tmp.103: set(), tmp.104 = 13.0 - six.92: set(), Copy seven.93 = tmp.104: set(), tmp.105 = four.90 * two.88: set(), Copy eight.94 = tmp.105: set(), tmp.106 = three.89 * three.89: set(), Copy nine.95 = tmp.106: set(), tmp.107 = five.91 * two.88: set(), Copy ten.96 = tmp.107: set(), tmp.108 = seven.93 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), Copy eleven.97 = tmp.109: set(), tmp.110 = eight.94 * four.90: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = nine.95 + ten.96: set(), tmp.113 = tmp.112 - six.92: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = eleven.97 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = four.90: set(), Copy glob5 = five.91: set(), Copy glob6 = six.92: set(), Copy glob7 = seven.93: set(), Copy glob8 = eight.94: set(), Copy glob9 = nine.95: set(), Copy glob10 = ten.96: set(), Copy glob11 = eleven.97: set(), Copy tmp.116 = twelve.98: set(), Copy tmp.117 = thirteen.99: set(), Copy tmp.118 = fourteen.100: set(), tmp.119 = callee([tmp.116, tmp.117, tmp.118]): set(), Copy tmp.120 = glob1: set(), Copy tmp.121 = glob2: set(), Copy tmp.122 = glob3: set(), Copy tmp.123 = glob4: set(), Copy tmp.124 = glob5: set(), Copy tmp.125 = glob6: set(), Copy tmp.126 = glob7: set(), Copy tmp.127 = glob8: set(), Copy tmp.128 = glob9: set(), Copy tmp.129 = glob10: set(), Copy tmp.130 = glob11: set(), Copy tmp.131 = 12.0: set(), Copy tmp.132 = 13.0: set(), Copy tmp.133 = 14.0: set(), IntToDouble tmp.134 = 1: set(), Copy tmp.135 = tmp.134: set(), tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, Copy four.90 = tmp.101, tmp.102 = two.88 + three.89, Copy five.91 = tmp.102, tmp.103 = three.89 * two.88, Copy six.92 = tmp.103, tmp.104 = 13.0 - six.92, Copy seven.93 = tmp.104, tmp.105 = four.90 * two.88, Copy eight.94 = tmp.105, tmp.106 = three.89 * three.89, Copy nine.95 = tmp.106, tmp.107 = five.91 * two.88, Copy ten.96 = tmp.107, tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, Copy eleven.97 = tmp.109, tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), Copy four.90 = tmp.101: set(), tmp.102 = two.88 + three.89: set(), Copy five.91 = tmp.102: set(), tmp.103 = three.89 * two.88: set(), Copy six.92 = tmp.103: set(), tmp.104 = 13.0 - six.92: set(), Copy seven.93 = tmp.104: set(), tmp.105 = four.90 * two.88: set(), Copy eight.94 = tmp.105: set(), tmp.106 = three.89 * three.89: set(), Copy nine.95 = tmp.106: set(), tmp.107 = five.91 * two.88: set(), Copy ten.96 = tmp.107: set(), tmp.108 = seven.93 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), Copy eleven.97 = tmp.109: set(), tmp.110 = eight.94 * four.90: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = nine.95 + ten.96: set(), tmp.113 = tmp.112 - six.92: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = eleven.97 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = four.90: set(), Copy glob5 = five.91: set(), Copy glob6 = six.92: set(), Copy glob7 = seven.93: set(), Copy glob8 = eight.94: set(), Copy glob9 = nine.95: set(), Copy glob10 = ten.96: set(), Copy glob11 = eleven.97: set(), Copy tmp.116 = twelve.98: set(), Copy tmp.117 = thirteen.99: set(), Copy tmp.118 = fourteen.100: set(), tmp.119 = callee([tmp.116, tmp.117, tmp.118]): set(), Copy tmp.120 = glob1: set(), Copy tmp.121 = glob2: set(), Copy tmp.122 = glob3: set(), Copy tmp.123 = glob4: set(), Copy tmp.124 = glob5: set(), Copy tmp.125 = glob6: set(), Copy tmp.126 = glob7: set(), Copy tmp.127 = glob8: set(), Copy tmp.128 = glob9: set(), Copy tmp.129 = glob10: set(), Copy tmp.130 = glob11: set(), Copy tmp.131 = 12.0: set(), Copy tmp.132 = 13.0: set(), Copy tmp.133 = 14.0: set(), IntToDouble tmp.134 = 1: set(), Copy tmp.135 = tmp.134: set(), tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, Copy four.90 = tmp.101, tmp.102 = two.88 + three.89, Copy five.91 = tmp.102, tmp.103 = three.89 * two.88, Copy six.92 = tmp.103, tmp.104 = 13.0 - six.92, Copy seven.93 = tmp.104, tmp.105 = four.90 * two.88, Copy eight.94 = tmp.105, tmp.106 = three.89 * three.89, Copy nine.95 = tmp.106, tmp.107 = five.91 * two.88, Copy ten.96 = tmp.107, tmp.108 = seven.93 * two.88, tmp.109 = tmp.108 - three.89, Copy eleven.97 = tmp.109, tmp.110 = eight.94 * four.90, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = nine.95 + ten.96, tmp.113 = tmp.112 - six.92, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = eleven.97 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = four.90, Copy glob5 = five.91, Copy glob6 = six.92, Copy glob7 = seven.93, Copy glob8 = eight.94, Copy glob9 = nine.95, Copy glob10 = ten.96, Copy glob11 = eleven.97, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.118 = fourteen.100, tmp.119 = callee([tmp.116, tmp.117, tmp.118]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), Copy four.90 = tmp.101: set(), tmp.102 = two.88 + three.89: set(), Copy five.91 = tmp.102: set(), tmp.103 = three.89 * two.88: set(), Copy six.92 = tmp.103: set(), tmp.104 = 13.0 - six.92: set(), Copy seven.93 = tmp.104: set(), tmp.105 = four.90 * two.88: set(), Copy eight.94 = tmp.105: set(), tmp.106 = three.89 * three.89: set(), Copy nine.95 = tmp.106: set(), tmp.107 = five.91 * two.88: set(), Copy ten.96 = tmp.107: set(), tmp.108 = seven.93 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), Copy eleven.97 = tmp.109: set(), tmp.110 = eight.94 * four.90: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = nine.95 + ten.96: set(), tmp.113 = tmp.112 - six.92: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = eleven.97 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = four.90: set(), Copy glob5 = five.91: set(), Copy glob6 = six.92: set(), Copy glob7 = seven.93: set(), Copy glob8 = eight.94: set(), Copy glob9 = nine.95: set(), Copy glob10 = ten.96: set(), Copy glob11 = eleven.97: set(), Copy tmp.116 = twelve.98: set(), Copy tmp.117 = thirteen.99: set(), Copy tmp.118 = fourteen.100: set(), tmp.119 = callee([tmp.116, tmp.117, tmp.118]): set(), Copy tmp.120 = glob1: set(), Copy tmp.121 = glob2: set(), Copy tmp.122 = glob3: set(), Copy tmp.123 = glob4: set(), Copy tmp.124 = glob5: set(), Copy tmp.125 = glob6: set(), Copy tmp.126 = glob7: set(), Copy tmp.127 = glob8: set(), Copy tmp.128 = glob9: set(), Copy tmp.129 = glob10: set(), Copy tmp.130 = glob11: set(), Copy tmp.131 = 12.0: set(), Copy tmp.132 = 13.0: set(), Copy tmp.133 = 14.0: set(), IntToDouble tmp.134 = 1: set(), Copy tmp.135 = tmp.134: set(), tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.101 = three.89 + one.87 set()
Copy four.90 = tmp.101 set()
tmp.102 = two.88 + three.89 {Copy four.90 = tmp.101}
Copy five.91 = tmp.102 {Copy four.90 = tmp.101}
tmp.103 = three.89 * two.88 {Copy four.90 = tmp.101, Copy five.91 = tmp.102}
Copy six.92 = tmp.103 {Copy four.90 = tmp.101, Copy five.91 = tmp.102}
tmp.104 = 13.0 - six.92 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy six.92 = tmp.103}
Copy seven.93 = tmp.104 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy six.92 = tmp.103}
tmp.105 = four.90 * two.88 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}
Copy eight.94 = tmp.105 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}
tmp.106 = three.89 * three.89 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}
Copy nine.95 = tmp.106 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}
tmp.107 = five.91 * two.88 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}
Copy ten.96 = tmp.107 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}
tmp.108 = seven.93 * two.88 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy seven.93 = tmp.104}
tmp.109 = tmp.108 - three.89 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}
Copy eleven.97 = tmp.109 {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}
tmp.110 = eight.94 * four.90 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
tmp.111 = tmp.110 - 20.0 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
Copy twelve.98 = tmp.111 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
tmp.112 = nine.95 + ten.96 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy twelve.98 = tmp.111, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
tmp.113 = tmp.112 - six.92 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
Copy thirteen.99 = tmp.113 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
IntToDouble tmp.114 = 3 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
tmp.115 = eleven.97 + tmp.114 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
Copy fourteen.100 = tmp.115 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}
Copy glob1 = one.87 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob2 = two.88 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob3 = three.89 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob4 = four.90 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob5 = five.91 {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob6 = six.92 {Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob7 = seven.93 {Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob8 = eight.94 {Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob9 = nine.95 {Copy glob1 = one.87, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob10 = ten.96 {Copy glob1 = one.87, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy glob11 = eleven.97 {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.116 = twelve.98 {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy glob7 = seven.93, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.117 = thirteen.99 {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy tmp.116 = twelve.98, Copy glob6 = six.92, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.118 = fourteen.100 {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy glob6 = six.92, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
tmp.119 = callee([tmp.116, tmp.117, tmp.118]) {Copy tmp.118 = fourteen.100, Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy glob7 = seven.93, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy glob6 = six.92, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.120 = glob1 {Copy tmp.118 = fourteen.100, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.121 = glob2 {Copy tmp.118 = fourteen.100, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy tmp.120 = glob1, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.122 = glob3 {Copy tmp.118 = fourteen.100, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.123 = glob4 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.124 = glob5 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.125 = glob6 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy tmp.124 = glob5, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.126 = glob7 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.127 = glob8 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.128 = glob9 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.129 = glob10 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.130 = glob11 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.131 = 12.0 {Copy tmp.118 = fourteen.100, Copy tmp.130 = glob11, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
<class 'parser.ConstDouble'>
Copy tmp.132 = 13.0 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy tmp.131 = 12.0, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
<class 'parser.ConstDouble'>
Copy tmp.133 = 14.0 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
<class 'parser.ConstDouble'>
IntToDouble tmp.134 = 1 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Copy tmp.135 = tmp.134 {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]) {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.135 = tmp.134, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
Return 0 {Copy tmp.118 = fourteen.100, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eleven.97 = tmp.109, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.135 = tmp.134, Copy tmp.133 = 14.0, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
OLD ANNOT: {Copy glob1 = one.87, Copy glob10 = ten.96, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy glob3 = three.89, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.131 = 12.0, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy tmp.120 = glob1, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy tmp.130 = glob11, Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy four.90 = tmp.101, Copy tmp.135 = tmp.134, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
NEW ANNOT: {Copy tmp.118 = fourteen.100, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eleven.97 = tmp.109, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.135 = tmp.134, Copy tmp.133 = 14.0, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, Copy four.90 = tmp.101, tmp.102 = two.88 + three.89, Copy five.91 = tmp.102, tmp.103 = three.89 * two.88, Copy six.92 = tmp.103, tmp.104 = 13.0 - tmp.103, Copy seven.93 = tmp.104, tmp.105 = tmp.101 * two.88, Copy eight.94 = tmp.105, tmp.106 = three.89 * three.89, Copy nine.95 = tmp.106, tmp.107 = tmp.102 * two.88, Copy ten.96 = tmp.107, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, Copy eleven.97 = tmp.109, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, Copy tmp.116 = tmp.111, Copy tmp.117 = tmp.113, Copy tmp.118 = tmp.115, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), Copy tmp.120 = glob1, Copy tmp.121 = glob2, Copy tmp.122 = glob3, Copy tmp.123 = glob4, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy tmp.126 = glob7, Copy tmp.127 = glob8, Copy tmp.128 = glob9, Copy tmp.129 = glob10, Copy tmp.130 = glob11, Copy tmp.131 = 12.0, Copy tmp.132 = 13.0, Copy tmp.133 = 14.0, IntToDouble tmp.134 = 1, Copy tmp.135 = tmp.134, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), Copy four.90 = tmp.101: set(), tmp.102 = two.88 + three.89: {Copy four.90 = tmp.101}, Copy five.91 = tmp.102: {Copy four.90 = tmp.101}, tmp.103 = three.89 * two.88: {Copy four.90 = tmp.101, Copy five.91 = tmp.102}, Copy six.92 = tmp.103: {Copy four.90 = tmp.101, Copy five.91 = tmp.102}, tmp.104 = 13.0 - six.92: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy six.92 = tmp.103}, Copy seven.93 = tmp.104: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy six.92 = tmp.103}, tmp.105 = four.90 * two.88: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}, Copy eight.94 = tmp.105: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}, tmp.106 = three.89 * three.89: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}, Copy nine.95 = tmp.106: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}, tmp.107 = five.91 * two.88: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}, Copy ten.96 = tmp.107: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy seven.93 = tmp.104}, tmp.108 = seven.93 * two.88: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy seven.93 = tmp.104}, tmp.109 = tmp.108 - three.89: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}, Copy eleven.97 = tmp.109: {Copy four.90 = tmp.101, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy seven.93 = tmp.104, Copy six.92 = tmp.103}, tmp.110 = eight.94 * four.90: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, tmp.111 = tmp.110 - 20.0: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, Copy twelve.98 = tmp.111: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, tmp.112 = nine.95 + ten.96: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy six.92 = tmp.103, Copy twelve.98 = tmp.111, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, tmp.113 = tmp.112 - six.92: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, Copy thirteen.99 = tmp.113: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, IntToDouble tmp.114 = 3: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, tmp.115 = eleven.97 + tmp.114: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, Copy fourteen.100 = tmp.115: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104}, Copy glob1 = one.87: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob2 = two.88: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob3 = three.89: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob4 = four.90: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob5 = five.91: {Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy six.92 = tmp.103, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob6 = six.92: {Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob7 = seven.93: {Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob8 = eight.94: {Copy six.92 = tmp.103, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob9 = nine.95: {Copy glob1 = one.87, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob10 = ten.96: {Copy glob1 = one.87, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy glob11 = eleven.97: {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.116 = twelve.98: {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy glob7 = seven.93, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy glob6 = six.92, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.117 = thirteen.99: {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob7 = seven.93, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy tmp.116 = twelve.98, Copy glob6 = six.92, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.118 = fourteen.100: {Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy glob7 = seven.93, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy glob6 = six.92, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, tmp.119 = callee([tmp.116, tmp.117, tmp.118]): {Copy tmp.118 = fourteen.100, Copy glob1 = one.87, Copy glob10 = ten.96, Copy six.92 = tmp.103, Copy glob7 = seven.93, Copy thirteen.99 = tmp.113, Copy glob9 = nine.95, Copy five.91 = tmp.102, Copy glob11 = eleven.97, Copy glob5 = five.91, Copy glob3 = three.89, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy glob8 = eight.94, Copy glob4 = four.90, Copy eight.94 = tmp.105, Copy glob2 = two.88, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy glob6 = six.92, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.120 = glob1: {Copy tmp.118 = fourteen.100, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.121 = glob2: {Copy tmp.118 = fourteen.100, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy six.92 = tmp.103, Copy tmp.120 = glob1, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy eleven.97 = tmp.109, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.122 = glob3: {Copy tmp.118 = fourteen.100, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.123 = glob4: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.124 = glob5: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.125 = glob6: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy tmp.124 = glob5, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.126 = glob7: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.127 = glob8: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.128 = glob9: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.129 = glob10: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.130 = glob11: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.131 = 12.0: {Copy tmp.118 = fourteen.100, Copy tmp.130 = glob11, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.132 = 13.0: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy eleven.97 = tmp.109, Copy tmp.131 = 12.0, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.133 = 14.0: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, IntToDouble tmp.134 = 1: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Copy tmp.135 = tmp.134: {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, tmp.136 = check_14_doubles([tmp.120, tmp.121, tmp.122, tmp.123, tmp.124, tmp.125, tmp.126, tmp.127, tmp.128, tmp.129, tmp.130, tmp.131, tmp.132, tmp.133, tmp.135]): {Copy tmp.118 = fourteen.100, Copy tmp.122 = glob3, Copy tmp.129 = glob10, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy tmp.127 = glob8, Copy tmp.121 = glob2, Copy tmp.126 = glob7, Copy tmp.124 = glob5, Copy tmp.128 = glob9, Copy tmp.125 = glob6, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy eleven.97 = tmp.109, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.120 = glob1, Copy tmp.135 = tmp.134, Copy tmp.133 = 14.0, Copy tmp.123 = glob4, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.130 = glob11, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}, Return 0: {Copy tmp.118 = fourteen.100, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eleven.97 = tmp.109, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.135 = tmp.134, Copy tmp.133 = 14.0, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}} ReachingCopies: {Copy tmp.118 = fourteen.100, Copy six.92 = tmp.103, Copy thirteen.99 = tmp.113, Copy five.91 = tmp.102, Copy eleven.97 = tmp.109, Copy tmp.132 = 13.0, Copy tmp.131 = 12.0, Copy four.90 = tmp.101, Copy nine.95 = tmp.106, Copy ten.96 = tmp.107, Copy twelve.98 = tmp.111, Copy tmp.135 = tmp.134, Copy tmp.133 = 14.0, Copy eight.94 = tmp.105, Copy tmp.116 = twelve.98, Copy tmp.117 = thirteen.99, Copy seven.93 = tmp.104, Copy fourteen.100 = tmp.115}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
callee callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True
glob1 glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True
glob2 glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True
glob3 glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True
glob4 glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True
glob5 glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True
glob6 glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True
glob7 glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True
glob8 glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True
glob9 glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True
glob10 glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True
glob11 glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True
target target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True
one.87 one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>
two.88 two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>
three.89 three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>
four.90 four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>
five.91 five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>
six.92 six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>
seven.93 seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>
eight.94 eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>
nine.95 nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>
ten.96 ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>
eleven.97 eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>
twelve.98 twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>
thirteen.99 thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>
fourteen.100 fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f1586019f70>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f158601bd70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f158601bfb0>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f15860201d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f1586020380>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f1586020560>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f1586020740>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f1586020a70>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f1586020c50>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f1586020e00>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f1586020ce0>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f15860211c0>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f15860210a0>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f15860193a0>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f1586021400>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f1586021970>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f1586021ee0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f1586022030>
tmp.119 tmp.119 int <typeChecker.LocalAttributes object at 0x7f1586021c40>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f1586022270>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f15860223c0>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f1586022510>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f1586022660>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f15860227b0>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f1586022900>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f1586022a50>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f1586022ba0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f1586022cf0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f1586022e40>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f1586022f90>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f1586023110>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f1586023290>
tmp.133 tmp.133 double <typeChecker.LocalAttributes object at 0x7f15860233e0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f1586023680>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f1586023530>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f15860231a0>
--------------LIVE for block 0-------------------
Return 0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]) {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.135 = tmp.134 {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
IntToDouble tmp.134 = 1 {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.133 = 14.0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.132 = 13.0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.131 = 12.0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.130 = glob11 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.129 = glob10 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.128 = glob9 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.127 = glob8 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.126 = glob7 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.125 = glob6 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.124 = glob5 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.123 = glob4 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.122 = glob3 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.121 = glob2 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Copy tmp.120 = glob1 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]) {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.118 = tmp.115 {glob11, thirteen.99, glob9, glob5, glob10, glob4, glob6, glob2, glob7, twelve.98, fourteen.100, glob3, glob1, glob8}
Copy tmp.117 = tmp.113 {glob11, thirteen.99, glob9, glob5, glob10, tmp.115, glob4, glob6, glob2, glob7, twelve.98, fourteen.100, glob3, glob1, glob8}
Copy tmp.116 = tmp.111 {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, glob11, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8}
Copy glob11 = tmp.109 {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, glob11, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8, tmp.111}
Copy glob10 = tmp.107 {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8, tmp.109}
Copy glob9 = tmp.106 {glob5, tmp.107, glob4, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, glob9, tmp.113, glob6, twelve.98, tmp.115, glob8, tmp.109}
Copy glob8 = tmp.105 {glob5, tmp.106, tmp.107, glob4, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, glob6, twelve.98, tmp.115, glob8, tmp.109}
Copy glob7 = tmp.104 {glob5, tmp.106, tmp.107, glob4, tmp.105, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, glob6, twelve.98, tmp.115, tmp.109}
Copy glob6 = tmp.103 {glob5, tmp.106, tmp.107, glob4, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, glob6, twelve.98, tmp.115, tmp.104, tmp.109}
Copy glob5 = tmp.102 {glob5, tmp.106, tmp.107, glob4, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, twelve.98, tmp.115, tmp.104, tmp.109}
Copy glob4 = tmp.101 {tmp.106, tmp.107, tmp.102, glob4, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, twelve.98, tmp.115, tmp.104, tmp.109}
Copy glob3 = three.89 {tmp.106, tmp.101, tmp.107, tmp.102, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, twelve.98, tmp.115, tmp.104, tmp.109}
Copy glob2 = two.88 {tmp.106, tmp.101, tmp.107, tmp.102, tmp.105, glob2, fourteen.100, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}
Copy glob1 = one.87 {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, fourteen.100, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}
Copy fourteen.100 = tmp.115 {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, fourteen.100, one.87, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}
tmp.115 = tmp.109 + tmp.114 {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, one.87, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}
IntToDouble tmp.114 = 3 {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, one.87, tmp.114, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.104, tmp.109}
Copy thirteen.99 = tmp.113 {tmp.111, thirteen.99, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}
tmp.113 = tmp.112 - tmp.103 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}
tmp.112 = tmp.106 + tmp.107 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, tmp.112, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}
Copy twelve.98 = tmp.111 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}
tmp.111 = tmp.110 - 20.0 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.110 = tmp.105 * tmp.101 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, tmp.110, one.87, tmp.104, tmp.109}
Copy eleven.97 = tmp.109 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.109 = tmp.108 - three.89 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.108 = tmp.104 * two.88 {tmp.108, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
Copy ten.96 = tmp.107 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.107 = tmp.102 * two.88 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
Copy nine.95 = tmp.106 {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.106 = three.89 * three.89 {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
Copy eight.94 = tmp.105 {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.105 = tmp.101 * two.88 {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
Copy seven.93 = tmp.104 {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}
tmp.104 = 13.0 - tmp.103 {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}
Copy six.92 = tmp.103 {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}
tmp.103 = three.89 * two.88 {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}
Copy five.91 = tmp.102 {three.89, one.87, two.88, tmp.101, tmp.102}
tmp.102 = two.88 + three.89 {three.89, one.87, two.88, tmp.101, tmp.102}
Copy four.90 = tmp.101 {one.87, two.88, tmp.101, three.89}
tmp.101 = three.89 + one.87 {one.87, two.88, tmp.101, three.89}
OLD ANNOT: set()
NEW ANNOT: {one.87, two.88, three.89}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy four.90 = tmp.101 {one.87, two.88, tmp.101, three.89} for node 0
Copy five.91 = tmp.102 {three.89, one.87, two.88, tmp.101, tmp.102} for node 0
Copy six.92 = tmp.103 {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102} for node 0
Copy seven.93 = tmp.104 {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102} for node 0
Copy eight.94 = tmp.105 {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104} for node 0
Copy nine.95 = tmp.106 {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104} for node 0
Copy ten.96 = tmp.107 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104} for node 0
Copy eleven.97 = tmp.109 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109} for node 0
Copy tmp.116 = tmp.111 {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, glob11, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8} for node 0
Copy tmp.117 = tmp.113 {glob11, thirteen.99, glob9, glob5, glob10, tmp.115, glob4, glob6, glob2, glob7, twelve.98, fourteen.100, glob3, glob1, glob8} for node 0
Copy tmp.118 = tmp.115 {glob11, thirteen.99, glob9, glob5, glob10, glob4, glob6, glob2, glob7, twelve.98, fourteen.100, glob3, glob1, glob8} for node 0
Copy tmp.120 = glob1 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.121 = glob2 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.122 = glob3 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.123 = glob4 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.124 = glob5 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.125 = glob6 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.126 = glob7 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.127 = glob8 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.128 = glob9 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.129 = glob10 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.130 = glob11 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.131 = 12.0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.132 = 13.0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.133 = 14.0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
Copy tmp.135 = tmp.134 {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: {one.87, two.88, tmp.101, three.89}, Copy four.90 = tmp.101: {one.87, two.88, tmp.101, three.89}, tmp.102 = two.88 + three.89: {three.89, one.87, two.88, tmp.101, tmp.102}, Copy five.91 = tmp.102: {three.89, one.87, two.88, tmp.101, tmp.102}, tmp.103 = three.89 * two.88: {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}, Copy six.92 = tmp.103: {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}, tmp.104 = 13.0 - tmp.103: {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}, Copy seven.93 = tmp.104: {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}, tmp.105 = tmp.101 * two.88: {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, Copy eight.94 = tmp.105: {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.106 = three.89 * three.89: {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, Copy nine.95 = tmp.106: {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.107 = tmp.102 * two.88: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, Copy ten.96 = tmp.107: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.108 = tmp.104 * two.88: {tmp.108, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.109 = tmp.108 - three.89: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy eleven.97 = tmp.109: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.110 = tmp.105 * tmp.101: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, tmp.110, one.87, tmp.104, tmp.109}, tmp.111 = tmp.110 - 20.0: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy twelve.98 = tmp.111: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}, tmp.112 = tmp.106 + tmp.107: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, tmp.112, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}, tmp.113 = tmp.112 - tmp.103: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}, Copy thirteen.99 = tmp.113: {tmp.111, thirteen.99, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, twelve.98, one.87, tmp.104, tmp.109}, IntToDouble tmp.114 = 3: {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, one.87, tmp.114, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.104, tmp.109}, tmp.115 = tmp.109 + tmp.114: {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, one.87, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}, Copy fourteen.100 = tmp.115: {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, fourteen.100, one.87, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob1 = one.87: {tmp.106, two.88, tmp.101, tmp.107, tmp.102, tmp.105, fourteen.100, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob2 = two.88: {tmp.106, tmp.101, tmp.107, tmp.102, tmp.105, glob2, fourteen.100, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, three.89, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob3 = three.89: {tmp.106, tmp.101, tmp.107, tmp.102, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob4 = tmp.101: {tmp.106, tmp.107, tmp.102, glob4, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob5 = tmp.102: {glob5, tmp.106, tmp.107, glob4, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, tmp.103, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob6 = tmp.103: {glob5, tmp.106, tmp.107, glob4, tmp.105, glob2, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, glob6, twelve.98, tmp.115, tmp.104, tmp.109}, Copy glob7 = tmp.104: {glob5, tmp.106, tmp.107, glob4, tmp.105, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, glob6, twelve.98, tmp.115, tmp.109}, Copy glob8 = tmp.105: {glob5, tmp.106, tmp.107, glob4, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, tmp.113, glob6, twelve.98, tmp.115, glob8, tmp.109}, Copy glob9 = tmp.106: {glob5, tmp.107, glob4, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, glob9, tmp.113, glob6, twelve.98, tmp.115, glob8, tmp.109}, Copy glob10 = tmp.107: {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, tmp.111, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8, tmp.109}, Copy glob11 = tmp.109: {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, glob11, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8, tmp.111}, Copy tmp.116 = tmp.111: {glob5, glob4, glob2, glob7, fourteen.100, glob3, glob1, glob11, thirteen.99, glob9, tmp.113, glob10, glob6, twelve.98, tmp.115, glob8}, Copy tmp.117 = tmp.113: {glob11, thirteen.99, glob9, glob5, glob10, tmp.115, glob4, glob6, glob2, glob7, twelve.98, fourteen.100, glob3, glob1, glob8}, Copy tmp.118 = tmp.115: {glob11, thirteen.99, glob9, glob5, glob10, glob4, glob6, glob2, glob7, twelve.98, fourteen.100, glob3, glob1, glob8}, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]): {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.120 = glob1: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.121 = glob2: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.122 = glob3: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.123 = glob4: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.124 = glob5: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.125 = glob6: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.126 = glob7: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.127 = glob8: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.128 = glob9: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.129 = glob10: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.130 = glob11: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.131 = 12.0: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.132 = 13.0: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.133 = 14.0: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, IntToDouble tmp.134 = 1: {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Copy tmp.135 = tmp.134: {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Return 0: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}} ReachingCopies: {one.87, two.88, three.89}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0]
NEW LIST [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.101 = three.89 + one.87


ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), Copy thirteen.99 = tmp.113: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy fourteen.100 = tmp.115: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.101 = three.89 + one.87 set()
tmp.102 = two.88 + three.89 set()
tmp.103 = three.89 * two.88 set()
tmp.104 = 13.0 - tmp.103 set()
tmp.105 = tmp.101 * two.88 set()
tmp.106 = three.89 * three.89 set()
tmp.107 = tmp.102 * two.88 set()
tmp.108 = tmp.104 * two.88 set()
tmp.109 = tmp.108 - three.89 set()
tmp.110 = tmp.105 * tmp.101 set()
tmp.111 = tmp.110 - 20.0 set()
Copy twelve.98 = tmp.111 set()
tmp.112 = tmp.106 + tmp.107 {Copy twelve.98 = tmp.111}
tmp.113 = tmp.112 - tmp.103 {Copy twelve.98 = tmp.111}
Copy thirteen.99 = tmp.113 {Copy twelve.98 = tmp.111}
IntToDouble tmp.114 = 3 {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113}
tmp.115 = tmp.109 + tmp.114 {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113}
Copy fourteen.100 = tmp.115 {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113}
Copy glob1 = one.87 {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
Copy glob2 = two.88 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
Copy glob3 = three.89 {Copy glob2 = two.88, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
Copy glob4 = tmp.101 {Copy glob2 = two.88, Copy glob3 = three.89, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
Copy glob5 = tmp.102 {Copy glob2 = two.88, Copy glob3 = three.89, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
Copy glob6 = tmp.103 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob3 = three.89, Copy fourteen.100 = tmp.115}
Copy glob7 = tmp.104 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy fourteen.100 = tmp.115}
Copy glob8 = tmp.105 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy fourteen.100 = tmp.115}
Copy glob9 = tmp.106 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}
Copy glob10 = tmp.107 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}
Copy glob11 = tmp.109 {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob10 = tmp.107, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}
tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]) {Copy glob11 = tmp.109, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob10 = tmp.107, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}
IntToDouble tmp.134 = 1 {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]) {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
Return 0 {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
OLD ANNOT: {Copy glob11 = tmp.109, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob10 = tmp.107, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}
NEW ANNOT: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, Copy twelve.98 = tmp.111, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, Copy thirteen.99 = tmp.113, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy fourteen.100 = tmp.115, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), Copy twelve.98 = tmp.111: set(), tmp.112 = tmp.106 + tmp.107: {Copy twelve.98 = tmp.111}, tmp.113 = tmp.112 - tmp.103: {Copy twelve.98 = tmp.111}, Copy thirteen.99 = tmp.113: {Copy twelve.98 = tmp.111}, IntToDouble tmp.114 = 3: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113}, tmp.115 = tmp.109 + tmp.114: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113}, Copy fourteen.100 = tmp.115: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113}, Copy glob1 = one.87: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, Copy glob2 = two.88: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, Copy glob3 = three.89: {Copy glob2 = two.88, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, Copy glob4 = tmp.101: {Copy glob2 = two.88, Copy glob3 = three.89, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, Copy glob5 = tmp.102: {Copy glob2 = two.88, Copy glob3 = three.89, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, Copy glob6 = tmp.103: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob3 = three.89, Copy fourteen.100 = tmp.115}, Copy glob7 = tmp.104: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy fourteen.100 = tmp.115}, Copy glob8 = tmp.105: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy fourteen.100 = tmp.115}, Copy glob9 = tmp.106: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}, Copy glob10 = tmp.107: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}, Copy glob11 = tmp.109: {Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob10 = tmp.107, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}, tmp.119 = callee([twelve.98, thirteen.99, fourteen.100]): {Copy glob11 = tmp.109, Copy twelve.98 = tmp.111, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy thirteen.99 = tmp.113, Copy glob10 = tmp.107, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105, Copy fourteen.100 = tmp.115}, IntToDouble tmp.134 = 1: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}, Return 0: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}} ReachingCopies: {Copy twelve.98 = tmp.111, Copy thirteen.99 = tmp.113, Copy fourteen.100 = tmp.115}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
callee callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True
glob1 glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True
glob2 glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True
glob3 glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True
glob4 glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True
glob5 glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True
glob6 glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True
glob7 glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True
glob8 glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True
glob9 glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True
glob10 glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True
glob11 glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True
target target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True
one.87 one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>
two.88 two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>
three.89 three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>
four.90 four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>
five.91 five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>
six.92 six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>
seven.93 seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>
eight.94 eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>
nine.95 nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>
ten.96 ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>
eleven.97 eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>
twelve.98 twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>
thirteen.99 thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>
fourteen.100 fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f1586019f70>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f158601bd70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f158601bfb0>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f15860201d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f1586020380>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f1586020560>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f1586020740>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f1586020a70>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f1586020c50>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f1586020e00>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f1586020ce0>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f15860211c0>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f15860210a0>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f15860193a0>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f1586021400>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f1586021970>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f1586021ee0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f1586022030>
tmp.119 tmp.119 int <typeChecker.LocalAttributes object at 0x7f1586021c40>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f1586022270>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f15860223c0>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f1586022510>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f1586022660>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f15860227b0>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f1586022900>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f1586022a50>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f1586022ba0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f1586022cf0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f1586022e40>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f1586022f90>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f1586023110>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f1586023290>
tmp.133 tmp.133 double <typeChecker.LocalAttributes object at 0x7f15860233e0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f1586023680>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f1586023530>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f15860231a0>
--------------LIVE for block 0-------------------
Return 0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]) {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_VariableValue'>
IntToDouble tmp.134 = 1 {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
tmp.119 = callee([tmp.111, tmp.113, tmp.115]) {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy glob11 = tmp.109 {glob11, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.111}
Copy glob10 = tmp.107 {tmp.111, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}
Copy glob9 = tmp.106 {tmp.111, glob9, glob5, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}
Copy glob8 = tmp.105 {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}
Copy glob7 = tmp.104 {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, glob7, tmp.115, glob3, glob1, tmp.109}
Copy glob6 = tmp.103 {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob5 = tmp.102 {tmp.111, glob5, tmp.106, tmp.113, tmp.103, tmp.107, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob4 = tmp.101 {tmp.111, tmp.106, tmp.113, tmp.103, tmp.107, tmp.102, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob3 = three.89 {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob2 = two.88 {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, glob2, tmp.115, glob1, tmp.104, tmp.109}
Copy glob1 = one.87 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, tmp.115, glob1, tmp.104, tmp.109}
Copy fourteen.100 = tmp.115 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.115 = tmp.109 + tmp.114 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109}
IntToDouble tmp.114 = 3 {tmp.111, tmp.104, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.114, tmp.109}
Copy thirteen.99 = tmp.113 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.113 = tmp.112 - tmp.103 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.112 = tmp.106 + tmp.107 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, tmp.112, three.89, tmp.105, one.87, tmp.104, tmp.109}
Copy twelve.98 = tmp.111 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.111 = tmp.110 - 20.0 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.110 = tmp.105 * tmp.101 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, tmp.110, one.87, tmp.104, tmp.109}
tmp.109 = tmp.108 - three.89 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.108 = tmp.104 * two.88 {tmp.108, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.107 = tmp.102 * two.88 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.106 = three.89 * three.89 {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.105 = tmp.101 * two.88 {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.104 = 13.0 - tmp.103 {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}
tmp.103 = three.89 * two.88 {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}
tmp.102 = two.88 + three.89 {three.89, one.87, two.88, tmp.101, tmp.102}
tmp.101 = three.89 + one.87 {one.87, two.88, tmp.101, three.89}
OLD ANNOT: set()
NEW ANNOT: {one.87, two.88, three.89}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy twelve.98 = tmp.111 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109} for node 0
Copy thirteen.99 = tmp.113 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109} for node 0
Copy fourteen.100 = tmp.115 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: {one.87, two.88, tmp.101, three.89}, tmp.102 = two.88 + three.89: {three.89, one.87, two.88, tmp.101, tmp.102}, tmp.103 = three.89 * two.88: {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}, tmp.104 = 13.0 - tmp.103: {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}, tmp.105 = tmp.101 * two.88: {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.106 = three.89 * three.89: {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.107 = tmp.102 * two.88: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.108 = tmp.104 * two.88: {tmp.108, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.109 = tmp.108 - three.89: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.110 = tmp.105 * tmp.101: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, tmp.110, one.87, tmp.104, tmp.109}, tmp.111 = tmp.110 - 20.0: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy twelve.98 = tmp.111: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.112 = tmp.106 + tmp.107: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, tmp.112, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.113 = tmp.112 - tmp.103: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy thirteen.99 = tmp.113: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109}, IntToDouble tmp.114 = 3: {tmp.111, tmp.104, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.114, tmp.109}, tmp.115 = tmp.109 + tmp.114: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy fourteen.100 = tmp.115: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy glob1 = one.87: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, tmp.115, glob1, tmp.104, tmp.109}, Copy glob2 = two.88: {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, glob2, tmp.115, glob1, tmp.104, tmp.109}, Copy glob3 = three.89: {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob4 = tmp.101: {tmp.111, tmp.106, tmp.113, tmp.103, tmp.107, tmp.102, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob5 = tmp.102: {tmp.111, glob5, tmp.106, tmp.113, tmp.103, tmp.107, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob6 = tmp.103: {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob7 = tmp.104: {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, glob7, tmp.115, glob3, glob1, tmp.109}, Copy glob8 = tmp.105: {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}, Copy glob9 = tmp.106: {tmp.111, glob9, glob5, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}, Copy glob10 = tmp.107: {tmp.111, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}, Copy glob11 = tmp.109: {glob11, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.111}, tmp.119 = callee([tmp.111, tmp.113, tmp.115]): {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, IntToDouble tmp.134 = 1: {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Return 0: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}} ReachingCopies: {one.87, two.88, three.89}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0]
NEW LIST [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.101 = three.89 + one.87


ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([tmp.111, tmp.113, tmp.115]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([tmp.111, tmp.113, tmp.115]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([tmp.111, tmp.113, tmp.115]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: set(), Copy glob3 = three.89: set(), Copy glob4 = tmp.101: set(), Copy glob5 = tmp.102: set(), Copy glob6 = tmp.103: set(), Copy glob7 = tmp.104: set(), Copy glob8 = tmp.105: set(), Copy glob9 = tmp.106: set(), Copy glob10 = tmp.107: set(), Copy glob11 = tmp.109: set(), tmp.119 = callee([tmp.111, tmp.113, tmp.115]): set(), IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.101 = three.89 + one.87 set()
tmp.102 = two.88 + three.89 set()
tmp.103 = three.89 * two.88 set()
tmp.104 = 13.0 - tmp.103 set()
tmp.105 = tmp.101 * two.88 set()
tmp.106 = three.89 * three.89 set()
tmp.107 = tmp.102 * two.88 set()
tmp.108 = tmp.104 * two.88 set()
tmp.109 = tmp.108 - three.89 set()
tmp.110 = tmp.105 * tmp.101 set()
tmp.111 = tmp.110 - 20.0 set()
tmp.112 = tmp.106 + tmp.107 set()
tmp.113 = tmp.112 - tmp.103 set()
IntToDouble tmp.114 = 3 set()
tmp.115 = tmp.109 + tmp.114 set()
Copy glob1 = one.87 set()
Copy glob2 = two.88 {Copy glob1 = one.87}
Copy glob3 = three.89 {Copy glob1 = one.87, Copy glob2 = two.88}
Copy glob4 = tmp.101 {Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89}
Copy glob5 = tmp.102 {Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob2 = two.88, Copy glob3 = three.89}
Copy glob6 = tmp.103 {Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob1 = one.87, Copy glob4 = tmp.101}
Copy glob7 = tmp.104 {Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob1 = one.87, Copy glob4 = tmp.101}
Copy glob8 = tmp.105 {Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob1 = one.87, Copy glob4 = tmp.101}
Copy glob9 = tmp.106 {Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}
Copy glob10 = tmp.107 {Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}
Copy glob11 = tmp.109 {Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}
tmp.119 = callee([tmp.111, tmp.113, tmp.115]) {Copy glob11 = tmp.109, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}
IntToDouble tmp.134 = 1 set()
tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]) set()
Return 0 set()
OLD ANNOT: {Copy glob11 = tmp.109, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: set(), tmp.102 = two.88 + three.89: set(), tmp.103 = three.89 * two.88: set(), tmp.104 = 13.0 - tmp.103: set(), tmp.105 = tmp.101 * two.88: set(), tmp.106 = three.89 * three.89: set(), tmp.107 = tmp.102 * two.88: set(), tmp.108 = tmp.104 * two.88: set(), tmp.109 = tmp.108 - three.89: set(), tmp.110 = tmp.105 * tmp.101: set(), tmp.111 = tmp.110 - 20.0: set(), tmp.112 = tmp.106 + tmp.107: set(), tmp.113 = tmp.112 - tmp.103: set(), IntToDouble tmp.114 = 3: set(), tmp.115 = tmp.109 + tmp.114: set(), Copy glob1 = one.87: set(), Copy glob2 = two.88: {Copy glob1 = one.87}, Copy glob3 = three.89: {Copy glob1 = one.87, Copy glob2 = two.88}, Copy glob4 = tmp.101: {Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89}, Copy glob5 = tmp.102: {Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob2 = two.88, Copy glob3 = three.89}, Copy glob6 = tmp.103: {Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob1 = one.87, Copy glob4 = tmp.101}, Copy glob7 = tmp.104: {Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob1 = one.87, Copy glob4 = tmp.101}, Copy glob8 = tmp.105: {Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob1 = one.87, Copy glob4 = tmp.101}, Copy glob9 = tmp.106: {Copy glob1 = one.87, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}, Copy glob10 = tmp.107: {Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}, Copy glob11 = tmp.109: {Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}, tmp.119 = callee([tmp.111, tmp.113, tmp.115]): {Copy glob11 = tmp.109, Copy glob1 = one.87, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob4 = tmp.101, Copy glob7 = tmp.104, Copy glob5 = tmp.102, Copy glob2 = two.88, Copy glob6 = tmp.103, Copy glob3 = three.89, Copy glob8 = tmp.105}, IntToDouble tmp.134 = 1: set(), tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
callee callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True
glob1 glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True
glob2 glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True
glob3 glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True
glob4 glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True
glob5 glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True
glob6 glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True
glob7 glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True
glob8 glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True
glob9 glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True
glob10 glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True
glob11 glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True
target target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True
one.87 one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>
two.88 two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>
three.89 three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>
four.90 four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>
five.91 five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>
six.92 six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>
seven.93 seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>
eight.94 eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>
nine.95 nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>
ten.96 ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>
eleven.97 eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>
twelve.98 twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>
thirteen.99 thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>
fourteen.100 fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f1586019f70>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f158601bd70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f158601bfb0>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f15860201d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f1586020380>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f1586020560>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f1586020740>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f1586020a70>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f1586020c50>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f1586020e00>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f1586020ce0>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f15860211c0>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f15860210a0>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f15860193a0>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f1586021400>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f1586021970>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f1586021ee0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f1586022030>
tmp.119 tmp.119 int <typeChecker.LocalAttributes object at 0x7f1586021c40>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f1586022270>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f15860223c0>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f1586022510>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f1586022660>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f15860227b0>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f1586022900>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f1586022a50>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f1586022ba0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f1586022cf0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f1586022e40>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f1586022f90>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f1586023110>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f1586023290>
tmp.133 tmp.133 double <typeChecker.LocalAttributes object at 0x7f15860233e0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f1586023680>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f1586023530>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f15860231a0>
--------------LIVE for block 0-------------------
Return 0 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]) {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_ConstantValue'>
<class 'tacGenerator.TAC_VariableValue'>
IntToDouble tmp.134 = 1 {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
tmp.119 = callee([tmp.111, tmp.113, tmp.115]) {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_VariableValue'>
Copy glob11 = tmp.109 {glob11, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.111}
Copy glob10 = tmp.107 {tmp.111, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}
Copy glob9 = tmp.106 {tmp.111, glob9, glob5, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}
Copy glob8 = tmp.105 {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}
Copy glob7 = tmp.104 {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, glob7, tmp.115, glob3, glob1, tmp.109}
Copy glob6 = tmp.103 {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob5 = tmp.102 {tmp.111, glob5, tmp.106, tmp.113, tmp.103, tmp.107, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob4 = tmp.101 {tmp.111, tmp.106, tmp.113, tmp.103, tmp.107, tmp.102, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob3 = three.89 {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}
Copy glob2 = two.88 {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, glob2, tmp.115, glob1, tmp.104, tmp.109}
Copy glob1 = one.87 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, tmp.115, glob1, tmp.104, tmp.109}
tmp.115 = tmp.109 + tmp.114 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109}
IntToDouble tmp.114 = 3 {tmp.111, tmp.104, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.114, tmp.109}
tmp.113 = tmp.112 - tmp.103 {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.112 = tmp.106 + tmp.107 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, tmp.112, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.111 = tmp.110 - 20.0 {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.110 = tmp.105 * tmp.101 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, tmp.110, one.87, tmp.104, tmp.109}
tmp.109 = tmp.108 - three.89 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}
tmp.108 = tmp.104 * two.88 {tmp.108, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.107 = tmp.102 * two.88 {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.106 = three.89 * three.89 {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.105 = tmp.101 * two.88 {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}
tmp.104 = 13.0 - tmp.103 {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}
tmp.103 = three.89 * two.88 {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}
tmp.102 = two.88 + three.89 {three.89, one.87, two.88, tmp.101, tmp.102}
tmp.101 = three.89 + one.87 {one.87, two.88, tmp.101, three.89}
OLD ANNOT: set()
NEW ANNOT: {one.87, two.88, three.89}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = three.89 + one.87: {one.87, two.88, tmp.101, three.89}, tmp.102 = two.88 + three.89: {three.89, one.87, two.88, tmp.101, tmp.102}, tmp.103 = three.89 * two.88: {tmp.103, three.89, one.87, two.88, tmp.101, tmp.102}, tmp.104 = 13.0 - tmp.103: {tmp.103, three.89, tmp.104, one.87, two.88, tmp.101, tmp.102}, tmp.105 = tmp.101 * two.88: {two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.106 = three.89 * three.89: {tmp.106, two.88, tmp.101, tmp.103, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.107 = tmp.102 * two.88: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.108 = tmp.104 * two.88: {tmp.108, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104}, tmp.109 = tmp.108 - three.89: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.110 = tmp.105 * tmp.101: {tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, tmp.110, one.87, tmp.104, tmp.109}, tmp.111 = tmp.110 - 20.0: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.112 = tmp.106 + tmp.107: {tmp.111, tmp.106, two.88, tmp.101, tmp.103, tmp.107, tmp.102, tmp.112, three.89, tmp.105, one.87, tmp.104, tmp.109}, tmp.113 = tmp.112 - tmp.103: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.104, tmp.109}, IntToDouble tmp.114 = 3: {tmp.111, tmp.104, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, one.87, tmp.114, tmp.109}, tmp.115 = tmp.109 + tmp.114: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, tmp.115, three.89, tmp.105, one.87, tmp.104, tmp.109}, Copy glob1 = one.87: {tmp.111, tmp.106, two.88, tmp.101, tmp.113, tmp.107, tmp.102, tmp.103, three.89, tmp.105, tmp.115, glob1, tmp.104, tmp.109}, Copy glob2 = two.88: {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, three.89, tmp.105, glob2, tmp.115, glob1, tmp.104, tmp.109}, Copy glob3 = three.89: {tmp.111, tmp.106, tmp.113, tmp.101, tmp.103, tmp.107, tmp.102, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob4 = tmp.101: {tmp.111, tmp.106, tmp.113, tmp.103, tmp.107, tmp.102, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob5 = tmp.102: {tmp.111, glob5, tmp.106, tmp.113, tmp.103, tmp.107, glob4, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob6 = tmp.103: {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, tmp.115, glob3, glob1, tmp.104, tmp.109}, Copy glob7 = tmp.104: {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, tmp.105, glob2, glob7, tmp.115, glob3, glob1, tmp.109}, Copy glob8 = tmp.105: {tmp.111, glob5, tmp.106, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}, Copy glob9 = tmp.106: {tmp.111, glob9, glob5, tmp.113, tmp.107, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}, Copy glob10 = tmp.107: {tmp.111, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.109}, Copy glob11 = tmp.109: {glob11, glob9, glob5, tmp.113, glob10, glob4, glob6, glob2, glob7, tmp.115, glob3, glob1, glob8, tmp.111}, tmp.119 = callee([tmp.111, tmp.113, tmp.115]): {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, IntToDouble tmp.134 = 1: {glob11, glob9, glob5, tmp.134, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]): {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}, Return 0: {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}} ReachingCopies: {one.87, two.88, three.89}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
TAC Program:[Function: target (['one.87', 'two.88', 'three.89']) instructions:[tmp.101 = three.89 + one.87, tmp.102 = two.88 + three.89, tmp.103 = three.89 * two.88, tmp.104 = 13.0 - tmp.103, tmp.105 = tmp.101 * two.88, tmp.106 = three.89 * three.89, tmp.107 = tmp.102 * two.88, tmp.108 = tmp.104 * two.88, tmp.109 = tmp.108 - three.89, tmp.110 = tmp.105 * tmp.101, tmp.111 = tmp.110 - 20.0, tmp.112 = tmp.106 + tmp.107, tmp.113 = tmp.112 - tmp.103, IntToDouble tmp.114 = 3, tmp.115 = tmp.109 + tmp.114, Copy glob1 = one.87, Copy glob2 = two.88, Copy glob3 = three.89, Copy glob4 = tmp.101, Copy glob5 = tmp.102, Copy glob6 = tmp.103, Copy glob7 = tmp.104, Copy glob8 = tmp.105, Copy glob9 = tmp.106, Copy glob10 = tmp.107, Copy glob11 = tmp.109, tmp.119 = callee([tmp.111, tmp.113, tmp.115]), IntToDouble tmp.134 = 1, tmp.136 = check_14_doubles([glob1, glob2, glob3, glob4, glob5, glob6, glob7, glob8, glob9, glob10, glob11, 12.0, 13.0, 14.0, tmp.134]), Return 0], Global: True glob1 = [c_double(0.0)], Global: True glob2 = [c_double(0.0)], Global: True glob3 = [c_double(0.0)], Global: True glob4 = [c_double(0.0)], Global: True glob5 = [c_double(0.0)], Global: True glob6 = [c_double(0.0)], Global: True glob7 = [c_double(0.0)], Global: True glob8 = [c_double(0.0)], Global: True glob9 = [c_double(0.0)], Global: True glob10 = [c_double(0.0)], Global: True glob11 = [c_double(0.0)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'callee': callee FunType: ParamTypes: [double, double, double] Return Type: int Defined: False Global: True, 'glob1': glob1 double InitialVal: <typeChecker.Tentative object at 0x7f1586014440> Global: True, 'glob2': glob2 double InitialVal: <typeChecker.Tentative object at 0x7f1586014560> Global: True, 'glob3': glob3 double InitialVal: <typeChecker.Tentative object at 0x7f1586014680> Global: True, 'glob4': glob4 double InitialVal: <typeChecker.Tentative object at 0x7f15860147a0> Global: True, 'glob5': glob5 double InitialVal: <typeChecker.Tentative object at 0x7f15860148c0> Global: True, 'glob6': glob6 double InitialVal: <typeChecker.Tentative object at 0x7f15860149e0> Global: True, 'glob7': glob7 double InitialVal: <typeChecker.Tentative object at 0x7f1586014b00> Global: True, 'glob8': glob8 double InitialVal: <typeChecker.Tentative object at 0x7f1586014c50> Global: True, 'glob9': glob9 double InitialVal: <typeChecker.Tentative object at 0x7f1586014da0> Global: True, 'glob10': glob10 double InitialVal: <typeChecker.Tentative object at 0x7f1586014ef0> Global: True, 'glob11': glob11 double InitialVal: <typeChecker.Tentative object at 0x7f1586015040> Global: True, 'target': target FunType: ParamTypes: [double, double, double] Return Type: int Defined: True Global: True, 'one.87': one.87 double <typeChecker.LocalAttributes object at 0x7f1586015340>, 'two.88': two.88 double <typeChecker.LocalAttributes object at 0x7f15860153d0>, 'three.89': three.89 double <typeChecker.LocalAttributes object at 0x7f1586015460>, 'four.90': four.90 double <typeChecker.LocalAttributes object at 0x7f1586015310>, 'five.91': five.91 double <typeChecker.LocalAttributes object at 0x7f15860156d0>, 'six.92': six.92 double <typeChecker.LocalAttributes object at 0x7f1586015910>, 'seven.93': seven.93 double <typeChecker.LocalAttributes object at 0x7f1586015bb0>, 'eight.94': eight.94 double <typeChecker.LocalAttributes object at 0x7f1586015e80>, 'nine.95': nine.95 double <typeChecker.LocalAttributes object at 0x7f15860160c0>, 'ten.96': ten.96 double <typeChecker.LocalAttributes object at 0x7f1586016300>, 'eleven.97': eleven.97 double <typeChecker.LocalAttributes object at 0x7f1586016540>, 'twelve.98': twelve.98 double <typeChecker.LocalAttributes object at 0x7f1586016840>, 'thirteen.99': thirteen.99 double <typeChecker.LocalAttributes object at 0x7f1586016b40>, 'fourteen.100': fourteen.100 double <typeChecker.LocalAttributes object at 0x7f1586016e10>, 'tmp.101': tmp.101 double <typeChecker.LocalAttributes object at 0x7f1586019f70>, 'tmp.102': tmp.102 double <typeChecker.LocalAttributes object at 0x7f158601bd70>, 'tmp.103': tmp.103 double <typeChecker.LocalAttributes object at 0x7f158601bfb0>, 'tmp.104': tmp.104 double <typeChecker.LocalAttributes object at 0x7f15860201d0>, 'tmp.105': tmp.105 double <typeChecker.LocalAttributes object at 0x7f1586020380>, 'tmp.106': tmp.106 double <typeChecker.LocalAttributes object at 0x7f1586020560>, 'tmp.107': tmp.107 double <typeChecker.LocalAttributes object at 0x7f1586020740>, 'tmp.108': tmp.108 double <typeChecker.LocalAttributes object at 0x7f1586020a70>, 'tmp.109': tmp.109 double <typeChecker.LocalAttributes object at 0x7f1586020c50>, 'tmp.110': tmp.110 double <typeChecker.LocalAttributes object at 0x7f1586020e00>, 'tmp.111': tmp.111 double <typeChecker.LocalAttributes object at 0x7f1586020ce0>, 'tmp.112': tmp.112 double <typeChecker.LocalAttributes object at 0x7f15860211c0>, 'tmp.113': tmp.113 double <typeChecker.LocalAttributes object at 0x7f15860210a0>, 'tmp.114': tmp.114 double <typeChecker.LocalAttributes object at 0x7f15860193a0>, 'tmp.115': tmp.115 double <typeChecker.LocalAttributes object at 0x7f1586021400>, 'tmp.116': tmp.116 double <typeChecker.LocalAttributes object at 0x7f1586021970>, 'tmp.117': tmp.117 double <typeChecker.LocalAttributes object at 0x7f1586021ee0>, 'tmp.118': tmp.118 double <typeChecker.LocalAttributes object at 0x7f1586022030>, 'tmp.119': tmp.119 int <typeChecker.LocalAttributes object at 0x7f1586021c40>, 'tmp.120': tmp.120 double <typeChecker.LocalAttributes object at 0x7f1586022270>, 'tmp.121': tmp.121 double <typeChecker.LocalAttributes object at 0x7f15860223c0>, 'tmp.122': tmp.122 double <typeChecker.LocalAttributes object at 0x7f1586022510>, 'tmp.123': tmp.123 double <typeChecker.LocalAttributes object at 0x7f1586022660>, 'tmp.124': tmp.124 double <typeChecker.LocalAttributes object at 0x7f15860227b0>, 'tmp.125': tmp.125 double <typeChecker.LocalAttributes object at 0x7f1586022900>, 'tmp.126': tmp.126 double <typeChecker.LocalAttributes object at 0x7f1586022a50>, 'tmp.127': tmp.127 double <typeChecker.LocalAttributes object at 0x7f1586022ba0>, 'tmp.128': tmp.128 double <typeChecker.LocalAttributes object at 0x7f1586022cf0>, 'tmp.129': tmp.129 double <typeChecker.LocalAttributes object at 0x7f1586022e40>, 'tmp.130': tmp.130 double <typeChecker.LocalAttributes object at 0x7f1586022f90>, 'tmp.131': tmp.131 double <typeChecker.LocalAttributes object at 0x7f1586023110>, 'tmp.132': tmp.132 double <typeChecker.LocalAttributes object at 0x7f1586023290>, 'tmp.133': tmp.133 double <typeChecker.LocalAttributes object at 0x7f15860233e0>, 'tmp.134': tmp.134 double <typeChecker.LocalAttributes object at 0x7f1586023680>, 'tmp.135': tmp.135 double <typeChecker.LocalAttributes object at 0x7f1586023530>, 'tmp.136': tmp.136 int <typeChecker.LocalAttributes object at 0x7f15860231a0>}
All Aliased Vars:
 {glob11, glob9, glob5, glob10, glob4, glob6, glob2, glob7, glob3, glob1, glob8}
Operand: Pseudo(one.87)
Operand: Pseudo(two.88)
Operand: Pseudo(three.89)
IntParams: []
IntDests: [(Longword, Pseudo(tmp.119))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.111)
Operand: Pseudo(tmp.113)
Operand: Pseudo(tmp.115)
IntArgs: []
DoubleArgs: [Pseudo(tmp.111), Pseudo(tmp.113), Pseudo(tmp.115)]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.136))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob1)
Operand: Pseudo(glob2)
Operand: Pseudo(glob3)
Operand: Pseudo(glob4)
Operand: Pseudo(glob5)
Operand: Pseudo(glob6)
Operand: Pseudo(glob7)
Operand: Pseudo(glob8)
Operand: Pseudo(glob9)
Operand: Pseudo(glob10)
Operand: Pseudo(glob11)
Operand: Data(tmp.139, 0)
Operand: Data(tmp.140, 0)
Operand: Data(tmp.141, 0)
Operand: Pseudo(tmp.134)
IntArgs: []
DoubleArgs: [Pseudo(glob1), Pseudo(glob2), Pseudo(glob3), Pseudo(glob4), Pseudo(glob5), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)]
StackArgs: [(Double, Pseudo(glob9)), (Double, Pseudo(glob10)), (Double, Pseudo(glob11)), (Double, <assemblyGenerator.DataOperand object at 0x7f1586048fb0>), (Double, <assemblyGenerator.DataOperand object at 0x7f15860490a0>), (Double, <assemblyGenerator.DataOperand object at 0x7f1586049160>), (Double, Pseudo(tmp.134))]
ASM Program: [Static Constant: Alignment = 8 : tmp.137 = c_double(13.0), Static Constant: Alignment = 8 : tmp.138 = c_double(20.0), Static Constant: Alignment = 8 : tmp.139 = c_double(12.0), Static Constant: Alignment = 8 : tmp.140 = c_double(13.0), Static Constant: Alignment = 8 : tmp.141 = c_double(14.0), Function target stackOffset: None global: True instructions:[AssType: Double Mov(Reg(XMM0), Pseudo(one.87)), AssType: Double Mov(Reg(XMM1), Pseudo(two.88)), AssType: Double Mov(Reg(XMM2), Pseudo(three.89)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)), AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)), AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)), AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)), AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)), AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)), AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)), AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)), AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)), AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)), AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)), AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)), AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)), AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)), AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)), AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)), Call(callee), AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)), AssType: Quadword Binary(Sub, Imm(8), Reg(SP)), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Pseudo(glob2), Reg(XMM1)), AssType: Double Mov(Pseudo(glob3), Reg(XMM2)), AssType: Double Mov(Pseudo(glob4), Reg(XMM3)), AssType: Double Mov(Pseudo(glob5), Reg(XMM4)), AssType: Double Mov(Pseudo(glob6), Reg(XMM5)), AssType: Double Mov(Pseudo(glob7), Reg(XMM6)), AssType: Double Mov(Pseudo(glob8), Reg(XMM7)), Push(Pseudo(tmp.134)), Push(Data(tmp.141, 0)), Push(Data(tmp.140, 0)), Push(Data(tmp.139, 0)), Push(Pseudo(glob11)), Push(Pseudo(glob10)), Push(Pseudo(glob9)), Call(check_14_doubles), AssType: Quadword Binary(Add, Imm(64), Reg(SP)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = True Alignment = 8 : glob1 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob3 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob4 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob5 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob6 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob7 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob8 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob9 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob10 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob11 = [c_double(0.0)]]
Type Table:
 {}
Backend Symbol Table:
 {'tmp.137': AssType: Double IsStatic: True IsConstant: True, 'tmp.138': AssType: Double IsStatic: True IsConstant: True, 'tmp.139': AssType: Double IsStatic: True IsConstant: True, 'tmp.140': AssType: Double IsStatic: True IsConstant: True, 'tmp.141': AssType: Double IsStatic: True IsConstant: True, 'check_one_int': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_5_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_12_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_one_uchar': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_one_uint': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_one_long': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_one_ulong': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_one_double': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_12_longs': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_six_chars': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'check_14_doubles': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet([Reg(XMM0), Reg(XMM1), Reg(XMM2), Reg(XMM3), Reg(XMM4), Reg(XMM5), Reg(XMM6), Reg(XMM7)]) ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'check_12_vals': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'dbl_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'long_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'unsigned_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'uchar_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet(), 'callee': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet([Reg(XMM0), Reg(XMM1), Reg(XMM2)]) ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'glob1': AssType: Double IsStatic: True IsConstant: False, 'glob2': AssType: Double IsStatic: True IsConstant: False, 'glob3': AssType: Double IsStatic: True IsConstant: False, 'glob4': AssType: Double IsStatic: True IsConstant: False, 'glob5': AssType: Double IsStatic: True IsConstant: False, 'glob6': AssType: Double IsStatic: True IsConstant: False, 'glob7': AssType: Double IsStatic: True IsConstant: False, 'glob8': AssType: Double IsStatic: True IsConstant: False, 'glob9': AssType: Double IsStatic: True IsConstant: False, 'glob10': AssType: Double IsStatic: True IsConstant: False, 'glob11': AssType: Double IsStatic: True IsConstant: False, 'target': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet([Reg(XMM0), Reg(XMM1), Reg(XMM2)]) ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet(), 'one.87': AssType: Double IsStatic: False IsConstant: False, 'two.88': AssType: Double IsStatic: False IsConstant: False, 'three.89': AssType: Double IsStatic: False IsConstant: False, 'four.90': AssType: Double IsStatic: False IsConstant: False, 'five.91': AssType: Double IsStatic: False IsConstant: False, 'six.92': AssType: Double IsStatic: False IsConstant: False, 'seven.93': AssType: Double IsStatic: False IsConstant: False, 'eight.94': AssType: Double IsStatic: False IsConstant: False, 'nine.95': AssType: Double IsStatic: False IsConstant: False, 'ten.96': AssType: Double IsStatic: False IsConstant: False, 'eleven.97': AssType: Double IsStatic: False IsConstant: False, 'twelve.98': AssType: Double IsStatic: False IsConstant: False, 'thirteen.99': AssType: Double IsStatic: False IsConstant: False, 'fourteen.100': AssType: Double IsStatic: False IsConstant: False, 'tmp.101': AssType: Double IsStatic: False IsConstant: False, 'tmp.102': AssType: Double IsStatic: False IsConstant: False, 'tmp.103': AssType: Double IsStatic: False IsConstant: False, 'tmp.104': AssType: Double IsStatic: False IsConstant: False, 'tmp.105': AssType: Double IsStatic: False IsConstant: False, 'tmp.106': AssType: Double IsStatic: False IsConstant: False, 'tmp.107': AssType: Double IsStatic: False IsConstant: False, 'tmp.108': AssType: Double IsStatic: False IsConstant: False, 'tmp.109': AssType: Double IsStatic: False IsConstant: False, 'tmp.110': AssType: Double IsStatic: False IsConstant: False, 'tmp.111': AssType: Double IsStatic: False IsConstant: False, 'tmp.112': AssType: Double IsStatic: False IsConstant: False, 'tmp.113': AssType: Double IsStatic: False IsConstant: False, 'tmp.114': AssType: Double IsStatic: False IsConstant: False, 'tmp.115': AssType: Double IsStatic: False IsConstant: False, 'tmp.116': AssType: Double IsStatic: False IsConstant: False, 'tmp.117': AssType: Double IsStatic: False IsConstant: False, 'tmp.118': AssType: Double IsStatic: False IsConstant: False, 'tmp.119': AssType: Longword IsStatic: False IsConstant: False, 'tmp.120': AssType: Double IsStatic: False IsConstant: False, 'tmp.121': AssType: Double IsStatic: False IsConstant: False, 'tmp.122': AssType: Double IsStatic: False IsConstant: False, 'tmp.123': AssType: Double IsStatic: False IsConstant: False, 'tmp.124': AssType: Double IsStatic: False IsConstant: False, 'tmp.125': AssType: Double IsStatic: False IsConstant: False, 'tmp.126': AssType: Double IsStatic: False IsConstant: False, 'tmp.127': AssType: Double IsStatic: False IsConstant: False, 'tmp.128': AssType: Double IsStatic: False IsConstant: False, 'tmp.129': AssType: Double IsStatic: False IsConstant: False, 'tmp.130': AssType: Double IsStatic: False IsConstant: False, 'tmp.131': AssType: Double IsStatic: False IsConstant: False, 'tmp.132': AssType: Double IsStatic: False IsConstant: False, 'tmp.133': AssType: Double IsStatic: False IsConstant: False, 'tmp.134': AssType: Double IsStatic: False IsConstant: False, 'tmp.135': AssType: Double IsStatic: False IsConstant: False, 'tmp.136': AssType: Longword IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION target
-----------Building INTEGER interference graph.------------------
AssType: Double Mov(Reg(XMM0), Pseudo(one.87))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Reg(XMM0), Pseudo(one.87)), AssType: Double Mov(Reg(XMM1), Pseudo(two.88)), AssType: Double Mov(Reg(XMM2), Pseudo(three.89)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)), AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)), AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)), AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)), AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)), AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)), AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)), AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)), AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)), AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)), AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)), AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)), AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)), AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)), AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)), AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)), Call(callee), AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)), AssType: Quadword Binary(Sub, Imm(8), Reg(SP)), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Pseudo(glob2), Reg(XMM1)), AssType: Double Mov(Pseudo(glob3), Reg(XMM2)), AssType: Double Mov(Pseudo(glob4), Reg(XMM3)), AssType: Double Mov(Pseudo(glob5), Reg(XMM4)), AssType: Double Mov(Pseudo(glob6), Reg(XMM5)), AssType: Double Mov(Pseudo(glob7), Reg(XMM6)), AssType: Double Mov(Pseudo(glob8), Reg(XMM7)), Push(Pseudo(tmp.134)), Push(Data(tmp.141, 0)), Push(Data(tmp.140, 0)), Push(Data(tmp.139, 0)), Push(Pseudo(glob11)), Push(Pseudo(glob10)), Push(Pseudo(glob9)), Call(check_14_doubles), AssType: Quadword Binary(Add, Imm(64), Reg(SP)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Reg(XMM0), Pseudo(one.87)), set()), (AssType: Double Mov(Reg(XMM1), Pseudo(two.88)), set()), (AssType: Double Mov(Reg(XMM2), Pseudo(three.89)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)), set()), (AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)), set()), (AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)), set()), (AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)), set()), (AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)), set()), (AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)), set()), (AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)), set()), (AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)), set()), (AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)), set()), (AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)), set()), (AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)), set()), (AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)), set()), (AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)), set()), (AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)), set()), (AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)), set()), (AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)), set()), (AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)), set()), (AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)), set()), (AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)), set()), (AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)), set()), (Call(callee), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)), set()), (AssType: Quadword Binary(Sub, Imm(8), Reg(SP)), set()), (AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), set()), (AssType: Double Mov(Pseudo(glob2), Reg(XMM1)), set()), (AssType: Double Mov(Pseudo(glob3), Reg(XMM2)), set()), (AssType: Double Mov(Pseudo(glob4), Reg(XMM3)), set()), (AssType: Double Mov(Pseudo(glob5), Reg(XMM4)), set()), (AssType: Double Mov(Pseudo(glob6), Reg(XMM5)), set()), (AssType: Double Mov(Pseudo(glob7), Reg(XMM6)), set()), (AssType: Double Mov(Pseudo(glob8), Reg(XMM7)), set()), (Push(Pseudo(tmp.134)), set()), (Push(Data(tmp.141, 0)), set()), (Push(Data(tmp.140, 0)), set()), (Push(Data(tmp.139, 0)), set()), (Push(Pseudo(glob11)), set()), (Push(Pseudo(glob10)), set()), (Push(Pseudo(glob9)), set()), (Call(check_14_doubles), set()), (AssType: Quadword Binary(Add, Imm(64), Reg(SP)), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)) set()
AssType: Quadword Binary(Add, Imm(64), Reg(SP)) {Reg(AX)}
Call(check_14_doubles) {Reg(AX), Reg(SP)}
Push(Pseudo(glob9)) {Reg(SP)}
Push(Pseudo(glob10)) {Reg(SP), Pseudo(glob9)}
Push(Pseudo(glob11)) {Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Data(tmp.139, 0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Data(tmp.140, 0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Data(tmp.141, 0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Pseudo(tmp.134)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob8), Reg(XMM7)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(tmp.134), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob7), Reg(XMM6)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob8), Pseudo(tmp.134), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob6), Reg(XMM5)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob7), Pseudo(glob8), Pseudo(tmp.134), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob5), Reg(XMM4)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob4), Reg(XMM3)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob3), Reg(XMM2)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob2), Reg(XMM1)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob1), Reg(XMM0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8)}
AssType: Quadword Binary(Sub, Imm(8), Reg(SP)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8), Pseudo(glob1)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8), Pseudo(glob1)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
Call(callee) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Reg(AX), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.113), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.113), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)) {Pseudo(tmp.111), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.113), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)) {Reg(SP), Pseudo(glob9), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(tmp.105), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob4), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(glob4), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(tmp.115), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(tmp.115), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.114), Pseudo(tmp.113), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.115), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)) {Reg(SP), Pseudo(tmp.104), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.114), Pseudo(tmp.111)}
AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.112), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.112), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(tmp.110), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(tmp.110), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)) {Reg(SP), Pseudo(tmp.108), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)) {Reg(SP), Pseudo(tmp.108), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)) {Pseudo(tmp.103), Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)) {Pseudo(tmp.103), Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101)}
AssType: Double Mov(Reg(XMM2), Pseudo(three.89)) {Pseudo(one.87), Pseudo(two.88), Reg(SP), Pseudo(three.89)}
AssType: Double Mov(Reg(XMM1), Pseudo(two.88)) {Pseudo(one.87), Pseudo(two.88), Reg(SP), Reg(XMM2)}
AssType: Double Mov(Reg(XMM0), Pseudo(one.87)) {Reg(XMM1), Pseudo(one.87), Reg(XMM2), Reg(SP)}
OLD ANNOT: set()
NEW ANNOT: {Reg(XMM1), Reg(XMM2), Reg(XMM0), Reg(SP)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(R14d)
        Reg(CX)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(BX)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(BX)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(BX)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R9d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(R15d)
        Reg(AX)
        Reg(CX)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(R13d)
        Reg(DI)
        Reg(R8d)
        Reg(DX)
        Reg(AX)
        Reg(R14d)
        Reg(CX)
Pseudo(tmp.119)
    Pseudo(tmp.119) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.136)
    Pseudo(tmp.136) spillCost: 0.0 color: None pruned: False
-----------Building DOUBLE interference graph.------------------
AssType: Double Mov(Reg(XMM0), Pseudo(one.87))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Reg(XMM0), Pseudo(one.87)), AssType: Double Mov(Reg(XMM1), Pseudo(two.88)), AssType: Double Mov(Reg(XMM2), Pseudo(three.89)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)), AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)), AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)), AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)), AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)), AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)), AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)), AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)), AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)), AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)), AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)), AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)), AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)), AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)), AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)), AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)), AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)), Call(callee), AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)), AssType: Quadword Binary(Sub, Imm(8), Reg(SP)), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Pseudo(glob2), Reg(XMM1)), AssType: Double Mov(Pseudo(glob3), Reg(XMM2)), AssType: Double Mov(Pseudo(glob4), Reg(XMM3)), AssType: Double Mov(Pseudo(glob5), Reg(XMM4)), AssType: Double Mov(Pseudo(glob6), Reg(XMM5)), AssType: Double Mov(Pseudo(glob7), Reg(XMM6)), AssType: Double Mov(Pseudo(glob8), Reg(XMM7)), Push(Pseudo(tmp.134)), Push(Data(tmp.141, 0)), Push(Data(tmp.140, 0)), Push(Data(tmp.139, 0)), Push(Pseudo(glob11)), Push(Pseudo(glob10)), Push(Pseudo(glob9)), Call(check_14_doubles), AssType: Quadword Binary(Add, Imm(64), Reg(SP)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Reg(XMM0), Pseudo(one.87)), set()), (AssType: Double Mov(Reg(XMM1), Pseudo(two.88)), set()), (AssType: Double Mov(Reg(XMM2), Pseudo(three.89)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)), set()), (AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)), set()), (AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)), set()), (AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)), set()), (AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)), set()), (AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)), set()), (AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)), set()), (AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)), set()), (AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)), set()), (AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)), set()), (AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)), set()), (AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)), set()), (AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)), set()), (AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)), set()), (AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)), set()), (AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)), set()), (AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)), set()), (AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)), set()), (AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)), set()), (AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)), set()), (AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)), set()), (AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)), set()), (Call(callee), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)), set()), (AssType: Quadword Binary(Sub, Imm(8), Reg(SP)), set()), (AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), set()), (AssType: Double Mov(Pseudo(glob2), Reg(XMM1)), set()), (AssType: Double Mov(Pseudo(glob3), Reg(XMM2)), set()), (AssType: Double Mov(Pseudo(glob4), Reg(XMM3)), set()), (AssType: Double Mov(Pseudo(glob5), Reg(XMM4)), set()), (AssType: Double Mov(Pseudo(glob6), Reg(XMM5)), set()), (AssType: Double Mov(Pseudo(glob7), Reg(XMM6)), set()), (AssType: Double Mov(Pseudo(glob8), Reg(XMM7)), set()), (Push(Pseudo(tmp.134)), set()), (Push(Data(tmp.141, 0)), set()), (Push(Data(tmp.140, 0)), set()), (Push(Data(tmp.139, 0)), set()), (Push(Pseudo(glob11)), set()), (Push(Pseudo(glob10)), set()), (Push(Pseudo(glob9)), set()), (Call(check_14_doubles), set()), (AssType: Quadword Binary(Add, Imm(64), Reg(SP)), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)) set()
AssType: Quadword Binary(Add, Imm(64), Reg(SP)) {Reg(AX)}
Call(check_14_doubles) {Reg(AX), Reg(SP)}
Push(Pseudo(glob9)) {Reg(SP)}
Push(Pseudo(glob10)) {Reg(SP), Pseudo(glob9)}
Push(Pseudo(glob11)) {Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Data(tmp.139, 0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Data(tmp.140, 0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Data(tmp.141, 0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
Push(Pseudo(tmp.134)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob8), Reg(XMM7)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(tmp.134), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob7), Reg(XMM6)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob8), Pseudo(tmp.134), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob6), Reg(XMM5)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob7), Pseudo(glob8), Pseudo(tmp.134), Pseudo(glob10)}
AssType: Double Mov(Pseudo(glob5), Reg(XMM4)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob4), Reg(XMM3)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob3), Reg(XMM2)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob7), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob2), Reg(XMM1)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8)}
AssType: Double Mov(Pseudo(glob1), Reg(XMM0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8)}
AssType: Quadword Binary(Sub, Imm(8), Reg(SP)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8), Pseudo(glob1)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.134)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.134), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob8), Pseudo(glob1)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.119)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
Call(callee) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Reg(AX), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.115), Reg(XMM2)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.113), Reg(XMM1)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.111), Reg(XMM0)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.113), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(glob11)) {Pseudo(glob11), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.113), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.107), Pseudo(glob10)) {Pseudo(tmp.111), Reg(SP), Pseudo(glob9), Pseudo(glob5), Pseudo(tmp.113), Pseudo(glob10), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(glob9)) {Reg(SP), Pseudo(glob9), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob8)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(glob8), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(glob7)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(tmp.105), Pseudo(glob2), Pseudo(glob7), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob6)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(glob4), Pseudo(glob6), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(glob5)) {Reg(SP), Pseudo(tmp.109), Pseudo(glob5), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob4), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob4)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(glob4), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(three.89), Pseudo(glob3)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob3), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(two.88), Pseudo(glob2)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(tmp.113), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(glob2), Pseudo(tmp.115), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(one.87), Pseudo(glob1)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(tmp.115), Pseudo(glob1), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Add, Pseudo(tmp.114), Pseudo(tmp.115)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(tmp.115), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.115)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.114), Pseudo(tmp.113), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.115), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Longword Cvtsi2sd(Imm(3), Pseudo(tmp.114)) {Reg(SP), Pseudo(tmp.104), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.114), Pseudo(tmp.111)}
AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.113)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.112), Pseudo(tmp.113)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Add, Pseudo(tmp.107), Pseudo(tmp.112)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.112), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.112)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.112), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(tmp.103), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Sub, Data(tmp.138, 0), Pseudo(tmp.111)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.110), Pseudo(tmp.111)) {Reg(SP), Pseudo(tmp.109), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.111)}
AssType: Double Binary(Mult, Pseudo(tmp.101), Pseudo(tmp.110)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(tmp.110), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(tmp.110)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(tmp.110), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Binary(Sub, Pseudo(three.89), Pseudo(tmp.109)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.108), Pseudo(tmp.109)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104), Pseudo(tmp.109)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.108)) {Reg(SP), Pseudo(tmp.108), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.108)) {Reg(SP), Pseudo(tmp.108), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.107)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.107)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(three.89), Pseudo(tmp.106)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.106)) {Reg(SP), Pseudo(tmp.106), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.105)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(tmp.105)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(tmp.105), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Sub, Pseudo(tmp.103), Pseudo(tmp.104)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Mov(Data(tmp.137, 0), Pseudo(tmp.104)) {Reg(SP), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.103), Pseudo(tmp.102), Pseudo(three.89), Pseudo(one.87), Pseudo(tmp.104)}
AssType: Double Binary(Mult, Pseudo(two.88), Pseudo(tmp.103)) {Pseudo(tmp.103), Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.103)) {Pseudo(tmp.103), Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Binary(Add, Pseudo(three.89), Pseudo(tmp.102)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Mov(Pseudo(two.88), Pseudo(tmp.102)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101), Pseudo(tmp.102)}
AssType: Double Binary(Add, Pseudo(one.87), Pseudo(tmp.101)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(three.89), Pseudo(tmp.101)) {Pseudo(three.89), Reg(SP), Pseudo(one.87), Pseudo(two.88), Pseudo(tmp.101)}
AssType: Double Mov(Reg(XMM2), Pseudo(three.89)) {Pseudo(one.87), Pseudo(two.88), Reg(SP), Pseudo(three.89)}
AssType: Double Mov(Reg(XMM1), Pseudo(two.88)) {Pseudo(one.87), Pseudo(two.88), Reg(SP), Reg(XMM2)}
AssType: Double Mov(Reg(XMM0), Pseudo(one.87)) {Reg(XMM1), Pseudo(one.87), Reg(XMM2), Reg(SP)}
OLD ANNOT: set()
NEW ANNOT: {Reg(XMM1), Reg(XMM2), Reg(XMM0), Reg(SP)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(tmp.113)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Pseudo(tmp.115)
        Reg(XMM12)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM2)
        Reg(XMM7)
        Pseudo(tmp.115)
        Reg(XMM8)
        Pseudo(one.87)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(two.88)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM7)
        Reg(XMM8)
        Pseudo(one.87)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM2)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM3)
        Reg(XMM7)
        Reg(XMM2)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM10)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Pseudo(tmp.134)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM5)
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM5)
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM12)
Pseudo(one.87)
    Pseudo(one.87) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Pseudo(tmp.106)
        Pseudo(tmp.101)
        Pseudo(tmp.107)
        Reg(XMM2)
        Pseudo(tmp.105)
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.113)
        Pseudo(tmp.103)
        Pseudo(tmp.115)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
        Pseudo(two.88)
        Pseudo(tmp.102)
        Pseudo(tmp.110)
        Pseudo(three.89)
        Pseudo(tmp.112)
        Pseudo(tmp.111)
Pseudo(two.88)
    Pseudo(two.88) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(tmp.101)
        Pseudo(tmp.112)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Reg(XMM2)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(three.89)
    Pseudo(three.89) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.101)
    Pseudo(tmp.101) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.112)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.102)
    Pseudo(tmp.102) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(tmp.101)
        Pseudo(two.88)
        Pseudo(tmp.107)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.103)
    Pseudo(tmp.103) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.112)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.104)
    Pseudo(tmp.104) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.114)
        Pseudo(tmp.109)
Pseudo(tmp.105)
    Pseudo(tmp.105) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.106)
    Pseudo(tmp.106) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.112)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.107)
    Pseudo(tmp.107) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.108)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.102)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.108)
    Pseudo(tmp.108) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.107)
        Pseudo(tmp.102)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Pseudo(tmp.104)
Pseudo(tmp.109)
    Pseudo(tmp.109) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.107)
        Pseudo(tmp.102)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(tmp.110)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.111)
Pseudo(tmp.110)
    Pseudo(tmp.110) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.107)
        Pseudo(tmp.102)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.111)
    Pseudo(tmp.111) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(tmp.103)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.107)
        Pseudo(tmp.102)
        Pseudo(tmp.112)
        Pseudo(tmp.113)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.112)
    Pseudo(tmp.112) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.106)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.103)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.113)
    Pseudo(tmp.113) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.114)
        Pseudo(tmp.106)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.102)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Reg(XMM0)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.114)
    Pseudo(tmp.114) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.111)
        Pseudo(tmp.106)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.113)
        Pseudo(tmp.107)
        Pseudo(tmp.102)
        Pseudo(tmp.103)
        Pseudo(tmp.115)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
Pseudo(tmp.115)
    Pseudo(tmp.115) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Pseudo(tmp.104)
        Pseudo(tmp.109)
        Pseudo(tmp.106)
        Pseudo(two.88)
        Pseudo(tmp.101)
        Pseudo(tmp.113)
        Pseudo(tmp.102)
        Pseudo(tmp.107)
        Pseudo(tmp.103)
        Pseudo(three.89)
        Pseudo(tmp.105)
        Pseudo(one.87)
        Reg(XMM0)
        Pseudo(tmp.114)
        Pseudo(tmp.111)
Pseudo(tmp.134)
    Pseudo(tmp.134) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM5)
        Reg(XMM4)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM0)
