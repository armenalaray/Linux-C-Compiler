False
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
9
['/home/alejandro/CComp/code/cd.py', '-S', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: codeEmission
NoLink: False
NotAssembly: True
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('int', <TokenType.INT_KW: 4>, 1), ('check_one_int', <TokenType.IDENTIFIER: 2>, 1), ('(', <TokenType.OPEN_PAREN: 7>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('actual', <TokenType.IDENTIFIER: 2>, 1), (',', <TokenType.COMMA: 38>, 1), ('int', <TokenType.INT_KW: 4>, 1), ('expected', <TokenType.IDENTIFIER: 2>, 1), (')', <TokenType.CLOSE_PAREN: 8>, 1), (';', <TokenType.SEMICOLON: 11>, 1), ('int', <TokenType.INT_KW: 4>, 2), ('check_5_ints', <TokenType.IDENTIFIER: 2>, 2), ('(', <TokenType.OPEN_PAREN: 7>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('a', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('b', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('c', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('d', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('e', <TokenType.IDENTIFIER: 2>, 2), (',', <TokenType.COMMA: 38>, 2), ('int', <TokenType.INT_KW: 4>, 2), ('start', <TokenType.IDENTIFIER: 2>, 2), (')', <TokenType.CLOSE_PAREN: 8>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('int', <TokenType.INT_KW: 4>, 3), ('check_12_ints', <TokenType.IDENTIFIER: 2>, 3), ('(', <TokenType.OPEN_PAREN: 7>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('a', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('b', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('c', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('d', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('e', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('f', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('g', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('h', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 3), ('i', <TokenType.IDENTIFIER: 2>, 3), (',', <TokenType.COMMA: 38>, 3), ('int', <TokenType.INT_KW: 4>, 4), ('j', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('k', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('l', <TokenType.IDENTIFIER: 2>, 4), (',', <TokenType.COMMA: 38>, 4), ('int', <TokenType.INT_KW: 4>, 4), ('start', <TokenType.IDENTIFIER: 2>, 4), (')', <TokenType.CLOSE_PAREN: 8>, 4), (';', <TokenType.SEMICOLON: 11>, 4), ('int', <TokenType.INT_KW: 4>, 5), ('check_one_uchar', <TokenType.IDENTIFIER: 2>, 5), ('(', <TokenType.OPEN_PAREN: 7>, 5), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 5), ('char', <TokenType.CHAR_KW: 52>, 5), ('actual', <TokenType.IDENTIFIER: 2>, 5), (',', <TokenType.COMMA: 38>, 5), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 5), ('char', <TokenType.CHAR_KW: 52>, 5), ('expected', <TokenType.IDENTIFIER: 2>, 5), (')', <TokenType.CLOSE_PAREN: 8>, 5), (';', <TokenType.SEMICOLON: 11>, 5), ('int', <TokenType.INT_KW: 4>, 6), ('check_one_uint', <TokenType.IDENTIFIER: 2>, 6), ('(', <TokenType.OPEN_PAREN: 7>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 6), ('int', <TokenType.INT_KW: 4>, 6), ('actual', <TokenType.IDENTIFIER: 2>, 6), (',', <TokenType.COMMA: 38>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 6), ('int', <TokenType.INT_KW: 4>, 6), ('expected', <TokenType.IDENTIFIER: 2>, 6), (')', <TokenType.CLOSE_PAREN: 8>, 6), (';', <TokenType.SEMICOLON: 11>, 6), ('int', <TokenType.INT_KW: 4>, 7), ('check_one_long', <TokenType.IDENTIFIER: 2>, 7), ('(', <TokenType.OPEN_PAREN: 7>, 7), ('long', <TokenType.LONG_KW: 41>, 7), ('actual', <TokenType.IDENTIFIER: 2>, 7), (',', <TokenType.COMMA: 38>, 7), ('long', <TokenType.LONG_KW: 41>, 7), ('expected', <TokenType.IDENTIFIER: 2>, 7), (')', <TokenType.CLOSE_PAREN: 8>, 7), (';', <TokenType.SEMICOLON: 11>, 7), ('int', <TokenType.INT_KW: 4>, 8), ('check_one_ulong', <TokenType.IDENTIFIER: 2>, 8), ('(', <TokenType.OPEN_PAREN: 7>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('long', <TokenType.LONG_KW: 41>, 8), ('actual', <TokenType.IDENTIFIER: 2>, 8), (',', <TokenType.COMMA: 38>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('long', <TokenType.LONG_KW: 41>, 8), ('expected', <TokenType.IDENTIFIER: 2>, 8), (')', <TokenType.CLOSE_PAREN: 8>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('int', <TokenType.INT_KW: 4>, 9), ('check_one_double', <TokenType.IDENTIFIER: 2>, 9), ('(', <TokenType.OPEN_PAREN: 7>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('actual', <TokenType.IDENTIFIER: 2>, 9), (',', <TokenType.COMMA: 38>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('expected', <TokenType.IDENTIFIER: 2>, 9), (')', <TokenType.CLOSE_PAREN: 8>, 9), (';', <TokenType.SEMICOLON: 11>, 9), ('int', <TokenType.INT_KW: 4>, 10), ('check_12_longs', <TokenType.IDENTIFIER: 2>, 10), ('(', <TokenType.OPEN_PAREN: 7>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('a', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('b', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('c', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('d', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('e', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('f', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 10), ('g', <TokenType.IDENTIFIER: 2>, 10), (',', <TokenType.COMMA: 38>, 10), ('long', <TokenType.LONG_KW: 41>, 11), ('h', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('i', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('j', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('k', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('l', <TokenType.IDENTIFIER: 2>, 11), (',', <TokenType.COMMA: 38>, 11), ('long', <TokenType.LONG_KW: 41>, 11), ('start', <TokenType.IDENTIFIER: 2>, 11), (')', <TokenType.CLOSE_PAREN: 8>, 11), (';', <TokenType.SEMICOLON: 11>, 11), ('int', <TokenType.INT_KW: 4>, 12), ('check_six_chars', <TokenType.IDENTIFIER: 2>, 12), ('(', <TokenType.OPEN_PAREN: 7>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('a', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('b', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('c', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('d', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('e', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('char', <TokenType.CHAR_KW: 52>, 12), ('f', <TokenType.IDENTIFIER: 2>, 12), (',', <TokenType.COMMA: 38>, 12), ('int', <TokenType.INT_KW: 4>, 12), ('start', <TokenType.IDENTIFIER: 2>, 12), (')', <TokenType.CLOSE_PAREN: 8>, 12), (';', <TokenType.SEMICOLON: 11>, 12), ('int', <TokenType.INT_KW: 4>, 13), ('check_14_doubles', <TokenType.IDENTIFIER: 2>, 13), ('(', <TokenType.OPEN_PAREN: 7>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('a', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('b', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('c', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('d', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('e', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('f', <TokenType.IDENTIFIER: 2>, 13), (',', <TokenType.COMMA: 38>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('g', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('h', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('i', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('j', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('k', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('l', <TokenType.IDENTIFIER: 2>, 14), (',', <TokenType.COMMA: 38>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('m', <TokenType.IDENTIFIER: 2>, 15), (',', <TokenType.COMMA: 38>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('n', <TokenType.IDENTIFIER: 2>, 15), (',', <TokenType.COMMA: 38>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('start', <TokenType.IDENTIFIER: 2>, 15), (')', <TokenType.CLOSE_PAREN: 8>, 15), (';', <TokenType.SEMICOLON: 11>, 15), ('int', <TokenType.INT_KW: 4>, 16), ('check_12_vals', <TokenType.IDENTIFIER: 2>, 16), ('(', <TokenType.OPEN_PAREN: 7>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('a', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('b', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('c', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('d', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('e', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('f', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('g', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('h', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 16), ('i', <TokenType.IDENTIFIER: 2>, 16), (',', <TokenType.COMMA: 38>, 16), ('int', <TokenType.INT_KW: 4>, 17), ('j', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('long', <TokenType.LONG_KW: 41>, 17), ('*', <TokenType.ASTERISK: 17>, 17), ('k', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('double', <TokenType.DOUBLE_KW: 48>, 17), ('*', <TokenType.ASTERISK: 17>, 17), ('l', <TokenType.IDENTIFIER: 2>, 17), (',', <TokenType.COMMA: 38>, 17), ('int', <TokenType.INT_KW: 4>, 17), ('start', <TokenType.IDENTIFIER: 2>, 17), (')', <TokenType.CLOSE_PAREN: 8>, 17), (';', <TokenType.SEMICOLON: 11>, 17), ('int', <TokenType.INT_KW: 4>, 18), ('id', <TokenType.IDENTIFIER: 2>, 18), ('(', <TokenType.OPEN_PAREN: 7>, 18), ('int', <TokenType.INT_KW: 4>, 18), ('x', <TokenType.IDENTIFIER: 2>, 18), (')', <TokenType.CLOSE_PAREN: 8>, 18), (';', <TokenType.SEMICOLON: 11>, 18), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('dbl_id', <TokenType.IDENTIFIER: 2>, 19), ('(', <TokenType.OPEN_PAREN: 7>, 19), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('x', <TokenType.IDENTIFIER: 2>, 19), (')', <TokenType.CLOSE_PAREN: 8>, 19), (';', <TokenType.SEMICOLON: 11>, 19), ('long', <TokenType.LONG_KW: 41>, 20), ('long_id', <TokenType.IDENTIFIER: 2>, 20), ('(', <TokenType.OPEN_PAREN: 7>, 20), ('long', <TokenType.LONG_KW: 41>, 20), ('l', <TokenType.IDENTIFIER: 2>, 20), (')', <TokenType.CLOSE_PAREN: 8>, 20), (';', <TokenType.SEMICOLON: 11>, 20), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 21), ('unsigned_id', <TokenType.IDENTIFIER: 2>, 21), ('(', <TokenType.OPEN_PAREN: 7>, 21), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 21), ('u', <TokenType.IDENTIFIER: 2>, 21), (')', <TokenType.CLOSE_PAREN: 8>, 21), (';', <TokenType.SEMICOLON: 11>, 21), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 22), ('char', <TokenType.CHAR_KW: 52>, 22), ('uchar_id', <TokenType.IDENTIFIER: 2>, 22), ('(', <TokenType.OPEN_PAREN: 7>, 22), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 22), ('char', <TokenType.CHAR_KW: 52>, 22), ('uc', <TokenType.IDENTIFIER: 2>, 22), (')', <TokenType.CLOSE_PAREN: 8>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('double', <TokenType.DOUBLE_KW: 48>, 23), ('glob0', <TokenType.IDENTIFIER: 2>, 23), ('=', <TokenType.EQUAL: 28>, 23), ('0', <TokenType.INT_CONSTANT: 3>, 23), (';', <TokenType.SEMICOLON: 11>, 23), ('double', <TokenType.DOUBLE_KW: 48>, 24), ('glob1', <TokenType.IDENTIFIER: 2>, 24), ('=', <TokenType.EQUAL: 28>, 24), ('1.', <TokenType.DOUBLE_CONSTANT: 47>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('double', <TokenType.DOUBLE_KW: 48>, 25), ('glob2', <TokenType.IDENTIFIER: 2>, 25), ('=', <TokenType.EQUAL: 28>, 25), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 25), (';', <TokenType.SEMICOLON: 11>, 25), ('double', <TokenType.DOUBLE_KW: 48>, 26), ('glob10', <TokenType.IDENTIFIER: 2>, 26), ('=', <TokenType.EQUAL: 28>, 26), ('10.', <TokenType.DOUBLE_CONSTANT: 47>, 26), (';', <TokenType.SEMICOLON: 11>, 26), ('double', <TokenType.DOUBLE_KW: 48>, 27), ('glob_zero', <TokenType.IDENTIFIER: 2>, 27), (';', <TokenType.SEMICOLON: 11>, 27), ('double', <TokenType.DOUBLE_KW: 48>, 28), ('glob_one', <TokenType.IDENTIFIER: 2>, 28), (';', <TokenType.SEMICOLON: 11>, 28), ('double', <TokenType.DOUBLE_KW: 48>, 29), ('glob_two', <TokenType.IDENTIFIER: 2>, 29), (';', <TokenType.SEMICOLON: 11>, 29), ('double', <TokenType.DOUBLE_KW: 48>, 30), ('glob_three', <TokenType.IDENTIFIER: 2>, 30), (';', <TokenType.SEMICOLON: 11>, 30), ('double', <TokenType.DOUBLE_KW: 48>, 31), ('glob_four', <TokenType.IDENTIFIER: 2>, 31), (';', <TokenType.SEMICOLON: 11>, 31), ('double', <TokenType.DOUBLE_KW: 48>, 32), ('glob_five', <TokenType.IDENTIFIER: 2>, 32), (';', <TokenType.SEMICOLON: 11>, 32), ('double', <TokenType.DOUBLE_KW: 48>, 33), ('glob_six', <TokenType.IDENTIFIER: 2>, 33), (';', <TokenType.SEMICOLON: 11>, 33), ('double', <TokenType.DOUBLE_KW: 48>, 34), ('glob_seven', <TokenType.IDENTIFIER: 2>, 34), (';', <TokenType.SEMICOLON: 11>, 34), ('double', <TokenType.DOUBLE_KW: 48>, 35), ('glob_eight', <TokenType.IDENTIFIER: 2>, 35), (';', <TokenType.SEMICOLON: 11>, 35), ('double', <TokenType.DOUBLE_KW: 48>, 36), ('glob_nine', <TokenType.IDENTIFIER: 2>, 36), (';', <TokenType.SEMICOLON: 11>, 36), ('double', <TokenType.DOUBLE_KW: 48>, 37), ('glob_ten', <TokenType.IDENTIFIER: 2>, 37), (';', <TokenType.SEMICOLON: 11>, 37), ('double', <TokenType.DOUBLE_KW: 48>, 38), ('glob_eleven', <TokenType.IDENTIFIER: 2>, 38), (';', <TokenType.SEMICOLON: 11>, 38), ('double', <TokenType.DOUBLE_KW: 48>, 39), ('glob_twelve', <TokenType.IDENTIFIER: 2>, 39), (';', <TokenType.SEMICOLON: 11>, 39), ('double', <TokenType.DOUBLE_KW: 48>, 40), ('glob_thirteen', <TokenType.IDENTIFIER: 2>, 40), (';', <TokenType.SEMICOLON: 11>, 40), ('double', <TokenType.DOUBLE_KW: 48>, 41), ('glob_fourteen', <TokenType.IDENTIFIER: 2>, 41), (';', <TokenType.SEMICOLON: 11>, 41), ('void', <TokenType.VOID_KW: 5>, 42), ('incr_glob1', <TokenType.IDENTIFIER: 2>, 42), ('(', <TokenType.OPEN_PAREN: 7>, 42), ('void', <TokenType.VOID_KW: 5>, 42), (')', <TokenType.CLOSE_PAREN: 8>, 42), ('{', <TokenType.OPEN_BRACE: 9>, 42), ('glob1', <TokenType.IDENTIFIER: 2>, 43), ('=', <TokenType.EQUAL: 28>, 43), ('glob1', <TokenType.IDENTIFIER: 2>, 43), ('+', <TokenType.PLUS: 18>, 43), ('1', <TokenType.INT_CONSTANT: 3>, 43), (';', <TokenType.SEMICOLON: 11>, 43), ('}', <TokenType.CLOSE_BRACE: 10>, 44), ('int', <TokenType.INT_KW: 4>, 45), ('target', <TokenType.IDENTIFIER: 2>, 45), ('(', <TokenType.OPEN_PAREN: 7>, 45), ('void', <TokenType.VOID_KW: 5>, 45), (')', <TokenType.CLOSE_PAREN: 8>, 45), ('{', <TokenType.OPEN_BRACE: 9>, 45), ('double', <TokenType.DOUBLE_KW: 48>, 46), ('zero', <TokenType.IDENTIFIER: 2>, 46), ('=', <TokenType.EQUAL: 28>, 46), ('glob0', <TokenType.IDENTIFIER: 2>, 46), ('*', <TokenType.ASTERISK: 17>, 46), ('10.', <TokenType.DOUBLE_CONSTANT: 47>, 46), (';', <TokenType.SEMICOLON: 11>, 46), ('double', <TokenType.DOUBLE_KW: 48>, 47), ('one', <TokenType.IDENTIFIER: 2>, 47), ('=', <TokenType.EQUAL: 28>, 47), ('glob10', <TokenType.IDENTIFIER: 2>, 47), ('/', <TokenType.FORWARD_SLASH: 15>, 47), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 47), ('-', <TokenType.HYPHEN: 13>, 47), ('4.', <TokenType.DOUBLE_CONSTANT: 47>, 47), (';', <TokenType.SEMICOLON: 11>, 47), ('double', <TokenType.DOUBLE_KW: 48>, 48), ('two', <TokenType.IDENTIFIER: 2>, 48), ('=', <TokenType.EQUAL: 28>, 48), ('glob10', <TokenType.IDENTIFIER: 2>, 48), ('/', <TokenType.FORWARD_SLASH: 15>, 48), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 48), ('-', <TokenType.HYPHEN: 13>, 48), ('3.', <TokenType.DOUBLE_CONSTANT: 47>, 48), (';', <TokenType.SEMICOLON: 11>, 48), ('double', <TokenType.DOUBLE_KW: 48>, 49), ('three', <TokenType.IDENTIFIER: 2>, 49), ('=', <TokenType.EQUAL: 28>, 49), ('glob2', <TokenType.IDENTIFIER: 2>, 49), ('*', <TokenType.ASTERISK: 17>, 49), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 49), ('-', <TokenType.HYPHEN: 13>, 49), ('1', <TokenType.INT_CONSTANT: 3>, 49), (';', <TokenType.SEMICOLON: 11>, 49), ('double', <TokenType.DOUBLE_KW: 48>, 50), ('four', <TokenType.IDENTIFIER: 2>, 50), ('=', <TokenType.EQUAL: 28>, 50), ('(', <TokenType.OPEN_PAREN: 7>, 50), ('6.', <TokenType.DOUBLE_CONSTANT: 47>, 50), ('-', <TokenType.HYPHEN: 13>, 50), ('glob2', <TokenType.IDENTIFIER: 2>, 50), (')', <TokenType.CLOSE_PAREN: 8>, 50), ('*', <TokenType.ASTERISK: 17>, 50), ('glob1', <TokenType.IDENTIFIER: 2>, 50), (';', <TokenType.SEMICOLON: 11>, 50), ('double', <TokenType.DOUBLE_KW: 48>, 51), ('five', <TokenType.IDENTIFIER: 2>, 51), ('=', <TokenType.EQUAL: 28>, 51), ('(', <TokenType.OPEN_PAREN: 7>, 51), ('glob10', <TokenType.IDENTIFIER: 2>, 51), ('/', <TokenType.FORWARD_SLASH: 15>, 51), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 51), (')', <TokenType.CLOSE_PAREN: 8>, 51), ('*', <TokenType.ASTERISK: 17>, 51), ('glob1', <TokenType.IDENTIFIER: 2>, 51), (';', <TokenType.SEMICOLON: 11>, 51), ('double', <TokenType.DOUBLE_KW: 48>, 52), ('six', <TokenType.IDENTIFIER: 2>, 52), ('=', <TokenType.EQUAL: 28>, 52), ('(', <TokenType.OPEN_PAREN: 7>, 52), ('glob10', <TokenType.IDENTIFIER: 2>, 52), ('+', <TokenType.PLUS: 18>, 52), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 52), (')', <TokenType.CLOSE_PAREN: 8>, 52), ('/', <TokenType.FORWARD_SLASH: 15>, 52), ('2', <TokenType.INT_CONSTANT: 3>, 52), (';', <TokenType.SEMICOLON: 11>, 52), ('double', <TokenType.DOUBLE_KW: 48>, 53), ('seven', <TokenType.IDENTIFIER: 2>, 53), ('=', <TokenType.EQUAL: 28>, 53), ('3.', <TokenType.DOUBLE_CONSTANT: 47>, 53), ('*', <TokenType.ASTERISK: 17>, 53), ('glob2', <TokenType.IDENTIFIER: 2>, 53), ('+', <TokenType.PLUS: 18>, 53), ('1.', <TokenType.DOUBLE_CONSTANT: 47>, 53), (';', <TokenType.SEMICOLON: 11>, 53), ('double', <TokenType.DOUBLE_KW: 48>, 54), ('eight', <TokenType.IDENTIFIER: 2>, 54), ('=', <TokenType.EQUAL: 28>, 54), ('glob2', <TokenType.IDENTIFIER: 2>, 54), ('*', <TokenType.ASTERISK: 17>, 54), ('glob2', <TokenType.IDENTIFIER: 2>, 54), ('*', <TokenType.ASTERISK: 17>, 54), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 54), (';', <TokenType.SEMICOLON: 11>, 54), ('double', <TokenType.DOUBLE_KW: 48>, 55), ('nine', <TokenType.IDENTIFIER: 2>, 55), ('=', <TokenType.EQUAL: 28>, 55), ('(', <TokenType.OPEN_PAREN: 7>, 55), ('glob1', <TokenType.IDENTIFIER: 2>, 55), ('+', <TokenType.PLUS: 18>, 55), ('glob2', <TokenType.IDENTIFIER: 2>, 55), (')', <TokenType.CLOSE_PAREN: 8>, 55), ('*', <TokenType.ASTERISK: 17>, 55), ('3.', <TokenType.DOUBLE_CONSTANT: 47>, 55), (';', <TokenType.SEMICOLON: 11>, 55), ('double', <TokenType.DOUBLE_KW: 48>, 56), ('ten', <TokenType.IDENTIFIER: 2>, 56), ('=', <TokenType.EQUAL: 28>, 56), ('(', <TokenType.OPEN_PAREN: 7>, 56), ('glob2', <TokenType.IDENTIFIER: 2>, 56), ('+', <TokenType.PLUS: 18>, 56), ('3.', <TokenType.DOUBLE_CONSTANT: 47>, 56), (')', <TokenType.CLOSE_PAREN: 8>, 56), ('*', <TokenType.ASTERISK: 17>, 56), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 56), (';', <TokenType.SEMICOLON: 11>, 56), ('double', <TokenType.DOUBLE_KW: 48>, 57), ('eleven', <TokenType.IDENTIFIER: 2>, 57), ('=', <TokenType.EQUAL: 28>, 57), ('(', <TokenType.OPEN_PAREN: 7>, 57), ('glob10', <TokenType.IDENTIFIER: 2>, 57), ('+', <TokenType.PLUS: 18>, 57), ('1.', <TokenType.DOUBLE_CONSTANT: 47>, 57), (')', <TokenType.CLOSE_PAREN: 8>, 57), ('*', <TokenType.ASTERISK: 17>, 57), ('glob1', <TokenType.IDENTIFIER: 2>, 57), (';', <TokenType.SEMICOLON: 11>, 57), ('double', <TokenType.DOUBLE_KW: 48>, 58), ('twelve', <TokenType.IDENTIFIER: 2>, 58), ('=', <TokenType.EQUAL: 28>, 58), ('(', <TokenType.OPEN_PAREN: 7>, 58), ('glob1', <TokenType.IDENTIFIER: 2>, 58), ('+', <TokenType.PLUS: 18>, 58), ('glob2', <TokenType.IDENTIFIER: 2>, 58), (')', <TokenType.CLOSE_PAREN: 8>, 58), ('*', <TokenType.ASTERISK: 17>, 58), ('4.', <TokenType.DOUBLE_CONSTANT: 47>, 58), (';', <TokenType.SEMICOLON: 11>, 58), ('double', <TokenType.DOUBLE_KW: 48>, 59), ('thirteen', <TokenType.IDENTIFIER: 2>, 59), ('=', <TokenType.EQUAL: 28>, 59), ('(', <TokenType.OPEN_PAREN: 7>, 59), ('glob2', <TokenType.IDENTIFIER: 2>, 59), ('*', <TokenType.ASTERISK: 17>, 59), ('3.', <TokenType.DOUBLE_CONSTANT: 47>, 59), (')', <TokenType.CLOSE_PAREN: 8>, 59), ('+', <TokenType.PLUS: 18>, 59), ('7.', <TokenType.DOUBLE_CONSTANT: 47>, 59), (';', <TokenType.SEMICOLON: 11>, 59), ('glob_zero', <TokenType.IDENTIFIER: 2>, 60), ('=', <TokenType.EQUAL: 28>, 60), ('zero', <TokenType.IDENTIFIER: 2>, 60), (';', <TokenType.SEMICOLON: 11>, 60), ('double', <TokenType.DOUBLE_KW: 48>, 61), ('fourteen', <TokenType.IDENTIFIER: 2>, 61), ('=', <TokenType.EQUAL: 28>, 61), ('glob2', <TokenType.IDENTIFIER: 2>, 61), ('*', <TokenType.ASTERISK: 17>, 61), ('7.', <TokenType.DOUBLE_CONSTANT: 47>, 61), (';', <TokenType.SEMICOLON: 11>, 61), ('glob_one', <TokenType.IDENTIFIER: 2>, 62), ('=', <TokenType.EQUAL: 28>, 62), ('one', <TokenType.IDENTIFIER: 2>, 62), (';', <TokenType.SEMICOLON: 11>, 62), ('glob_two', <TokenType.IDENTIFIER: 2>, 63), ('=', <TokenType.EQUAL: 28>, 63), ('two', <TokenType.IDENTIFIER: 2>, 63), (';', <TokenType.SEMICOLON: 11>, 63), ('glob_three', <TokenType.IDENTIFIER: 2>, 64), ('=', <TokenType.EQUAL: 28>, 64), ('three', <TokenType.IDENTIFIER: 2>, 64), (';', <TokenType.SEMICOLON: 11>, 64), ('glob_four', <TokenType.IDENTIFIER: 2>, 65), ('=', <TokenType.EQUAL: 28>, 65), ('four', <TokenType.IDENTIFIER: 2>, 65), (';', <TokenType.SEMICOLON: 11>, 65), ('glob_five', <TokenType.IDENTIFIER: 2>, 66), ('=', <TokenType.EQUAL: 28>, 66), ('five', <TokenType.IDENTIFIER: 2>, 66), (';', <TokenType.SEMICOLON: 11>, 66), ('glob_six', <TokenType.IDENTIFIER: 2>, 67), ('=', <TokenType.EQUAL: 28>, 67), ('six', <TokenType.IDENTIFIER: 2>, 67), (';', <TokenType.SEMICOLON: 11>, 67), ('glob_seven', <TokenType.IDENTIFIER: 2>, 68), ('=', <TokenType.EQUAL: 28>, 68), ('seven', <TokenType.IDENTIFIER: 2>, 68), (';', <TokenType.SEMICOLON: 11>, 68), ('glob_eight', <TokenType.IDENTIFIER: 2>, 69), ('=', <TokenType.EQUAL: 28>, 69), ('eight', <TokenType.IDENTIFIER: 2>, 69), (';', <TokenType.SEMICOLON: 11>, 69), ('glob_nine', <TokenType.IDENTIFIER: 2>, 70), ('=', <TokenType.EQUAL: 28>, 70), ('nine', <TokenType.IDENTIFIER: 2>, 70), (';', <TokenType.SEMICOLON: 11>, 70), ('glob_ten', <TokenType.IDENTIFIER: 2>, 71), ('=', <TokenType.EQUAL: 28>, 71), ('ten', <TokenType.IDENTIFIER: 2>, 71), (';', <TokenType.SEMICOLON: 11>, 71), ('glob_eleven', <TokenType.IDENTIFIER: 2>, 72), ('=', <TokenType.EQUAL: 28>, 72), ('eleven', <TokenType.IDENTIFIER: 2>, 72), (';', <TokenType.SEMICOLON: 11>, 72), ('glob_twelve', <TokenType.IDENTIFIER: 2>, 73), ('=', <TokenType.EQUAL: 28>, 73), ('twelve', <TokenType.IDENTIFIER: 2>, 73), (';', <TokenType.SEMICOLON: 11>, 73), ('glob_thirteen', <TokenType.IDENTIFIER: 2>, 74), ('=', <TokenType.EQUAL: 28>, 74), ('thirteen', <TokenType.IDENTIFIER: 2>, 74), (';', <TokenType.SEMICOLON: 11>, 74), ('glob_fourteen', <TokenType.IDENTIFIER: 2>, 75), ('=', <TokenType.EQUAL: 28>, 75), ('fourteen', <TokenType.IDENTIFIER: 2>, 75), (';', <TokenType.SEMICOLON: 11>, 75), ('incr_glob1', <TokenType.IDENTIFIER: 2>, 76), ('(', <TokenType.OPEN_PAREN: 7>, 76), (')', <TokenType.CLOSE_PAREN: 8>, 76), (';', <TokenType.SEMICOLON: 11>, 76), ('check_one_double', <TokenType.IDENTIFIER: 2>, 77), ('(', <TokenType.OPEN_PAREN: 7>, 77), ('glob_zero', <TokenType.IDENTIFIER: 2>, 77), (',', <TokenType.COMMA: 38>, 77), ('0.', <TokenType.DOUBLE_CONSTANT: 47>, 77), (')', <TokenType.CLOSE_PAREN: 8>, 77), (';', <TokenType.SEMICOLON: 11>, 77), ('check_one_double', <TokenType.IDENTIFIER: 2>, 78), ('(', <TokenType.OPEN_PAREN: 7>, 78), ('glob_one', <TokenType.IDENTIFIER: 2>, 78), (',', <TokenType.COMMA: 38>, 78), ('1.0', <TokenType.DOUBLE_CONSTANT: 47>, 78), (')', <TokenType.CLOSE_PAREN: 8>, 78), (';', <TokenType.SEMICOLON: 11>, 78), ('check_one_double', <TokenType.IDENTIFIER: 2>, 79), ('(', <TokenType.OPEN_PAREN: 7>, 79), ('glob_two', <TokenType.IDENTIFIER: 2>, 79), (',', <TokenType.COMMA: 38>, 79), ('2.0', <TokenType.DOUBLE_CONSTANT: 47>, 79), (')', <TokenType.CLOSE_PAREN: 8>, 79), (';', <TokenType.SEMICOLON: 11>, 79), ('check_one_double', <TokenType.IDENTIFIER: 2>, 80), ('(', <TokenType.OPEN_PAREN: 7>, 80), ('glob_three', <TokenType.IDENTIFIER: 2>, 80), (',', <TokenType.COMMA: 38>, 80), ('3.0', <TokenType.DOUBLE_CONSTANT: 47>, 80), (')', <TokenType.CLOSE_PAREN: 8>, 80), (';', <TokenType.SEMICOLON: 11>, 80), ('check_one_double', <TokenType.IDENTIFIER: 2>, 81), ('(', <TokenType.OPEN_PAREN: 7>, 81), ('glob_four', <TokenType.IDENTIFIER: 2>, 81), (',', <TokenType.COMMA: 38>, 81), ('4.0', <TokenType.DOUBLE_CONSTANT: 47>, 81), (')', <TokenType.CLOSE_PAREN: 8>, 81), (';', <TokenType.SEMICOLON: 11>, 81), ('check_one_double', <TokenType.IDENTIFIER: 2>, 82), ('(', <TokenType.OPEN_PAREN: 7>, 82), ('glob_five', <TokenType.IDENTIFIER: 2>, 82), (',', <TokenType.COMMA: 38>, 82), ('5.0', <TokenType.DOUBLE_CONSTANT: 47>, 82), (')', <TokenType.CLOSE_PAREN: 8>, 82), (';', <TokenType.SEMICOLON: 11>, 82), ('check_one_double', <TokenType.IDENTIFIER: 2>, 83), ('(', <TokenType.OPEN_PAREN: 7>, 83), ('glob_six', <TokenType.IDENTIFIER: 2>, 83), (',', <TokenType.COMMA: 38>, 83), ('6.0', <TokenType.DOUBLE_CONSTANT: 47>, 83), (')', <TokenType.CLOSE_PAREN: 8>, 83), (';', <TokenType.SEMICOLON: 11>, 83), ('check_one_double', <TokenType.IDENTIFIER: 2>, 84), ('(', <TokenType.OPEN_PAREN: 7>, 84), ('glob_seven', <TokenType.IDENTIFIER: 2>, 84), (',', <TokenType.COMMA: 38>, 84), ('7.0', <TokenType.DOUBLE_CONSTANT: 47>, 84), (')', <TokenType.CLOSE_PAREN: 8>, 84), (';', <TokenType.SEMICOLON: 11>, 84), ('check_one_double', <TokenType.IDENTIFIER: 2>, 85), ('(', <TokenType.OPEN_PAREN: 7>, 85), ('glob_eight', <TokenType.IDENTIFIER: 2>, 85), (',', <TokenType.COMMA: 38>, 85), ('8.0', <TokenType.DOUBLE_CONSTANT: 47>, 85), (')', <TokenType.CLOSE_PAREN: 8>, 85), (';', <TokenType.SEMICOLON: 11>, 85), ('check_one_double', <TokenType.IDENTIFIER: 2>, 86), ('(', <TokenType.OPEN_PAREN: 7>, 86), ('glob_nine', <TokenType.IDENTIFIER: 2>, 86), (',', <TokenType.COMMA: 38>, 86), ('9.0', <TokenType.DOUBLE_CONSTANT: 47>, 86), (')', <TokenType.CLOSE_PAREN: 8>, 86), (';', <TokenType.SEMICOLON: 11>, 86), ('check_one_double', <TokenType.IDENTIFIER: 2>, 87), ('(', <TokenType.OPEN_PAREN: 7>, 87), ('glob_ten', <TokenType.IDENTIFIER: 2>, 87), (',', <TokenType.COMMA: 38>, 87), ('10.0', <TokenType.DOUBLE_CONSTANT: 47>, 87), (')', <TokenType.CLOSE_PAREN: 8>, 87), (';', <TokenType.SEMICOLON: 11>, 87), ('check_one_double', <TokenType.IDENTIFIER: 2>, 88), ('(', <TokenType.OPEN_PAREN: 7>, 88), ('glob_eleven', <TokenType.IDENTIFIER: 2>, 88), (',', <TokenType.COMMA: 38>, 88), ('11.0', <TokenType.DOUBLE_CONSTANT: 47>, 88), (')', <TokenType.CLOSE_PAREN: 8>, 88), (';', <TokenType.SEMICOLON: 11>, 88), ('check_one_double', <TokenType.IDENTIFIER: 2>, 89), ('(', <TokenType.OPEN_PAREN: 7>, 89), ('glob_twelve', <TokenType.IDENTIFIER: 2>, 89), (',', <TokenType.COMMA: 38>, 89), ('12.0', <TokenType.DOUBLE_CONSTANT: 47>, 89), (')', <TokenType.CLOSE_PAREN: 8>, 89), (';', <TokenType.SEMICOLON: 11>, 89), ('check_one_double', <TokenType.IDENTIFIER: 2>, 90), ('(', <TokenType.OPEN_PAREN: 7>, 90), ('glob_thirteen', <TokenType.IDENTIFIER: 2>, 90), (',', <TokenType.COMMA: 38>, 90), ('13.0', <TokenType.DOUBLE_CONSTANT: 47>, 90), (')', <TokenType.CLOSE_PAREN: 8>, 90), (';', <TokenType.SEMICOLON: 11>, 90), ('check_one_double', <TokenType.IDENTIFIER: 2>, 91), ('(', <TokenType.OPEN_PAREN: 7>, 91), ('glob_fourteen', <TokenType.IDENTIFIER: 2>, 91), (',', <TokenType.COMMA: 38>, 91), ('14.0', <TokenType.DOUBLE_CONSTANT: 47>, 91), (')', <TokenType.CLOSE_PAREN: 8>, 91), (';', <TokenType.SEMICOLON: 11>, 91), ('check_one_double', <TokenType.IDENTIFIER: 2>, 92), ('(', <TokenType.OPEN_PAREN: 7>, 92), ('glob1', <TokenType.IDENTIFIER: 2>, 92), (',', <TokenType.COMMA: 38>, 92), ('2.', <TokenType.DOUBLE_CONSTANT: 47>, 92), (')', <TokenType.CLOSE_PAREN: 8>, 92), (';', <TokenType.SEMICOLON: 11>, 92), ('return', <TokenType.RETURN_KW: 6>, 93), ('0', <TokenType.INT_CONSTANT: 3>, 93), (';', <TokenType.SEMICOLON: 11>, 93), ('}', <TokenType.CLOSE_BRACE: 10>, 94), ('int', <TokenType.INT_KW: 4>, 95), ('main', <TokenType.IDENTIFIER: 2>, 95), ('(', <TokenType.OPEN_PAREN: 7>, 95), ('void', <TokenType.VOID_KW: 5>, 95), (')', <TokenType.CLOSE_PAREN: 8>, 95), ('{', <TokenType.OPEN_BRACE: 9>, 96), ('return', <TokenType.RETURN_KW: 6>, 97), ('target', <TokenType.IDENTIFIER: 2>, 97), ('(', <TokenType.OPEN_PAREN: 7>, 97), (')', <TokenType.CLOSE_PAREN: 8>, 97), (';', <TokenType.SEMICOLON: 11>, 97), ('}', <TokenType.CLOSE_BRACE: 10>, 98)]
<parser.Int object at 0x7f058c0cdf10>
[<parser.TypeS object at 0x7f058c20a0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_int) [int (IdenDeclarator: actual), int (IdenDeclarator: expected)])
FunType: ParamTypes: [int, int] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058c0cdf10>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_5_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f058c0cdf10>
[<parser.TypeS object at 0x7f058c20a0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_ints) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), int (IdenDeclarator: k), int (IdenDeclarator: l), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058bfc17c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
int (FunDeclarator: (IdenDeclarator: check_one_uchar) [unsigned char (IdenDeclarator: actual), unsigned char (IdenDeclarator: expected)])
FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058bfc1c10>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Int'>]
[<class 'parser.Unsigned'>, <class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_one_uint) [uint (IdenDeclarator: actual), uint (IdenDeclarator: expected)])
FunType: ParamTypes: [uint, uint] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058c0cdf10>]
[<class 'parser.Int'>]
int
[<class 'parser.Long'>]
[<class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_one_long) [long (IdenDeclarator: actual), long (IdenDeclarator: expected)])
FunType: ParamTypes: [long, long] Return Type: int
<parser.Int object at 0x7f058c0cdf10>
[<parser.TypeS object at 0x7f058c20a0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Unsigned'>, <class 'parser.Long'>]
[<class 'parser.Unsigned'>, <class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_one_ulong) [ulong (IdenDeclarator: actual), ulong (IdenDeclarator: expected)])
FunType: ParamTypes: [ulong, ulong] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058c0cdf10>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: check_one_double) [double (IdenDeclarator: actual), double (IdenDeclarator: expected)])
FunType: ParamTypes: [double, double] Return Type: int
<parser.Int object at 0x7f058c0cdf10>
[<parser.TypeS object at 0x7f058c20a0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
[<class 'parser.Long'>]
int (FunDeclarator: (IdenDeclarator: check_12_longs) [long (IdenDeclarator: a), long (IdenDeclarator: b), long (IdenDeclarator: c), long (IdenDeclarator: d), long (IdenDeclarator: e), long (IdenDeclarator: f), long (IdenDeclarator: g), long (IdenDeclarator: h), long (IdenDeclarator: i), long (IdenDeclarator: j), long (IdenDeclarator: k), long (IdenDeclarator: l), long (IdenDeclarator: start)])
FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058c0cdf10>]
[<class 'parser.Int'>]
int
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Char'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_six_chars) [char (IdenDeclarator: a), char (IdenDeclarator: b), char (IdenDeclarator: c), char (IdenDeclarator: d), char (IdenDeclarator: e), char (IdenDeclarator: f), int (IdenDeclarator: start)])
FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int
<parser.Int object at 0x7f058c0cdf10>
[<parser.TypeS object at 0x7f058c20a0c0>]
[<class 'parser.Int'>]
int
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
[<class 'parser.Double'>]
int (FunDeclarator: (IdenDeclarator: check_14_doubles) [double (IdenDeclarator: a), double (IdenDeclarator: b), double (IdenDeclarator: c), double (IdenDeclarator: d), double (IdenDeclarator: e), double (IdenDeclarator: f), double (IdenDeclarator: g), double (IdenDeclarator: h), double (IdenDeclarator: i), double (IdenDeclarator: j), double (IdenDeclarator: k), double (IdenDeclarator: l), double (IdenDeclarator: m), double (IdenDeclarator: n), double (IdenDeclarator: start)])
FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int
<parser.Int object at 0x7f058c20a0c0>
[<parser.TypeS object at 0x7f058c0cdf10>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Int'>]
[<class 'parser.Long'>]
[<class 'parser.Double'>]
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: check_12_vals) [int (IdenDeclarator: a), int (IdenDeclarator: b), int (IdenDeclarator: c), int (IdenDeclarator: d), int (IdenDeclarator: e), int (IdenDeclarator: f), int (IdenDeclarator: g), int (IdenDeclarator: h), int (IdenDeclarator: i), int (IdenDeclarator: j), long (PointerDeclarator: (IdenDeclarator: k)), double (PointerDeclarator: (IdenDeclarator: l)), int (IdenDeclarator: start)])
FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int
<parser.Int object at 0x7f058bfc2d80>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (FunDeclarator: (IdenDeclarator: id) [int (IdenDeclarator: x)])
FunType: ParamTypes: [int] Return Type: int
<parser.Double object at 0x7f058bfc3140>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
[<class 'parser.Double'>]
double (FunDeclarator: (IdenDeclarator: dbl_id) [double (IdenDeclarator: x)])
FunType: ParamTypes: [double] Return Type: double
<parser.Long object at 0x7f058bfc2d80>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Long'>]
long
[<class 'parser.Long'>]
long (FunDeclarator: (IdenDeclarator: long_id) [long (IdenDeclarator: l)])
FunType: ParamTypes: [long] Return Type: long
<parser.Unsigned object at 0x7f058bfc3140>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Unsigned'>]
uint
[<class 'parser.Unsigned'>]
uint (FunDeclarator: (IdenDeclarator: unsigned_id) [uint (IdenDeclarator: u)])
FunType: ParamTypes: [uint] Return Type: uint
<parser.Unsigned object at 0x7f058c20a0c0>
<parser.Char object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc2d80>, <parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
unsigned char
[<class 'parser.Unsigned'>, <class 'parser.Char'>]
unsigned char (FunDeclarator: (IdenDeclarator: uchar_id) [unsigned char (IdenDeclarator: uc)])
FunType: ParamTypes: [unsigned char] Return Type: unsigned char
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob0)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob1)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob2)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob10)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfe45c0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_zero)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfe4740>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_one)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_two)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_three)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_four)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_five)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_six)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_seven)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_eight)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_nine)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_ten)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_eleven)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_twelve)
double
<parser.Double object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_thirteen)
double
<parser.Double object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob_fourteen)
double
<parser.Void object at 0x7f058bfc2ea0>
[<parser.TypeS object at 0x7f058bfc3200>]
[<class 'parser.Void'>]
void
void (FunDeclarator: (IdenDeclarator: incr_glob1) [])
FunType: ParamTypes: [] Return Type: void
<parser.Int object at 0x7f058bfc3200>
[<parser.TypeS object at 0x7f058bfc2ea0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: target) [])
FunType: ParamTypes: [] Return Type: int
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: zero)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: one)
double
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: two)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: three)
double
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: four)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: five)
double
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: six)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: seven)
double
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: eight)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: nine)
double
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: ten)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: eleven)
double
<parser.Double object at 0x7f058bfe5610>
[<parser.TypeS object at 0x7f058bfe5640>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: twelve)
double
<parser.Double object at 0x7f058bfe5640>
[<parser.TypeS object at 0x7f058bfe5610>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: thirteen)
double
<parser.Double object at 0x7f058bfe7c50>
[<parser.TypeS object at 0x7f058bfe7c80>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: fourteen)
double
<parser.Int object at 0x7f058bfe5580>
[<parser.TypeS object at 0x7f058bfe5550>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: main) [])
FunType: ParamTypes: [] Return Type: int
0
0
0
AST Program:
FunDecl: NULL check_one_int (actual, expected, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a, b, c, d, e, start, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual, expected, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual, expected, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual, expected, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual, expected, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual, expected, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a, b, c, d, e, f, start, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a, b, c, d, e, f, g, h, i, j, k, l, m, n, start, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a, b, c, d, e, f, g, h, i, j, k, l, start, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob0 = SI: (0)
VarDecl: NULL double glob1 = SI: (1.0)
VarDecl: NULL double glob2 = SI: (2.0)
VarDecl: NULL double glob10 = SI: (10.0)
VarDecl: NULL double glob_zero
VarDecl: NULL double glob_one
VarDecl: NULL double glob_two
VarDecl: NULL double glob_three
VarDecl: NULL double glob_four
VarDecl: NULL double glob_five
VarDecl: NULL double glob_six
VarDecl: NULL double glob_seven
VarDecl: NULL double glob_eight
VarDecl: NULL double glob_nine
VarDecl: NULL double glob_ten
VarDecl: NULL double glob_eleven
VarDecl: NULL double glob_twelve
VarDecl: NULL double glob_thirteen
VarDecl: NULL double glob_fourteen
FunDecl: NULL incr_glob1 () ParamTypes: () ReturnType: void
Statement: Expression: ((glob1) = ((glob1) ADD (1)))
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double zero = SI: ((glob0) MULTIPLY (10.0))
Declaration:
VarDecl: NULL double one = SI: (((glob10) DIVIDE (2.0)) SUBTRACT (4.0))
Declaration:
VarDecl: NULL double two = SI: (((glob10) DIVIDE (2.0)) SUBTRACT (3.0))
Declaration:
VarDecl: NULL double three = SI: (((glob2) MULTIPLY (2.0)) SUBTRACT (1))
Declaration:
VarDecl: NULL double four = SI: (((6.0) SUBTRACT (glob2)) MULTIPLY (glob1))
Declaration:
VarDecl: NULL double five = SI: (((glob10) DIVIDE (2.0)) MULTIPLY (glob1))
Declaration:
VarDecl: NULL double six = SI: (((glob10) ADD (2.0)) DIVIDE (2))
Declaration:
VarDecl: NULL double seven = SI: (((3.0) MULTIPLY (glob2)) ADD (1.0))
Declaration:
VarDecl: NULL double eight = SI: (((glob2) MULTIPLY (glob2)) MULTIPLY (2.0))
Declaration:
VarDecl: NULL double nine = SI: (((glob1) ADD (glob2)) MULTIPLY (3.0))
Declaration:
VarDecl: NULL double ten = SI: (((glob2) ADD (3.0)) MULTIPLY (2.0))
Declaration:
VarDecl: NULL double eleven = SI: (((glob10) ADD (1.0)) MULTIPLY (glob1))
Declaration:
VarDecl: NULL double twelve = SI: (((glob1) ADD (glob2)) MULTIPLY (4.0))
Declaration:
VarDecl: NULL double thirteen = SI: (((glob2) MULTIPLY (3.0)) ADD (7.0))
Statement: Expression: ((glob_zero) = (zero))
Declaration:
VarDecl: NULL double fourteen = SI: ((glob2) MULTIPLY (7.0))
Statement: Expression: ((glob_one) = (one))
Statement: Expression: ((glob_two) = (two))
Statement: Expression: ((glob_three) = (three))
Statement: Expression: ((glob_four) = (four))
Statement: Expression: ((glob_five) = (five))
Statement: Expression: ((glob_six) = (six))
Statement: Expression: ((glob_seven) = (seven))
Statement: Expression: ((glob_eight) = (eight))
Statement: Expression: ((glob_nine) = (nine))
Statement: Expression: ((glob_ten) = (ten))
Statement: Expression: ((glob_eleven) = (eleven))
Statement: Expression: ((glob_twelve) = (twelve))
Statement: Expression: ((glob_thirteen) = (thirteen))
Statement: Expression: ((glob_fourteen) = (fourteen))
Statement: Expression: (incr_glob1())
Statement: Expression: (check_one_double((glob_zero), (0.0), ))
Statement: Expression: (check_one_double((glob_one), (1.0), ))
Statement: Expression: (check_one_double((glob_two), (2.0), ))
Statement: Expression: (check_one_double((glob_three), (3.0), ))
Statement: Expression: (check_one_double((glob_four), (4.0), ))
Statement: Expression: (check_one_double((glob_five), (5.0), ))
Statement: Expression: (check_one_double((glob_six), (6.0), ))
Statement: Expression: (check_one_double((glob_seven), (7.0), ))
Statement: Expression: (check_one_double((glob_eight), (8.0), ))
Statement: Expression: (check_one_double((glob_nine), (9.0), ))
Statement: Expression: (check_one_double((glob_ten), (10.0), ))
Statement: Expression: (check_one_double((glob_eleven), (11.0), ))
Statement: Expression: (check_one_double((glob_twelve), (12.0), ))
Statement: Expression: (check_one_double((glob_thirteen), (13.0), ))
Statement: Expression: (check_one_double((glob_fourteen), (14.0), ))
Statement: Expression: (check_one_double((glob1), (2.0), ))
Statement: return (0)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target())

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob0 = SI: (0)
VarDecl: NULL double glob1 = SI: (1.0)
VarDecl: NULL double glob2 = SI: (2.0)
VarDecl: NULL double glob10 = SI: (10.0)
VarDecl: NULL double glob_zero
VarDecl: NULL double glob_one
VarDecl: NULL double glob_two
VarDecl: NULL double glob_three
VarDecl: NULL double glob_four
VarDecl: NULL double glob_five
VarDecl: NULL double glob_six
VarDecl: NULL double glob_seven
VarDecl: NULL double glob_eight
VarDecl: NULL double glob_nine
VarDecl: NULL double glob_ten
VarDecl: NULL double glob_eleven
VarDecl: NULL double glob_twelve
VarDecl: NULL double glob_thirteen
VarDecl: NULL double glob_fourteen
FunDecl: NULL incr_glob1 () ParamTypes: () ReturnType: void
Statement: Expression: ((glob1) = ((glob1) ADD (1)))
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double zero.84 = SI: ((glob0) MULTIPLY (10.0))
Declaration:
VarDecl: NULL double one.85 = SI: (((glob10) DIVIDE (2.0)) SUBTRACT (4.0))
Declaration:
VarDecl: NULL double two.86 = SI: (((glob10) DIVIDE (2.0)) SUBTRACT (3.0))
Declaration:
VarDecl: NULL double three.87 = SI: (((glob2) MULTIPLY (2.0)) SUBTRACT (1))
Declaration:
VarDecl: NULL double four.88 = SI: (((6.0) SUBTRACT (glob2)) MULTIPLY (glob1))
Declaration:
VarDecl: NULL double five.89 = SI: (((glob10) DIVIDE (2.0)) MULTIPLY (glob1))
Declaration:
VarDecl: NULL double six.90 = SI: (((glob10) ADD (2.0)) DIVIDE (2))
Declaration:
VarDecl: NULL double seven.91 = SI: (((3.0) MULTIPLY (glob2)) ADD (1.0))
Declaration:
VarDecl: NULL double eight.92 = SI: (((glob2) MULTIPLY (glob2)) MULTIPLY (2.0))
Declaration:
VarDecl: NULL double nine.93 = SI: (((glob1) ADD (glob2)) MULTIPLY (3.0))
Declaration:
VarDecl: NULL double ten.94 = SI: (((glob2) ADD (3.0)) MULTIPLY (2.0))
Declaration:
VarDecl: NULL double eleven.95 = SI: (((glob10) ADD (1.0)) MULTIPLY (glob1))
Declaration:
VarDecl: NULL double twelve.96 = SI: (((glob1) ADD (glob2)) MULTIPLY (4.0))
Declaration:
VarDecl: NULL double thirteen.97 = SI: (((glob2) MULTIPLY (3.0)) ADD (7.0))
Statement: Expression: ((glob_zero) = (zero.84))
Declaration:
VarDecl: NULL double fourteen.98 = SI: ((glob2) MULTIPLY (7.0))
Statement: Expression: ((glob_one) = (one.85))
Statement: Expression: ((glob_two) = (two.86))
Statement: Expression: ((glob_three) = (three.87))
Statement: Expression: ((glob_four) = (four.88))
Statement: Expression: ((glob_five) = (five.89))
Statement: Expression: ((glob_six) = (six.90))
Statement: Expression: ((glob_seven) = (seven.91))
Statement: Expression: ((glob_eight) = (eight.92))
Statement: Expression: ((glob_nine) = (nine.93))
Statement: Expression: ((glob_ten) = (ten.94))
Statement: Expression: ((glob_eleven) = (eleven.95))
Statement: Expression: ((glob_twelve) = (twelve.96))
Statement: Expression: ((glob_thirteen) = (thirteen.97))
Statement: Expression: ((glob_fourteen) = (fourteen.98))
Statement: Expression: (incr_glob1())
Statement: Expression: (check_one_double((glob_zero), (0.0), ))
Statement: Expression: (check_one_double((glob_one), (1.0), ))
Statement: Expression: (check_one_double((glob_two), (2.0), ))
Statement: Expression: (check_one_double((glob_three), (3.0), ))
Statement: Expression: (check_one_double((glob_four), (4.0), ))
Statement: Expression: (check_one_double((glob_five), (5.0), ))
Statement: Expression: (check_one_double((glob_six), (6.0), ))
Statement: Expression: (check_one_double((glob_seven), (7.0), ))
Statement: Expression: (check_one_double((glob_eight), (8.0), ))
Statement: Expression: (check_one_double((glob_nine), (9.0), ))
Statement: Expression: (check_one_double((glob_ten), (10.0), ))
Statement: Expression: (check_one_double((glob_eleven), (11.0), ))
Statement: Expression: (check_one_double((glob_twelve), (12.0), ))
Statement: Expression: (check_one_double((glob_thirteen), (13.0), ))
Statement: Expression: (check_one_double((glob_fourteen), (14.0), ))
Statement: Expression: (check_one_double((glob1), (2.0), ))
Statement: return (0)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target())

[(glob_zero RetType: double), (0.0 RetType: double)]
[(glob_one RetType: double), (1.0 RetType: double)]
[(glob_two RetType: double), (2.0 RetType: double)]
[(glob_three RetType: double), (3.0 RetType: double)]
[(glob_four RetType: double), (4.0 RetType: double)]
[(glob_five RetType: double), (5.0 RetType: double)]
[(glob_six RetType: double), (6.0 RetType: double)]
[(glob_seven RetType: double), (7.0 RetType: double)]
[(glob_eight RetType: double), (8.0 RetType: double)]
[(glob_nine RetType: double), (9.0 RetType: double)]
[(glob_ten RetType: double), (10.0 RetType: double)]
[(glob_eleven RetType: double), (11.0 RetType: double)]
[(glob_twelve RetType: double), (12.0 RetType: double)]
[(glob_thirteen RetType: double), (13.0 RetType: double)]
[(glob_fourteen RetType: double), (14.0 RetType: double)]
[(glob1 RetType: double), (2.0 RetType: double)]
0
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob0 = SI: ((double) (0 : int) : double) : double
VarDecl: NULL double glob1 = SI: (1.0 : double) : double
VarDecl: NULL double glob2 = SI: (2.0 : double) : double
VarDecl: NULL double glob10 = SI: (10.0 : double) : double
VarDecl: NULL double glob_zero
VarDecl: NULL double glob_one
VarDecl: NULL double glob_two
VarDecl: NULL double glob_three
VarDecl: NULL double glob_four
VarDecl: NULL double glob_five
VarDecl: NULL double glob_six
VarDecl: NULL double glob_seven
VarDecl: NULL double glob_eight
VarDecl: NULL double glob_nine
VarDecl: NULL double glob_ten
VarDecl: NULL double glob_eleven
VarDecl: NULL double glob_twelve
VarDecl: NULL double glob_thirteen
VarDecl: NULL double glob_fourteen
FunDecl: NULL incr_glob1 () ParamTypes: () ReturnType: void
Statement: Expression: ((glob1 : double) = ((glob1 : double) ADD ((double) (1 : int) : double) : double) : double)
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double zero.84 = SI: ((glob0 : double) MULTIPLY (10.0 : double) : double) : double
Declaration:
VarDecl: NULL double one.85 = SI: (((glob10 : double) DIVIDE (2.0 : double) : double) SUBTRACT (4.0 : double) : double) : double
Declaration:
VarDecl: NULL double two.86 = SI: (((glob10 : double) DIVIDE (2.0 : double) : double) SUBTRACT (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double three.87 = SI: (((glob2 : double) MULTIPLY (2.0 : double) : double) SUBTRACT ((double) (1 : int) : double) : double) : double
Declaration:
VarDecl: NULL double four.88 = SI: (((6.0 : double) SUBTRACT (glob2 : double) : double) MULTIPLY (glob1 : double) : double) : double
Declaration:
VarDecl: NULL double five.89 = SI: (((glob10 : double) DIVIDE (2.0 : double) : double) MULTIPLY (glob1 : double) : double) : double
Declaration:
VarDecl: NULL double six.90 = SI: (((glob10 : double) ADD (2.0 : double) : double) DIVIDE ((double) (2 : int) : double) : double) : double
Declaration:
VarDecl: NULL double seven.91 = SI: (((3.0 : double) MULTIPLY (glob2 : double) : double) ADD (1.0 : double) : double) : double
Declaration:
VarDecl: NULL double eight.92 = SI: (((glob2 : double) MULTIPLY (glob2 : double) : double) MULTIPLY (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double nine.93 = SI: (((glob1 : double) ADD (glob2 : double) : double) MULTIPLY (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double ten.94 = SI: (((glob2 : double) ADD (3.0 : double) : double) MULTIPLY (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double eleven.95 = SI: (((glob10 : double) ADD (1.0 : double) : double) MULTIPLY (glob1 : double) : double) : double
Declaration:
VarDecl: NULL double twelve.96 = SI: (((glob1 : double) ADD (glob2 : double) : double) MULTIPLY (4.0 : double) : double) : double
Declaration:
VarDecl: NULL double thirteen.97 = SI: (((glob2 : double) MULTIPLY (3.0 : double) : double) ADD (7.0 : double) : double) : double
Statement: Expression: ((glob_zero : double) = (zero.84 : double) : double)
Declaration:
VarDecl: NULL double fourteen.98 = SI: ((glob2 : double) MULTIPLY (7.0 : double) : double) : double
Statement: Expression: ((glob_one : double) = (one.85 : double) : double)
Statement: Expression: ((glob_two : double) = (two.86 : double) : double)
Statement: Expression: ((glob_three : double) = (three.87 : double) : double)
Statement: Expression: ((glob_four : double) = (four.88 : double) : double)
Statement: Expression: ((glob_five : double) = (five.89 : double) : double)
Statement: Expression: ((glob_six : double) = (six.90 : double) : double)
Statement: Expression: ((glob_seven : double) = (seven.91 : double) : double)
Statement: Expression: ((glob_eight : double) = (eight.92 : double) : double)
Statement: Expression: ((glob_nine : double) = (nine.93 : double) : double)
Statement: Expression: ((glob_ten : double) = (ten.94 : double) : double)
Statement: Expression: ((glob_eleven : double) = (eleven.95 : double) : double)
Statement: Expression: ((glob_twelve : double) = (twelve.96 : double) : double)
Statement: Expression: ((glob_thirteen : double) = (thirteen.97 : double) : double)
Statement: Expression: ((glob_fourteen : double) = (fourteen.98 : double) : double)
Statement: Expression: (incr_glob1() : void)
Statement: Expression: (check_one_double((glob_zero : double), (0.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_one : double), (1.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_two : double), (2.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_three : double), (3.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_four : double), (4.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_five : double), (5.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_six : double), (6.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_seven : double), (7.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_eight : double), (8.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_nine : double), (9.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_ten : double), (10.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_eleven : double), (11.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_twelve : double), (12.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_thirteen : double), (13.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_fourteen : double), (14.0 : double), ) : int)
Statement: Expression: (check_one_double((glob1 : double), (2.0 : double), ) : int)
Statement: return (0 : int)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target() : int)

Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'glob0': glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True, 'glob1': glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True, 'glob10': glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True, 'glob_zero': glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True, 'glob_one': glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True, 'glob_two': glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True, 'glob_three': glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True, 'glob_four': glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True, 'glob_five': glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True, 'glob_six': glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True, 'glob_seven': glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True, 'glob_eight': glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True, 'glob_nine': glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True, 'glob_ten': glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True, 'glob_eleven': glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True, 'glob_twelve': glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True, 'glob_thirteen': glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True, 'glob_fourteen': glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True, 'incr_glob1': incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'zero.84': zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>, 'one.85': one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>, 'two.86': two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>, 'three.87': three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>, 'four.88': four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>, 'five.89': five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>, 'six.90': six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>, 'seven.91': seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>, 'eight.92': eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>, 'nine.93': nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>, 'ten.94': ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>, 'eleven.95': eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>, 'twelve.96': twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>, 'thirteen.97': thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>, 'fourteen.98': fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True}
0
0
0
AST Program:
FunDecl: NULL check_one_int (actual.0, expected.1, ) ParamTypes: (int, int, ) ReturnType: int

FunDecl: NULL check_5_ints (a.2, b.3, c.4, d.5, e.6, start.7, ) ParamTypes: (int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_12_ints (a.8, b.9, c.10, d.11, e.12, f.13, g.14, h.15, i.16, j.17, k.18, l.19, start.20, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, int, int, int, ) ReturnType: int

FunDecl: NULL check_one_uchar (actual.21, expected.22, ) ParamTypes: (unsigned char, unsigned char, ) ReturnType: int

FunDecl: NULL check_one_uint (actual.23, expected.24, ) ParamTypes: (uint, uint, ) ReturnType: int

FunDecl: NULL check_one_long (actual.25, expected.26, ) ParamTypes: (long, long, ) ReturnType: int

FunDecl: NULL check_one_ulong (actual.27, expected.28, ) ParamTypes: (ulong, ulong, ) ReturnType: int

FunDecl: NULL check_one_double (actual.29, expected.30, ) ParamTypes: (double, double, ) ReturnType: int

FunDecl: NULL check_12_longs (a.31, b.32, c.33, d.34, e.35, f.36, g.37, h.38, i.39, j.40, k.41, l.42, start.43, ) ParamTypes: (long, long, long, long, long, long, long, long, long, long, long, long, long, ) ReturnType: int

FunDecl: NULL check_six_chars (a.44, b.45, c.46, d.47, e.48, f.49, start.50, ) ParamTypes: (char, char, char, char, char, char, int, ) ReturnType: int

FunDecl: NULL check_14_doubles (a.51, b.52, c.53, d.54, e.55, f.56, g.57, h.58, i.59, j.60, k.61, l.62, m.63, n.64, start.65, ) ParamTypes: (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, ) ReturnType: int

FunDecl: NULL check_12_vals (a.66, b.67, c.68, d.69, e.70, f.71, g.72, h.73, i.74, j.75, k.76, l.77, start.78, ) ParamTypes: (int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int, ) ReturnType: int

FunDecl: NULL id (x.79, ) ParamTypes: (int, ) ReturnType: int

FunDecl: NULL dbl_id (x.80, ) ParamTypes: (double, ) ReturnType: double

FunDecl: NULL long_id (l.81, ) ParamTypes: (long, ) ReturnType: long

FunDecl: NULL unsigned_id (u.82, ) ParamTypes: (uint, ) ReturnType: uint

FunDecl: NULL uchar_id (uc.83, ) ParamTypes: (unsigned char, ) ReturnType: unsigned char

VarDecl: NULL double glob0 = SI: ((double) (0 : int) : double) : double
VarDecl: NULL double glob1 = SI: (1.0 : double) : double
VarDecl: NULL double glob2 = SI: (2.0 : double) : double
VarDecl: NULL double glob10 = SI: (10.0 : double) : double
VarDecl: NULL double glob_zero
VarDecl: NULL double glob_one
VarDecl: NULL double glob_two
VarDecl: NULL double glob_three
VarDecl: NULL double glob_four
VarDecl: NULL double glob_five
VarDecl: NULL double glob_six
VarDecl: NULL double glob_seven
VarDecl: NULL double glob_eight
VarDecl: NULL double glob_nine
VarDecl: NULL double glob_ten
VarDecl: NULL double glob_eleven
VarDecl: NULL double glob_twelve
VarDecl: NULL double glob_thirteen
VarDecl: NULL double glob_fourteen
FunDecl: NULL incr_glob1 () ParamTypes: () ReturnType: void
Statement: Expression: ((glob1 : double) = ((glob1 : double) ADD ((double) (1 : int) : double) : double) : double)
FunDecl: NULL target () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL double zero.84 = SI: ((glob0 : double) MULTIPLY (10.0 : double) : double) : double
Declaration:
VarDecl: NULL double one.85 = SI: (((glob10 : double) DIVIDE (2.0 : double) : double) SUBTRACT (4.0 : double) : double) : double
Declaration:
VarDecl: NULL double two.86 = SI: (((glob10 : double) DIVIDE (2.0 : double) : double) SUBTRACT (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double three.87 = SI: (((glob2 : double) MULTIPLY (2.0 : double) : double) SUBTRACT ((double) (1 : int) : double) : double) : double
Declaration:
VarDecl: NULL double four.88 = SI: (((6.0 : double) SUBTRACT (glob2 : double) : double) MULTIPLY (glob1 : double) : double) : double
Declaration:
VarDecl: NULL double five.89 = SI: (((glob10 : double) DIVIDE (2.0 : double) : double) MULTIPLY (glob1 : double) : double) : double
Declaration:
VarDecl: NULL double six.90 = SI: (((glob10 : double) ADD (2.0 : double) : double) DIVIDE ((double) (2 : int) : double) : double) : double
Declaration:
VarDecl: NULL double seven.91 = SI: (((3.0 : double) MULTIPLY (glob2 : double) : double) ADD (1.0 : double) : double) : double
Declaration:
VarDecl: NULL double eight.92 = SI: (((glob2 : double) MULTIPLY (glob2 : double) : double) MULTIPLY (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double nine.93 = SI: (((glob1 : double) ADD (glob2 : double) : double) MULTIPLY (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double ten.94 = SI: (((glob2 : double) ADD (3.0 : double) : double) MULTIPLY (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double eleven.95 = SI: (((glob10 : double) ADD (1.0 : double) : double) MULTIPLY (glob1 : double) : double) : double
Declaration:
VarDecl: NULL double twelve.96 = SI: (((glob1 : double) ADD (glob2 : double) : double) MULTIPLY (4.0 : double) : double) : double
Declaration:
VarDecl: NULL double thirteen.97 = SI: (((glob2 : double) MULTIPLY (3.0 : double) : double) ADD (7.0 : double) : double) : double
Statement: Expression: ((glob_zero : double) = (zero.84 : double) : double)
Declaration:
VarDecl: NULL double fourteen.98 = SI: ((glob2 : double) MULTIPLY (7.0 : double) : double) : double
Statement: Expression: ((glob_one : double) = (one.85 : double) : double)
Statement: Expression: ((glob_two : double) = (two.86 : double) : double)
Statement: Expression: ((glob_three : double) = (three.87 : double) : double)
Statement: Expression: ((glob_four : double) = (four.88 : double) : double)
Statement: Expression: ((glob_five : double) = (five.89 : double) : double)
Statement: Expression: ((glob_six : double) = (six.90 : double) : double)
Statement: Expression: ((glob_seven : double) = (seven.91 : double) : double)
Statement: Expression: ((glob_eight : double) = (eight.92 : double) : double)
Statement: Expression: ((glob_nine : double) = (nine.93 : double) : double)
Statement: Expression: ((glob_ten : double) = (ten.94 : double) : double)
Statement: Expression: ((glob_eleven : double) = (eleven.95 : double) : double)
Statement: Expression: ((glob_twelve : double) = (twelve.96 : double) : double)
Statement: Expression: ((glob_thirteen : double) = (thirteen.97 : double) : double)
Statement: Expression: ((glob_fourteen : double) = (fourteen.98 : double) : double)
Statement: Expression: (incr_glob1() : void)
Statement: Expression: (check_one_double((glob_zero : double), (0.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_one : double), (1.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_two : double), (2.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_three : double), (3.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_four : double), (4.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_five : double), (5.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_six : double), (6.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_seven : double), (7.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_eight : double), (8.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_nine : double), (9.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_ten : double), (10.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_eleven : double), (11.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_twelve : double), (12.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_thirteen : double), (13.0 : double), ) : int)
Statement: Expression: (check_one_double((glob_fourteen : double), (14.0 : double), ) : int)
Statement: Expression: (check_one_double((glob1 : double), (2.0 : double), ) : int)
Statement: return (0 : int)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: return (target() : int)

check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True
glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True
glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True
glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True
glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True
glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True
glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True
glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True
glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True
glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True
glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True
glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True
glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True
glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True
glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True
glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True
glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True
glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True
glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True
incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True
target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>
one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>
two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>
three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>
four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>
five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>
six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>
seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>
eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>
nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>
ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>
eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>
twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>
thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>
fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>
main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>
tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>
tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>
tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>
tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>
tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>
tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>
tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>
tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>
tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>
tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>
tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>
tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>
tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>
tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>
tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>
tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>
tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>
tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>
tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>
tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>
tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>
tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>
tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>
tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>
tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>
tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>
tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>
tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>
tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>
tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>
tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>
tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>
tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>
tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>
tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>
tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>
tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>
tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>
tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>
tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>
tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>
tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>
tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>
tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>
tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>
tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>
tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>
tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>
tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>
tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>
tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>
tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>
tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>
tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>
tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>
tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>
tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>
tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>
tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>
tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>
tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>
tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>
tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>
tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>
tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>
tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>
tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>
tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>
tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>
tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>
tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>
tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>
tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>
tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>
tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>
tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>
tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>
tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>
tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>
tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>
TAC Program:[Function: incr_glob1 ([]) instructions:[IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0], Function: target ([]) instructions:[tmp.101 = glob0 * 10.0, CopyToOffset(zero.84 + 0) = tmp.101 , tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, CopyToOffset(one.85 + 0) = tmp.103 , tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, CopyToOffset(two.86 + 0) = tmp.105 , tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, CopyToOffset(three.87 + 0) = tmp.108 , tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, CopyToOffset(four.88 + 0) = tmp.110 , tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, CopyToOffset(five.89 + 0) = tmp.112 , tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, CopyToOffset(six.90 + 0) = tmp.115 , tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, CopyToOffset(seven.91 + 0) = tmp.117 , tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, CopyToOffset(eight.92 + 0) = tmp.119 , tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, CopyToOffset(nine.93 + 0) = tmp.121 , tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, CopyToOffset(ten.94 + 0) = tmp.123 , tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, CopyToOffset(eleven.95 + 0) = tmp.125 , tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, CopyToOffset(twelve.96 + 0) = tmp.127 , tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, CopyToOffset(thirteen.97 + 0) = tmp.129 , Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, CopyToOffset(fourteen.98 + 0) = tmp.130 , Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0, Return 0], Function: main ([]) instructions:[tmp.179 = target([]), Return tmp.179, Return 0], Global: True glob0 = [c_double(0.0)], Global: True glob1 = [c_double(1.0)], Global: True glob2 = [c_double(2.0)], Global: True glob10 = [c_double(10.0)], Global: True glob_zero = [c_double(0.0)], Global: True glob_one = [c_double(0.0)], Global: True glob_two = [c_double(0.0)], Global: True glob_three = [c_double(0.0)], Global: True glob_four = [c_double(0.0)], Global: True glob_five = [c_double(0.0)], Global: True glob_six = [c_double(0.0)], Global: True glob_seven = [c_double(0.0)], Global: True glob_eight = [c_double(0.0)], Global: True glob_nine = [c_double(0.0)], Global: True glob_ten = [c_double(0.0)], Global: True glob_eleven = [c_double(0.0)], Global: True glob_twelve = [c_double(0.0)], Global: True glob_thirteen = [c_double(0.0)], Global: True glob_fourteen = [c_double(0.0)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'glob0': glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True, 'glob1': glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True, 'glob10': glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True, 'glob_zero': glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True, 'glob_one': glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True, 'glob_two': glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True, 'glob_three': glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True, 'glob_four': glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True, 'glob_five': glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True, 'glob_six': glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True, 'glob_seven': glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True, 'glob_eight': glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True, 'glob_nine': glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True, 'glob_ten': glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True, 'glob_eleven': glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True, 'glob_twelve': glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True, 'glob_thirteen': glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True, 'glob_fourteen': glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True, 'incr_glob1': incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'zero.84': zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>, 'one.85': one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>, 'two.86': two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>, 'three.87': three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>, 'four.88': four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>, 'five.89': five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>, 'six.90': six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>, 'seven.91': seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>, 'eight.92': eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>, 'nine.93': nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>, 'ten.94': ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>, 'eleven.95': eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>, 'twelve.96': twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>, 'thirteen.97': thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>, 'fourteen.98': fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'tmp.99': tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>, 'tmp.100': tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>, 'tmp.101': tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>, 'tmp.102': tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>, 'tmp.103': tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>, 'tmp.104': tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>, 'tmp.105': tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>, 'tmp.106': tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>, 'tmp.107': tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>, 'tmp.108': tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>, 'tmp.109': tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>, 'tmp.110': tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>, 'tmp.111': tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>, 'tmp.112': tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>, 'tmp.113': tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>, 'tmp.114': tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>, 'tmp.115': tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>, 'tmp.116': tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>, 'tmp.117': tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>, 'tmp.118': tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>, 'tmp.119': tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>, 'tmp.120': tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>, 'tmp.121': tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>, 'tmp.122': tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>, 'tmp.123': tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>, 'tmp.124': tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>, 'tmp.125': tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>, 'tmp.126': tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>, 'tmp.127': tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>, 'tmp.128': tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>, 'tmp.129': tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>, 'tmp.130': tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>, 'tmp.131': tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>, 'tmp.132': tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>, 'tmp.133': tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>, 'tmp.134': tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>, 'tmp.135': tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>, 'tmp.136': tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>, 'tmp.137': tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>, 'tmp.138': tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>, 'tmp.139': tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>, 'tmp.140': tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>, 'tmp.141': tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>, 'tmp.142': tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>, 'tmp.143': tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>, 'tmp.144': tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>, 'tmp.145': tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>, 'tmp.146': tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>, 'tmp.147': tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>, 'tmp.148': tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>, 'tmp.149': tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>, 'tmp.150': tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>, 'tmp.151': tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>, 'tmp.152': tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>, 'tmp.153': tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>, 'tmp.154': tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>, 'tmp.155': tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>, 'tmp.156': tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>, 'tmp.157': tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>, 'tmp.158': tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>, 'tmp.159': tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>, 'tmp.160': tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>, 'tmp.161': tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>, 'tmp.162': tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>, 'tmp.163': tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>, 'tmp.164': tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>, 'tmp.165': tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>, 'tmp.166': tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>, 'tmp.167': tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>, 'tmp.168': tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>, 'tmp.169': tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>, 'tmp.170': tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>, 'tmp.171': tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>, 'tmp.172': tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>, 'tmp.173': tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>, 'tmp.174': tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>, 'tmp.175': tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>, 'tmp.176': tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>, 'tmp.177': tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>, 'tmp.178': tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>, 'tmp.179': tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>}
OPTIMIZING FUNCTION Function: incr_glob1 ([]) instructions:[IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob1}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0]
NEW LIST [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.99 = 1


ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {IntToDouble tmp.99 = 1: set(), tmp.100 = glob1 + tmp.99: set(), Copy glob1 = tmp.100: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {IntToDouble tmp.99 = 1: set(), tmp.100 = glob1 + tmp.99: set(), Copy glob1 = tmp.100: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {IntToDouble tmp.99 = 1: set(), tmp.100 = glob1 + tmp.99: set(), Copy glob1 = tmp.100: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {IntToDouble tmp.99 = 1: set(), tmp.100 = glob1 + tmp.99: set(), Copy glob1 = tmp.100: set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
IntToDouble tmp.99 = 1 set()
tmp.100 = glob1 + tmp.99 set()
Copy glob1 = tmp.100 set()
Return 0 {Copy glob1 = tmp.100}
OLD ANNOT: {Copy glob1 = tmp.100}
NEW ANNOT: {Copy glob1 = tmp.100}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {IntToDouble tmp.99 = 1: set(), tmp.100 = glob1 + tmp.99: set(), Copy glob1 = tmp.100: set(), Return 0: {Copy glob1 = tmp.100}} ReachingCopies: {Copy glob1 = tmp.100}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob0 glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True
glob1 glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True
glob10 glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True
glob_zero glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True
glob_one glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True
glob_two glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True
glob_three glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True
glob_four glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True
glob_five glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True
glob_six glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True
glob_seven glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True
glob_eight glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True
glob_nine glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True
glob_ten glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True
glob_eleven glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True
glob_twelve glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True
glob_thirteen glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True
glob_fourteen glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True
incr_glob1 incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
zero.84 zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>
one.85 one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>
two.86 two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>
three.87 three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>
four.88 four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>
five.89 five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>
six.90 six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>
seven.91 seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>
eight.92 eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>
nine.93 nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>
ten.94 ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>
eleven.95 eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>
twelve.96 twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>
thirteen.97 thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>
fourteen.98 fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.99 tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>
tmp.100 tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>
tmp.119 tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>
tmp.133 tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>
tmp.137 tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>
tmp.138 tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>
tmp.140 tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>
tmp.141 tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>
tmp.142 tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>
tmp.143 tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>
tmp.144 tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>
tmp.145 tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>
tmp.146 tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>
tmp.147 tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>
tmp.149 tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>
tmp.150 tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>
tmp.151 tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>
tmp.152 tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>
tmp.153 tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>
tmp.154 tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>
tmp.155 tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>
tmp.156 tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>
tmp.157 tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>
tmp.158 tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>
tmp.159 tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>
tmp.160 tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>
tmp.161 tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>
tmp.162 tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>
tmp.164 tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>
tmp.165 tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>
tmp.166 tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>
tmp.167 tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>
tmp.168 tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>
tmp.169 tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>
tmp.170 tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>
tmp.171 tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>
tmp.173 tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>
tmp.174 tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>
tmp.176 tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>
tmp.177 tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>
tmp.178 tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>
tmp.179 tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>
--------------LIVE for block 0-------------------
Return 0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy glob1 = tmp.100 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.100 = glob1 + tmp.99 {glob_eleven, glob_zero, glob_ten, tmp.100, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob_three, glob_two, glob_four, glob_nine}
IntToDouble tmp.99 = 1 {tmp.99, glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
OLD ANNOT: set()
NEW ANNOT: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {IntToDouble tmp.99 = 1: {tmp.99, glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.100 = glob1 + tmp.99: {glob_eleven, glob_zero, glob_ten, tmp.100, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob_three, glob_two, glob_four, glob_nine}, Copy glob1 = tmp.100: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Return 0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}} ReachingCopies: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: target ([]) instructions:[tmp.101 = glob0 * 10.0, CopyToOffset(zero.84 + 0) = tmp.101 , tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, CopyToOffset(one.85 + 0) = tmp.103 , tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, CopyToOffset(two.86 + 0) = tmp.105 , tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, CopyToOffset(three.87 + 0) = tmp.108 , tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, CopyToOffset(four.88 + 0) = tmp.110 , tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, CopyToOffset(five.89 + 0) = tmp.112 , tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, CopyToOffset(six.90 + 0) = tmp.115 , tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, CopyToOffset(seven.91 + 0) = tmp.117 , tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, CopyToOffset(eight.92 + 0) = tmp.119 , tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, CopyToOffset(nine.93 + 0) = tmp.121 , tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, CopyToOffset(ten.94 + 0) = tmp.123 , tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, CopyToOffset(eleven.95 + 0) = tmp.125 , tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, CopyToOffset(twelve.96 + 0) = tmp.127 , tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, CopyToOffset(thirteen.97 + 0) = tmp.129 , Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, CopyToOffset(fourteen.98 + 0) = tmp.130 , Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob_ten, glob_seven, glob_six, glob2, glob_thirteen, glob_one, glob0, glob_three, glob_two, glob_eleven, glob_zero, glob_five, glob_twelve, glob_fourteen, glob_eight, glob10, glob1, glob_four, glob_nine}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.101 = glob0 * 10.0, CopyToOffset(zero.84 + 0) = tmp.101 , tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, CopyToOffset(one.85 + 0) = tmp.103 , tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, CopyToOffset(two.86 + 0) = tmp.105 , tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, CopyToOffset(three.87 + 0) = tmp.108 , tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, CopyToOffset(four.88 + 0) = tmp.110 , tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, CopyToOffset(five.89 + 0) = tmp.112 , tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, CopyToOffset(six.90 + 0) = tmp.115 , tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, CopyToOffset(seven.91 + 0) = tmp.117 , tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, CopyToOffset(eight.92 + 0) = tmp.119 , tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, CopyToOffset(nine.93 + 0) = tmp.121 , tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, CopyToOffset(ten.94 + 0) = tmp.123 , tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, CopyToOffset(eleven.95 + 0) = tmp.125 , tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, CopyToOffset(twelve.96 + 0) = tmp.127 , tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, CopyToOffset(thirteen.97 + 0) = tmp.129 , Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, CopyToOffset(fourteen.98 + 0) = tmp.130 , Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0, Return 0]
NEW LIST [tmp.101 = glob0 * 10.0, Copy zero.84 = tmp.101, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, Copy one.85 = tmp.103, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, Copy two.86 = tmp.105, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, Copy three.87 = tmp.108, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, Copy four.88 = tmp.110, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, Copy five.89 = tmp.112, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, Copy six.90 = tmp.115, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, Copy seven.91 = tmp.117, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, Copy eight.92 = tmp.119, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, Copy nine.93 = tmp.121, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, Copy ten.94 = tmp.123, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, Copy eleven.95 = tmp.125, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, Copy twelve.96 = tmp.127, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy thirteen.97 = tmp.129, Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, Copy fourteen.98 = tmp.130, Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0, Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.101 = glob0 * 10.0
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, Copy zero.84 = tmp.101, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, Copy one.85 = tmp.103, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, Copy two.86 = tmp.105, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, Copy three.87 = tmp.108, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, Copy four.88 = tmp.110, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, Copy five.89 = tmp.112, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, Copy six.90 = tmp.115, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, Copy seven.91 = tmp.117, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, Copy eight.92 = tmp.119, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, Copy nine.93 = tmp.121, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, Copy ten.94 = tmp.123, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, Copy eleven.95 = tmp.125, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, Copy twelve.96 = tmp.127, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy thirteen.97 = tmp.129, Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, Copy fourteen.98 = tmp.130, Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), Copy zero.84 = tmp.101: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), Copy one.85 = tmp.103: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), Copy two.86 = tmp.105: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), Copy three.87 = tmp.108: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), Copy four.88 = tmp.110: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), Copy five.89 = tmp.112: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), Copy six.90 = tmp.115: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), Copy seven.91 = tmp.117: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), Copy eight.92 = tmp.119: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), Copy nine.93 = tmp.121: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), Copy ten.94 = tmp.123: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), Copy eleven.95 = tmp.125: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), Copy twelve.96 = tmp.127: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy thirteen.97 = tmp.129: set(), Copy glob_zero = zero.84: set(), tmp.130 = glob2 * 7.0: set(), Copy fourteen.98 = tmp.130: set(), Copy glob_one = one.85: set(), Copy glob_two = two.86: set(), Copy glob_three = three.87: set(), Copy glob_four = four.88: set(), Copy glob_five = five.89: set(), Copy glob_six = six.90: set(), Copy glob_seven = seven.91: set(), Copy glob_eight = eight.92: set(), Copy glob_nine = nine.93: set(), Copy glob_ten = ten.94: set(), Copy glob_eleven = eleven.95: set(), Copy glob_twelve = twelve.96: set(), Copy glob_thirteen = thirteen.97: set(), Copy glob_fourteen = fourteen.98: set(), None = incr_glob1([]): set(), Copy tmp.131 = glob_zero: set(), Copy tmp.132 = 0.0: set(), tmp.133 = check_one_double([tmp.131, tmp.132]): set(), Copy tmp.134 = glob_one: set(), Copy tmp.135 = 1.0: set(), tmp.136 = check_one_double([tmp.134, tmp.135]): set(), Copy tmp.137 = glob_two: set(), Copy tmp.138 = 2.0: set(), tmp.139 = check_one_double([tmp.137, tmp.138]): set(), Copy tmp.140 = glob_three: set(), Copy tmp.141 = 3.0: set(), tmp.142 = check_one_double([tmp.140, tmp.141]): set(), Copy tmp.143 = glob_four: set(), Copy tmp.144 = 4.0: set(), tmp.145 = check_one_double([tmp.143, tmp.144]): set(), Copy tmp.146 = glob_five: set(), Copy tmp.147 = 5.0: set(), tmp.148 = check_one_double([tmp.146, tmp.147]): set(), Copy tmp.149 = glob_six: set(), Copy tmp.150 = 6.0: set(), tmp.151 = check_one_double([tmp.149, tmp.150]): set(), Copy tmp.152 = glob_seven: set(), Copy tmp.153 = 7.0: set(), tmp.154 = check_one_double([tmp.152, tmp.153]): set(), Copy tmp.155 = glob_eight: set(), Copy tmp.156 = 8.0: set(), tmp.157 = check_one_double([tmp.155, tmp.156]): set(), Copy tmp.158 = glob_nine: set(), Copy tmp.159 = 9.0: set(), tmp.160 = check_one_double([tmp.158, tmp.159]): set(), Copy tmp.161 = glob_ten: set(), Copy tmp.162 = 10.0: set(), tmp.163 = check_one_double([tmp.161, tmp.162]): set(), Copy tmp.164 = glob_eleven: set(), Copy tmp.165 = 11.0: set(), tmp.166 = check_one_double([tmp.164, tmp.165]): set(), Copy tmp.167 = glob_twelve: set(), Copy tmp.168 = 12.0: set(), tmp.169 = check_one_double([tmp.167, tmp.168]): set(), Copy tmp.170 = glob_thirteen: set(), Copy tmp.171 = 13.0: set(), tmp.172 = check_one_double([tmp.170, tmp.171]): set(), Copy tmp.173 = glob_fourteen: set(), Copy tmp.174 = 14.0: set(), tmp.175 = check_one_double([tmp.173, tmp.174]): set(), Copy tmp.176 = glob1: set(), Copy tmp.177 = 2.0: set(), tmp.178 = check_one_double([tmp.176, tmp.177]): set(), Return 0: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, Copy zero.84 = tmp.101, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, Copy one.85 = tmp.103, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, Copy two.86 = tmp.105, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, Copy three.87 = tmp.108, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, Copy four.88 = tmp.110, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, Copy five.89 = tmp.112, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, Copy six.90 = tmp.115, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, Copy seven.91 = tmp.117, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, Copy eight.92 = tmp.119, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, Copy nine.93 = tmp.121, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, Copy ten.94 = tmp.123, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, Copy eleven.95 = tmp.125, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, Copy twelve.96 = tmp.127, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy thirteen.97 = tmp.129, Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, Copy fourteen.98 = tmp.130, Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), Copy zero.84 = tmp.101: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), Copy one.85 = tmp.103: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), Copy two.86 = tmp.105: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), Copy three.87 = tmp.108: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), Copy four.88 = tmp.110: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), Copy five.89 = tmp.112: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), Copy six.90 = tmp.115: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), Copy seven.91 = tmp.117: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), Copy eight.92 = tmp.119: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), Copy nine.93 = tmp.121: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), Copy ten.94 = tmp.123: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), Copy eleven.95 = tmp.125: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), Copy twelve.96 = tmp.127: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy thirteen.97 = tmp.129: set(), Copy glob_zero = zero.84: set(), tmp.130 = glob2 * 7.0: set(), Copy fourteen.98 = tmp.130: set(), Copy glob_one = one.85: set(), Copy glob_two = two.86: set(), Copy glob_three = three.87: set(), Copy glob_four = four.88: set(), Copy glob_five = five.89: set(), Copy glob_six = six.90: set(), Copy glob_seven = seven.91: set(), Copy glob_eight = eight.92: set(), Copy glob_nine = nine.93: set(), Copy glob_ten = ten.94: set(), Copy glob_eleven = eleven.95: set(), Copy glob_twelve = twelve.96: set(), Copy glob_thirteen = thirteen.97: set(), Copy glob_fourteen = fourteen.98: set(), None = incr_glob1([]): set(), Copy tmp.131 = glob_zero: set(), Copy tmp.132 = 0.0: set(), tmp.133 = check_one_double([tmp.131, tmp.132]): set(), Copy tmp.134 = glob_one: set(), Copy tmp.135 = 1.0: set(), tmp.136 = check_one_double([tmp.134, tmp.135]): set(), Copy tmp.137 = glob_two: set(), Copy tmp.138 = 2.0: set(), tmp.139 = check_one_double([tmp.137, tmp.138]): set(), Copy tmp.140 = glob_three: set(), Copy tmp.141 = 3.0: set(), tmp.142 = check_one_double([tmp.140, tmp.141]): set(), Copy tmp.143 = glob_four: set(), Copy tmp.144 = 4.0: set(), tmp.145 = check_one_double([tmp.143, tmp.144]): set(), Copy tmp.146 = glob_five: set(), Copy tmp.147 = 5.0: set(), tmp.148 = check_one_double([tmp.146, tmp.147]): set(), Copy tmp.149 = glob_six: set(), Copy tmp.150 = 6.0: set(), tmp.151 = check_one_double([tmp.149, tmp.150]): set(), Copy tmp.152 = glob_seven: set(), Copy tmp.153 = 7.0: set(), tmp.154 = check_one_double([tmp.152, tmp.153]): set(), Copy tmp.155 = glob_eight: set(), Copy tmp.156 = 8.0: set(), tmp.157 = check_one_double([tmp.155, tmp.156]): set(), Copy tmp.158 = glob_nine: set(), Copy tmp.159 = 9.0: set(), tmp.160 = check_one_double([tmp.158, tmp.159]): set(), Copy tmp.161 = glob_ten: set(), Copy tmp.162 = 10.0: set(), tmp.163 = check_one_double([tmp.161, tmp.162]): set(), Copy tmp.164 = glob_eleven: set(), Copy tmp.165 = 11.0: set(), tmp.166 = check_one_double([tmp.164, tmp.165]): set(), Copy tmp.167 = glob_twelve: set(), Copy tmp.168 = 12.0: set(), tmp.169 = check_one_double([tmp.167, tmp.168]): set(), Copy tmp.170 = glob_thirteen: set(), Copy tmp.171 = 13.0: set(), tmp.172 = check_one_double([tmp.170, tmp.171]): set(), Copy tmp.173 = glob_fourteen: set(), Copy tmp.174 = 14.0: set(), tmp.175 = check_one_double([tmp.173, tmp.174]): set(), Copy tmp.176 = glob1: set(), Copy tmp.177 = 2.0: set(), tmp.178 = check_one_double([tmp.176, tmp.177]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, Copy zero.84 = tmp.101, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, Copy one.85 = tmp.103, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, Copy two.86 = tmp.105, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, Copy three.87 = tmp.108, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, Copy four.88 = tmp.110, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, Copy five.89 = tmp.112, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, Copy six.90 = tmp.115, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, Copy seven.91 = tmp.117, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, Copy eight.92 = tmp.119, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, Copy nine.93 = tmp.121, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, Copy ten.94 = tmp.123, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, Copy eleven.95 = tmp.125, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, Copy twelve.96 = tmp.127, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy thirteen.97 = tmp.129, Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, Copy fourteen.98 = tmp.130, Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), Copy zero.84 = tmp.101: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), Copy one.85 = tmp.103: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), Copy two.86 = tmp.105: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), Copy three.87 = tmp.108: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), Copy four.88 = tmp.110: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), Copy five.89 = tmp.112: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), Copy six.90 = tmp.115: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), Copy seven.91 = tmp.117: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), Copy eight.92 = tmp.119: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), Copy nine.93 = tmp.121: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), Copy ten.94 = tmp.123: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), Copy eleven.95 = tmp.125: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), Copy twelve.96 = tmp.127: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy thirteen.97 = tmp.129: set(), Copy glob_zero = zero.84: set(), tmp.130 = glob2 * 7.0: set(), Copy fourteen.98 = tmp.130: set(), Copy glob_one = one.85: set(), Copy glob_two = two.86: set(), Copy glob_three = three.87: set(), Copy glob_four = four.88: set(), Copy glob_five = five.89: set(), Copy glob_six = six.90: set(), Copy glob_seven = seven.91: set(), Copy glob_eight = eight.92: set(), Copy glob_nine = nine.93: set(), Copy glob_ten = ten.94: set(), Copy glob_eleven = eleven.95: set(), Copy glob_twelve = twelve.96: set(), Copy glob_thirteen = thirteen.97: set(), Copy glob_fourteen = fourteen.98: set(), None = incr_glob1([]): set(), Copy tmp.131 = glob_zero: set(), Copy tmp.132 = 0.0: set(), tmp.133 = check_one_double([tmp.131, tmp.132]): set(), Copy tmp.134 = glob_one: set(), Copy tmp.135 = 1.0: set(), tmp.136 = check_one_double([tmp.134, tmp.135]): set(), Copy tmp.137 = glob_two: set(), Copy tmp.138 = 2.0: set(), tmp.139 = check_one_double([tmp.137, tmp.138]): set(), Copy tmp.140 = glob_three: set(), Copy tmp.141 = 3.0: set(), tmp.142 = check_one_double([tmp.140, tmp.141]): set(), Copy tmp.143 = glob_four: set(), Copy tmp.144 = 4.0: set(), tmp.145 = check_one_double([tmp.143, tmp.144]): set(), Copy tmp.146 = glob_five: set(), Copy tmp.147 = 5.0: set(), tmp.148 = check_one_double([tmp.146, tmp.147]): set(), Copy tmp.149 = glob_six: set(), Copy tmp.150 = 6.0: set(), tmp.151 = check_one_double([tmp.149, tmp.150]): set(), Copy tmp.152 = glob_seven: set(), Copy tmp.153 = 7.0: set(), tmp.154 = check_one_double([tmp.152, tmp.153]): set(), Copy tmp.155 = glob_eight: set(), Copy tmp.156 = 8.0: set(), tmp.157 = check_one_double([tmp.155, tmp.156]): set(), Copy tmp.158 = glob_nine: set(), Copy tmp.159 = 9.0: set(), tmp.160 = check_one_double([tmp.158, tmp.159]): set(), Copy tmp.161 = glob_ten: set(), Copy tmp.162 = 10.0: set(), tmp.163 = check_one_double([tmp.161, tmp.162]): set(), Copy tmp.164 = glob_eleven: set(), Copy tmp.165 = 11.0: set(), tmp.166 = check_one_double([tmp.164, tmp.165]): set(), Copy tmp.167 = glob_twelve: set(), Copy tmp.168 = 12.0: set(), tmp.169 = check_one_double([tmp.167, tmp.168]): set(), Copy tmp.170 = glob_thirteen: set(), Copy tmp.171 = 13.0: set(), tmp.172 = check_one_double([tmp.170, tmp.171]): set(), Copy tmp.173 = glob_fourteen: set(), Copy tmp.174 = 14.0: set(), tmp.175 = check_one_double([tmp.173, tmp.174]): set(), Copy tmp.176 = glob1: set(), Copy tmp.177 = 2.0: set(), tmp.178 = check_one_double([tmp.176, tmp.177]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, Copy zero.84 = tmp.101, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, Copy one.85 = tmp.103, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, Copy two.86 = tmp.105, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, Copy three.87 = tmp.108, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, Copy four.88 = tmp.110, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, Copy five.89 = tmp.112, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, Copy six.90 = tmp.115, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, Copy seven.91 = tmp.117, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, Copy eight.92 = tmp.119, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, Copy nine.93 = tmp.121, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, Copy ten.94 = tmp.123, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, Copy eleven.95 = tmp.125, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, Copy twelve.96 = tmp.127, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy thirteen.97 = tmp.129, Copy glob_zero = zero.84, tmp.130 = glob2 * 7.0, Copy fourteen.98 = tmp.130, Copy glob_one = one.85, Copy glob_two = two.86, Copy glob_three = three.87, Copy glob_four = four.88, Copy glob_five = five.89, Copy glob_six = six.90, Copy glob_seven = seven.91, Copy glob_eight = eight.92, Copy glob_nine = nine.93, Copy glob_ten = ten.94, Copy glob_eleven = eleven.95, Copy glob_twelve = twelve.96, Copy glob_thirteen = thirteen.97, Copy glob_fourteen = fourteen.98, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([tmp.131, tmp.132]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([tmp.134, tmp.135]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([tmp.137, tmp.138]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([tmp.140, tmp.141]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([tmp.143, tmp.144]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([tmp.146, tmp.147]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([tmp.149, tmp.150]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([tmp.152, tmp.153]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([tmp.155, tmp.156]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([tmp.158, tmp.159]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([tmp.161, tmp.162]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([tmp.164, tmp.165]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([tmp.167, tmp.168]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([tmp.170, tmp.171]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([tmp.173, tmp.174]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([tmp.176, tmp.177]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), Copy zero.84 = tmp.101: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), Copy one.85 = tmp.103: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), Copy two.86 = tmp.105: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), Copy three.87 = tmp.108: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), Copy four.88 = tmp.110: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), Copy five.89 = tmp.112: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), Copy six.90 = tmp.115: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), Copy seven.91 = tmp.117: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), Copy eight.92 = tmp.119: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), Copy nine.93 = tmp.121: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), Copy ten.94 = tmp.123: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), Copy eleven.95 = tmp.125: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), Copy twelve.96 = tmp.127: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy thirteen.97 = tmp.129: set(), Copy glob_zero = zero.84: set(), tmp.130 = glob2 * 7.0: set(), Copy fourteen.98 = tmp.130: set(), Copy glob_one = one.85: set(), Copy glob_two = two.86: set(), Copy glob_three = three.87: set(), Copy glob_four = four.88: set(), Copy glob_five = five.89: set(), Copy glob_six = six.90: set(), Copy glob_seven = seven.91: set(), Copy glob_eight = eight.92: set(), Copy glob_nine = nine.93: set(), Copy glob_ten = ten.94: set(), Copy glob_eleven = eleven.95: set(), Copy glob_twelve = twelve.96: set(), Copy glob_thirteen = thirteen.97: set(), Copy glob_fourteen = fourteen.98: set(), None = incr_glob1([]): set(), Copy tmp.131 = glob_zero: set(), Copy tmp.132 = 0.0: set(), tmp.133 = check_one_double([tmp.131, tmp.132]): set(), Copy tmp.134 = glob_one: set(), Copy tmp.135 = 1.0: set(), tmp.136 = check_one_double([tmp.134, tmp.135]): set(), Copy tmp.137 = glob_two: set(), Copy tmp.138 = 2.0: set(), tmp.139 = check_one_double([tmp.137, tmp.138]): set(), Copy tmp.140 = glob_three: set(), Copy tmp.141 = 3.0: set(), tmp.142 = check_one_double([tmp.140, tmp.141]): set(), Copy tmp.143 = glob_four: set(), Copy tmp.144 = 4.0: set(), tmp.145 = check_one_double([tmp.143, tmp.144]): set(), Copy tmp.146 = glob_five: set(), Copy tmp.147 = 5.0: set(), tmp.148 = check_one_double([tmp.146, tmp.147]): set(), Copy tmp.149 = glob_six: set(), Copy tmp.150 = 6.0: set(), tmp.151 = check_one_double([tmp.149, tmp.150]): set(), Copy tmp.152 = glob_seven: set(), Copy tmp.153 = 7.0: set(), tmp.154 = check_one_double([tmp.152, tmp.153]): set(), Copy tmp.155 = glob_eight: set(), Copy tmp.156 = 8.0: set(), tmp.157 = check_one_double([tmp.155, tmp.156]): set(), Copy tmp.158 = glob_nine: set(), Copy tmp.159 = 9.0: set(), tmp.160 = check_one_double([tmp.158, tmp.159]): set(), Copy tmp.161 = glob_ten: set(), Copy tmp.162 = 10.0: set(), tmp.163 = check_one_double([tmp.161, tmp.162]): set(), Copy tmp.164 = glob_eleven: set(), Copy tmp.165 = 11.0: set(), tmp.166 = check_one_double([tmp.164, tmp.165]): set(), Copy tmp.167 = glob_twelve: set(), Copy tmp.168 = 12.0: set(), tmp.169 = check_one_double([tmp.167, tmp.168]): set(), Copy tmp.170 = glob_thirteen: set(), Copy tmp.171 = 13.0: set(), tmp.172 = check_one_double([tmp.170, tmp.171]): set(), Copy tmp.173 = glob_fourteen: set(), Copy tmp.174 = 14.0: set(), tmp.175 = check_one_double([tmp.173, tmp.174]): set(), Copy tmp.176 = glob1: set(), Copy tmp.177 = 2.0: set(), tmp.178 = check_one_double([tmp.176, tmp.177]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.101 = glob0 * 10.0 set()
Copy zero.84 = tmp.101 set()
tmp.102 = glob10 / 2.0 {Copy zero.84 = tmp.101}
tmp.103 = tmp.102 - 4.0 {Copy zero.84 = tmp.101}
Copy one.85 = tmp.103 {Copy zero.84 = tmp.101}
tmp.104 = glob10 / 2.0 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103}
tmp.105 = tmp.104 - 3.0 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103}
Copy two.86 = tmp.105 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103}
tmp.106 = glob2 * 2.0 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
IntToDouble tmp.107 = 1 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
tmp.108 = tmp.106 - tmp.107 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
Copy three.87 = tmp.108 {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
tmp.109 = 6.0 - glob2 {Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
tmp.110 = tmp.109 * glob1 {Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
Copy four.88 = tmp.110 {Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}
tmp.111 = glob10 / 2.0 {Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101}
tmp.112 = tmp.111 * glob1 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101}
Copy five.89 = tmp.112 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101}
tmp.113 = glob10 + 2.0 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}
IntToDouble tmp.114 = 2 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}
tmp.115 = tmp.113 / tmp.114 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}
Copy six.90 = tmp.115 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}
tmp.116 = 3.0 * glob2 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy six.90 = tmp.115, Copy five.89 = tmp.112}
tmp.117 = tmp.116 + 1.0 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy six.90 = tmp.115, Copy five.89 = tmp.112}
Copy seven.91 = tmp.117 {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy six.90 = tmp.115, Copy five.89 = tmp.112}
tmp.118 = glob2 * glob2 {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy zero.84 = tmp.101}
tmp.119 = tmp.118 * 2.0 {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy zero.84 = tmp.101}
Copy eight.92 = tmp.119 {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy zero.84 = tmp.101}
tmp.120 = glob1 + glob2 {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
tmp.121 = tmp.120 * 3.0 {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
Copy nine.93 = tmp.121 {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
tmp.122 = glob2 + 3.0 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
tmp.123 = tmp.122 * 2.0 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
Copy ten.94 = tmp.123 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
tmp.124 = glob10 + 1.0 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
tmp.125 = tmp.124 * glob1 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
Copy eleven.95 = tmp.125 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}
tmp.126 = glob1 + glob2 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
tmp.127 = tmp.126 * 4.0 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
Copy twelve.96 = tmp.127 {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
tmp.128 = glob2 * 3.0 {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
tmp.129 = tmp.128 + 7.0 {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
Copy thirteen.97 = tmp.129 {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
Copy glob_zero = zero.84 {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}
tmp.130 = glob2 * 7.0 {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125}
Copy fourteen.98 = tmp.130 {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125}
Copy glob_one = one.85 {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_two = two.86 {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_three = three.87 {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_four = four.88 {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_five = five.89 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_six = six.90 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_seven = seven.91 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_eight = eight.92 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_nine = nine.93 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_ten = ten.94 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_eleven = eleven.95 {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_twelve = twelve.96 {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_thirteen = thirteen.97 {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_twelve = twelve.96, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy glob_fourteen = fourteen.98 {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_thirteen = thirteen.97, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_twelve = twelve.96, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
None = incr_glob1([]) {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy glob_fourteen = fourteen.98, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_thirteen = thirteen.97, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_twelve = twelve.96, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.131 = glob_zero {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.132 = 0.0 {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.131 = glob_zero, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.133 = check_one_double([tmp.131, tmp.132]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.131 = glob_zero, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.134 = glob_one {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.135 = 1.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy zero.84 = tmp.101, Copy tmp.134 = glob_one, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.136 = check_one_double([tmp.134, tmp.135]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy tmp.134 = glob_one, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.137 = glob_two {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.138 = 2.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy tmp.137 = glob_two, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.139 = check_one_double([tmp.137, tmp.138]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy tmp.137 = glob_two, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.140 = glob_three {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.141 = 3.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy tmp.140 = glob_three, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.142 = check_one_double([tmp.140, tmp.141]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.140 = glob_three, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.143 = glob_four {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.144 = 4.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.143 = glob_four, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.145 = check_one_double([tmp.143, tmp.144]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.143 = glob_four, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.146 = glob_five {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.147 = 5.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.146 = glob_five, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.148 = check_one_double([tmp.146, tmp.147]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.146 = glob_five, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.149 = glob_six {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.150 = 6.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.149 = glob_six, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.151 = check_one_double([tmp.149, tmp.150]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.149 = glob_six, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.152 = glob_seven {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.153 = 7.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy eleven.95 = tmp.125, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy tmp.152 = glob_seven, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.154 = check_one_double([tmp.152, tmp.153]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy eleven.95 = tmp.125, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy tmp.152 = glob_seven, Copy fourteen.98 = tmp.130}
Copy tmp.155 = glob_eight {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
Copy tmp.156 = 8.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.155 = glob_eight, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}
<class 'parser.ConstDouble'>
tmp.157 = check_one_double([tmp.155, tmp.156]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.155 = glob_eight, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0}
Copy tmp.158 = glob_nine {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0}
Copy tmp.159 = 9.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy tmp.158 = glob_nine, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0}
<class 'parser.ConstDouble'>
tmp.160 = check_one_double([tmp.158, tmp.159]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy tmp.158 = glob_nine, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.161 = glob_ten {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.162 = 10.0 {Copy tmp.161 = glob_ten, Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
<class 'parser.ConstDouble'>
tmp.163 = check_one_double([tmp.161, tmp.162]) {Copy tmp.161 = glob_ten, Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.164 = glob_eleven {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.165 = 11.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy tmp.164 = glob_eleven, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
<class 'parser.ConstDouble'>
tmp.166 = check_one_double([tmp.164, tmp.165]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy tmp.164 = glob_eleven, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.167 = glob_twelve {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.168 = 12.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.167 = glob_twelve, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
<class 'parser.ConstDouble'>
tmp.169 = check_one_double([tmp.167, tmp.168]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.167 = glob_twelve, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.170 = glob_thirteen {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.171 = 13.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy tmp.170 = glob_thirteen, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
<class 'parser.ConstDouble'>
tmp.172 = check_one_double([tmp.170, tmp.171]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy tmp.156 = 8.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.170 = glob_thirteen, Copy tmp.159 = 9.0}
Copy tmp.173 = glob_fourteen {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.174 = 14.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy eight.92 = tmp.119, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.173 = glob_fourteen, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
<class 'parser.ConstDouble'>
tmp.175 = check_one_double([tmp.173, tmp.174]) {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.173 = glob_fourteen, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.176 = glob1 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
Copy tmp.177 = 2.0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.176 = glob1, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
<class 'parser.ConstDouble'>
tmp.178 = check_one_double([tmp.176, tmp.177]) {Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.162 = 10.0, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0, Copy twelve.96 = tmp.127, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.165 = 11.0, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy thirteen.97 = tmp.129, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy two.86 = tmp.105, Copy tmp.176 = glob1, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125}
Return 0 {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
OLD ANNOT: {Copy glob_four = four.88, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy tmp.164 = glob_eleven, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy tmp.173 = glob_fourteen, Copy tmp.167 = glob_twelve, Copy glob_thirteen = thirteen.97, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy tmp.131 = glob_zero, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.134 = glob_one, Copy glob_nine = nine.93, Copy glob_twelve = twelve.96, Copy tmp.162 = 10.0, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy eight.92 = tmp.119, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy tmp.152 = glob_seven, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0, Copy tmp.170 = glob_thirteen, Copy tmp.161 = glob_ten, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy glob_eight = eight.92, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy glob_one = one.85, Copy tmp.143 = glob_four, Copy tmp.153 = 7.0, Copy glob_three = three.87, Copy tmp.137 = glob_two, Copy tmp.165 = 11.0, Copy tmp.144 = 4.0, Copy tmp.158 = glob_nine, Copy nine.93 = tmp.121, Copy tmp.146 = glob_five, Copy tmp.174 = 14.0, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy tmp.155 = glob_eight, Copy two.86 = tmp.105, Copy tmp.149 = glob_six, Copy tmp.176 = glob1, Copy tmp.140 = glob_three, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy glob_fourteen = fourteen.98}
NEW ANNOT: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, Copy zero.84 = tmp.101, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, Copy one.85 = tmp.103, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, Copy two.86 = tmp.105, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, Copy three.87 = tmp.108, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, Copy four.88 = tmp.110, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, Copy five.89 = tmp.112, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, Copy six.90 = tmp.115, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, Copy seven.91 = tmp.117, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, Copy eight.92 = tmp.119, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, Copy nine.93 = tmp.121, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, Copy ten.94 = tmp.123, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, Copy eleven.95 = tmp.125, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, Copy twelve.96 = tmp.127, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy thirteen.97 = tmp.129, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy fourteen.98 = tmp.130, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), Copy tmp.131 = glob_zero, Copy tmp.132 = 0.0, tmp.133 = check_one_double([glob_zero, 0.0]), Copy tmp.134 = glob_one, Copy tmp.135 = 1.0, tmp.136 = check_one_double([glob_one, 1.0]), Copy tmp.137 = glob_two, Copy tmp.138 = 2.0, tmp.139 = check_one_double([glob_two, 2.0]), Copy tmp.140 = glob_three, Copy tmp.141 = 3.0, tmp.142 = check_one_double([glob_three, 3.0]), Copy tmp.143 = glob_four, Copy tmp.144 = 4.0, tmp.145 = check_one_double([glob_four, 4.0]), Copy tmp.146 = glob_five, Copy tmp.147 = 5.0, tmp.148 = check_one_double([glob_five, 5.0]), Copy tmp.149 = glob_six, Copy tmp.150 = 6.0, tmp.151 = check_one_double([glob_six, 6.0]), Copy tmp.152 = glob_seven, Copy tmp.153 = 7.0, tmp.154 = check_one_double([glob_seven, 7.0]), Copy tmp.155 = glob_eight, Copy tmp.156 = 8.0, tmp.157 = check_one_double([glob_eight, 8.0]), Copy tmp.158 = glob_nine, Copy tmp.159 = 9.0, tmp.160 = check_one_double([glob_nine, 9.0]), Copy tmp.161 = glob_ten, Copy tmp.162 = 10.0, tmp.163 = check_one_double([glob_ten, 10.0]), Copy tmp.164 = glob_eleven, Copy tmp.165 = 11.0, tmp.166 = check_one_double([glob_eleven, 11.0]), Copy tmp.167 = glob_twelve, Copy tmp.168 = 12.0, tmp.169 = check_one_double([glob_twelve, 12.0]), Copy tmp.170 = glob_thirteen, Copy tmp.171 = 13.0, tmp.172 = check_one_double([glob_thirteen, 13.0]), Copy tmp.173 = glob_fourteen, Copy tmp.174 = 14.0, tmp.175 = check_one_double([glob_fourteen, 14.0]), Copy tmp.176 = glob1, Copy tmp.177 = 2.0, tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), Copy zero.84 = tmp.101: set(), tmp.102 = glob10 / 2.0: {Copy zero.84 = tmp.101}, tmp.103 = tmp.102 - 4.0: {Copy zero.84 = tmp.101}, Copy one.85 = tmp.103: {Copy zero.84 = tmp.101}, tmp.104 = glob10 / 2.0: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103}, tmp.105 = tmp.104 - 3.0: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103}, Copy two.86 = tmp.105: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103}, tmp.106 = glob2 * 2.0: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, IntToDouble tmp.107 = 1: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, tmp.108 = tmp.106 - tmp.107: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, Copy three.87 = tmp.108: {Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, tmp.109 = 6.0 - glob2: {Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, tmp.110 = tmp.109 * glob1: {Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, Copy four.88 = tmp.110: {Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy one.85 = tmp.103, Copy two.86 = tmp.105}, tmp.111 = glob10 / 2.0: {Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101}, tmp.112 = tmp.111 * glob1: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101}, Copy five.89 = tmp.112: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101}, tmp.113 = glob10 + 2.0: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}, IntToDouble tmp.114 = 2: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}, tmp.115 = tmp.113 / tmp.114: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}, Copy six.90 = tmp.115: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy five.89 = tmp.112}, tmp.116 = 3.0 * glob2: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy six.90 = tmp.115, Copy five.89 = tmp.112}, tmp.117 = tmp.116 + 1.0: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy six.90 = tmp.115, Copy five.89 = tmp.112}, Copy seven.91 = tmp.117: {Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy zero.84 = tmp.101, Copy six.90 = tmp.115, Copy five.89 = tmp.112}, tmp.118 = glob2 * glob2: {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy zero.84 = tmp.101}, tmp.119 = tmp.118 * 2.0: {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy zero.84 = tmp.101}, Copy eight.92 = tmp.119: {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy zero.84 = tmp.101}, tmp.120 = glob1 + glob2: {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, tmp.121 = tmp.120 * 3.0: {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, Copy nine.93 = tmp.121: {Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, tmp.122 = glob2 + 3.0: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, tmp.123 = tmp.122 * 2.0: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, Copy ten.94 = tmp.123: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, tmp.124 = glob10 + 1.0: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, tmp.125 = tmp.124 * glob1: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, Copy eleven.95 = tmp.125: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101}, tmp.126 = glob1 + glob2: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, tmp.127 = tmp.126 * 4.0: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, Copy twelve.96 = tmp.127: {Copy nine.93 = tmp.121, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, tmp.128 = glob2 * 3.0: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, tmp.129 = tmp.128 + 7.0: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, Copy thirteen.97 = tmp.129: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, Copy glob_zero = zero.84: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125}, tmp.130 = glob2 * 7.0: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125}, Copy fourteen.98 = tmp.130: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125}, Copy glob_one = one.85: {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_two = two.86: {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_three = three.87: {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy two.86 = tmp.105, Copy one.85 = tmp.103, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_four = four.88: {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_five = five.89: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_six = six.90: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_seven = seven.91: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_eight = eight.92: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_nine = nine.93: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_ten = ten.94: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_eleven = eleven.95: {Copy glob_four = four.88, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_twelve = twelve.96: {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_thirteen = thirteen.97: {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_twelve = twelve.96, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy glob_fourteen = fourteen.98: {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_thirteen = thirteen.97, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_twelve = twelve.96, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, None = incr_glob1([]): {Copy glob_four = four.88, Copy glob_eleven = eleven.95, Copy twelve.96 = tmp.127, Copy glob_fourteen = fourteen.98, Copy three.87 = tmp.108, Copy glob_eight = eight.92, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy glob_one = one.85, Copy glob_thirteen = thirteen.97, Copy glob_ten = ten.94, Copy glob_six = six.90, Copy glob_three = three.87, Copy zero.84 = tmp.101, Copy glob_nine = nine.93, Copy nine.93 = tmp.121, Copy glob_twelve = twelve.96, Copy glob_seven = seven.91, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy glob_two = two.86, Copy glob_five = five.89, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy glob_zero = zero.84, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.131 = glob_zero: {Copy nine.93 = tmp.121, Copy twelve.96 = tmp.127, Copy thirteen.97 = tmp.129, Copy three.87 = tmp.108, Copy four.88 = tmp.110, Copy ten.94 = tmp.123, Copy six.90 = tmp.115, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy zero.84 = tmp.101, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.132 = 0.0: {Copy twelve.96 = tmp.127, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.131 = glob_zero, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.133 = check_one_double([tmp.131, tmp.132]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.131 = glob_zero, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.134 = glob_one: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.135 = 1.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy zero.84 = tmp.101, Copy tmp.134 = glob_one, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.136 = check_one_double([tmp.134, tmp.135]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy tmp.134 = glob_one, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.137 = glob_two: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.138 = 2.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy tmp.137 = glob_two, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.139 = check_one_double([tmp.137, tmp.138]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy tmp.137 = glob_two, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.140 = glob_three: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.141 = 3.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy five.89 = tmp.112, Copy seven.91 = tmp.117, Copy tmp.135 = 1.0, Copy tmp.140 = glob_three, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.142 = check_one_double([tmp.140, tmp.141]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.140 = glob_three, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.143 = glob_four: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.144 = 4.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.143 = glob_four, Copy zero.84 = tmp.101, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.145 = check_one_double([tmp.143, tmp.144]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.143 = glob_four, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.146 = glob_five: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.147 = 5.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.146 = glob_five, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.148 = check_one_double([tmp.146, tmp.147]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.146 = glob_five, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.149 = glob_six: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.150 = 6.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.149 = glob_six, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.151 = check_one_double([tmp.149, tmp.150]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.149 = glob_six, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.152 = glob_seven: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.153 = 7.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy eleven.95 = tmp.125, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy tmp.152 = glob_seven, Copy fourteen.98 = tmp.130}, tmp.154 = check_one_double([tmp.152, tmp.153]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy eleven.95 = tmp.125, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy tmp.152 = glob_seven, Copy fourteen.98 = tmp.130}, Copy tmp.155 = glob_eight: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, Copy tmp.156 = 8.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.155 = glob_eight, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130}, tmp.157 = check_one_double([tmp.155, tmp.156]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.155 = glob_eight, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0}, Copy tmp.158 = glob_nine: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0}, Copy tmp.159 = 9.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy tmp.158 = glob_nine, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0}, tmp.160 = check_one_double([tmp.158, tmp.159]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy tmp.158 = glob_nine, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.161 = glob_ten: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.162 = 10.0: {Copy tmp.161 = glob_ten, Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, tmp.163 = check_one_double([tmp.161, tmp.162]): {Copy tmp.161 = glob_ten, Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.164 = glob_eleven: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.165 = 11.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy tmp.164 = glob_eleven, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, tmp.166 = check_one_double([tmp.164, tmp.165]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy tmp.164 = glob_eleven, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.167 = glob_twelve: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.168 = 12.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.167 = glob_twelve, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, tmp.169 = check_one_double([tmp.167, tmp.168]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.167 = glob_twelve, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.170 = glob_thirteen: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.171 = 13.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy tmp.170 = glob_thirteen, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, tmp.172 = check_one_double([tmp.170, tmp.171]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy tmp.156 = 8.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.170 = glob_thirteen, Copy tmp.159 = 9.0}, Copy tmp.173 = glob_fourteen: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.174 = 14.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy eight.92 = tmp.119, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.173 = glob_fourteen, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, tmp.175 = check_one_double([tmp.173, tmp.174]): {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.173 = glob_fourteen, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.176 = glob1: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, Copy tmp.177 = 2.0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy tmp.176 = glob1, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}, tmp.178 = check_one_double([tmp.176, tmp.177]): {Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy tmp.147 = 5.0, Copy zero.84 = tmp.101, Copy tmp.162 = 10.0, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy one.85 = tmp.103, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0, Copy twelve.96 = tmp.127, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.165 = 11.0, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy thirteen.97 = tmp.129, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy two.86 = tmp.105, Copy tmp.176 = glob1, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125}, Return 0: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}} ReachingCopies: {Copy twelve.96 = tmp.127, Copy tmp.132 = 0.0, Copy three.87 = tmp.108, Copy ten.94 = tmp.123, Copy tmp.138 = 2.0, Copy tmp.141 = 3.0, Copy seven.91 = tmp.117, Copy tmp.150 = 6.0, Copy five.89 = tmp.112, Copy tmp.135 = 1.0, Copy tmp.153 = 7.0, Copy tmp.147 = 5.0, Copy tmp.165 = 11.0, Copy zero.84 = tmp.101, Copy tmp.144 = 4.0, Copy nine.93 = tmp.121, Copy tmp.174 = 14.0, Copy tmp.162 = 10.0, Copy thirteen.97 = tmp.129, Copy four.88 = tmp.110, Copy tmp.177 = 2.0, Copy six.90 = tmp.115, Copy tmp.168 = 12.0, Copy tmp.171 = 13.0, Copy one.85 = tmp.103, Copy two.86 = tmp.105, Copy eight.92 = tmp.119, Copy eleven.95 = tmp.125, Copy fourteen.98 = tmp.130, Copy tmp.156 = 8.0, Copy tmp.159 = 9.0}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob0 glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True
glob1 glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True
glob10 glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True
glob_zero glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True
glob_one glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True
glob_two glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True
glob_three glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True
glob_four glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True
glob_five glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True
glob_six glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True
glob_seven glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True
glob_eight glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True
glob_nine glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True
glob_ten glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True
glob_eleven glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True
glob_twelve glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True
glob_thirteen glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True
glob_fourteen glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True
incr_glob1 incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
zero.84 zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>
one.85 one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>
two.86 two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>
three.87 three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>
four.88 four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>
five.89 five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>
six.90 six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>
seven.91 seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>
eight.92 eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>
nine.93 nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>
ten.94 ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>
eleven.95 eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>
twelve.96 twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>
thirteen.97 thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>
fourteen.98 fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.99 tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>
tmp.100 tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>
tmp.119 tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>
tmp.133 tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>
tmp.137 tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>
tmp.138 tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>
tmp.140 tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>
tmp.141 tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>
tmp.142 tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>
tmp.143 tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>
tmp.144 tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>
tmp.145 tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>
tmp.146 tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>
tmp.147 tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>
tmp.149 tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>
tmp.150 tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>
tmp.151 tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>
tmp.152 tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>
tmp.153 tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>
tmp.154 tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>
tmp.155 tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>
tmp.156 tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>
tmp.157 tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>
tmp.158 tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>
tmp.159 tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>
tmp.160 tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>
tmp.161 tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>
tmp.162 tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>
tmp.164 tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>
tmp.165 tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>
tmp.166 tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>
tmp.167 tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>
tmp.168 tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>
tmp.169 tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>
tmp.170 tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>
tmp.171 tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>
tmp.173 tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>
tmp.174 tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>
tmp.176 tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>
tmp.177 tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>
tmp.178 tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>
tmp.179 tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>
--------------LIVE for block 0-------------------
Return 0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.178 = check_one_double([glob1, 2.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.177 = 2.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.176 = glob1 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.175 = check_one_double([glob_fourteen, 14.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.174 = 14.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.173 = glob_fourteen {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.172 = check_one_double([glob_thirteen, 13.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.171 = 13.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.170 = glob_thirteen {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.169 = check_one_double([glob_twelve, 12.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.168 = 12.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.167 = glob_twelve {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.166 = check_one_double([glob_eleven, 11.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.165 = 11.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.164 = glob_eleven {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.163 = check_one_double([glob_ten, 10.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.162 = 10.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.161 = glob_ten {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.160 = check_one_double([glob_nine, 9.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.159 = 9.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.158 = glob_nine {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.157 = check_one_double([glob_eight, 8.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.156 = 8.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.155 = glob_eight {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.154 = check_one_double([glob_seven, 7.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.153 = 7.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.152 = glob_seven {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.151 = check_one_double([glob_six, 6.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.150 = 6.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.149 = glob_six {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.148 = check_one_double([glob_five, 5.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.147 = 5.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.146 = glob_five {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.145 = check_one_double([glob_four, 4.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.144 = 4.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.143 = glob_four {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.142 = check_one_double([glob_three, 3.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.141 = 3.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.140 = glob_three {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.139 = check_one_double([glob_two, 2.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.138 = 2.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.137 = glob_two {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.136 = check_one_double([glob_one, 1.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.135 = 1.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.134 = glob_one {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.133 = check_one_double([glob_zero, 0.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
Copy tmp.132 = 0.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy tmp.131 = glob_zero {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
None = incr_glob1([]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy glob_fourteen = tmp.130 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy glob_thirteen = tmp.129 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}
Copy glob_twelve = tmp.127 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}
Copy glob_eleven = tmp.125 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}
Copy glob_ten = tmp.123 {glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}
Copy glob_nine = tmp.121 {glob_zero, glob_five, glob_seven, glob_six, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}
Copy glob_eight = tmp.119 {glob_zero, glob_five, glob_seven, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_seven = tmp.117 {glob_zero, glob_five, glob_seven, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_six = tmp.115 {glob_zero, tmp.117, glob_five, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_five = tmp.112 {glob_zero, tmp.117, glob_five, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_four = tmp.110 {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}
Copy glob_three = tmp.108 {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}
Copy glob_two = tmp.105 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob_two, glob1, tmp.125}
Copy glob_one = tmp.103 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}
Copy fourteen.98 = tmp.130 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}
tmp.130 = glob2 * 7.0 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}
Copy glob_zero = tmp.101 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.125, tmp.105}
Copy thirteen.97 = tmp.129 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.129 = tmp.128 + 7.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.128 = glob2 * 3.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, tmp.128, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
Copy twelve.96 = tmp.127 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.127 = tmp.126 * 4.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.126 = glob1 + glob2 {tmp.108, tmp.126, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
Copy eleven.95 = tmp.125 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.125 = tmp.124 * glob1 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.124 = glob10 + 1.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.124, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.105}
Copy ten.94 = tmp.123 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105}
tmp.123 = tmp.122 * 2.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105}
tmp.122 = glob2 + 3.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, tmp.122, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}
Copy nine.93 = tmp.121 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}
tmp.121 = tmp.120 * 3.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}
tmp.120 = glob1 + glob2 {tmp.120, tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
Copy eight.92 = tmp.119 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.119 = tmp.118 * 2.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.118 = glob2 * glob2 {tmp.108, tmp.118, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
Copy seven.91 = tmp.117 {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.117 = tmp.116 + 1.0 {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.116 = 3.0 * glob2 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, tmp.116, tmp.110, glob1, tmp.101, tmp.105}
Copy six.90 = tmp.115 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.115 = tmp.113 / tmp.114 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
IntToDouble tmp.114 = 2 {tmp.114, tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}
tmp.113 = glob10 + 2.0 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}
Copy five.89 = tmp.112 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.112 = tmp.111 * glob1 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.111 = glob10 / 2.0 {tmp.111, tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}
Copy four.88 = tmp.110 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}
tmp.110 = tmp.109 * glob1 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}
tmp.109 = 6.0 - glob2 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105, tmp.109}
Copy three.87 = tmp.108 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105}
tmp.108 = tmp.106 - tmp.107 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105}
IntToDouble tmp.107 = 1 {glob2, tmp.103, tmp.107, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}
tmp.106 = glob2 * 2.0 {glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}
Copy two.86 = tmp.105 {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103}
tmp.105 = tmp.104 - 3.0 {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103}
tmp.104 = glob10 / 2.0 {glob10, glob0, glob1, glob2, tmp.101, tmp.104, tmp.103}
Copy one.85 = tmp.103 {glob10, glob0, glob1, glob2, tmp.101, tmp.103}
tmp.103 = tmp.102 - 4.0 {glob10, glob0, glob1, glob2, tmp.101, tmp.103}
tmp.102 = glob10 / 2.0 {glob10, tmp.102, glob0, glob1, glob2, tmp.101}
Copy zero.84 = tmp.101 {glob10, glob0, glob1, glob2, tmp.101}
tmp.101 = glob0 * 10.0 {glob10, glob0, glob1, glob2, tmp.101}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob10, glob0, glob1}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy zero.84 = tmp.101 {glob10, glob0, glob1, glob2, tmp.101} for node 0
Copy one.85 = tmp.103 {glob10, glob0, glob1, glob2, tmp.101, tmp.103} for node 0
Copy two.86 = tmp.105 {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103} for node 0
Copy three.87 = tmp.108 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105} for node 0
Copy four.88 = tmp.110 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105} for node 0
Copy five.89 = tmp.112 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105} for node 0
Copy six.90 = tmp.115 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105} for node 0
Copy seven.91 = tmp.117 {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105} for node 0
Copy eight.92 = tmp.119 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105} for node 0
Copy nine.93 = tmp.121 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105} for node 0
Copy ten.94 = tmp.123 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105} for node 0
Copy eleven.95 = tmp.125 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105} for node 0
Copy twelve.96 = tmp.127 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105} for node 0
Copy thirteen.97 = tmp.129 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105} for node 0
Copy fourteen.98 = tmp.130 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105} for node 0
Copy tmp.131 = glob_zero {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.132 = 0.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.134 = glob_one {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.135 = 1.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.137 = glob_two {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.138 = 2.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.140 = glob_three {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.141 = 3.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.143 = glob_four {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.144 = 4.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.146 = glob_five {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.147 = 5.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.149 = glob_six {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.150 = 6.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.152 = glob_seven {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.153 = 7.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.155 = glob_eight {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.156 = 8.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.158 = glob_nine {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.159 = 9.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.161 = glob_ten {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.162 = 10.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.164 = glob_eleven {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.165 = 11.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.167 = glob_twelve {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.168 = 12.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.170 = glob_thirteen {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.171 = 13.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.173 = glob_fourteen {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.174 = 14.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.176 = glob1 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
Copy tmp.177 = 2.0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: {glob10, glob0, glob1, glob2, tmp.101}, Copy zero.84 = tmp.101: {glob10, glob0, glob1, glob2, tmp.101}, tmp.102 = glob10 / 2.0: {glob10, tmp.102, glob0, glob1, glob2, tmp.101}, tmp.103 = tmp.102 - 4.0: {glob10, glob0, glob1, glob2, tmp.101, tmp.103}, Copy one.85 = tmp.103: {glob10, glob0, glob1, glob2, tmp.101, tmp.103}, tmp.104 = glob10 / 2.0: {glob10, glob0, glob1, glob2, tmp.101, tmp.104, tmp.103}, tmp.105 = tmp.104 - 3.0: {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103}, Copy two.86 = tmp.105: {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103}, tmp.106 = glob2 * 2.0: {glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}, IntToDouble tmp.107 = 1: {glob2, tmp.103, tmp.107, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}, tmp.108 = tmp.106 - tmp.107: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105}, Copy three.87 = tmp.108: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105}, tmp.109 = 6.0 - glob2: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105, tmp.109}, tmp.110 = tmp.109 * glob1: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}, Copy four.88 = tmp.110: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}, tmp.111 = glob10 / 2.0: {tmp.111, tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}, tmp.112 = tmp.111 * glob1: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, Copy five.89 = tmp.112: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.113 = glob10 + 2.0: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}, IntToDouble tmp.114 = 2: {tmp.114, tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}, tmp.115 = tmp.113 / tmp.114: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, Copy six.90 = tmp.115: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.116 = 3.0 * glob2: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, tmp.116, tmp.110, glob1, tmp.101, tmp.105}, tmp.117 = tmp.116 + 1.0: {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, Copy seven.91 = tmp.117: {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.118 = glob2 * glob2: {tmp.108, tmp.118, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.119 = tmp.118 * 2.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, Copy eight.92 = tmp.119: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.120 = glob1 + glob2: {tmp.120, tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.121 = tmp.120 * 3.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}, Copy nine.93 = tmp.121: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}, tmp.122 = glob2 + 3.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, tmp.122, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}, tmp.123 = tmp.122 * 2.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105}, Copy ten.94 = tmp.123: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105}, tmp.124 = glob10 + 1.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.124, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.105}, tmp.125 = tmp.124 * glob1: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, Copy eleven.95 = tmp.125: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.126 = glob1 + glob2: {tmp.108, tmp.126, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.127 = tmp.126 * 4.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, Copy twelve.96 = tmp.127: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.128 = glob2 * 3.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, tmp.128, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.129 = tmp.128 + 7.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, Copy thirteen.97 = tmp.129: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, Copy glob_zero = tmp.101: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.125, tmp.105}, tmp.130 = glob2 * 7.0: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}, Copy fourteen.98 = tmp.130: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}, Copy glob_one = tmp.103: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}, Copy glob_two = tmp.105: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob_two, glob1, tmp.125}, Copy glob_three = tmp.108: {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}, Copy glob_four = tmp.110: {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}, Copy glob_five = tmp.112: {glob_zero, tmp.117, glob_five, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_six = tmp.115: {glob_zero, tmp.117, glob_five, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_seven = tmp.117: {glob_zero, glob_five, glob_seven, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_eight = tmp.119: {glob_zero, glob_five, glob_seven, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_nine = tmp.121: {glob_zero, glob_five, glob_seven, glob_six, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}, Copy glob_ten = tmp.123: {glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}, Copy glob_eleven = tmp.125: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}, Copy glob_twelve = tmp.127: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}, Copy glob_thirteen = tmp.129: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}, Copy glob_fourteen = tmp.130: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, None = incr_glob1([]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.131 = glob_zero: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.132 = 0.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.133 = check_one_double([glob_zero, 0.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.134 = glob_one: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.135 = 1.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.136 = check_one_double([glob_one, 1.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.137 = glob_two: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.138 = 2.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.139 = check_one_double([glob_two, 2.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.140 = glob_three: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.141 = 3.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.142 = check_one_double([glob_three, 3.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.143 = glob_four: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.144 = 4.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.145 = check_one_double([glob_four, 4.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.146 = glob_five: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.147 = 5.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.148 = check_one_double([glob_five, 5.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.149 = glob_six: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.150 = 6.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.151 = check_one_double([glob_six, 6.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.152 = glob_seven: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.153 = 7.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.154 = check_one_double([glob_seven, 7.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.155 = glob_eight: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.156 = 8.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.157 = check_one_double([glob_eight, 8.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.158 = glob_nine: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.159 = 9.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.160 = check_one_double([glob_nine, 9.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.161 = glob_ten: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.162 = 10.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.163 = check_one_double([glob_ten, 10.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.164 = glob_eleven: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.165 = 11.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.166 = check_one_double([glob_eleven, 11.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.167 = glob_twelve: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.168 = 12.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.169 = check_one_double([glob_twelve, 12.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.170 = glob_thirteen: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.171 = 13.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.172 = check_one_double([glob_thirteen, 13.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.173 = glob_fourteen: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.174 = 14.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.175 = check_one_double([glob_fourteen, 14.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.176 = glob1: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Copy tmp.177 = 2.0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.178 = check_one_double([glob1, 2.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Return 0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}} ReachingCopies: {glob2, glob10, glob0, glob1}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob_ten, glob_seven, glob_six, glob2, glob_thirteen, glob_one, glob0, glob_three, glob_two, glob_eleven, glob_zero, glob_five, glob_twelve, glob_fourteen, glob_eight, glob10, glob1, glob_four, glob_nine}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0]
NEW LIST [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.101 = glob0 * 10.0


ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy glob_zero = tmp.101: set(), tmp.130 = glob2 * 7.0: set(), Copy glob_one = tmp.103: set(), Copy glob_two = tmp.105: set(), Copy glob_three = tmp.108: set(), Copy glob_four = tmp.110: set(), Copy glob_five = tmp.112: set(), Copy glob_six = tmp.115: set(), Copy glob_seven = tmp.117: set(), Copy glob_eight = tmp.119: set(), Copy glob_nine = tmp.121: set(), Copy glob_ten = tmp.123: set(), Copy glob_eleven = tmp.125: set(), Copy glob_twelve = tmp.127: set(), Copy glob_thirteen = tmp.129: set(), Copy glob_fourteen = tmp.130: set(), None = incr_glob1([]): set(), tmp.133 = check_one_double([glob_zero, 0.0]): set(), tmp.136 = check_one_double([glob_one, 1.0]): set(), tmp.139 = check_one_double([glob_two, 2.0]): set(), tmp.142 = check_one_double([glob_three, 3.0]): set(), tmp.145 = check_one_double([glob_four, 4.0]): set(), tmp.148 = check_one_double([glob_five, 5.0]): set(), tmp.151 = check_one_double([glob_six, 6.0]): set(), tmp.154 = check_one_double([glob_seven, 7.0]): set(), tmp.157 = check_one_double([glob_eight, 8.0]): set(), tmp.160 = check_one_double([glob_nine, 9.0]): set(), tmp.163 = check_one_double([glob_ten, 10.0]): set(), tmp.166 = check_one_double([glob_eleven, 11.0]): set(), tmp.169 = check_one_double([glob_twelve, 12.0]): set(), tmp.172 = check_one_double([glob_thirteen, 13.0]): set(), tmp.175 = check_one_double([glob_fourteen, 14.0]): set(), tmp.178 = check_one_double([glob1, 2.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy glob_zero = tmp.101: set(), tmp.130 = glob2 * 7.0: set(), Copy glob_one = tmp.103: set(), Copy glob_two = tmp.105: set(), Copy glob_three = tmp.108: set(), Copy glob_four = tmp.110: set(), Copy glob_five = tmp.112: set(), Copy glob_six = tmp.115: set(), Copy glob_seven = tmp.117: set(), Copy glob_eight = tmp.119: set(), Copy glob_nine = tmp.121: set(), Copy glob_ten = tmp.123: set(), Copy glob_eleven = tmp.125: set(), Copy glob_twelve = tmp.127: set(), Copy glob_thirteen = tmp.129: set(), Copy glob_fourteen = tmp.130: set(), None = incr_glob1([]): set(), tmp.133 = check_one_double([glob_zero, 0.0]): set(), tmp.136 = check_one_double([glob_one, 1.0]): set(), tmp.139 = check_one_double([glob_two, 2.0]): set(), tmp.142 = check_one_double([glob_three, 3.0]): set(), tmp.145 = check_one_double([glob_four, 4.0]): set(), tmp.148 = check_one_double([glob_five, 5.0]): set(), tmp.151 = check_one_double([glob_six, 6.0]): set(), tmp.154 = check_one_double([glob_seven, 7.0]): set(), tmp.157 = check_one_double([glob_eight, 8.0]): set(), tmp.160 = check_one_double([glob_nine, 9.0]): set(), tmp.163 = check_one_double([glob_ten, 10.0]): set(), tmp.166 = check_one_double([glob_eleven, 11.0]): set(), tmp.169 = check_one_double([glob_twelve, 12.0]): set(), tmp.172 = check_one_double([glob_thirteen, 13.0]): set(), tmp.175 = check_one_double([glob_fourteen, 14.0]): set(), tmp.178 = check_one_double([glob1, 2.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy glob_zero = tmp.101: set(), tmp.130 = glob2 * 7.0: set(), Copy glob_one = tmp.103: set(), Copy glob_two = tmp.105: set(), Copy glob_three = tmp.108: set(), Copy glob_four = tmp.110: set(), Copy glob_five = tmp.112: set(), Copy glob_six = tmp.115: set(), Copy glob_seven = tmp.117: set(), Copy glob_eight = tmp.119: set(), Copy glob_nine = tmp.121: set(), Copy glob_ten = tmp.123: set(), Copy glob_eleven = tmp.125: set(), Copy glob_twelve = tmp.127: set(), Copy glob_thirteen = tmp.129: set(), Copy glob_fourteen = tmp.130: set(), None = incr_glob1([]): set(), tmp.133 = check_one_double([glob_zero, 0.0]): set(), tmp.136 = check_one_double([glob_one, 1.0]): set(), tmp.139 = check_one_double([glob_two, 2.0]): set(), tmp.142 = check_one_double([glob_three, 3.0]): set(), tmp.145 = check_one_double([glob_four, 4.0]): set(), tmp.148 = check_one_double([glob_five, 5.0]): set(), tmp.151 = check_one_double([glob_six, 6.0]): set(), tmp.154 = check_one_double([glob_seven, 7.0]): set(), tmp.157 = check_one_double([glob_eight, 8.0]): set(), tmp.160 = check_one_double([glob_nine, 9.0]): set(), tmp.163 = check_one_double([glob_ten, 10.0]): set(), tmp.166 = check_one_double([glob_eleven, 11.0]): set(), tmp.169 = check_one_double([glob_twelve, 12.0]): set(), tmp.172 = check_one_double([glob_thirteen, 13.0]): set(), tmp.175 = check_one_double([glob_fourteen, 14.0]): set(), tmp.178 = check_one_double([glob1, 2.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy glob_zero = tmp.101: set(), tmp.130 = glob2 * 7.0: set(), Copy glob_one = tmp.103: set(), Copy glob_two = tmp.105: set(), Copy glob_three = tmp.108: set(), Copy glob_four = tmp.110: set(), Copy glob_five = tmp.112: set(), Copy glob_six = tmp.115: set(), Copy glob_seven = tmp.117: set(), Copy glob_eight = tmp.119: set(), Copy glob_nine = tmp.121: set(), Copy glob_ten = tmp.123: set(), Copy glob_eleven = tmp.125: set(), Copy glob_twelve = tmp.127: set(), Copy glob_thirteen = tmp.129: set(), Copy glob_fourteen = tmp.130: set(), None = incr_glob1([]): set(), tmp.133 = check_one_double([glob_zero, 0.0]): set(), tmp.136 = check_one_double([glob_one, 1.0]): set(), tmp.139 = check_one_double([glob_two, 2.0]): set(), tmp.142 = check_one_double([glob_three, 3.0]): set(), tmp.145 = check_one_double([glob_four, 4.0]): set(), tmp.148 = check_one_double([glob_five, 5.0]): set(), tmp.151 = check_one_double([glob_six, 6.0]): set(), tmp.154 = check_one_double([glob_seven, 7.0]): set(), tmp.157 = check_one_double([glob_eight, 8.0]): set(), tmp.160 = check_one_double([glob_nine, 9.0]): set(), tmp.163 = check_one_double([glob_ten, 10.0]): set(), tmp.166 = check_one_double([glob_eleven, 11.0]): set(), tmp.169 = check_one_double([glob_twelve, 12.0]): set(), tmp.172 = check_one_double([glob_thirteen, 13.0]): set(), tmp.175 = check_one_double([glob_fourteen, 14.0]): set(), tmp.178 = check_one_double([glob1, 2.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.101 = glob0 * 10.0 set()
tmp.102 = glob10 / 2.0 set()
tmp.103 = tmp.102 - 4.0 set()
tmp.104 = glob10 / 2.0 set()
tmp.105 = tmp.104 - 3.0 set()
tmp.106 = glob2 * 2.0 set()
IntToDouble tmp.107 = 1 set()
tmp.108 = tmp.106 - tmp.107 set()
tmp.109 = 6.0 - glob2 set()
tmp.110 = tmp.109 * glob1 set()
tmp.111 = glob10 / 2.0 set()
tmp.112 = tmp.111 * glob1 set()
tmp.113 = glob10 + 2.0 set()
IntToDouble tmp.114 = 2 set()
tmp.115 = tmp.113 / tmp.114 set()
tmp.116 = 3.0 * glob2 set()
tmp.117 = tmp.116 + 1.0 set()
tmp.118 = glob2 * glob2 set()
tmp.119 = tmp.118 * 2.0 set()
tmp.120 = glob1 + glob2 set()
tmp.121 = tmp.120 * 3.0 set()
tmp.122 = glob2 + 3.0 set()
tmp.123 = tmp.122 * 2.0 set()
tmp.124 = glob10 + 1.0 set()
tmp.125 = tmp.124 * glob1 set()
tmp.126 = glob1 + glob2 set()
tmp.127 = tmp.126 * 4.0 set()
tmp.128 = glob2 * 3.0 set()
tmp.129 = tmp.128 + 7.0 set()
Copy glob_zero = tmp.101 set()
tmp.130 = glob2 * 7.0 {Copy glob_zero = tmp.101}
Copy glob_one = tmp.103 {Copy glob_zero = tmp.101}
Copy glob_two = tmp.105 {Copy glob_one = tmp.103, Copy glob_zero = tmp.101}
Copy glob_three = tmp.108 {Copy glob_one = tmp.103, Copy glob_zero = tmp.101, Copy glob_two = tmp.105}
Copy glob_four = tmp.110 {Copy glob_three = tmp.108, Copy glob_one = tmp.103, Copy glob_zero = tmp.101, Copy glob_two = tmp.105}
Copy glob_five = tmp.112 {Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_zero = tmp.101}
Copy glob_six = tmp.115 {Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_zero = tmp.101}
Copy glob_seven = tmp.117 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_zero = tmp.101}
Copy glob_eight = tmp.119 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_seven = tmp.117, Copy glob_zero = tmp.101}
Copy glob_nine = tmp.121 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_seven = tmp.117, Copy glob_zero = tmp.101}
Copy glob_ten = tmp.123 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_seven = tmp.117, Copy glob_zero = tmp.101}
Copy glob_eleven = tmp.125 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101}
Copy glob_twelve = tmp.127 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_eleven = tmp.125}
Copy glob_thirteen = tmp.129 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_twelve = tmp.127, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_eleven = tmp.125}
Copy glob_fourteen = tmp.130 {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_eleven = tmp.125, Copy glob_thirteen = tmp.129, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_twelve = tmp.127}
None = incr_glob1([]) {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_seven = tmp.117, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_fourteen = tmp.130, Copy glob_thirteen = tmp.129, Copy glob_eleven = tmp.125, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_twelve = tmp.127}
tmp.133 = check_one_double([glob_zero, 0.0]) set()
tmp.136 = check_one_double([glob_one, 1.0]) set()
tmp.139 = check_one_double([glob_two, 2.0]) set()
tmp.142 = check_one_double([glob_three, 3.0]) set()
tmp.145 = check_one_double([glob_four, 4.0]) set()
tmp.148 = check_one_double([glob_five, 5.0]) set()
tmp.151 = check_one_double([glob_six, 6.0]) set()
tmp.154 = check_one_double([glob_seven, 7.0]) set()
tmp.157 = check_one_double([glob_eight, 8.0]) set()
tmp.160 = check_one_double([glob_nine, 9.0]) set()
tmp.163 = check_one_double([glob_ten, 10.0]) set()
tmp.166 = check_one_double([glob_eleven, 11.0]) set()
tmp.169 = check_one_double([glob_twelve, 12.0]) set()
tmp.172 = check_one_double([glob_thirteen, 13.0]) set()
tmp.175 = check_one_double([glob_fourteen, 14.0]) set()
tmp.178 = check_one_double([glob1, 2.0]) set()
Return 0 set()
OLD ANNOT: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_fourteen = tmp.130, Copy glob_thirteen = tmp.129, Copy glob_eleven = tmp.125, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_twelve = tmp.127}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: set(), tmp.102 = glob10 / 2.0: set(), tmp.103 = tmp.102 - 4.0: set(), tmp.104 = glob10 / 2.0: set(), tmp.105 = tmp.104 - 3.0: set(), tmp.106 = glob2 * 2.0: set(), IntToDouble tmp.107 = 1: set(), tmp.108 = tmp.106 - tmp.107: set(), tmp.109 = 6.0 - glob2: set(), tmp.110 = tmp.109 * glob1: set(), tmp.111 = glob10 / 2.0: set(), tmp.112 = tmp.111 * glob1: set(), tmp.113 = glob10 + 2.0: set(), IntToDouble tmp.114 = 2: set(), tmp.115 = tmp.113 / tmp.114: set(), tmp.116 = 3.0 * glob2: set(), tmp.117 = tmp.116 + 1.0: set(), tmp.118 = glob2 * glob2: set(), tmp.119 = tmp.118 * 2.0: set(), tmp.120 = glob1 + glob2: set(), tmp.121 = tmp.120 * 3.0: set(), tmp.122 = glob2 + 3.0: set(), tmp.123 = tmp.122 * 2.0: set(), tmp.124 = glob10 + 1.0: set(), tmp.125 = tmp.124 * glob1: set(), tmp.126 = glob1 + glob2: set(), tmp.127 = tmp.126 * 4.0: set(), tmp.128 = glob2 * 3.0: set(), tmp.129 = tmp.128 + 7.0: set(), Copy glob_zero = tmp.101: set(), tmp.130 = glob2 * 7.0: {Copy glob_zero = tmp.101}, Copy glob_one = tmp.103: {Copy glob_zero = tmp.101}, Copy glob_two = tmp.105: {Copy glob_one = tmp.103, Copy glob_zero = tmp.101}, Copy glob_three = tmp.108: {Copy glob_one = tmp.103, Copy glob_zero = tmp.101, Copy glob_two = tmp.105}, Copy glob_four = tmp.110: {Copy glob_three = tmp.108, Copy glob_one = tmp.103, Copy glob_zero = tmp.101, Copy glob_two = tmp.105}, Copy glob_five = tmp.112: {Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_zero = tmp.101}, Copy glob_six = tmp.115: {Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_zero = tmp.101}, Copy glob_seven = tmp.117: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_zero = tmp.101}, Copy glob_eight = tmp.119: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_seven = tmp.117, Copy glob_zero = tmp.101}, Copy glob_nine = tmp.121: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_seven = tmp.117, Copy glob_zero = tmp.101}, Copy glob_ten = tmp.123: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_seven = tmp.117, Copy glob_zero = tmp.101}, Copy glob_eleven = tmp.125: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101}, Copy glob_twelve = tmp.127: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_eleven = tmp.125}, Copy glob_thirteen = tmp.129: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_twelve = tmp.127, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_eleven = tmp.125}, Copy glob_fourteen = tmp.130: {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_eleven = tmp.125, Copy glob_thirteen = tmp.129, Copy glob_seven = tmp.117, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_twelve = tmp.127}, None = incr_glob1([]): {Copy glob_six = tmp.115, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_two = tmp.105, Copy glob_seven = tmp.117, Copy glob_one = tmp.103, Copy glob_five = tmp.112, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_fourteen = tmp.130, Copy glob_thirteen = tmp.129, Copy glob_eleven = tmp.125, Copy glob_ten = tmp.123, Copy glob_zero = tmp.101, Copy glob_twelve = tmp.127}, tmp.133 = check_one_double([glob_zero, 0.0]): set(), tmp.136 = check_one_double([glob_one, 1.0]): set(), tmp.139 = check_one_double([glob_two, 2.0]): set(), tmp.142 = check_one_double([glob_three, 3.0]): set(), tmp.145 = check_one_double([glob_four, 4.0]): set(), tmp.148 = check_one_double([glob_five, 5.0]): set(), tmp.151 = check_one_double([glob_six, 6.0]): set(), tmp.154 = check_one_double([glob_seven, 7.0]): set(), tmp.157 = check_one_double([glob_eight, 8.0]): set(), tmp.160 = check_one_double([glob_nine, 9.0]): set(), tmp.163 = check_one_double([glob_ten, 10.0]): set(), tmp.166 = check_one_double([glob_eleven, 11.0]): set(), tmp.169 = check_one_double([glob_twelve, 12.0]): set(), tmp.172 = check_one_double([glob_thirteen, 13.0]): set(), tmp.175 = check_one_double([glob_fourteen, 14.0]): set(), tmp.178 = check_one_double([glob1, 2.0]): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob0 glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True
glob1 glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True
glob10 glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True
glob_zero glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True
glob_one glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True
glob_two glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True
glob_three glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True
glob_four glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True
glob_five glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True
glob_six glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True
glob_seven glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True
glob_eight glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True
glob_nine glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True
glob_ten glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True
glob_eleven glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True
glob_twelve glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True
glob_thirteen glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True
glob_fourteen glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True
incr_glob1 incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
zero.84 zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>
one.85 one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>
two.86 two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>
three.87 three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>
four.88 four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>
five.89 five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>
six.90 six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>
seven.91 seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>
eight.92 eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>
nine.93 nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>
ten.94 ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>
eleven.95 eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>
twelve.96 twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>
thirteen.97 thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>
fourteen.98 fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.99 tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>
tmp.100 tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>
tmp.119 tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>
tmp.133 tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>
tmp.137 tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>
tmp.138 tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>
tmp.140 tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>
tmp.141 tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>
tmp.142 tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>
tmp.143 tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>
tmp.144 tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>
tmp.145 tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>
tmp.146 tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>
tmp.147 tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>
tmp.149 tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>
tmp.150 tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>
tmp.151 tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>
tmp.152 tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>
tmp.153 tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>
tmp.154 tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>
tmp.155 tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>
tmp.156 tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>
tmp.157 tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>
tmp.158 tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>
tmp.159 tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>
tmp.160 tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>
tmp.161 tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>
tmp.162 tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>
tmp.164 tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>
tmp.165 tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>
tmp.166 tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>
tmp.167 tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>
tmp.168 tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>
tmp.169 tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>
tmp.170 tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>
tmp.171 tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>
tmp.173 tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>
tmp.174 tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>
tmp.176 tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>
tmp.177 tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>
tmp.178 tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>
tmp.179 tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>
--------------LIVE for block 0-------------------
Return 0 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.178 = check_one_double([glob1, 2.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.175 = check_one_double([glob_fourteen, 14.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.172 = check_one_double([glob_thirteen, 13.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.169 = check_one_double([glob_twelve, 12.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.166 = check_one_double([glob_eleven, 11.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.163 = check_one_double([glob_ten, 10.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.160 = check_one_double([glob_nine, 9.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.157 = check_one_double([glob_eight, 8.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.154 = check_one_double([glob_seven, 7.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.151 = check_one_double([glob_six, 6.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.148 = check_one_double([glob_five, 5.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.145 = check_one_double([glob_four, 4.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.142 = check_one_double([glob_three, 3.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.139 = check_one_double([glob_two, 2.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.136 = check_one_double([glob_one, 1.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
tmp.133 = check_one_double([glob_zero, 0.0]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
<class 'tacGenerator.TAC_VariableValue'>
<class 'tacGenerator.TAC_ConstantValue'>
None = incr_glob1([]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy glob_fourteen = tmp.130 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
Copy glob_thirteen = tmp.129 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}
Copy glob_twelve = tmp.127 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}
Copy glob_eleven = tmp.125 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}
Copy glob_ten = tmp.123 {glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}
Copy glob_nine = tmp.121 {glob_zero, glob_five, glob_seven, glob_six, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}
Copy glob_eight = tmp.119 {glob_zero, glob_five, glob_seven, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_seven = tmp.117 {glob_zero, glob_five, glob_seven, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_six = tmp.115 {glob_zero, tmp.117, glob_five, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_five = tmp.112 {glob_zero, tmp.117, glob_five, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}
Copy glob_four = tmp.110 {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}
Copy glob_three = tmp.108 {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}
Copy glob_two = tmp.105 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob_two, glob1, tmp.125}
Copy glob_one = tmp.103 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}
tmp.130 = glob2 * 7.0 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}
Copy glob_zero = tmp.101 {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.125, tmp.105}
tmp.129 = tmp.128 + 7.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.128 = glob2 * 3.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, tmp.128, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.127 = tmp.126 * 4.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.126 = glob1 + glob2 {tmp.108, tmp.126, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.125 = tmp.124 * glob1 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}
tmp.124 = glob10 + 1.0 {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.124, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.105}
tmp.123 = tmp.122 * 2.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105}
tmp.122 = glob2 + 3.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, tmp.122, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}
tmp.121 = tmp.120 * 3.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}
tmp.120 = glob1 + glob2 {tmp.120, tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.119 = tmp.118 * 2.0 {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.118 = glob2 * glob2 {tmp.108, tmp.118, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.117 = tmp.116 + 1.0 {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.116 = 3.0 * glob2 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, tmp.116, tmp.110, glob1, tmp.101, tmp.105}
tmp.115 = tmp.113 / tmp.114 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
IntToDouble tmp.114 = 2 {tmp.114, tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}
tmp.113 = glob10 + 2.0 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}
tmp.112 = tmp.111 * glob1 {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105}
tmp.111 = glob10 / 2.0 {tmp.111, tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}
tmp.110 = tmp.109 * glob1 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}
tmp.109 = 6.0 - glob2 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105, tmp.109}
tmp.108 = tmp.106 - tmp.107 {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105}
IntToDouble tmp.107 = 1 {glob2, tmp.103, tmp.107, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}
tmp.106 = glob2 * 2.0 {glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}
tmp.105 = tmp.104 - 3.0 {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103}
tmp.104 = glob10 / 2.0 {glob10, glob0, glob1, glob2, tmp.101, tmp.104, tmp.103}
tmp.103 = tmp.102 - 4.0 {glob10, glob0, glob1, glob2, tmp.101, tmp.103}
tmp.102 = glob10 / 2.0 {glob10, tmp.102, glob0, glob1, glob2, tmp.101}
tmp.101 = glob0 * 10.0 {glob10, glob0, glob1, glob2, tmp.101}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob10, glob0, glob1}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.101 = glob0 * 10.0: {glob10, glob0, glob1, glob2, tmp.101}, tmp.102 = glob10 / 2.0: {glob10, tmp.102, glob0, glob1, glob2, tmp.101}, tmp.103 = tmp.102 - 4.0: {glob10, glob0, glob1, glob2, tmp.101, tmp.103}, tmp.104 = glob10 / 2.0: {glob10, glob0, glob1, glob2, tmp.101, tmp.104, tmp.103}, tmp.105 = tmp.104 - 3.0: {glob10, glob0, glob1, glob2, tmp.101, tmp.105, tmp.103}, tmp.106 = glob2 * 2.0: {glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}, IntToDouble tmp.107 = 1: {glob2, tmp.103, tmp.107, glob10, glob0, glob1, tmp.101, tmp.106, tmp.105}, tmp.108 = tmp.106 - tmp.107: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105}, tmp.109 = 6.0 - glob2: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.101, tmp.105, tmp.109}, tmp.110 = tmp.109 * glob1: {tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}, tmp.111 = glob10 / 2.0: {tmp.111, tmp.108, glob2, tmp.103, glob10, glob0, glob1, tmp.110, tmp.101, tmp.105}, tmp.112 = tmp.111 * glob1: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.113 = glob10 + 2.0: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}, IntToDouble tmp.114 = 2: {tmp.114, tmp.108, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.110, tmp.101, tmp.113, tmp.105}, tmp.115 = tmp.113 / tmp.114: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.116 = 3.0 * glob2: {tmp.108, glob2, tmp.103, glob10, glob0, tmp.115, tmp.112, tmp.116, tmp.110, glob1, tmp.101, tmp.105}, tmp.117 = tmp.116 + 1.0: {tmp.108, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.118 = glob2 * glob2: {tmp.108, tmp.118, glob2, tmp.117, tmp.103, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.119 = tmp.118 * 2.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.120 = glob1 + glob2: {tmp.120, tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, glob0, tmp.115, tmp.112, glob1, tmp.110, tmp.101, tmp.105}, tmp.121 = tmp.120 * 3.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}, tmp.122 = glob2 + 3.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, tmp.122, glob10, tmp.121, glob0, tmp.115, tmp.112, tmp.110, glob1, tmp.101, tmp.105}, tmp.123 = tmp.122 * 2.0: {tmp.108, glob2, tmp.117, tmp.103, tmp.119, glob10, tmp.121, glob0, tmp.123, tmp.115, tmp.110, tmp.112, glob1, tmp.101, tmp.105}, tmp.124 = glob10 + 1.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.124, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.105}, tmp.125 = tmp.124 * glob1: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.126 = glob1 + glob2: {tmp.108, tmp.126, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.127 = tmp.126 * 4.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.128 = glob2 * 3.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, tmp.128, glob2, tmp.127, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, tmp.129 = tmp.128 + 7.0: {tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.101, tmp.125, tmp.105}, Copy glob_zero = tmp.101: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, glob1, tmp.125, tmp.105}, tmp.130 = glob2 * 7.0: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, tmp.129, tmp.103, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}, Copy glob_one = tmp.103: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob1, tmp.125, tmp.105}, Copy glob_two = tmp.105: {glob_zero, tmp.108, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, tmp.130, glob_two, glob1, tmp.125}, Copy glob_three = tmp.108: {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, tmp.110, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}, Copy glob_four = tmp.110: {glob_zero, tmp.117, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, tmp.112, glob_three, glob_two, tmp.130, glob1, tmp.125}, Copy glob_five = tmp.112: {glob_zero, tmp.117, glob_five, tmp.119, tmp.121, tmp.115, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_six = tmp.115: {glob_zero, tmp.117, glob_five, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_seven = tmp.117: {glob_zero, glob_five, glob_seven, tmp.119, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_eight = tmp.119: {glob_zero, glob_five, glob_seven, glob_six, tmp.121, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125}, Copy glob_nine = tmp.121: {glob_zero, glob_five, glob_seven, glob_six, tmp.123, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}, Copy glob_ten = tmp.123: {glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, tmp.125, glob_nine}, Copy glob_eleven = tmp.125: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob2, tmp.127, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}, Copy glob_twelve = tmp.127: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_one, tmp.129, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}, Copy glob_thirteen = tmp.129: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_four, glob_twelve, glob2, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, tmp.130, glob_nine}, Copy glob_fourteen = tmp.130: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, None = incr_glob1([]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.133 = check_one_double([glob_zero, 0.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.136 = check_one_double([glob_one, 1.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.139 = check_one_double([glob_two, 2.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.142 = check_one_double([glob_three, 3.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.145 = check_one_double([glob_four, 4.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.148 = check_one_double([glob_five, 5.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.151 = check_one_double([glob_six, 6.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.154 = check_one_double([glob_seven, 7.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.157 = check_one_double([glob_eight, 8.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.160 = check_one_double([glob_nine, 9.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.163 = check_one_double([glob_ten, 10.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.166 = check_one_double([glob_eleven, 11.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.169 = check_one_double([glob_twelve, 12.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.172 = check_one_double([glob_thirteen, 13.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.175 = check_one_double([glob_fourteen, 14.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, tmp.178 = check_one_double([glob1, 2.0]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Return 0: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}} ReachingCopies: {glob2, glob10, glob0, glob1}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: main ([]) instructions:[tmp.179 = target([]), Return tmp.179, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.179 = target([]), Return tmp.179, Return 0]
NEW LIST [tmp.179 = target([]), Return tmp.179, Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.179 = target([])
Return 0



ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.179 = target([]) set()
Return tmp.179 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob0 glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True
glob1 glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True
glob10 glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True
glob_zero glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True
glob_one glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True
glob_two glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True
glob_three glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True
glob_four glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True
glob_five glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True
glob_six glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True
glob_seven glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True
glob_eight glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True
glob_nine glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True
glob_ten glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True
glob_eleven glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True
glob_twelve glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True
glob_thirteen glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True
glob_fourteen glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True
incr_glob1 incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
zero.84 zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>
one.85 one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>
two.86 two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>
three.87 three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>
four.88 four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>
five.89 five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>
six.90 six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>
seven.91 seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>
eight.92 eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>
nine.93 nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>
ten.94 ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>
eleven.95 eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>
twelve.96 twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>
thirteen.97 thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>
fourteen.98 fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.99 tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>
tmp.100 tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>
tmp.119 tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>
tmp.133 tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>
tmp.137 tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>
tmp.138 tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>
tmp.140 tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>
tmp.141 tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>
tmp.142 tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>
tmp.143 tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>
tmp.144 tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>
tmp.145 tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>
tmp.146 tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>
tmp.147 tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>
tmp.149 tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>
tmp.150 tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>
tmp.151 tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>
tmp.152 tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>
tmp.153 tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>
tmp.154 tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>
tmp.155 tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>
tmp.156 tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>
tmp.157 tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>
tmp.158 tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>
tmp.159 tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>
tmp.160 tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>
tmp.161 tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>
tmp.162 tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>
tmp.164 tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>
tmp.165 tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>
tmp.166 tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>
tmp.167 tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>
tmp.168 tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>
tmp.169 tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>
tmp.170 tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>
tmp.171 tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>
tmp.173 tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>
tmp.174 tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>
tmp.176 tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>
tmp.177 tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>
tmp.178 tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>
tmp.179 tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>
--------------LIVE for block 0-------------------
Return tmp.179 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.179 = target([]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, tmp.179, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
OLD ANNOT: set()
NEW ANNOT: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, tmp.179, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Return tmp.179: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}} ReachingCopies: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.179 = target([]), Return tmp.179]
NEW LIST [tmp.179 = target([]), Return tmp.179]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.179 = target([])


ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
tmp.179 = target([]) set()
Return tmp.179 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): set(), Return tmp.179: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
check_one_int check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True
check_5_ints check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_12_ints check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True
check_one_uchar check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True
check_one_uint check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True
check_one_long check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True
check_one_ulong check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True
check_one_double check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True
check_12_longs check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True
check_six_chars check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True
check_14_doubles check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True
check_12_vals check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True
id id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True
dbl_id dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True
long_id long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True
unsigned_id unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True
uchar_id uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True
glob0 glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True
glob1 glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True
glob10 glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True
glob_zero glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True
glob_one glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True
glob_two glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True
glob_three glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True
glob_four glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True
glob_five glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True
glob_six glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True
glob_seven glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True
glob_eight glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True
glob_nine glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True
glob_ten glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True
glob_eleven glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True
glob_twelve glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True
glob_thirteen glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True
glob_fourteen glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True
incr_glob1 incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True
target target FunType: ParamTypes: [] Return Type: int Defined: True Global: True
zero.84 zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>
one.85 one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>
two.86 two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>
three.87 three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>
four.88 four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>
five.89 five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>
six.90 six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>
seven.91 seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>
eight.92 eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>
nine.93 nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>
ten.94 ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>
eleven.95 eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>
twelve.96 twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>
thirteen.97 thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>
fourteen.98 fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.99 tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>
tmp.100 tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>
tmp.101 tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>
tmp.102 tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>
tmp.103 tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>
tmp.104 tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>
tmp.105 tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>
tmp.106 tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>
tmp.107 tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>
tmp.113 tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>
tmp.114 tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>
tmp.115 tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>
tmp.116 tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>
tmp.117 tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>
tmp.118 tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>
tmp.119 tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>
tmp.120 tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>
tmp.121 tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>
tmp.122 tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>
tmp.123 tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>
tmp.124 tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>
tmp.125 tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>
tmp.126 tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>
tmp.127 tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>
tmp.128 tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>
tmp.129 tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>
tmp.130 tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>
tmp.131 tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>
tmp.132 tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>
tmp.133 tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>
tmp.134 tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>
tmp.135 tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>
tmp.136 tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>
tmp.137 tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>
tmp.138 tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>
tmp.140 tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>
tmp.141 tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>
tmp.142 tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>
tmp.143 tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>
tmp.144 tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>
tmp.145 tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>
tmp.146 tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>
tmp.147 tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>
tmp.149 tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>
tmp.150 tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>
tmp.151 tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>
tmp.152 tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>
tmp.153 tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>
tmp.154 tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>
tmp.155 tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>
tmp.156 tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>
tmp.157 tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>
tmp.158 tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>
tmp.159 tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>
tmp.160 tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>
tmp.161 tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>
tmp.162 tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>
tmp.164 tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>
tmp.165 tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>
tmp.166 tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>
tmp.167 tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>
tmp.168 tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>
tmp.169 tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>
tmp.170 tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>
tmp.171 tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>
tmp.173 tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>
tmp.174 tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>
tmp.176 tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>
tmp.177 tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>
tmp.178 tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>
tmp.179 tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>
--------------LIVE for block 0-------------------
Return tmp.179 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
tmp.179 = target([]) {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, tmp.179, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
OLD ANNOT: set()
NEW ANNOT: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.179 = target([]), Return tmp.179] Pred: {ENTRY} Suc: {EXIT} iMap: {tmp.179 = target([]): {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, tmp.179, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}, Return tmp.179: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}} ReachingCopies: {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob1}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob_ten, glob_seven, glob_six, glob2, glob_thirteen, glob_one, glob0, glob_three, glob_two, glob_eleven, glob_zero, glob_five, glob_twelve, glob_fourteen, glob_eight, glob10, glob1, glob_four, glob_nine}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
TAC Program:[Function: incr_glob1 ([]) instructions:[IntToDouble tmp.99 = 1, tmp.100 = glob1 + tmp.99, Copy glob1 = tmp.100, Return 0], Function: target ([]) instructions:[tmp.101 = glob0 * 10.0, tmp.102 = glob10 / 2.0, tmp.103 = tmp.102 - 4.0, tmp.104 = glob10 / 2.0, tmp.105 = tmp.104 - 3.0, tmp.106 = glob2 * 2.0, IntToDouble tmp.107 = 1, tmp.108 = tmp.106 - tmp.107, tmp.109 = 6.0 - glob2, tmp.110 = tmp.109 * glob1, tmp.111 = glob10 / 2.0, tmp.112 = tmp.111 * glob1, tmp.113 = glob10 + 2.0, IntToDouble tmp.114 = 2, tmp.115 = tmp.113 / tmp.114, tmp.116 = 3.0 * glob2, tmp.117 = tmp.116 + 1.0, tmp.118 = glob2 * glob2, tmp.119 = tmp.118 * 2.0, tmp.120 = glob1 + glob2, tmp.121 = tmp.120 * 3.0, tmp.122 = glob2 + 3.0, tmp.123 = tmp.122 * 2.0, tmp.124 = glob10 + 1.0, tmp.125 = tmp.124 * glob1, tmp.126 = glob1 + glob2, tmp.127 = tmp.126 * 4.0, tmp.128 = glob2 * 3.0, tmp.129 = tmp.128 + 7.0, Copy glob_zero = tmp.101, tmp.130 = glob2 * 7.0, Copy glob_one = tmp.103, Copy glob_two = tmp.105, Copy glob_three = tmp.108, Copy glob_four = tmp.110, Copy glob_five = tmp.112, Copy glob_six = tmp.115, Copy glob_seven = tmp.117, Copy glob_eight = tmp.119, Copy glob_nine = tmp.121, Copy glob_ten = tmp.123, Copy glob_eleven = tmp.125, Copy glob_twelve = tmp.127, Copy glob_thirteen = tmp.129, Copy glob_fourteen = tmp.130, None = incr_glob1([]), tmp.133 = check_one_double([glob_zero, 0.0]), tmp.136 = check_one_double([glob_one, 1.0]), tmp.139 = check_one_double([glob_two, 2.0]), tmp.142 = check_one_double([glob_three, 3.0]), tmp.145 = check_one_double([glob_four, 4.0]), tmp.148 = check_one_double([glob_five, 5.0]), tmp.151 = check_one_double([glob_six, 6.0]), tmp.154 = check_one_double([glob_seven, 7.0]), tmp.157 = check_one_double([glob_eight, 8.0]), tmp.160 = check_one_double([glob_nine, 9.0]), tmp.163 = check_one_double([glob_ten, 10.0]), tmp.166 = check_one_double([glob_eleven, 11.0]), tmp.169 = check_one_double([glob_twelve, 12.0]), tmp.172 = check_one_double([glob_thirteen, 13.0]), tmp.175 = check_one_double([glob_fourteen, 14.0]), tmp.178 = check_one_double([glob1, 2.0]), Return 0], Function: main ([]) instructions:[tmp.179 = target([]), Return tmp.179], Global: True glob0 = [c_double(0.0)], Global: True glob1 = [c_double(1.0)], Global: True glob2 = [c_double(2.0)], Global: True glob10 = [c_double(10.0)], Global: True glob_zero = [c_double(0.0)], Global: True glob_one = [c_double(0.0)], Global: True glob_two = [c_double(0.0)], Global: True glob_three = [c_double(0.0)], Global: True glob_four = [c_double(0.0)], Global: True glob_five = [c_double(0.0)], Global: True glob_six = [c_double(0.0)], Global: True glob_seven = [c_double(0.0)], Global: True glob_eight = [c_double(0.0)], Global: True glob_nine = [c_double(0.0)], Global: True glob_ten = [c_double(0.0)], Global: True glob_eleven = [c_double(0.0)], Global: True glob_twelve = [c_double(0.0)], Global: True glob_thirteen = [c_double(0.0)], Global: True glob_fourteen = [c_double(0.0)]]
Type Table:
 {}
Symbol Table:
 {'check_one_int': check_one_int FunType: ParamTypes: [int, int] Return Type: int Defined: False Global: True, 'check_5_ints': check_5_ints FunType: ParamTypes: [int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_12_ints': check_12_ints FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, int, int, int] Return Type: int Defined: False Global: True, 'check_one_uchar': check_one_uchar FunType: ParamTypes: [unsigned char, unsigned char] Return Type: int Defined: False Global: True, 'check_one_uint': check_one_uint FunType: ParamTypes: [uint, uint] Return Type: int Defined: False Global: True, 'check_one_long': check_one_long FunType: ParamTypes: [long, long] Return Type: int Defined: False Global: True, 'check_one_ulong': check_one_ulong FunType: ParamTypes: [ulong, ulong] Return Type: int Defined: False Global: True, 'check_one_double': check_one_double FunType: ParamTypes: [double, double] Return Type: int Defined: False Global: True, 'check_12_longs': check_12_longs FunType: ParamTypes: [long, long, long, long, long, long, long, long, long, long, long, long, long] Return Type: int Defined: False Global: True, 'check_six_chars': check_six_chars FunType: ParamTypes: [char, char, char, char, char, char, int] Return Type: int Defined: False Global: True, 'check_14_doubles': check_14_doubles FunType: ParamTypes: [double, double, double, double, double, double, double, double, double, double, double, double, double, double, double] Return Type: int Defined: False Global: True, 'check_12_vals': check_12_vals FunType: ParamTypes: [int, int, int, int, int, int, int, int, int, int, Plong, Pdouble, int] Return Type: int Defined: False Global: True, 'id': id FunType: ParamTypes: [int] Return Type: int Defined: False Global: True, 'dbl_id': dbl_id FunType: ParamTypes: [double] Return Type: double Defined: False Global: True, 'long_id': long_id FunType: ParamTypes: [long] Return Type: long Defined: False Global: True, 'unsigned_id': unsigned_id FunType: ParamTypes: [uint] Return Type: uint Defined: False Global: True, 'uchar_id': uchar_id FunType: ParamTypes: [unsigned char] Return Type: unsigned char Defined: False Global: True, 'glob0': glob0 double InitialVal: InitialList: [c_double(0.0)] Global: True, 'glob1': glob1 double InitialVal: InitialList: [c_double(1.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(2.0)] Global: True, 'glob10': glob10 double InitialVal: InitialList: [c_double(10.0)] Global: True, 'glob_zero': glob_zero double InitialVal: <typeChecker.Tentative object at 0x7f058be12cf0> Global: True, 'glob_one': glob_one double InitialVal: <typeChecker.Tentative object at 0x7f058be12e10> Global: True, 'glob_two': glob_two double InitialVal: <typeChecker.Tentative object at 0x7f058be12f30> Global: True, 'glob_three': glob_three double InitialVal: <typeChecker.Tentative object at 0x7f058be13050> Global: True, 'glob_four': glob_four double InitialVal: <typeChecker.Tentative object at 0x7f058be131a0> Global: True, 'glob_five': glob_five double InitialVal: <typeChecker.Tentative object at 0x7f058be132f0> Global: True, 'glob_six': glob_six double InitialVal: <typeChecker.Tentative object at 0x7f058be13440> Global: True, 'glob_seven': glob_seven double InitialVal: <typeChecker.Tentative object at 0x7f058be13590> Global: True, 'glob_eight': glob_eight double InitialVal: <typeChecker.Tentative object at 0x7f058be136e0> Global: True, 'glob_nine': glob_nine double InitialVal: <typeChecker.Tentative object at 0x7f058be13830> Global: True, 'glob_ten': glob_ten double InitialVal: <typeChecker.Tentative object at 0x7f058be13980> Global: True, 'glob_eleven': glob_eleven double InitialVal: <typeChecker.Tentative object at 0x7f058be13ad0> Global: True, 'glob_twelve': glob_twelve double InitialVal: <typeChecker.Tentative object at 0x7f058be13c20> Global: True, 'glob_thirteen': glob_thirteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13d70> Global: True, 'glob_fourteen': glob_fourteen double InitialVal: <typeChecker.Tentative object at 0x7f058be13ec0> Global: True, 'incr_glob1': incr_glob1 FunType: ParamTypes: [] Return Type: void Defined: True Global: True, 'target': target FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'zero.84': zero.84 double <typeChecker.LocalAttributes object at 0x7f058be1c5f0>, 'one.85': one.85 double <typeChecker.LocalAttributes object at 0x7f058be1c860>, 'two.86': two.86 double <typeChecker.LocalAttributes object at 0x7f058be1cb90>, 'three.87': three.87 double <typeChecker.LocalAttributes object at 0x7f058be1cec0>, 'four.88': four.88 double <typeChecker.LocalAttributes object at 0x7f058be1d250>, 'five.89': five.89 double <typeChecker.LocalAttributes object at 0x7f058be1d550>, 'six.90': six.90 double <typeChecker.LocalAttributes object at 0x7f058be1d850>, 'seven.91': seven.91 double <typeChecker.LocalAttributes object at 0x7f058be1dbe0>, 'eight.92': eight.92 double <typeChecker.LocalAttributes object at 0x7f058be1df10>, 'nine.93': nine.93 double <typeChecker.LocalAttributes object at 0x7f058be1e210>, 'ten.94': ten.94 double <typeChecker.LocalAttributes object at 0x7f058be1e510>, 'eleven.95': eleven.95 double <typeChecker.LocalAttributes object at 0x7f058be1e840>, 'twelve.96': twelve.96 double <typeChecker.LocalAttributes object at 0x7f058be1eb40>, 'thirteen.97': thirteen.97 double <typeChecker.LocalAttributes object at 0x7f058be1ee40>, 'fourteen.98': fourteen.98 double <typeChecker.LocalAttributes object at 0x7f058be1f290>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'tmp.99': tmp.99 double <typeChecker.LocalAttributes object at 0x7f058be27cb0>, 'tmp.100': tmp.100 double <typeChecker.LocalAttributes object at 0x7f058be2e990>, 'tmp.101': tmp.101 double <typeChecker.LocalAttributes object at 0x7f058be2c770>, 'tmp.102': tmp.102 double <typeChecker.LocalAttributes object at 0x7f058be2ee70>, 'tmp.103': tmp.103 double <typeChecker.LocalAttributes object at 0x7f058be2ed50>, 'tmp.104': tmp.104 double <typeChecker.LocalAttributes object at 0x7f058be2f1d0>, 'tmp.105': tmp.105 double <typeChecker.LocalAttributes object at 0x7f058be2f0b0>, 'tmp.106': tmp.106 double <typeChecker.LocalAttributes object at 0x7f058be2f530>, 'tmp.107': tmp.107 double <typeChecker.LocalAttributes object at 0x7f058be2f7d0>, 'tmp.108': tmp.108 double <typeChecker.LocalAttributes object at 0x7f058be2f410>, 'tmp.109': tmp.109 double <typeChecker.LocalAttributes object at 0x7f058be2fb90>, 'tmp.110': tmp.110 double <typeChecker.LocalAttributes object at 0x7f058be2f8c0>, 'tmp.111': tmp.111 double <typeChecker.LocalAttributes object at 0x7f058be2fd70>, 'tmp.112': tmp.112 double <typeChecker.LocalAttributes object at 0x7f058be2fc50>, 'tmp.113': tmp.113 double <typeChecker.LocalAttributes object at 0x7f058be34110>, 'tmp.114': tmp.114 double <typeChecker.LocalAttributes object at 0x7f058be34410>, 'tmp.115': tmp.115 double <typeChecker.LocalAttributes object at 0x7f058be2ffb0>, 'tmp.116': tmp.116 double <typeChecker.LocalAttributes object at 0x7f058be345f0>, 'tmp.117': tmp.117 double <typeChecker.LocalAttributes object at 0x7f058be344d0>, 'tmp.118': tmp.118 double <typeChecker.LocalAttributes object at 0x7f058be34950>, 'tmp.119': tmp.119 double <typeChecker.LocalAttributes object at 0x7f058be34830>, 'tmp.120': tmp.120 double <typeChecker.LocalAttributes object at 0x7f058be34cb0>, 'tmp.121': tmp.121 double <typeChecker.LocalAttributes object at 0x7f058be34b90>, 'tmp.122': tmp.122 double <typeChecker.LocalAttributes object at 0x7f058be35010>, 'tmp.123': tmp.123 double <typeChecker.LocalAttributes object at 0x7f058be34ef0>, 'tmp.124': tmp.124 double <typeChecker.LocalAttributes object at 0x7f058be35370>, 'tmp.125': tmp.125 double <typeChecker.LocalAttributes object at 0x7f058be35250>, 'tmp.126': tmp.126 double <typeChecker.LocalAttributes object at 0x7f058be356d0>, 'tmp.127': tmp.127 double <typeChecker.LocalAttributes object at 0x7f058be355b0>, 'tmp.128': tmp.128 double <typeChecker.LocalAttributes object at 0x7f058be35af0>, 'tmp.129': tmp.129 double <typeChecker.LocalAttributes object at 0x7f058be359d0>, 'tmp.130': tmp.130 double <typeChecker.LocalAttributes object at 0x7f058be35d30>, 'tmp.131': tmp.131 double <typeChecker.LocalAttributes object at 0x7f058be36930>, 'tmp.132': tmp.132 double <typeChecker.LocalAttributes object at 0x7f058be36a80>, 'tmp.133': tmp.133 int <typeChecker.LocalAttributes object at 0x7f058be368a0>, 'tmp.134': tmp.134 double <typeChecker.LocalAttributes object at 0x7f058be36d20>, 'tmp.135': tmp.135 double <typeChecker.LocalAttributes object at 0x7f058be36e70>, 'tmp.136': tmp.136 int <typeChecker.LocalAttributes object at 0x7f058be36c00>, 'tmp.137': tmp.137 double <typeChecker.LocalAttributes object at 0x7f058be37110>, 'tmp.138': tmp.138 double <typeChecker.LocalAttributes object at 0x7f058be37260>, 'tmp.139': tmp.139 int <typeChecker.LocalAttributes object at 0x7f058be36ff0>, 'tmp.140': tmp.140 double <typeChecker.LocalAttributes object at 0x7f058be374d0>, 'tmp.141': tmp.141 double <typeChecker.LocalAttributes object at 0x7f058be37620>, 'tmp.142': tmp.142 int <typeChecker.LocalAttributes object at 0x7f058be373b0>, 'tmp.143': tmp.143 double <typeChecker.LocalAttributes object at 0x7f058be37890>, 'tmp.144': tmp.144 double <typeChecker.LocalAttributes object at 0x7f058be37a10>, 'tmp.145': tmp.145 int <typeChecker.LocalAttributes object at 0x7f058be37770>, 'tmp.146': tmp.146 double <typeChecker.LocalAttributes object at 0x7f058be37cb0>, 'tmp.147': tmp.147 double <typeChecker.LocalAttributes object at 0x7f058be37e00>, 'tmp.148': tmp.148 int <typeChecker.LocalAttributes object at 0x7f058be37b90>, 'tmp.149': tmp.149 double <typeChecker.LocalAttributes object at 0x7f058be37fb0>, 'tmp.150': tmp.150 double <typeChecker.LocalAttributes object at 0x7f058be38200>, 'tmp.151': tmp.151 int <typeChecker.LocalAttributes object at 0x7f058be38050>, 'tmp.152': tmp.152 double <typeChecker.LocalAttributes object at 0x7f058be38470>, 'tmp.153': tmp.153 double <typeChecker.LocalAttributes object at 0x7f058be385c0>, 'tmp.154': tmp.154 int <typeChecker.LocalAttributes object at 0x7f058be38350>, 'tmp.155': tmp.155 double <typeChecker.LocalAttributes object at 0x7f058be38830>, 'tmp.156': tmp.156 double <typeChecker.LocalAttributes object at 0x7f058be38980>, 'tmp.157': tmp.157 int <typeChecker.LocalAttributes object at 0x7f058be38710>, 'tmp.158': tmp.158 double <typeChecker.LocalAttributes object at 0x7f058be38bf0>, 'tmp.159': tmp.159 double <typeChecker.LocalAttributes object at 0x7f058be38d40>, 'tmp.160': tmp.160 int <typeChecker.LocalAttributes object at 0x7f058be38ad0>, 'tmp.161': tmp.161 double <typeChecker.LocalAttributes object at 0x7f058be38fb0>, 'tmp.162': tmp.162 double <typeChecker.LocalAttributes object at 0x7f058be39100>, 'tmp.163': tmp.163 int <typeChecker.LocalAttributes object at 0x7f058be38e90>, 'tmp.164': tmp.164 double <typeChecker.LocalAttributes object at 0x7f058be39370>, 'tmp.165': tmp.165 double <typeChecker.LocalAttributes object at 0x7f058be394c0>, 'tmp.166': tmp.166 int <typeChecker.LocalAttributes object at 0x7f058be39250>, 'tmp.167': tmp.167 double <typeChecker.LocalAttributes object at 0x7f058be39730>, 'tmp.168': tmp.168 double <typeChecker.LocalAttributes object at 0x7f058be39880>, 'tmp.169': tmp.169 int <typeChecker.LocalAttributes object at 0x7f058be39610>, 'tmp.170': tmp.170 double <typeChecker.LocalAttributes object at 0x7f058be39af0>, 'tmp.171': tmp.171 double <typeChecker.LocalAttributes object at 0x7f058be39c40>, 'tmp.172': tmp.172 int <typeChecker.LocalAttributes object at 0x7f058be399d0>, 'tmp.173': tmp.173 double <typeChecker.LocalAttributes object at 0x7f058be39eb0>, 'tmp.174': tmp.174 double <typeChecker.LocalAttributes object at 0x7f058be3a000>, 'tmp.175': tmp.175 int <typeChecker.LocalAttributes object at 0x7f058be39d90>, 'tmp.176': tmp.176 double <typeChecker.LocalAttributes object at 0x7f058be3a270>, 'tmp.177': tmp.177 double <typeChecker.LocalAttributes object at 0x7f058be3a3c0>, 'tmp.178': tmp.178 int <typeChecker.LocalAttributes object at 0x7f058be3a150>, 'tmp.179': tmp.179 int <typeChecker.LocalAttributes object at 0x7f058be3a630>}
All Aliased Vars:
 {glob_eleven, glob_zero, glob_ten, glob_five, glob_seven, glob_six, glob_twelve, glob2, glob_fourteen, glob_thirteen, glob_one, glob_eight, glob10, glob0, glob1, glob_three, glob_two, glob_four, glob_nine}
IntParams: []
IntParams: []
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.133))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_zero)
Operand: Data(tmp.200, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_zero), <assemblyGenerator.DataOperand object at 0x7f058be53230>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.136))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_one)
Operand: Data(tmp.201, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_one), <assemblyGenerator.DataOperand object at 0x7f058be537d0>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.139))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_two)
Operand: Data(tmp.202, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_two), <assemblyGenerator.DataOperand object at 0x7f058be53ce0>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.142))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_three)
Operand: Data(tmp.203, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_three), <assemblyGenerator.DataOperand object at 0x7f058be54200>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.145))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_four)
Operand: Data(tmp.204, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_four), <assemblyGenerator.DataOperand object at 0x7f058be547a0>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.148))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_five)
Operand: Data(tmp.205, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_five), <assemblyGenerator.DataOperand object at 0x7f058be54d10>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.151))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_six)
Operand: Data(tmp.206, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_six), <assemblyGenerator.DataOperand object at 0x7f058be55280>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.154))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_seven)
Operand: Data(tmp.207, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_seven), <assemblyGenerator.DataOperand object at 0x7f058be557c0>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.157))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_eight)
Operand: Data(tmp.208, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_eight), <assemblyGenerator.DataOperand object at 0x7f058be55d30>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.160))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_nine)
Operand: Data(tmp.209, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_nine), <assemblyGenerator.DataOperand object at 0x7f058be56240>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.163))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_ten)
Operand: Data(tmp.210, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_ten), <assemblyGenerator.DataOperand object at 0x7f058be56750>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.166))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_eleven)
Operand: Data(tmp.211, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_eleven), <assemblyGenerator.DataOperand object at 0x7f058be56c60>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.169))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_twelve)
Operand: Data(tmp.212, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_twelve), <assemblyGenerator.DataOperand object at 0x7f058be57170>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.172))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_thirteen)
Operand: Data(tmp.213, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_thirteen), <assemblyGenerator.DataOperand object at 0x7f058be57650>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.175))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob_fourteen)
Operand: Data(tmp.214, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob_fourteen), <assemblyGenerator.DataOperand object at 0x7f058be57b60>]
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.178))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(glob1)
Operand: Data(tmp.215, 0)
IntArgs: []
DoubleArgs: [Pseudo(glob1), <assemblyGenerator.DataOperand object at 0x7f058be780b0>]
StackArgs: []
IntParams: []
IntDests: [(Longword, Pseudo(tmp.179))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
ASM Program: [Function incr_glob1 stackOffset: None global: True instructions:[AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)), AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)), AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.180 = c_double(10.0), Static Constant: Alignment = 8 : tmp.181 = c_double(2.0), Static Constant: Alignment = 8 : tmp.182 = c_double(4.0), Static Constant: Alignment = 8 : tmp.183 = c_double(2.0), Static Constant: Alignment = 8 : tmp.184 = c_double(3.0), Static Constant: Alignment = 8 : tmp.185 = c_double(2.0), Static Constant: Alignment = 8 : tmp.186 = c_double(6.0), Static Constant: Alignment = 8 : tmp.187 = c_double(2.0), Static Constant: Alignment = 8 : tmp.188 = c_double(2.0), Static Constant: Alignment = 8 : tmp.189 = c_double(3.0), Static Constant: Alignment = 8 : tmp.190 = c_double(1.0), Static Constant: Alignment = 8 : tmp.191 = c_double(2.0), Static Constant: Alignment = 8 : tmp.192 = c_double(3.0), Static Constant: Alignment = 8 : tmp.193 = c_double(3.0), Static Constant: Alignment = 8 : tmp.194 = c_double(2.0), Static Constant: Alignment = 8 : tmp.195 = c_double(1.0), Static Constant: Alignment = 8 : tmp.196 = c_double(4.0), Static Constant: Alignment = 8 : tmp.197 = c_double(3.0), Static Constant: Alignment = 8 : tmp.198 = c_double(7.0), Static Constant: Alignment = 8 : tmp.199 = c_double(7.0), Static Constant: Alignment = 8 : tmp.200 = c_double(0.0), Static Constant: Alignment = 8 : tmp.201 = c_double(1.0), Static Constant: Alignment = 8 : tmp.202 = c_double(2.0), Static Constant: Alignment = 8 : tmp.203 = c_double(3.0), Static Constant: Alignment = 8 : tmp.204 = c_double(4.0), Static Constant: Alignment = 8 : tmp.205 = c_double(5.0), Static Constant: Alignment = 8 : tmp.206 = c_double(6.0), Static Constant: Alignment = 8 : tmp.207 = c_double(7.0), Static Constant: Alignment = 8 : tmp.208 = c_double(8.0), Static Constant: Alignment = 8 : tmp.209 = c_double(9.0), Static Constant: Alignment = 8 : tmp.210 = c_double(10.0), Static Constant: Alignment = 8 : tmp.211 = c_double(11.0), Static Constant: Alignment = 8 : tmp.212 = c_double(12.0), Static Constant: Alignment = 8 : tmp.213 = c_double(13.0), Static Constant: Alignment = 8 : tmp.214 = c_double(14.0), Static Constant: Alignment = 8 : tmp.215 = c_double(2.0), Function target stackOffset: None global: True instructions:[AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), Call(incr_glob1), AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.133)), AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.139)), AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.142)), AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.145)), AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.148)), AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.151)), AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.154)), AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.157)), AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.160)), AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.163)), AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.166)), AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.169)), AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.172)), AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.175)), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.178)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function main stackOffset: None global: True instructions:[Call(target), AssType: Longword Mov(Reg(AX), Pseudo(tmp.179)), AssType: Longword Mov(Pseudo(tmp.179), Reg(AX)), ret], Static Variable: Global = True Alignment = 8 : glob0 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob1 = [c_double(1.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(2.0)], Static Variable: Global = True Alignment = 8 : glob10 = [c_double(10.0)], Static Variable: Global = True Alignment = 8 : glob_zero = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_one = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_two = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_three = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_four = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_five = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_six = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_seven = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_eight = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_nine = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_ten = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_eleven = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_twelve = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_thirteen = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_fourteen = [c_double(0.0)]]
Type Table:
 {}
Backend Symbol Table:
 {'tmp.180': AssType: Double IsStatic: True IsConstant: True, 'tmp.181': AssType: Double IsStatic: True IsConstant: True, 'tmp.182': AssType: Double IsStatic: True IsConstant: True, 'tmp.183': AssType: Double IsStatic: True IsConstant: True, 'tmp.184': AssType: Double IsStatic: True IsConstant: True, 'tmp.185': AssType: Double IsStatic: True IsConstant: True, 'tmp.186': AssType: Double IsStatic: True IsConstant: True, 'tmp.187': AssType: Double IsStatic: True IsConstant: True, 'tmp.188': AssType: Double IsStatic: True IsConstant: True, 'tmp.189': AssType: Double IsStatic: True IsConstant: True, 'tmp.190': AssType: Double IsStatic: True IsConstant: True, 'tmp.191': AssType: Double IsStatic: True IsConstant: True, 'tmp.192': AssType: Double IsStatic: True IsConstant: True, 'tmp.193': AssType: Double IsStatic: True IsConstant: True, 'tmp.194': AssType: Double IsStatic: True IsConstant: True, 'tmp.195': AssType: Double IsStatic: True IsConstant: True, 'tmp.196': AssType: Double IsStatic: True IsConstant: True, 'tmp.197': AssType: Double IsStatic: True IsConstant: True, 'tmp.198': AssType: Double IsStatic: True IsConstant: True, 'tmp.199': AssType: Double IsStatic: True IsConstant: True, 'tmp.200': AssType: Double IsStatic: True IsConstant: True, 'tmp.201': AssType: Double IsStatic: True IsConstant: True, 'tmp.202': AssType: Double IsStatic: True IsConstant: True, 'tmp.203': AssType: Double IsStatic: True IsConstant: True, 'tmp.204': AssType: Double IsStatic: True IsConstant: True, 'tmp.205': AssType: Double IsStatic: True IsConstant: True, 'tmp.206': AssType: Double IsStatic: True IsConstant: True, 'tmp.207': AssType: Double IsStatic: True IsConstant: True, 'tmp.208': AssType: Double IsStatic: True IsConstant: True, 'tmp.209': AssType: Double IsStatic: True IsConstant: True, 'tmp.210': AssType: Double IsStatic: True IsConstant: True, 'tmp.211': AssType: Double IsStatic: True IsConstant: True, 'tmp.212': AssType: Double IsStatic: True IsConstant: True, 'tmp.213': AssType: Double IsStatic: True IsConstant: True, 'tmp.214': AssType: Double IsStatic: True IsConstant: True, 'tmp.215': AssType: Double IsStatic: True IsConstant: True, 'check_one_int': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_5_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_ints': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_uchar': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_uint': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_long': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_ulong': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_one_double': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet([Reg(XMM0), Reg(XMM1)]) ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_longs': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_six_chars': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_14_doubles': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'check_12_vals': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'dbl_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'long_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'unsigned_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'uchar_id': Defined: False ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'glob0': AssType: Double IsStatic: True IsConstant: False, 'glob1': AssType: Double IsStatic: True IsConstant: False, 'glob2': AssType: Double IsStatic: True IsConstant: False, 'glob10': AssType: Double IsStatic: True IsConstant: False, 'glob_zero': AssType: Double IsStatic: True IsConstant: False, 'glob_one': AssType: Double IsStatic: True IsConstant: False, 'glob_two': AssType: Double IsStatic: True IsConstant: False, 'glob_three': AssType: Double IsStatic: True IsConstant: False, 'glob_four': AssType: Double IsStatic: True IsConstant: False, 'glob_five': AssType: Double IsStatic: True IsConstant: False, 'glob_six': AssType: Double IsStatic: True IsConstant: False, 'glob_seven': AssType: Double IsStatic: True IsConstant: False, 'glob_eight': AssType: Double IsStatic: True IsConstant: False, 'glob_nine': AssType: Double IsStatic: True IsConstant: False, 'glob_ten': AssType: Double IsStatic: True IsConstant: False, 'glob_eleven': AssType: Double IsStatic: True IsConstant: False, 'glob_twelve': AssType: Double IsStatic: True IsConstant: False, 'glob_thirteen': AssType: Double IsStatic: True IsConstant: False, 'glob_fourteen': AssType: Double IsStatic: True IsConstant: False, 'incr_glob1': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'target': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'zero.84': AssType: Double IsStatic: False IsConstant: False, 'one.85': AssType: Double IsStatic: False IsConstant: False, 'two.86': AssType: Double IsStatic: False IsConstant: False, 'three.87': AssType: Double IsStatic: False IsConstant: False, 'four.88': AssType: Double IsStatic: False IsConstant: False, 'five.89': AssType: Double IsStatic: False IsConstant: False, 'six.90': AssType: Double IsStatic: False IsConstant: False, 'seven.91': AssType: Double IsStatic: False IsConstant: False, 'eight.92': AssType: Double IsStatic: False IsConstant: False, 'nine.93': AssType: Double IsStatic: False IsConstant: False, 'ten.94': AssType: Double IsStatic: False IsConstant: False, 'eleven.95': AssType: Double IsStatic: False IsConstant: False, 'twelve.96': AssType: Double IsStatic: False IsConstant: False, 'thirteen.97': AssType: Double IsStatic: False IsConstant: False, 'fourteen.98': AssType: Double IsStatic: False IsConstant: False, 'main': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'tmp.99': AssType: Double IsStatic: False IsConstant: False, 'tmp.100': AssType: Double IsStatic: False IsConstant: False, 'tmp.101': AssType: Double IsStatic: False IsConstant: False, 'tmp.102': AssType: Double IsStatic: False IsConstant: False, 'tmp.103': AssType: Double IsStatic: False IsConstant: False, 'tmp.104': AssType: Double IsStatic: False IsConstant: False, 'tmp.105': AssType: Double IsStatic: False IsConstant: False, 'tmp.106': AssType: Double IsStatic: False IsConstant: False, 'tmp.107': AssType: Double IsStatic: False IsConstant: False, 'tmp.108': AssType: Double IsStatic: False IsConstant: False, 'tmp.109': AssType: Double IsStatic: False IsConstant: False, 'tmp.110': AssType: Double IsStatic: False IsConstant: False, 'tmp.111': AssType: Double IsStatic: False IsConstant: False, 'tmp.112': AssType: Double IsStatic: False IsConstant: False, 'tmp.113': AssType: Double IsStatic: False IsConstant: False, 'tmp.114': AssType: Double IsStatic: False IsConstant: False, 'tmp.115': AssType: Double IsStatic: False IsConstant: False, 'tmp.116': AssType: Double IsStatic: False IsConstant: False, 'tmp.117': AssType: Double IsStatic: False IsConstant: False, 'tmp.118': AssType: Double IsStatic: False IsConstant: False, 'tmp.119': AssType: Double IsStatic: False IsConstant: False, 'tmp.120': AssType: Double IsStatic: False IsConstant: False, 'tmp.121': AssType: Double IsStatic: False IsConstant: False, 'tmp.122': AssType: Double IsStatic: False IsConstant: False, 'tmp.123': AssType: Double IsStatic: False IsConstant: False, 'tmp.124': AssType: Double IsStatic: False IsConstant: False, 'tmp.125': AssType: Double IsStatic: False IsConstant: False, 'tmp.126': AssType: Double IsStatic: False IsConstant: False, 'tmp.127': AssType: Double IsStatic: False IsConstant: False, 'tmp.128': AssType: Double IsStatic: False IsConstant: False, 'tmp.129': AssType: Double IsStatic: False IsConstant: False, 'tmp.130': AssType: Double IsStatic: False IsConstant: False, 'tmp.131': AssType: Double IsStatic: False IsConstant: False, 'tmp.132': AssType: Double IsStatic: False IsConstant: False, 'tmp.133': AssType: Longword IsStatic: False IsConstant: False, 'tmp.134': AssType: Double IsStatic: False IsConstant: False, 'tmp.135': AssType: Double IsStatic: False IsConstant: False, 'tmp.136': AssType: Longword IsStatic: False IsConstant: False, 'tmp.137': AssType: Double IsStatic: False IsConstant: False, 'tmp.138': AssType: Double IsStatic: False IsConstant: False, 'tmp.139': AssType: Longword IsStatic: False IsConstant: False, 'tmp.140': AssType: Double IsStatic: False IsConstant: False, 'tmp.141': AssType: Double IsStatic: False IsConstant: False, 'tmp.142': AssType: Longword IsStatic: False IsConstant: False, 'tmp.143': AssType: Double IsStatic: False IsConstant: False, 'tmp.144': AssType: Double IsStatic: False IsConstant: False, 'tmp.145': AssType: Longword IsStatic: False IsConstant: False, 'tmp.146': AssType: Double IsStatic: False IsConstant: False, 'tmp.147': AssType: Double IsStatic: False IsConstant: False, 'tmp.148': AssType: Longword IsStatic: False IsConstant: False, 'tmp.149': AssType: Double IsStatic: False IsConstant: False, 'tmp.150': AssType: Double IsStatic: False IsConstant: False, 'tmp.151': AssType: Longword IsStatic: False IsConstant: False, 'tmp.152': AssType: Double IsStatic: False IsConstant: False, 'tmp.153': AssType: Double IsStatic: False IsConstant: False, 'tmp.154': AssType: Longword IsStatic: False IsConstant: False, 'tmp.155': AssType: Double IsStatic: False IsConstant: False, 'tmp.156': AssType: Double IsStatic: False IsConstant: False, 'tmp.157': AssType: Longword IsStatic: False IsConstant: False, 'tmp.158': AssType: Double IsStatic: False IsConstant: False, 'tmp.159': AssType: Double IsStatic: False IsConstant: False, 'tmp.160': AssType: Longword IsStatic: False IsConstant: False, 'tmp.161': AssType: Double IsStatic: False IsConstant: False, 'tmp.162': AssType: Double IsStatic: False IsConstant: False, 'tmp.163': AssType: Longword IsStatic: False IsConstant: False, 'tmp.164': AssType: Double IsStatic: False IsConstant: False, 'tmp.165': AssType: Double IsStatic: False IsConstant: False, 'tmp.166': AssType: Longword IsStatic: False IsConstant: False, 'tmp.167': AssType: Double IsStatic: False IsConstant: False, 'tmp.168': AssType: Double IsStatic: False IsConstant: False, 'tmp.169': AssType: Longword IsStatic: False IsConstant: False, 'tmp.170': AssType: Double IsStatic: False IsConstant: False, 'tmp.171': AssType: Double IsStatic: False IsConstant: False, 'tmp.172': AssType: Longword IsStatic: False IsConstant: False, 'tmp.173': AssType: Double IsStatic: False IsConstant: False, 'tmp.174': AssType: Double IsStatic: False IsConstant: False, 'tmp.175': AssType: Longword IsStatic: False IsConstant: False, 'tmp.176': AssType: Double IsStatic: False IsConstant: False, 'tmp.177': AssType: Double IsStatic: False IsConstant: False, 'tmp.178': AssType: Longword IsStatic: False IsConstant: False, 'tmp.179': AssType: Longword IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION incr_glob1
-------------------START COALESCING INTEGER.----------------------
-----------Building INTEGER interference graph.------------------
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)), AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)), AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)), set()), (AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)), set()), (AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)) set()
AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)) {Pseudo(tmp.100)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)) {Pseudo(tmp.99), Pseudo(tmp.100)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)) {Pseudo(tmp.99), Pseudo(glob1)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob1)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DI)
        Reg(R12d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(R12d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be367e0>, <RegisterAllocation.Node object at 0x7f058be45580>, <RegisterAllocation.Node object at 0x7f058be45280>, <RegisterAllocation.Node object at 0x7f058be392b0>, <RegisterAllocation.Node object at 0x7f058be512e0>, <RegisterAllocation.Node object at 0x7f058be52f90>, <RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be45580>, <RegisterAllocation.Node object at 0x7f058be45280>, <RegisterAllocation.Node object at 0x7f058be392b0>, <RegisterAllocation.Node object at 0x7f058be512e0>, <RegisterAllocation.Node object at 0x7f058be52f90>, <RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be45280>, <RegisterAllocation.Node object at 0x7f058be392b0>, <RegisterAllocation.Node object at 0x7f058be512e0>, <RegisterAllocation.Node object at 0x7f058be52f90>, <RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be392b0>, <RegisterAllocation.Node object at 0x7f058be512e0>, <RegisterAllocation.Node object at 0x7f058be52f90>, <RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be512e0>, <RegisterAllocation.Node object at 0x7f058be52f90>, <RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be52f90>, <RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be53a70>, <RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be2e7b0>, <RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be2c6b0>, <RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3e570>, <RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3da30>, <RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3c4d0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for incr_glob1: set()
------------------REGISTER INTEGER MAP.--------------------
{}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99))                     AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99))
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100))                    AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100))
AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100))           AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100))
AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1))                    AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1))
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret
-------------------START COALESCING DOUBLE.----------------------
-----------Building DOUBLE interference graph.------------------
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)), AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)), AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)), set()), (AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)), set()), (AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1)) set()
AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100)) {Pseudo(tmp.100)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100)) {Pseudo(tmp.99), Pseudo(tmp.100)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99)) {Pseudo(tmp.99), Pseudo(glob1)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob1)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM7)
        Reg(XMM0)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM12)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM13)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Pseudo(tmp.99)
    Pseudo(tmp.99) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.100)
Pseudo(tmp.100)
    Pseudo(tmp.100) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.99)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
Pseudo(tmp.99) Pseudo(tmp.99) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.100) Pseudo(tmp.100) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be560c0>, <RegisterAllocation.Node object at 0x7f058be46600>, <RegisterAllocation.Node object at 0x7f058be46120>, <RegisterAllocation.Node object at 0x7f058be446e0>, <RegisterAllocation.Node object at 0x7f058be46ff0>, <RegisterAllocation.Node object at 0x7f058be39f70>, <RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be46600>, <RegisterAllocation.Node object at 0x7f058be46120>, <RegisterAllocation.Node object at 0x7f058be446e0>, <RegisterAllocation.Node object at 0x7f058be46ff0>, <RegisterAllocation.Node object at 0x7f058be39f70>, <RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be46120>, <RegisterAllocation.Node object at 0x7f058be446e0>, <RegisterAllocation.Node object at 0x7f058be46ff0>, <RegisterAllocation.Node object at 0x7f058be39f70>, <RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be446e0>, <RegisterAllocation.Node object at 0x7f058be46ff0>, <RegisterAllocation.Node object at 0x7f058be39f70>, <RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be46ff0>, <RegisterAllocation.Node object at 0x7f058be39f70>, <RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be39f70>, <RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be39670>, <RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3d6d0>, <RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3d2b0>, <RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3da00>, <RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3e900>, <RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3e720>, <RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3cbf0>, <RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3d400>, <RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be86000>, <RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be5e600>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
Pseudo(tmp.99) Pseudo(tmp.99) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.100) Pseudo(tmp.100) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for incr_glob1: set()
------------------REGISTER DOUBLE MAP.--------------------
{Pseudo(tmp.99): Reg(XMM12), Pseudo(tmp.100): Reg(XMM13)}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Cvtsi2sd(Imm(1), Reg(XMM12))                         AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99))                     AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.99))
AssType: Double Mov(Pseudo(glob1), Reg(XMM13))                         AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100))                    AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.100))
AssType: Double Binary(Add, Reg(XMM12), Reg(XMM13))                    AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100))           AssType: Double Binary(Add, Pseudo(tmp.99), Pseudo(tmp.100))
AssType: Double Mov(Reg(XMM13), Pseudo(glob1))                         AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1))                    AssType: Double Mov(Pseudo(tmp.100), Pseudo(glob1))
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret                                                                    ret
REGISTER ALLOCATE FUNCTION target
-------------------START COALESCING INTEGER.----------------------
-----------Building INTEGER interference graph.------------------
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), Call(incr_glob1), AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.133)), AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.139)), AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.142)), AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.145)), AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.148)), AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.151)), AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.154)), AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.157)), AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.160)), AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.163)), AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.166)), AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.169)), AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.172)), AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.175)), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Reg(AX), Pseudo(tmp.178)), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), set()), (AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), set()), (AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), set()), (AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), set()), (AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), set()), (AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), set()), (AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), set()), (AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), set()), (AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), set()), (AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), set()), (AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), set()), (AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), set()), (AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), set()), (AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), set()), (AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), set()), (AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), set()), (AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), set()), (AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), set()), (AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), set()), (AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), set()), (AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), set()), (AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), set()), (AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), set()), (AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), set()), (AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), set()), (AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), set()), (AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), set()), (AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), set()), (AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), set()), (AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), set()), (AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), set()), (AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), set()), (AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), set()), (AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), set()), (AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), set()), (AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), set()), (AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), set()), (AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), set()), (AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), set()), (AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), set()), (AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), set()), (AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), set()), (AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), set()), (AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), set()), (AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), set()), (Call(incr_glob1), set()), (AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.133)), set()), (AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)), set()), (AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.139)), set()), (AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.142)), set()), (AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.145)), set()), (AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.148)), set()), (AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.151)), set()), (AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.154)), set()), (AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.157)), set()), (AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.160)), set()), (AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.163)), set()), (AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.166)), set()), (AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.169)), set()), (AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.172)), set()), (AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.175)), set()), (AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.178)), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.178)) set()
Call(check_one_double) {Reg(AX)}
AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)) set()
AssType: Double Mov(Pseudo(glob1), Reg(XMM0)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.175)) {Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob1), Reg(AX)}
AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)) {Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)) {Pseudo(glob1)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.172)) {Pseudo(glob_fourteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob1), Reg(AX)}
AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.169)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Reg(AX)}
AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.166)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
Call(check_one_double) {Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Reg(AX)}
AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.163)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Reg(AX)}
AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.160)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Reg(AX)}
AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.157)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Reg(AX), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.154)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Reg(AX), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.151)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Reg(AX), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.148)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Reg(AX), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.145)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Reg(AX), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.142)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Reg(AX), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.139)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Reg(AX), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.136)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Reg(AX), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.133)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Reg(AX), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(incr_glob1) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)) {Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(glob_two), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.128), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.128), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.126), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.126), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.124), Pseudo(tmp.110), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.124), Pseudo(tmp.110), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.122), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.122), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)) {Pseudo(tmp.120), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)) {Pseudo(tmp.120), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)) {Pseudo(tmp.108), Pseudo(tmp.118), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)) {Pseudo(tmp.108), Pseudo(tmp.118), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.116), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.116), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)) {Pseudo(tmp.111), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)) {Pseudo(tmp.111), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.109)}
AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.109)}
AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)) {Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)) {Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.104), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.104), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)) {Pseudo(glob10), Pseudo(tmp.102), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)) {Pseudo(glob10), Pseudo(tmp.102), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101)}
AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob2), Pseudo(glob10), Pseudo(glob0), Pseudo(glob1)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DI)
        Reg(R12d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(R12d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Pseudo(tmp.133)
    Pseudo(tmp.133) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.136)
    Pseudo(tmp.136) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.139)
    Pseudo(tmp.139) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.142)
    Pseudo(tmp.142) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.145)
    Pseudo(tmp.145) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.148)
    Pseudo(tmp.148) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.151)
    Pseudo(tmp.151) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.154)
    Pseudo(tmp.154) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.157)
    Pseudo(tmp.157) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.160)
    Pseudo(tmp.160) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.163)
    Pseudo(tmp.163) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.166)
    Pseudo(tmp.166) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.169)
    Pseudo(tmp.169) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.172)
    Pseudo(tmp.172) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.175)
    Pseudo(tmp.175) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.178)
    Pseudo(tmp.178) spillCost: 0.0 color: None pruned: False
COALESCING Pseudo(tmp.133) INTO Reg(AX)
COALESCING Pseudo(tmp.136) INTO Reg(AX)
COALESCING Pseudo(tmp.139) INTO Reg(AX)
COALESCING Pseudo(tmp.142) INTO Reg(AX)
COALESCING Pseudo(tmp.145) INTO Reg(AX)
COALESCING Pseudo(tmp.148) INTO Reg(AX)
COALESCING Pseudo(tmp.151) INTO Reg(AX)
COALESCING Pseudo(tmp.154) INTO Reg(AX)
COALESCING Pseudo(tmp.157) INTO Reg(AX)
COALESCING Pseudo(tmp.160) INTO Reg(AX)
COALESCING Pseudo(tmp.163) INTO Reg(AX)
COALESCING Pseudo(tmp.166) INTO Reg(AX)
COALESCING Pseudo(tmp.169) INTO Reg(AX)
COALESCING Pseudo(tmp.172) INTO Reg(AX)
COALESCING Pseudo(tmp.175) INTO Reg(AX)
COALESCING Pseudo(tmp.178) INTO Reg(AX)
-----------Building INTEGER interference graph.------------------
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), Call(incr_glob1), AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), set()), (AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), set()), (AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), set()), (AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), set()), (AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), set()), (AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), set()), (AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), set()), (AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), set()), (AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), set()), (AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), set()), (AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), set()), (AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), set()), (AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), set()), (AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), set()), (AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), set()), (AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), set()), (AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), set()), (AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), set()), (AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), set()), (AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), set()), (AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), set()), (AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), set()), (AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), set()), (AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), set()), (AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), set()), (AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), set()), (AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), set()), (AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), set()), (AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), set()), (AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), set()), (AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), set()), (AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), set()), (AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), set()), (AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), set()), (AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), set()), (AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), set()), (AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), set()), (AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), set()), (AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), set()), (AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), set()), (AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), set()), (AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), set()), (AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), set()), (AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), set()), (AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), set()), (Call(incr_glob1), set()), (AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Call(check_one_double) set()
AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)) set()
AssType: Double Mov(Pseudo(glob1), Reg(XMM0)) set()
Call(check_one_double) {Pseudo(glob1)}
AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)) {Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)) {Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(incr_glob1) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)) {Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(glob_two), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.128), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.128), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.126), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.126), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.124), Pseudo(tmp.110), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.124), Pseudo(tmp.110), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.122), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.122), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)) {Pseudo(tmp.120), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)) {Pseudo(tmp.120), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)) {Pseudo(tmp.108), Pseudo(tmp.118), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)) {Pseudo(tmp.108), Pseudo(tmp.118), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.116), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.116), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)) {Pseudo(tmp.111), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)) {Pseudo(tmp.111), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.109)}
AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.109)}
AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)) {Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)) {Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.104), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.104), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)) {Pseudo(glob10), Pseudo(tmp.102), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)) {Pseudo(glob10), Pseudo(tmp.102), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101)}
AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob2), Pseudo(glob10), Pseudo(glob0), Pseudo(glob1)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DI)
        Reg(R12d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(R12d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bebfe30>, <RegisterAllocation.Node object at 0x7f058bebfef0>, <RegisterAllocation.Node object at 0x7f058bebffe0>, <RegisterAllocation.Node object at 0x7f058bec8110>, <RegisterAllocation.Node object at 0x7f058bec8200>, <RegisterAllocation.Node object at 0x7f058bec82f0>, <RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bebfef0>, <RegisterAllocation.Node object at 0x7f058bebffe0>, <RegisterAllocation.Node object at 0x7f058bec8110>, <RegisterAllocation.Node object at 0x7f058bec8200>, <RegisterAllocation.Node object at 0x7f058bec82f0>, <RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bebffe0>, <RegisterAllocation.Node object at 0x7f058bec8110>, <RegisterAllocation.Node object at 0x7f058bec8200>, <RegisterAllocation.Node object at 0x7f058bec82f0>, <RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec8110>, <RegisterAllocation.Node object at 0x7f058bec8200>, <RegisterAllocation.Node object at 0x7f058bec82f0>, <RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec8200>, <RegisterAllocation.Node object at 0x7f058bec82f0>, <RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec82f0>, <RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec83e0>, <RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec84d0>, <RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec85c0>, <RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec86b0>, <RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec87a0>, <RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec8890>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for target: set()
------------------REGISTER INTEGER MAP.--------------------
{}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))                    AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))
AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101))        AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101))
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102))                   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102))
AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102))   AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102))
AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103))                  AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103))
AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103))         AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103))
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104))                   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104))
AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104))   AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104))
AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105))                  AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105))
AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105))         AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105))
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106))
AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106))        AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106))
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107))                    AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107))
AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108))                  AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108))
AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108))          AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108))
AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109))                 AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109))
AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109))            AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109))
AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110))                  AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110))
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110))           AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110))
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111))                   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111))
AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111))   AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111))
AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112))                  AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112))
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112))           AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112))
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113))                   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113))
AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113))         AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113))
AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114))                    AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114))
AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115))                  AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115))
AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115))    AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115))
AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116))                 AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116))
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116))           AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116))
AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117))                  AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117))
AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117))         AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117))
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118))
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118))           AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118))
AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119))                  AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119))
AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119))        AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119))
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120))                    AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120))
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120))            AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120))
AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121))                  AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121))
AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121))        AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121))
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122))
AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122))         AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122))
AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123))                  AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123))
AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123))        AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123))
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124))                   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124))
AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124))         AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124))
AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125))                  AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125))
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125))           AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125))
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126))                    AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126))
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126))            AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126))
AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127))                  AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127))
AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127))        AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127))
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128))
AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128))        AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128))
AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129))                  AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129))
AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129))         AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129))
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero))                AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero))
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130))
AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130))        AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130))
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one))                 AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one))
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two))                 AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two))
AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three))               AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three))
AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four))                AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four))
AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five))                AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five))
AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six))                 AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six))
AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven))               AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven))
AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight))               AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight))
AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine))                AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine))
AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten))                 AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten))
AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven))              AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven))
AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve))              AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve))
AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen))            AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen))
AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen))            AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen))
Call(incr_glob1)                                                       Call(incr_glob1)
AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0))                      AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0))
AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Double Mov(Pseudo(glob_one), Reg(XMM0))                       AssType: Longword Mov(Reg(AX), Pseudo(tmp.133))
AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_one), Reg(XMM0))
Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_two), Reg(XMM0))                       Call(check_one_double)
AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1))                       AssType: Longword Mov(Reg(AX), Pseudo(tmp.136))
Call(check_one_double)                                                 AssType: Double Mov(Pseudo(glob_two), Reg(XMM0))
AssType: Double Mov(Pseudo(glob_three), Reg(XMM0))                     AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1))
AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1))                       Call(check_one_double)
Call(check_one_double)                                                 AssType: Longword Mov(Reg(AX), Pseudo(tmp.139))
AssType: Double Mov(Pseudo(glob_four), Reg(XMM0))                      AssType: Double Mov(Pseudo(glob_three), Reg(XMM0))
AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Double Mov(Pseudo(glob_five), Reg(XMM0))                      AssType: Longword Mov(Reg(AX), Pseudo(tmp.142))
AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_four), Reg(XMM0))
Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_six), Reg(XMM0))                       Call(check_one_double)
AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1))                       AssType: Longword Mov(Reg(AX), Pseudo(tmp.145))
Call(check_one_double)                                                 AssType: Double Mov(Pseudo(glob_five), Reg(XMM0))
AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0))                     AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1))
AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1))                       Call(check_one_double)
Call(check_one_double)                                                 AssType: Longword Mov(Reg(AX), Pseudo(tmp.148))
AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0))                     AssType: Double Mov(Pseudo(glob_six), Reg(XMM0))
AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0))                      AssType: Longword Mov(Reg(AX), Pseudo(tmp.151))
AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0))
Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0))                       Call(check_one_double)
AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1))                       AssType: Longword Mov(Reg(AX), Pseudo(tmp.154))
Call(check_one_double)                                                 AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0))
AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0))                    AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1))
AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1))                       Call(check_one_double)
Call(check_one_double)                                                 AssType: Longword Mov(Reg(AX), Pseudo(tmp.157))
AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0))                    AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0))
AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1))
Call(check_one_double)                                                 Call(check_one_double)
AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0))                  AssType: Longword Mov(Reg(AX), Pseudo(tmp.160))
AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0))
Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0))                  Call(check_one_double)
AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1))                       AssType: Longword Mov(Reg(AX), Pseudo(tmp.163))
Call(check_one_double)                                                 AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0))
AssType: Double Mov(Pseudo(glob1), Reg(XMM0))                          AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1))
AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1))                       Call(check_one_double)
Call(check_one_double)                                                 AssType: Longword Mov(Reg(AX), Pseudo(tmp.166))
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0))
ret                                                                    AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1))
-------------------START COALESCING DOUBLE.----------------------
-----------Building DOUBLE interference graph.------------------
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), Call(incr_glob1), AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), set()), (AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)), set()), (AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)), set()), (AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)), set()), (AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)), set()), (AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)), set()), (AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)), set()), (AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)), set()), (AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), set()), (AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), set()), (AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)), set()), (AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)), set()), (AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)), set()), (AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)), set()), (AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), set()), (AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)), set()), (AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), set()), (AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)), set()), (AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)), set()), (AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)), set()), (AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)), set()), (AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)), set()), (AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)), set()), (AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)), set()), (AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)), set()), (AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)), set()), (AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)), set()), (AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)), set()), (AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)), set()), (AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)), set()), (AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)), set()), (AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)), set()), (AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)), set()), (AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), set()), (AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), set()), (AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), set()), (AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), set()), (AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), set()), (AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), set()), (AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), set()), (AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), set()), (AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), set()), (AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), set()), (AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), set()), (AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), set()), (AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), set()), (AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), set()), (AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), set()), (Call(incr_glob1), set()), (AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Call(check_one_double) set()
AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)) set()
AssType: Double Mov(Pseudo(glob1), Reg(XMM0)) set()
Call(check_one_double) {Pseudo(glob1)}
AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)) {Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)) {Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(incr_glob1) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)) {Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(glob_two), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.128), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.128), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.126), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.126), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.124), Pseudo(tmp.110), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.124), Pseudo(tmp.110), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.122), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.122), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120)) {Pseudo(tmp.120), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120)) {Pseudo(tmp.120), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118)) {Pseudo(tmp.108), Pseudo(tmp.118), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118)) {Pseudo(tmp.108), Pseudo(tmp.118), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.116), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.116), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.113), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111)) {Pseudo(tmp.111), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111)) {Pseudo(tmp.111), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.109)}
AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.109)}
AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)) {Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)) {Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.106), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.104), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.104), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102)) {Pseudo(glob10), Pseudo(tmp.102), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102)) {Pseudo(glob10), Pseudo(tmp.102), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101)}
AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob2), Pseudo(glob10), Pseudo(glob0), Pseudo(glob1)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM7)
        Reg(XMM0)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM12)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM13)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Pseudo(tmp.101)
    Pseudo(tmp.101) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.102)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.122)
        Pseudo(tmp.113)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.116)
        Pseudo(tmp.110)
        Pseudo(tmp.106)
        Pseudo(tmp.128)
        Pseudo(tmp.109)
        Pseudo(tmp.111)
        Pseudo(tmp.129)
        Pseudo(tmp.104)
        Pseudo(tmp.112)
        Pseudo(tmp.125)
Pseudo(tmp.102)
    Pseudo(tmp.102) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.101)
Pseudo(tmp.103)
    Pseudo(tmp.103) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.107)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.113)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.116)
        Pseudo(tmp.110)
        Pseudo(tmp.106)
        Pseudo(tmp.128)
        Pseudo(tmp.109)
        Pseudo(tmp.111)
        Pseudo(tmp.129)
        Pseudo(tmp.104)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.104)
    Pseudo(tmp.104) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.101)
        Pseudo(tmp.103)
Pseudo(tmp.105)
    Pseudo(tmp.105) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.113)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.116)
        Pseudo(tmp.110)
        Pseudo(tmp.106)
        Pseudo(tmp.128)
        Pseudo(tmp.109)
        Pseudo(tmp.111)
        Pseudo(tmp.129)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.106)
    Pseudo(tmp.106) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.107)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
        Pseudo(tmp.103)
Pseudo(tmp.107)
    Pseudo(tmp.107) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.103)
        Pseudo(tmp.101)
        Pseudo(tmp.106)
        Pseudo(tmp.105)
Pseudo(tmp.108)
    Pseudo(tmp.108) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.113)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.116)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.109)
        Pseudo(tmp.111)
        Pseudo(tmp.129)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.109)
    Pseudo(tmp.109) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.101)
        Pseudo(tmp.105)
        Pseudo(tmp.108)
        Pseudo(tmp.103)
Pseudo(tmp.110)
    Pseudo(tmp.110) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.113)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.116)
        Pseudo(tmp.128)
        Pseudo(tmp.111)
        Pseudo(tmp.129)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.111)
    Pseudo(tmp.111) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.103)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.112)
    Pseudo(tmp.112) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.113)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.116)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.129)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.113)
    Pseudo(tmp.113) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.103)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.114)
    Pseudo(tmp.114) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.103)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.113)
        Pseudo(tmp.105)
Pseudo(tmp.115)
    Pseudo(tmp.115) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.119)
        Pseudo(tmp.116)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.129)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.116)
    Pseudo(tmp.116) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.103)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.117)
    Pseudo(tmp.117) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
        Pseudo(tmp.118)
        Pseudo(tmp.126)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.129)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.118)
    Pseudo(tmp.118) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.119)
    Pseudo(tmp.119) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.120)
        Pseudo(tmp.108)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.127)
        Pseudo(tmp.103)
        Pseudo(tmp.122)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
        Pseudo(tmp.126)
        Pseudo(tmp.117)
        Pseudo(tmp.115)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.129)
        Pseudo(tmp.112)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.120)
    Pseudo(tmp.120) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.121)
    Pseudo(tmp.121) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.126)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.122)
        Pseudo(tmp.115)
        Pseudo(tmp.112)
        Pseudo(tmp.123)
        Pseudo(tmp.124)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
Pseudo(tmp.122)
    Pseudo(tmp.122) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.123)
    Pseudo(tmp.123) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.126)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.112)
        Pseudo(tmp.124)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
Pseudo(tmp.124)
    Pseudo(tmp.124) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.125)
    Pseudo(tmp.125) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.126)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.101)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
Pseudo(tmp.126)
    Pseudo(tmp.126) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.127)
    Pseudo(tmp.127) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.128)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.130)
        Pseudo(tmp.105)
Pseudo(tmp.128)
    Pseudo(tmp.128) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.129)
    Pseudo(tmp.129) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.130)
    Pseudo(tmp.130) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
COALESCING Pseudo(tmp.102) INTO Pseudo(tmp.103)
COALESCING Pseudo(tmp.104) INTO Pseudo(tmp.105)
COALESCING Pseudo(tmp.106) INTO Pseudo(tmp.108)
COALESCING Pseudo(tmp.109) INTO Pseudo(tmp.110)
COALESCING Pseudo(tmp.111) INTO Pseudo(tmp.112)
COALESCING Pseudo(tmp.113) INTO Pseudo(tmp.115)
COALESCING Pseudo(tmp.116) INTO Pseudo(tmp.117)
COALESCING Pseudo(tmp.118) INTO Pseudo(tmp.119)
COALESCING Pseudo(tmp.120) INTO Pseudo(tmp.121)
COALESCING Pseudo(tmp.122) INTO Pseudo(tmp.123)
COALESCING Pseudo(tmp.124) INTO Pseudo(tmp.125)
COALESCING Pseudo(tmp.126) INTO Pseudo(tmp.127)
COALESCING Pseudo(tmp.128) INTO Pseudo(tmp.129)
-----------Building DOUBLE interference graph.------------------
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.103)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.103)), AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.105)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.105)), AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.108)), AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.108)), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.110)), AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.110)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.112)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.112)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.115)), AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.115)), AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.117)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.117)), AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.119)), AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.119)), AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.121)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.121)), AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.123)), AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.123)), AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.125)), AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.125)), AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.127)), AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.127)), AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.129)), AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.129)), AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), Call(incr_glob1), AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)), set()), (AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.103)), set()), (AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.103)), set()), (AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.105)), set()), (AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.105)), set()), (AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.108)), set()), (AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.108)), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)), set()), (AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.110)), set()), (AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.110)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.112)), set()), (AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.112)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.115)), set()), (AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.115)), set()), (AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)), set()), (AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)), set()), (AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.117)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.117)), set()), (AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.119)), set()), (AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.119)), set()), (AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.121)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.121)), set()), (AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.123)), set()), (AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.123)), set()), (AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)), set()), (AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.125)), set()), (AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.125)), set()), (AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)), set()), (AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.127)), set()), (AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.127)), set()), (AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.129)), set()), (AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.129)), set()), (AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)), set()), (AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)), set()), (AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)), set()), (AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)), set()), (AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)), set()), (AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)), set()), (AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)), set()), (AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)), set()), (AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)), set()), (AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)), set()), (AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)), set()), (AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)), set()), (AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)), set()), (AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)), set()), (AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)), set()), (AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)), set()), (AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)), set()), (Call(incr_glob1), set()), (AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Double Mov(Pseudo(glob1), Reg(XMM0)), set()), (AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), set()), (Call(check_one_double), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Call(check_one_double) set()
AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)) set()
AssType: Double Mov(Pseudo(glob1), Reg(XMM0)) set()
Call(check_one_double) {Pseudo(glob1)}
AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)) {Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0)) {Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1)}
Call(check_one_double) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0)) {Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob1), Pseudo(glob_twelve)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob1), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_six), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_five), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_four), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_three), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_two), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_one), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(check_one_double) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0)) {Pseudo(glob_eleven), Pseudo(glob_twelve), Pseudo(glob_ten), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
Call(incr_glob1) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_fourteen), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_thirteen), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_twelve), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven)) {Pseudo(glob_eleven), Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(glob_eight), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(glob_four), Pseudo(tmp.130), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten)) {Pseudo(glob_zero), Pseudo(glob_ten), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(glob_nine)}
AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob_eight), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven)) {Pseudo(glob_zero), Pseudo(glob_five), Pseudo(glob_seven), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(glob_six), Pseudo(tmp.121), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(glob_five), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(glob_four), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three)) {Pseudo(glob_zero), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(glob_three), Pseudo(glob_two), Pseudo(tmp.130), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(glob_two), Pseudo(tmp.125)}
AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(glob_one), Pseudo(tmp.129), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.130), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero)) {Pseudo(glob_zero), Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.129)) {Pseudo(tmp.108), Pseudo(tmp.117), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.110), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.129), Pseudo(tmp.103), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.127)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.127), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.125)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.125), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.123)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.123), Pseudo(tmp.112), Pseudo(tmp.110), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.121)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.121), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.119)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(tmp.119), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.117)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.117), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114)) {Pseudo(tmp.114), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.115)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.115)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.115), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.112)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(tmp.112), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.110)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.110), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108)) {Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107)) {Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.103), Pseudo(tmp.107), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101), Pseudo(tmp.105)}
AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.108)) {Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.108)) {Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.108), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.105)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.105), Pseudo(tmp.103)}
AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.103)) {Pseudo(glob10), Pseudo(glob1), Pseudo(glob2), Pseudo(tmp.101), Pseudo(tmp.103)}
AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101)) {Pseudo(glob2), Pseudo(glob10), Pseudo(glob1), Pseudo(tmp.101)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob2), Pseudo(glob10), Pseudo(glob0), Pseudo(glob1)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM7)
        Reg(XMM0)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM12)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM13)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Pseudo(tmp.101)
    Pseudo(tmp.101) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.110)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.103)
    Pseudo(tmp.103) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.107)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.105)
    Pseudo(tmp.105) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
Pseudo(tmp.108)
    Pseudo(tmp.108) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.107)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.107)
    Pseudo(tmp.107) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.101)
        Pseudo(tmp.105)
        Pseudo(tmp.108)
        Pseudo(tmp.103)
Pseudo(tmp.110)
    Pseudo(tmp.110) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.112)
    Pseudo(tmp.112) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.130)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.115)
    Pseudo(tmp.115) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.114)
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.130)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.114)
    Pseudo(tmp.114) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.103)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.117)
    Pseudo(tmp.117) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.119)
    Pseudo(tmp.119) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.112)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.121)
    Pseudo(tmp.121) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.112)
        Pseudo(tmp.123)
        Pseudo(tmp.130)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.123)
    Pseudo(tmp.123) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.112)
        Pseudo(tmp.130)
        Pseudo(tmp.110)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.125)
    Pseudo(tmp.125) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.105)
Pseudo(tmp.127)
    Pseudo(tmp.127) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.121)
        Pseudo(tmp.115)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.129)
    Pseudo(tmp.129) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.130)
        Pseudo(tmp.101)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
Pseudo(tmp.130)
    Pseudo(tmp.130) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.108)
        Pseudo(tmp.127)
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.103)
        Pseudo(tmp.119)
        Pseudo(tmp.115)
        Pseudo(tmp.121)
        Pseudo(tmp.123)
        Pseudo(tmp.112)
        Pseudo(tmp.110)
        Pseudo(tmp.125)
        Pseudo(tmp.105)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
Pseudo(tmp.101) Pseudo(tmp.101) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.103) Pseudo(tmp.103) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.105) Pseudo(tmp.105) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.108) Pseudo(tmp.108) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.107) Pseudo(tmp.107) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.110) Pseudo(tmp.110) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.112) Pseudo(tmp.112) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.115) Pseudo(tmp.115) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.114) Pseudo(tmp.114) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.117) Pseudo(tmp.117) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.119) Pseudo(tmp.119) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.121) Pseudo(tmp.121) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.123) Pseudo(tmp.123) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.125) Pseudo(tmp.125) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.127) Pseudo(tmp.127) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.129) Pseudo(tmp.129) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.130) Pseudo(tmp.130) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec08f0>, <RegisterAllocation.Node object at 0x7f058bec09e0>, <RegisterAllocation.Node object at 0x7f058bec0ad0>, <RegisterAllocation.Node object at 0x7f058bec0bc0>, <RegisterAllocation.Node object at 0x7f058bec0cb0>, <RegisterAllocation.Node object at 0x7f058bec0da0>, <RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec09e0>, <RegisterAllocation.Node object at 0x7f058bec0ad0>, <RegisterAllocation.Node object at 0x7f058bec0bc0>, <RegisterAllocation.Node object at 0x7f058bec0cb0>, <RegisterAllocation.Node object at 0x7f058bec0da0>, <RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0ad0>, <RegisterAllocation.Node object at 0x7f058bec0bc0>, <RegisterAllocation.Node object at 0x7f058bec0cb0>, <RegisterAllocation.Node object at 0x7f058bec0da0>, <RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0bc0>, <RegisterAllocation.Node object at 0x7f058bec0cb0>, <RegisterAllocation.Node object at 0x7f058bec0da0>, <RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0cb0>, <RegisterAllocation.Node object at 0x7f058bec0da0>, <RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0da0>, <RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0e90>, <RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0f80>, <RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1070>, <RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1160>, <RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1250>, <RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1340>, <RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1430>, <RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1520>, <RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5b50>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5c10>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5d60>, <RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5a90>, <RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5a60>, <RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5ac0>, <RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5af0>, <RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5b20>, <RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5b80>, <RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5bb0>, <RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5be0>, <RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5c40>, <RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5c70>, <RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5ca0>, <RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5cd0>, <RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5d00>, <RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed5d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
Pseudo(tmp.101) Pseudo(tmp.101) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.103) Pseudo(tmp.103) spillCost: 4.0 color: 14 pruned: False
Pseudo(tmp.105) Pseudo(tmp.105) spillCost: 4.0 color: 13 pruned: False
Pseudo(tmp.108) Pseudo(tmp.108) spillCost: 4.0 color: 12 pruned: False
Pseudo(tmp.107) Pseudo(tmp.107) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.110) Pseudo(tmp.110) spillCost: 4.0 color: 11 pruned: False
Pseudo(tmp.112) Pseudo(tmp.112) spillCost: 4.0 color: 10 pruned: False
Pseudo(tmp.115) Pseudo(tmp.115) spillCost: 4.0 color: 9 pruned: False
Pseudo(tmp.114) Pseudo(tmp.114) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.117) Pseudo(tmp.117) spillCost: 4.0 color: 8 pruned: False
Pseudo(tmp.119) Pseudo(tmp.119) spillCost: 4.0 color: 7 pruned: False
Pseudo(tmp.121) Pseudo(tmp.121) spillCost: 4.0 color: 6 pruned: False
Pseudo(tmp.123) Pseudo(tmp.123) spillCost: 4.0 color: 5 pruned: False
Pseudo(tmp.125) Pseudo(tmp.125) spillCost: 4.0 color: 4 pruned: False
Pseudo(tmp.127) Pseudo(tmp.127) spillCost: 4.0 color: 3 pruned: False
Pseudo(tmp.129) Pseudo(tmp.129) spillCost: 4.0 color: 2 pruned: False
Pseudo(tmp.130) Pseudo(tmp.130) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for target: set()
------------------REGISTER DOUBLE MAP.--------------------
{Pseudo(tmp.101): Reg(XMM13), Pseudo(tmp.103): Reg(XMM0), Pseudo(tmp.105): Reg(XMM1), Pseudo(tmp.108): Reg(XMM2), Pseudo(tmp.107): Reg(XMM12), Pseudo(tmp.110): Reg(XMM3), Pseudo(tmp.112): Reg(XMM4), Pseudo(tmp.115): Reg(XMM5), Pseudo(tmp.114): Reg(XMM12), Pseudo(tmp.117): Reg(XMM6), Pseudo(tmp.119): Reg(XMM7), Pseudo(tmp.121): Reg(XMM8), Pseudo(tmp.123): Reg(XMM9), Pseudo(tmp.125): Reg(XMM10), Pseudo(tmp.127): Reg(XMM11), Pseudo(tmp.129): Reg(XMM12), Pseudo(tmp.130): Reg(XMM13)}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Double Mov(Pseudo(glob0), Reg(XMM13))                         AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))                    AssType: Double Mov(Pseudo(glob0), Pseudo(tmp.101))
AssType: Double Binary(Mult, Data(tmp.180, 0), Reg(XMM13))             AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101))        AssType: Double Binary(Mult, Data(tmp.180, 0), Pseudo(tmp.101))
AssType: Double Mov(Pseudo(glob10), Reg(XMM0))                         AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.103))                   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.102))
AssType: Double Binary(DivDouble, Data(tmp.181, 0), Reg(XMM0))         AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.103))   AssType: Double Binary(DivDouble, Data(tmp.181, 0), Pseudo(tmp.102))
AssType: Double Binary(Sub, Data(tmp.182, 0), Reg(XMM0))               AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103))         AssType: Double Mov(Pseudo(tmp.102), Pseudo(tmp.103))
AssType: Double Mov(Pseudo(glob10), Reg(XMM1))                         AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.105))                   AssType: Double Binary(Sub, Data(tmp.182, 0), Pseudo(tmp.103))
AssType: Double Binary(DivDouble, Data(tmp.183, 0), Reg(XMM1))         AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.105))   AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.104))
AssType: Double Binary(Sub, Data(tmp.184, 0), Reg(XMM1))               AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105))         AssType: Double Binary(DivDouble, Data(tmp.183, 0), Pseudo(tmp.104))
AssType: Double Mov(Pseudo(glob2), Reg(XMM2))                          AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.108))                    AssType: Double Mov(Pseudo(tmp.104), Pseudo(tmp.105))
AssType: Double Binary(Mult, Data(tmp.185, 0), Reg(XMM2))              AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.108))        AssType: Double Binary(Sub, Data(tmp.184, 0), Pseudo(tmp.105))
AssType: Longword Cvtsi2sd(Imm(1), Reg(XMM12))                         AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.106))
AssType: Double Binary(Sub, Reg(XMM12), Reg(XMM2))                     AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108))          AssType: Double Binary(Mult, Data(tmp.185, 0), Pseudo(tmp.106))
AssType: Double Mov(Data(tmp.186, 0), Reg(XMM3))                       AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.110))                 AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.107))
AssType: Double Binary(Sub, Pseudo(glob2), Reg(XMM3))                  AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.110))            AssType: Double Mov(Pseudo(tmp.106), Pseudo(tmp.108))
AssType: Double Binary(Mult, Pseudo(glob1), Reg(XMM3))                 AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110))           AssType: Double Binary(Sub, Pseudo(tmp.107), Pseudo(tmp.108))
AssType: Double Mov(Pseudo(glob10), Reg(XMM4))                         AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.112))                   AssType: Double Mov(Data(tmp.186, 0), Pseudo(tmp.109))
AssType: Double Binary(DivDouble, Data(tmp.187, 0), Reg(XMM4))         AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.112))   AssType: Double Binary(Sub, Pseudo(glob2), Pseudo(tmp.109))
AssType: Double Binary(Mult, Pseudo(glob1), Reg(XMM4))                 AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112))           AssType: Double Mov(Pseudo(tmp.109), Pseudo(tmp.110))
AssType: Double Mov(Pseudo(glob10), Reg(XMM5))                         AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.115))                   AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.110))
AssType: Double Binary(Add, Data(tmp.188, 0), Reg(XMM5))               AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.115))         AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.111))
AssType: Longword Cvtsi2sd(Imm(2), Reg(XMM12))                         AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114))                    AssType: Double Binary(DivDouble, Data(tmp.187, 0), Pseudo(tmp.111))
AssType: Double Binary(DivDouble, Reg(XMM12), Reg(XMM5))               AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115))    AssType: Double Mov(Pseudo(tmp.111), Pseudo(tmp.112))
AssType: Double Mov(Data(tmp.189, 0), Reg(XMM6))                       AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.117))                 AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.112))
AssType: Double Binary(Mult, Pseudo(glob2), Reg(XMM6))                 AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.117))           AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.113))
AssType: Double Binary(Add, Data(tmp.190, 0), Reg(XMM6))               AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117))         AssType: Double Binary(Add, Data(tmp.188, 0), Pseudo(tmp.113))
AssType: Double Mov(Pseudo(glob2), Reg(XMM7))                          AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.119))                    AssType: Longword Cvtsi2sd(Imm(2), Pseudo(tmp.114))
AssType: Double Binary(Mult, Pseudo(glob2), Reg(XMM7))                 AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.119))           AssType: Double Mov(Pseudo(tmp.113), Pseudo(tmp.115))
AssType: Double Binary(Mult, Data(tmp.191, 0), Reg(XMM7))              AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119))        AssType: Double Binary(DivDouble, Pseudo(tmp.114), Pseudo(tmp.115))
AssType: Double Mov(Pseudo(glob1), Reg(XMM8))                          AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.121))                    AssType: Double Mov(Data(tmp.189, 0), Pseudo(tmp.116))
AssType: Double Binary(Add, Pseudo(glob2), Reg(XMM8))                  AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.121))            AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.116))
AssType: Double Binary(Mult, Data(tmp.192, 0), Reg(XMM8))              AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121))        AssType: Double Mov(Pseudo(tmp.116), Pseudo(tmp.117))
AssType: Double Mov(Pseudo(glob2), Reg(XMM9))                          AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.123))                    AssType: Double Binary(Add, Data(tmp.190, 0), Pseudo(tmp.117))
AssType: Double Binary(Add, Data(tmp.193, 0), Reg(XMM9))               AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.123))         AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.118))
AssType: Double Binary(Mult, Data(tmp.194, 0), Reg(XMM9))              AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123))        AssType: Double Binary(Mult, Pseudo(glob2), Pseudo(tmp.118))
AssType: Double Mov(Pseudo(glob10), Reg(XMM10))                        AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.125))                   AssType: Double Mov(Pseudo(tmp.118), Pseudo(tmp.119))
AssType: Double Binary(Add, Data(tmp.195, 0), Reg(XMM10))              AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.125))         AssType: Double Binary(Mult, Data(tmp.191, 0), Pseudo(tmp.119))
AssType: Double Binary(Mult, Pseudo(glob1), Reg(XMM10))                AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125))           AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.120))
AssType: Double Mov(Pseudo(glob1), Reg(XMM11))                         AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.127))                    AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.120))
AssType: Double Binary(Add, Pseudo(glob2), Reg(XMM11))                 AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.127))            AssType: Double Mov(Pseudo(tmp.120), Pseudo(tmp.121))
AssType: Double Binary(Mult, Data(tmp.196, 0), Reg(XMM11))             AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127))        AssType: Double Binary(Mult, Data(tmp.192, 0), Pseudo(tmp.121))
AssType: Double Mov(Pseudo(glob2), Reg(XMM12))                         AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.129))                    AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.122))
AssType: Double Binary(Mult, Data(tmp.197, 0), Reg(XMM12))             AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.129))        AssType: Double Binary(Add, Data(tmp.193, 0), Pseudo(tmp.122))
AssType: Double Binary(Add, Data(tmp.198, 0), Reg(XMM12))              AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129))         AssType: Double Mov(Pseudo(tmp.122), Pseudo(tmp.123))
AssType: Double Mov(Reg(XMM13), Pseudo(glob_zero))                     AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero))                AssType: Double Binary(Mult, Data(tmp.194, 0), Pseudo(tmp.123))
AssType: Double Mov(Pseudo(glob2), Reg(XMM13))                         AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130))                    AssType: Double Mov(Pseudo(glob10), Pseudo(tmp.124))
AssType: Double Binary(Mult, Data(tmp.199, 0), Reg(XMM13))             AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130))        AssType: Double Binary(Add, Data(tmp.195, 0), Pseudo(tmp.124))
AssType: Double Mov(Reg(XMM0), Pseudo(glob_one))                       AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one))                 AssType: Double Mov(Pseudo(tmp.124), Pseudo(tmp.125))
AssType: Double Mov(Reg(XMM1), Pseudo(glob_two))                       AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two))                 AssType: Double Binary(Mult, Pseudo(glob1), Pseudo(tmp.125))
AssType: Double Mov(Reg(XMM2), Pseudo(glob_three))                     AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three))               AssType: Double Mov(Pseudo(glob1), Pseudo(tmp.126))
AssType: Double Mov(Reg(XMM3), Pseudo(glob_four))                      AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four))                AssType: Double Binary(Add, Pseudo(glob2), Pseudo(tmp.126))
AssType: Double Mov(Reg(XMM4), Pseudo(glob_five))                      AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five))                AssType: Double Mov(Pseudo(tmp.126), Pseudo(tmp.127))
AssType: Double Mov(Reg(XMM5), Pseudo(glob_six))                       AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six))                 AssType: Double Binary(Mult, Data(tmp.196, 0), Pseudo(tmp.127))
AssType: Double Mov(Reg(XMM6), Pseudo(glob_seven))                     AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven))               AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.128))
AssType: Double Mov(Reg(XMM7), Pseudo(glob_eight))                     AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight))               AssType: Double Binary(Mult, Data(tmp.197, 0), Pseudo(tmp.128))
AssType: Double Mov(Reg(XMM8), Pseudo(glob_nine))                      AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine))                AssType: Double Mov(Pseudo(tmp.128), Pseudo(tmp.129))
AssType: Double Mov(Reg(XMM9), Pseudo(glob_ten))                       AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten))                 AssType: Double Binary(Add, Data(tmp.198, 0), Pseudo(tmp.129))
AssType: Double Mov(Reg(XMM10), Pseudo(glob_eleven))                   AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven))              AssType: Double Mov(Pseudo(tmp.101), Pseudo(glob_zero))
AssType: Double Mov(Reg(XMM11), Pseudo(glob_twelve))                   AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve))              AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.130))
AssType: Double Mov(Reg(XMM12), Pseudo(glob_thirteen))                 AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen))            AssType: Double Binary(Mult, Data(tmp.199, 0), Pseudo(tmp.130))
AssType: Double Mov(Reg(XMM13), Pseudo(glob_fourteen))                 AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen))            AssType: Double Mov(Pseudo(tmp.103), Pseudo(glob_one))
Call(incr_glob1)                                                       Call(incr_glob1)                                                       AssType: Double Mov(Pseudo(tmp.105), Pseudo(glob_two))
AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0))                      AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0))                      AssType: Double Mov(Pseudo(tmp.108), Pseudo(glob_three))
AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(tmp.110), Pseudo(glob_four))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Pseudo(tmp.112), Pseudo(glob_five))
AssType: Double Mov(Pseudo(glob_one), Reg(XMM0))                       AssType: Double Mov(Pseudo(glob_one), Reg(XMM0))                       AssType: Double Mov(Pseudo(tmp.115), Pseudo(glob_six))
AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(tmp.117), Pseudo(glob_seven))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Pseudo(tmp.119), Pseudo(glob_eight))
AssType: Double Mov(Pseudo(glob_two), Reg(XMM0))                       AssType: Double Mov(Pseudo(glob_two), Reg(XMM0))                       AssType: Double Mov(Pseudo(tmp.121), Pseudo(glob_nine))
AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(tmp.123), Pseudo(glob_ten))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Pseudo(tmp.125), Pseudo(glob_eleven))
AssType: Double Mov(Pseudo(glob_three), Reg(XMM0))                     AssType: Double Mov(Pseudo(glob_three), Reg(XMM0))                     AssType: Double Mov(Pseudo(tmp.127), Pseudo(glob_twelve))
AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(tmp.129), Pseudo(glob_thirteen))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Pseudo(tmp.130), Pseudo(glob_fourteen))
AssType: Double Mov(Pseudo(glob_four), Reg(XMM0))                      AssType: Double Mov(Pseudo(glob_four), Reg(XMM0))                      Call(incr_glob1)
AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_zero), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_five), Reg(XMM0))                      AssType: Double Mov(Pseudo(glob_five), Reg(XMM0))                      Call(check_one_double)
AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_one), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_six), Reg(XMM0))                       AssType: Double Mov(Pseudo(glob_six), Reg(XMM0))                       Call(check_one_double)
AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_two), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0))                     AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0))                     Call(check_one_double)
AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_three), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0))                     AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0))                     Call(check_one_double)
AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_four), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0))                      AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0))                      Call(check_one_double)
AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_five), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0))                       AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0))                       Call(check_one_double)
AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_six), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0))                    AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0))                    Call(check_one_double)
AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_seven), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0))                    AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0))                    Call(check_one_double)
AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_eight), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0))                  AssType: Double Mov(Pseudo(glob_thirteen), Reg(XMM0))                  Call(check_one_double)
AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_nine), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0))                  AssType: Double Mov(Pseudo(glob_fourteen), Reg(XMM0))                  Call(check_one_double)
AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_ten), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1))
AssType: Double Mov(Pseudo(glob1), Reg(XMM0))                          AssType: Double Mov(Pseudo(glob1), Reg(XMM0))                          Call(check_one_double)
AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1))                       AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1))                       AssType: Double Mov(Pseudo(glob_eleven), Reg(XMM0))
Call(check_one_double)                                                 Call(check_one_double)                                                 AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1))
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))                                 Call(check_one_double)
ret                                                                    ret                                                                    AssType: Double Mov(Pseudo(glob_twelve), Reg(XMM0))
REGISTER ALLOCATE FUNCTION main
-------------------START COALESCING INTEGER.----------------------
-----------Building INTEGER interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), AssType: Longword Mov(Reg(AX), Pseudo(tmp.179)), AssType: Longword Mov(Pseudo(tmp.179), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.179)), set()), (AssType: Longword Mov(Pseudo(tmp.179), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.179), Reg(AX)) {Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.179)) {Pseudo(tmp.179)}
Call(target) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DI)
        Reg(R12d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(R12d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Pseudo(tmp.179)
    Pseudo(tmp.179) spillCost: 0.0 color: None pruned: False
COALESCING Pseudo(tmp.179) INTO Reg(AX)
-----------Building INTEGER interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
Call(target) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DI)
        Reg(R12d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(SI)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(R12d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R15d)
        Reg(R9d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R15d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R14d)
        Reg(R9d)
        Reg(R13d)
        Reg(BX)
        Reg(AX)
        Reg(SI)
        Reg(R8d)
        Reg(CX)
        Reg(DX)
        Reg(DI)
        Reg(R12d)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed4080>, <RegisterAllocation.Node object at 0x7f058bec1490>, <RegisterAllocation.Node object at 0x7f058bec1550>, <RegisterAllocation.Node object at 0x7f058bec3a40>, <RegisterAllocation.Node object at 0x7f058bec3830>, <RegisterAllocation.Node object at 0x7f058bec3860>, <RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1490>, <RegisterAllocation.Node object at 0x7f058bec1550>, <RegisterAllocation.Node object at 0x7f058bec3a40>, <RegisterAllocation.Node object at 0x7f058bec3830>, <RegisterAllocation.Node object at 0x7f058bec3860>, <RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec1550>, <RegisterAllocation.Node object at 0x7f058bec3a40>, <RegisterAllocation.Node object at 0x7f058bec3830>, <RegisterAllocation.Node object at 0x7f058bec3860>, <RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec3a40>, <RegisterAllocation.Node object at 0x7f058bec3830>, <RegisterAllocation.Node object at 0x7f058bec3860>, <RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec3830>, <RegisterAllocation.Node object at 0x7f058bec3860>, <RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec3860>, <RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec35c0>, <RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec3410>, <RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec36e0>, <RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec3620>, <RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec0ef0>, <RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bec2f90>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for main: set()
------------------REGISTER INTEGER MAP.--------------------
{}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
Call(target)                                                           Call(target)
ret                                                                    AssType: Longword Mov(Reg(AX), Pseudo(tmp.179))
-------------------START COALESCING DOUBLE.----------------------
-----------Building DOUBLE interference graph.------------------
Call(target)
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(target), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(Call(target), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
Call(target) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM7)
        Reg(XMM0)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM12)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM13)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM1)
        Reg(XMM12)
        Reg(XMM9)
        Reg(XMM10)
        Reg(XMM6)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM7)
        Reg(XMM5)
        Reg(XMM3)
        Reg(XMM8)
        Reg(XMM4)
        Reg(XMM0)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be3b7d0>, <RegisterAllocation.Node object at 0x7f058be782c0>, <RegisterAllocation.Node object at 0x7f058be78170>, <RegisterAllocation.Node object at 0x7f058be78470>, <RegisterAllocation.Node object at 0x7f058be77f80>, <RegisterAllocation.Node object at 0x7f058be77b00>, <RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be782c0>, <RegisterAllocation.Node object at 0x7f058be78170>, <RegisterAllocation.Node object at 0x7f058be78470>, <RegisterAllocation.Node object at 0x7f058be77f80>, <RegisterAllocation.Node object at 0x7f058be77b00>, <RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be78170>, <RegisterAllocation.Node object at 0x7f058be78470>, <RegisterAllocation.Node object at 0x7f058be77f80>, <RegisterAllocation.Node object at 0x7f058be77b00>, <RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be78470>, <RegisterAllocation.Node object at 0x7f058be77f80>, <RegisterAllocation.Node object at 0x7f058be77b00>, <RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be77f80>, <RegisterAllocation.Node object at 0x7f058be77b00>, <RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be77b00>, <RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be768a0>, <RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be76c30>, <RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be77440>, <RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be77740>, <RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be76180>, <RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058be76900>, <RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed40b0>, <RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f058bed4950>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for main: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
Call(target)                                                           Call(target)                                                           Call(target)
ret                                                                    ret                                                                    ret
ASM Program: [Function incr_glob1 stackOffset: 0 global: True instructions:[AssType: Longword Cvtsi2sd(Imm(1), Reg(XMM12)), AssType: Double Mov(Data(glob1, 0), Reg(XMM13)), AssType: Double Binary(Add, Reg(XMM12), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Data(glob1, 0)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.180 = c_double(10.0), Static Constant: Alignment = 8 : tmp.181 = c_double(2.0), Static Constant: Alignment = 8 : tmp.182 = c_double(4.0), Static Constant: Alignment = 8 : tmp.183 = c_double(2.0), Static Constant: Alignment = 8 : tmp.184 = c_double(3.0), Static Constant: Alignment = 8 : tmp.185 = c_double(2.0), Static Constant: Alignment = 8 : tmp.186 = c_double(6.0), Static Constant: Alignment = 8 : tmp.187 = c_double(2.0), Static Constant: Alignment = 8 : tmp.188 = c_double(2.0), Static Constant: Alignment = 8 : tmp.189 = c_double(3.0), Static Constant: Alignment = 8 : tmp.190 = c_double(1.0), Static Constant: Alignment = 8 : tmp.191 = c_double(2.0), Static Constant: Alignment = 8 : tmp.192 = c_double(3.0), Static Constant: Alignment = 8 : tmp.193 = c_double(3.0), Static Constant: Alignment = 8 : tmp.194 = c_double(2.0), Static Constant: Alignment = 8 : tmp.195 = c_double(1.0), Static Constant: Alignment = 8 : tmp.196 = c_double(4.0), Static Constant: Alignment = 8 : tmp.197 = c_double(3.0), Static Constant: Alignment = 8 : tmp.198 = c_double(7.0), Static Constant: Alignment = 8 : tmp.199 = c_double(7.0), Static Constant: Alignment = 8 : tmp.200 = c_double(0.0), Static Constant: Alignment = 8 : tmp.201 = c_double(1.0), Static Constant: Alignment = 8 : tmp.202 = c_double(2.0), Static Constant: Alignment = 8 : tmp.203 = c_double(3.0), Static Constant: Alignment = 8 : tmp.204 = c_double(4.0), Static Constant: Alignment = 8 : tmp.205 = c_double(5.0), Static Constant: Alignment = 8 : tmp.206 = c_double(6.0), Static Constant: Alignment = 8 : tmp.207 = c_double(7.0), Static Constant: Alignment = 8 : tmp.208 = c_double(8.0), Static Constant: Alignment = 8 : tmp.209 = c_double(9.0), Static Constant: Alignment = 8 : tmp.210 = c_double(10.0), Static Constant: Alignment = 8 : tmp.211 = c_double(11.0), Static Constant: Alignment = 8 : tmp.212 = c_double(12.0), Static Constant: Alignment = 8 : tmp.213 = c_double(13.0), Static Constant: Alignment = 8 : tmp.214 = c_double(14.0), Static Constant: Alignment = 8 : tmp.215 = c_double(2.0), Function target stackOffset: 0 global: True instructions:[AssType: Double Mov(Data(glob0, 0), Reg(XMM13)), AssType: Double Binary(Mult, Data(tmp.180, 0), Reg(XMM13)), AssType: Double Mov(Data(glob10, 0), Reg(XMM0)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Reg(XMM0)), AssType: Double Binary(Sub, Data(tmp.182, 0), Reg(XMM0)), AssType: Double Mov(Data(glob10, 0), Reg(XMM1)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Reg(XMM1)), AssType: Double Binary(Sub, Data(tmp.184, 0), Reg(XMM1)), AssType: Double Mov(Data(glob2, 0), Reg(XMM2)), AssType: Double Binary(Mult, Data(tmp.185, 0), Reg(XMM2)), AssType: Longword Cvtsi2sd(Imm(1), Reg(XMM12)), AssType: Double Binary(Sub, Reg(XMM12), Reg(XMM2)), AssType: Double Mov(Data(tmp.186, 0), Reg(XMM3)), AssType: Double Binary(Sub, Data(glob2, 0), Reg(XMM3)), AssType: Double Binary(Mult, Data(glob1, 0), Reg(XMM3)), AssType: Double Mov(Data(glob10, 0), Reg(XMM4)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Reg(XMM4)), AssType: Double Binary(Mult, Data(glob1, 0), Reg(XMM4)), AssType: Double Mov(Data(glob10, 0), Reg(XMM5)), AssType: Double Binary(Add, Data(tmp.188, 0), Reg(XMM5)), AssType: Longword Cvtsi2sd(Imm(2), Reg(XMM12)), AssType: Double Binary(DivDouble, Reg(XMM12), Reg(XMM5)), AssType: Double Mov(Data(tmp.189, 0), Reg(XMM6)), AssType: Double Binary(Mult, Data(glob2, 0), Reg(XMM6)), AssType: Double Binary(Add, Data(tmp.190, 0), Reg(XMM6)), AssType: Double Mov(Data(glob2, 0), Reg(XMM7)), AssType: Double Binary(Mult, Data(glob2, 0), Reg(XMM7)), AssType: Double Binary(Mult, Data(tmp.191, 0), Reg(XMM7)), AssType: Double Mov(Data(glob1, 0), Reg(XMM8)), AssType: Double Binary(Add, Data(glob2, 0), Reg(XMM8)), AssType: Double Binary(Mult, Data(tmp.192, 0), Reg(XMM8)), AssType: Double Mov(Data(glob2, 0), Reg(XMM9)), AssType: Double Binary(Add, Data(tmp.193, 0), Reg(XMM9)), AssType: Double Binary(Mult, Data(tmp.194, 0), Reg(XMM9)), AssType: Double Mov(Data(glob10, 0), Reg(XMM10)), AssType: Double Binary(Add, Data(tmp.195, 0), Reg(XMM10)), AssType: Double Binary(Mult, Data(glob1, 0), Reg(XMM10)), AssType: Double Mov(Data(glob1, 0), Reg(XMM11)), AssType: Double Binary(Add, Data(glob2, 0), Reg(XMM11)), AssType: Double Binary(Mult, Data(tmp.196, 0), Reg(XMM11)), AssType: Double Mov(Data(glob2, 0), Reg(XMM12)), AssType: Double Binary(Mult, Data(tmp.197, 0), Reg(XMM12)), AssType: Double Binary(Add, Data(tmp.198, 0), Reg(XMM12)), AssType: Double Mov(Reg(XMM13), Data(glob_zero, 0)), AssType: Double Mov(Data(glob2, 0), Reg(XMM13)), AssType: Double Binary(Mult, Data(tmp.199, 0), Reg(XMM13)), AssType: Double Mov(Reg(XMM0), Data(glob_one, 0)), AssType: Double Mov(Reg(XMM1), Data(glob_two, 0)), AssType: Double Mov(Reg(XMM2), Data(glob_three, 0)), AssType: Double Mov(Reg(XMM3), Data(glob_four, 0)), AssType: Double Mov(Reg(XMM4), Data(glob_five, 0)), AssType: Double Mov(Reg(XMM5), Data(glob_six, 0)), AssType: Double Mov(Reg(XMM6), Data(glob_seven, 0)), AssType: Double Mov(Reg(XMM7), Data(glob_eight, 0)), AssType: Double Mov(Reg(XMM8), Data(glob_nine, 0)), AssType: Double Mov(Reg(XMM9), Data(glob_ten, 0)), AssType: Double Mov(Reg(XMM10), Data(glob_eleven, 0)), AssType: Double Mov(Reg(XMM11), Data(glob_twelve, 0)), AssType: Double Mov(Reg(XMM12), Data(glob_thirteen, 0)), AssType: Double Mov(Reg(XMM13), Data(glob_fourteen, 0)), Call(incr_glob1), AssType: Double Mov(Data(glob_zero, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_one, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_two, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_three, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_four, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_five, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_six, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_seven, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_eight, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_nine, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_ten, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_eleven, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_twelve, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_thirteen, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_fourteen, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob1, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function main stackOffset: 0 global: True instructions:[Call(target), ret], Static Variable: Global = True Alignment = 8 : glob0 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob1 = [c_double(1.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(2.0)], Static Variable: Global = True Alignment = 8 : glob10 = [c_double(10.0)], Static Variable: Global = True Alignment = 8 : glob_zero = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_one = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_two = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_three = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_four = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_five = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_six = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_seven = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_eight = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_nine = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_ten = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_eleven = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_twelve = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_thirteen = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_fourteen = [c_double(0.0)]]
original: 0
rounded: 16
adjustment: 16
original: 0
rounded: 16
adjustment: 16
original: 0
rounded: 16
adjustment: 16
ASM Program: [Function incr_glob1 stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Longword Mov(Imm(1), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM12)), AssType: Double Mov(Data(glob1, 0), Reg(XMM13)), AssType: Double Binary(Add, Reg(XMM12), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Data(glob1, 0)), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.180 = c_double(10.0), Static Constant: Alignment = 8 : tmp.181 = c_double(2.0), Static Constant: Alignment = 8 : tmp.182 = c_double(4.0), Static Constant: Alignment = 8 : tmp.183 = c_double(2.0), Static Constant: Alignment = 8 : tmp.184 = c_double(3.0), Static Constant: Alignment = 8 : tmp.185 = c_double(2.0), Static Constant: Alignment = 8 : tmp.186 = c_double(6.0), Static Constant: Alignment = 8 : tmp.187 = c_double(2.0), Static Constant: Alignment = 8 : tmp.188 = c_double(2.0), Static Constant: Alignment = 8 : tmp.189 = c_double(3.0), Static Constant: Alignment = 8 : tmp.190 = c_double(1.0), Static Constant: Alignment = 8 : tmp.191 = c_double(2.0), Static Constant: Alignment = 8 : tmp.192 = c_double(3.0), Static Constant: Alignment = 8 : tmp.193 = c_double(3.0), Static Constant: Alignment = 8 : tmp.194 = c_double(2.0), Static Constant: Alignment = 8 : tmp.195 = c_double(1.0), Static Constant: Alignment = 8 : tmp.196 = c_double(4.0), Static Constant: Alignment = 8 : tmp.197 = c_double(3.0), Static Constant: Alignment = 8 : tmp.198 = c_double(7.0), Static Constant: Alignment = 8 : tmp.199 = c_double(7.0), Static Constant: Alignment = 8 : tmp.200 = c_double(0.0), Static Constant: Alignment = 8 : tmp.201 = c_double(1.0), Static Constant: Alignment = 8 : tmp.202 = c_double(2.0), Static Constant: Alignment = 8 : tmp.203 = c_double(3.0), Static Constant: Alignment = 8 : tmp.204 = c_double(4.0), Static Constant: Alignment = 8 : tmp.205 = c_double(5.0), Static Constant: Alignment = 8 : tmp.206 = c_double(6.0), Static Constant: Alignment = 8 : tmp.207 = c_double(7.0), Static Constant: Alignment = 8 : tmp.208 = c_double(8.0), Static Constant: Alignment = 8 : tmp.209 = c_double(9.0), Static Constant: Alignment = 8 : tmp.210 = c_double(10.0), Static Constant: Alignment = 8 : tmp.211 = c_double(11.0), Static Constant: Alignment = 8 : tmp.212 = c_double(12.0), Static Constant: Alignment = 8 : tmp.213 = c_double(13.0), Static Constant: Alignment = 8 : tmp.214 = c_double(14.0), Static Constant: Alignment = 8 : tmp.215 = c_double(2.0), Function target stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Double Mov(Data(glob0, 0), Reg(XMM13)), AssType: Double Binary(Mult, Data(tmp.180, 0), Reg(XMM13)), AssType: Double Mov(Data(glob10, 0), Reg(XMM0)), AssType: Double Binary(DivDouble, Data(tmp.181, 0), Reg(XMM0)), AssType: Double Binary(Sub, Data(tmp.182, 0), Reg(XMM0)), AssType: Double Mov(Data(glob10, 0), Reg(XMM1)), AssType: Double Binary(DivDouble, Data(tmp.183, 0), Reg(XMM1)), AssType: Double Binary(Sub, Data(tmp.184, 0), Reg(XMM1)), AssType: Double Mov(Data(glob2, 0), Reg(XMM2)), AssType: Double Binary(Mult, Data(tmp.185, 0), Reg(XMM2)), AssType: Longword Mov(Imm(1), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM12)), AssType: Double Binary(Sub, Reg(XMM12), Reg(XMM2)), AssType: Double Mov(Data(tmp.186, 0), Reg(XMM3)), AssType: Double Binary(Sub, Data(glob2, 0), Reg(XMM3)), AssType: Double Binary(Mult, Data(glob1, 0), Reg(XMM3)), AssType: Double Mov(Data(glob10, 0), Reg(XMM4)), AssType: Double Binary(DivDouble, Data(tmp.187, 0), Reg(XMM4)), AssType: Double Binary(Mult, Data(glob1, 0), Reg(XMM4)), AssType: Double Mov(Data(glob10, 0), Reg(XMM5)), AssType: Double Binary(Add, Data(tmp.188, 0), Reg(XMM5)), AssType: Longword Mov(Imm(2), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM12)), AssType: Double Binary(DivDouble, Reg(XMM12), Reg(XMM5)), AssType: Double Mov(Data(tmp.189, 0), Reg(XMM6)), AssType: Double Binary(Mult, Data(glob2, 0), Reg(XMM6)), AssType: Double Binary(Add, Data(tmp.190, 0), Reg(XMM6)), AssType: Double Mov(Data(glob2, 0), Reg(XMM7)), AssType: Double Binary(Mult, Data(glob2, 0), Reg(XMM7)), AssType: Double Binary(Mult, Data(tmp.191, 0), Reg(XMM7)), AssType: Double Mov(Data(glob1, 0), Reg(XMM8)), AssType: Double Binary(Add, Data(glob2, 0), Reg(XMM8)), AssType: Double Binary(Mult, Data(tmp.192, 0), Reg(XMM8)), AssType: Double Mov(Data(glob2, 0), Reg(XMM9)), AssType: Double Binary(Add, Data(tmp.193, 0), Reg(XMM9)), AssType: Double Binary(Mult, Data(tmp.194, 0), Reg(XMM9)), AssType: Double Mov(Data(glob10, 0), Reg(XMM10)), AssType: Double Binary(Add, Data(tmp.195, 0), Reg(XMM10)), AssType: Double Binary(Mult, Data(glob1, 0), Reg(XMM10)), AssType: Double Mov(Data(glob1, 0), Reg(XMM11)), AssType: Double Binary(Add, Data(glob2, 0), Reg(XMM11)), AssType: Double Binary(Mult, Data(tmp.196, 0), Reg(XMM11)), AssType: Double Mov(Data(glob2, 0), Reg(XMM12)), AssType: Double Binary(Mult, Data(tmp.197, 0), Reg(XMM12)), AssType: Double Binary(Add, Data(tmp.198, 0), Reg(XMM12)), AssType: Double Mov(Reg(XMM13), Data(glob_zero, 0)), AssType: Double Mov(Data(glob2, 0), Reg(XMM13)), AssType: Double Binary(Mult, Data(tmp.199, 0), Reg(XMM13)), AssType: Double Mov(Reg(XMM0), Data(glob_one, 0)), AssType: Double Mov(Reg(XMM1), Data(glob_two, 0)), AssType: Double Mov(Reg(XMM2), Data(glob_three, 0)), AssType: Double Mov(Reg(XMM3), Data(glob_four, 0)), AssType: Double Mov(Reg(XMM4), Data(glob_five, 0)), AssType: Double Mov(Reg(XMM5), Data(glob_six, 0)), AssType: Double Mov(Reg(XMM6), Data(glob_seven, 0)), AssType: Double Mov(Reg(XMM7), Data(glob_eight, 0)), AssType: Double Mov(Reg(XMM8), Data(glob_nine, 0)), AssType: Double Mov(Reg(XMM9), Data(glob_ten, 0)), AssType: Double Mov(Reg(XMM10), Data(glob_eleven, 0)), AssType: Double Mov(Reg(XMM11), Data(glob_twelve, 0)), AssType: Double Mov(Reg(XMM12), Data(glob_thirteen, 0)), AssType: Double Mov(Reg(XMM13), Data(glob_fourteen, 0)), Call(incr_glob1), AssType: Double Mov(Data(glob_zero, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.200, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_one, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.201, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_two, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.202, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_three, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.203, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_four, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.204, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_five, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.205, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_six, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.206, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_seven, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.207, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_eight, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.208, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_nine, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.209, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_ten, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.210, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_eleven, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.211, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_twelve, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.212, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_thirteen, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.213, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob_fourteen, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.214, 0), Reg(XMM1)), Call(check_one_double), AssType: Double Mov(Data(glob1, 0), Reg(XMM0)), AssType: Double Mov(Data(tmp.215, 0), Reg(XMM1)), Call(check_one_double), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Function main stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), Call(target), ret], Static Variable: Global = True Alignment = 8 : glob0 = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob1 = [c_double(1.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(2.0)], Static Variable: Global = True Alignment = 8 : glob10 = [c_double(10.0)], Static Variable: Global = True Alignment = 8 : glob_zero = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_one = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_two = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_three = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_four = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_five = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_six = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_seven = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_eight = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_nine = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_ten = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_eleven = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_twelve = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_thirteen = [c_double(0.0)], Static Variable: Global = True Alignment = 8 : glob_fourteen = [c_double(0.0)]]
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
<class 'assemblyGenerator.Double'>
	.globl incr_glob1
	.text
incr_glob1:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	movl $1, %r10d
	cvtsi2sdl %r10d, %xmm12
	movsd glob1+0(%rip), %xmm13
	addsd %xmm12, %xmm13
	movsd %xmm13, glob1+0(%rip)
	movl $0, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.section .rodata
	.align 8
tmp.180:
	.double 10.0
	.section .rodata
	.align 8
tmp.181:
	.double 2.0
	.section .rodata
	.align 8
tmp.182:
	.double 4.0
	.section .rodata
	.align 8
tmp.183:
	.double 2.0
	.section .rodata
	.align 8
tmp.184:
	.double 3.0
	.section .rodata
	.align 8
tmp.185:
	.double 2.0
	.section .rodata
	.align 8
tmp.186:
	.double 6.0
	.section .rodata
	.align 8
tmp.187:
	.double 2.0
	.section .rodata
	.align 8
tmp.188:
	.double 2.0
	.section .rodata
	.align 8
tmp.189:
	.double 3.0
	.section .rodata
	.align 8
tmp.190:
	.double 1.0
	.section .rodata
	.align 8
tmp.191:
	.double 2.0
	.section .rodata
	.align 8
tmp.192:
	.double 3.0
	.section .rodata
	.align 8
tmp.193:
	.double 3.0
	.section .rodata
	.align 8
tmp.194:
	.double 2.0
	.section .rodata
	.align 8
tmp.195:
	.double 1.0
	.section .rodata
	.align 8
tmp.196:
	.double 4.0
	.section .rodata
	.align 8
tmp.197:
	.double 3.0
	.section .rodata
	.align 8
tmp.198:
	.double 7.0
	.section .rodata
	.align 8
tmp.199:
	.double 7.0
	.section .rodata
	.align 8
tmp.200:
	.double 0.0
	.section .rodata
	.align 8
tmp.201:
	.double 1.0
	.section .rodata
	.align 8
tmp.202:
	.double 2.0
	.section .rodata
	.align 8
tmp.203:
	.double 3.0
	.section .rodata
	.align 8
tmp.204:
	.double 4.0
	.section .rodata
	.align 8
tmp.205:
	.double 5.0
	.section .rodata
	.align 8
tmp.206:
	.double 6.0
	.section .rodata
	.align 8
tmp.207:
	.double 7.0
	.section .rodata
	.align 8
tmp.208:
	.double 8.0
	.section .rodata
	.align 8
tmp.209:
	.double 9.0
	.section .rodata
	.align 8
tmp.210:
	.double 10.0
	.section .rodata
	.align 8
tmp.211:
	.double 11.0
	.section .rodata
	.align 8
tmp.212:
	.double 12.0
	.section .rodata
	.align 8
tmp.213:
	.double 13.0
	.section .rodata
	.align 8
tmp.214:
	.double 14.0
	.section .rodata
	.align 8
tmp.215:
	.double 2.0
	.globl target
	.text
target:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	movsd glob0+0(%rip), %xmm13
	mulsd tmp.180+0(%rip), %xmm13
	movsd glob10+0(%rip), %xmm0
	divsd tmp.181+0(%rip), %xmm0
	subsd tmp.182+0(%rip), %xmm0
	movsd glob10+0(%rip), %xmm1
	divsd tmp.183+0(%rip), %xmm1
	subsd tmp.184+0(%rip), %xmm1
	movsd glob2+0(%rip), %xmm2
	mulsd tmp.185+0(%rip), %xmm2
	movl $1, %r10d
	cvtsi2sdl %r10d, %xmm12
	subsd %xmm12, %xmm2
	movsd tmp.186+0(%rip), %xmm3
	subsd glob2+0(%rip), %xmm3
	mulsd glob1+0(%rip), %xmm3
	movsd glob10+0(%rip), %xmm4
	divsd tmp.187+0(%rip), %xmm4
	mulsd glob1+0(%rip), %xmm4
	movsd glob10+0(%rip), %xmm5
	addsd tmp.188+0(%rip), %xmm5
	movl $2, %r10d
	cvtsi2sdl %r10d, %xmm12
	divsd %xmm12, %xmm5
	movsd tmp.189+0(%rip), %xmm6
	mulsd glob2+0(%rip), %xmm6
	addsd tmp.190+0(%rip), %xmm6
	movsd glob2+0(%rip), %xmm7
	mulsd glob2+0(%rip), %xmm7
	mulsd tmp.191+0(%rip), %xmm7
	movsd glob1+0(%rip), %xmm8
	addsd glob2+0(%rip), %xmm8
	mulsd tmp.192+0(%rip), %xmm8
	movsd glob2+0(%rip), %xmm9
	addsd tmp.193+0(%rip), %xmm9
	mulsd tmp.194+0(%rip), %xmm9
	movsd glob10+0(%rip), %xmm10
	addsd tmp.195+0(%rip), %xmm10
	mulsd glob1+0(%rip), %xmm10
	movsd glob1+0(%rip), %xmm11
	addsd glob2+0(%rip), %xmm11
	mulsd tmp.196+0(%rip), %xmm11
	movsd glob2+0(%rip), %xmm12
	mulsd tmp.197+0(%rip), %xmm12
	addsd tmp.198+0(%rip), %xmm12
	movsd %xmm13, glob_zero+0(%rip)
	movsd glob2+0(%rip), %xmm13
	mulsd tmp.199+0(%rip), %xmm13
	movsd %xmm0, glob_one+0(%rip)
	movsd %xmm1, glob_two+0(%rip)
	movsd %xmm2, glob_three+0(%rip)
	movsd %xmm3, glob_four+0(%rip)
	movsd %xmm4, glob_five+0(%rip)
	movsd %xmm5, glob_six+0(%rip)
	movsd %xmm6, glob_seven+0(%rip)
	movsd %xmm7, glob_eight+0(%rip)
	movsd %xmm8, glob_nine+0(%rip)
	movsd %xmm9, glob_ten+0(%rip)
	movsd %xmm10, glob_eleven+0(%rip)
	movsd %xmm11, glob_twelve+0(%rip)
	movsd %xmm12, glob_thirteen+0(%rip)
	movsd %xmm13, glob_fourteen+0(%rip)
	call incr_glob1
	movsd glob_zero+0(%rip), %xmm0
	movsd tmp.200+0(%rip), %xmm1
	call check_one_double
	movsd glob_one+0(%rip), %xmm0
	movsd tmp.201+0(%rip), %xmm1
	call check_one_double
	movsd glob_two+0(%rip), %xmm0
	movsd tmp.202+0(%rip), %xmm1
	call check_one_double
	movsd glob_three+0(%rip), %xmm0
	movsd tmp.203+0(%rip), %xmm1
	call check_one_double
	movsd glob_four+0(%rip), %xmm0
	movsd tmp.204+0(%rip), %xmm1
	call check_one_double
	movsd glob_five+0(%rip), %xmm0
	movsd tmp.205+0(%rip), %xmm1
	call check_one_double
	movsd glob_six+0(%rip), %xmm0
	movsd tmp.206+0(%rip), %xmm1
	call check_one_double
	movsd glob_seven+0(%rip), %xmm0
	movsd tmp.207+0(%rip), %xmm1
	call check_one_double
	movsd glob_eight+0(%rip), %xmm0
	movsd tmp.208+0(%rip), %xmm1
	call check_one_double
	movsd glob_nine+0(%rip), %xmm0
	movsd tmp.209+0(%rip), %xmm1
	call check_one_double
	movsd glob_ten+0(%rip), %xmm0
	movsd tmp.210+0(%rip), %xmm1
	call check_one_double
	movsd glob_eleven+0(%rip), %xmm0
	movsd tmp.211+0(%rip), %xmm1
	call check_one_double
	movsd glob_twelve+0(%rip), %xmm0
	movsd tmp.212+0(%rip), %xmm1
	call check_one_double
	movsd glob_thirteen+0(%rip), %xmm0
	movsd tmp.213+0(%rip), %xmm1
	call check_one_double
	movsd glob_fourteen+0(%rip), %xmm0
	movsd tmp.214+0(%rip), %xmm1
	call check_one_double
	movsd glob1+0(%rip), %xmm0
	movsd tmp.215+0(%rip), %xmm1
	call check_one_double
	movl $0, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	call target
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl glob0
	.data
	.align 8
glob0:
	.double 0.0
	.globl glob1
	.data
	.align 8
glob1:
	.double 1.0
	.globl glob2
	.data
	.align 8
glob2:
	.double 2.0
	.globl glob10
	.data
	.align 8
glob10:
	.double 10.0
	.globl glob_zero
	.data
	.align 8
glob_zero:
	.double 0.0
	.globl glob_one
	.data
	.align 8
glob_one:
	.double 0.0
	.globl glob_two
	.data
	.align 8
glob_two:
	.double 0.0
	.globl glob_three
	.data
	.align 8
glob_three:
	.double 0.0
	.globl glob_four
	.data
	.align 8
glob_four:
	.double 0.0
	.globl glob_five
	.data
	.align 8
glob_five:
	.double 0.0
	.globl glob_six
	.data
	.align 8
glob_six:
	.double 0.0
	.globl glob_seven
	.data
	.align 8
glob_seven:
	.double 0.0
	.globl glob_eight
	.data
	.align 8
glob_eight:
	.double 0.0
	.globl glob_nine
	.data
	.align 8
glob_nine:
	.double 0.0
	.globl glob_ten
	.data
	.align 8
glob_ten:
	.double 0.0
	.globl glob_eleven
	.data
	.align 8
glob_eleven:
	.double 0.0
	.globl glob_twelve
	.data
	.align 8
glob_twelve:
	.double 0.0
	.globl glob_thirteen
	.data
	.align 8
glob_thirteen:
	.double 0.0
	.globl glob_fourteen
	.data
	.align 8
glob_fourteen:
	.double 0.0
	.section	.note.GNU-stack,"",@progbits

