False
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
8
['/home/alejandro/CComp/code/cd.py', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: codeEmission
NoLink: False
NotAssembly: False
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('int', <TokenType.INT_KW: 4>, 1), ('test_add_constant_to_pointer', <TokenType.IDENTIFIER: 2>, 1), ('(', <TokenType.OPEN_PAREN: 7>, 1), ('void', <TokenType.VOID_KW: 5>, 1), (')', <TokenType.CLOSE_PAREN: 8>, 1), ('{', <TokenType.OPEN_BRACE: 9>, 1), ('long', <TokenType.LONG_KW: 41>, 2), ('long_arr', <TokenType.IDENTIFIER: 2>, 2), ('[', <TokenType.OPEN_BRACKET: 50>, 2), ('12', <TokenType.INT_CONSTANT: 3>, 2), (']', <TokenType.CLOSE_BRACKET: 51>, 2), ('=', <TokenType.EQUAL: 28>, 2), ('{', <TokenType.OPEN_BRACE: 9>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('3', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('0', <TokenType.INT_CONSTANT: 3>, 2), (',', <TokenType.COMMA: 38>, 2), ('13', <TokenType.INT_CONSTANT: 3>, 2), ('}', <TokenType.CLOSE_BRACE: 10>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('long', <TokenType.LONG_KW: 41>, 3), ('*', <TokenType.ASTERISK: 17>, 3), ('ptr', <TokenType.IDENTIFIER: 2>, 3), ('=', <TokenType.EQUAL: 28>, 3), ('long_arr', <TokenType.IDENTIFIER: 2>, 3), ('+', <TokenType.PLUS: 18>, 3), ('10', <TokenType.INT_CONSTANT: 3>, 3), (';', <TokenType.SEMICOLON: 11>, 3), ('return', <TokenType.RETURN_KW: 6>, 4), ('*', <TokenType.ASTERISK: 17>, 4), ('ptr', <TokenType.IDENTIFIER: 2>, 4), ('==', <TokenType.TEQUALS: 24>, 4), ('13', <TokenType.INT_CONSTANT: 3>, 4), (';', <TokenType.SEMICOLON: 11>, 4), ('}', <TokenType.CLOSE_BRACE: 10>, 5), ('int', <TokenType.INT_KW: 4>, 6), ('test_add_negative_index', <TokenType.IDENTIFIER: 2>, 6), ('(', <TokenType.OPEN_PAREN: 7>, 6), ('void', <TokenType.VOID_KW: 5>, 6), (')', <TokenType.CLOSE_PAREN: 8>, 6), ('{', <TokenType.OPEN_BRACE: 9>, 6), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 7), ('unsigned_arr', <TokenType.IDENTIFIER: 2>, 7), ('[', <TokenType.OPEN_BRACKET: 50>, 7), ('12', <TokenType.INT_CONSTANT: 3>, 7), (']', <TokenType.CLOSE_BRACKET: 51>, 7), ('=', <TokenType.EQUAL: 28>, 7), ('{', <TokenType.OPEN_BRACE: 9>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('2', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('0', <TokenType.INT_CONSTANT: 3>, 7), (',', <TokenType.COMMA: 38>, 7), ('42', <TokenType.INT_CONSTANT: 3>, 7), ('}', <TokenType.CLOSE_BRACE: 10>, 7), (';', <TokenType.SEMICOLON: 11>, 7), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 8), ('*', <TokenType.ASTERISK: 17>, 8), ('end_ptr', <TokenType.IDENTIFIER: 2>, 8), ('=', <TokenType.EQUAL: 28>, 8), ('unsigned_arr', <TokenType.IDENTIFIER: 2>, 8), ('+', <TokenType.PLUS: 18>, 8), ('12', <TokenType.INT_CONSTANT: 3>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 9), ('*', <TokenType.ASTERISK: 17>, 9), ('ptr', <TokenType.IDENTIFIER: 2>, 9), ('=', <TokenType.EQUAL: 28>, 9), ('end_ptr', <TokenType.IDENTIFIER: 2>, 9), ('+', <TokenType.PLUS: 18>, 9), ('-', <TokenType.HYPHEN: 13>, 9), ('10', <TokenType.INT_CONSTANT: 3>, 9), (';', <TokenType.SEMICOLON: 11>, 9), ('return', <TokenType.RETURN_KW: 6>, 10), ('*', <TokenType.ASTERISK: 17>, 10), ('ptr', <TokenType.IDENTIFIER: 2>, 10), ('==', <TokenType.TEQUALS: 24>, 10), ('2', <TokenType.INT_CONSTANT: 3>, 10), (';', <TokenType.SEMICOLON: 11>, 10), ('}', <TokenType.CLOSE_BRACE: 10>, 11), ('int', <TokenType.INT_KW: 4>, 12), ('test_add_pointer_to_int', <TokenType.IDENTIFIER: 2>, 12), ('(', <TokenType.OPEN_PAREN: 7>, 12), ('void', <TokenType.VOID_KW: 5>, 12), (')', <TokenType.CLOSE_PAREN: 8>, 12), ('{', <TokenType.OPEN_BRACE: 9>, 12), ('int', <TokenType.INT_KW: 4>, 13), ('int_arr', <TokenType.IDENTIFIER: 2>, 13), ('[', <TokenType.OPEN_BRACKET: 50>, 13), ('5', <TokenType.INT_CONSTANT: 3>, 13), (']', <TokenType.CLOSE_BRACKET: 51>, 13), ('=', <TokenType.EQUAL: 28>, 13), ('{', <TokenType.OPEN_BRACE: 9>, 13), ('0', <TokenType.INT_CONSTANT: 3>, 13), (',', <TokenType.COMMA: 38>, 13), ('98', <TokenType.INT_CONSTANT: 3>, 13), (',', <TokenType.COMMA: 38>, 13), ('99', <TokenType.INT_CONSTANT: 3>, 13), ('}', <TokenType.CLOSE_BRACE: 10>, 13), (';', <TokenType.SEMICOLON: 11>, 13), ('int', <TokenType.INT_KW: 4>, 14), ('*', <TokenType.ASTERISK: 17>, 14), ('ptr1', <TokenType.IDENTIFIER: 2>, 14), ('=', <TokenType.EQUAL: 28>, 14), ('int_arr', <TokenType.IDENTIFIER: 2>, 14), ('+', <TokenType.PLUS: 18>, 14), ('2', <TokenType.INT_CONSTANT: 3>, 14), (';', <TokenType.SEMICOLON: 11>, 14), ('int', <TokenType.INT_KW: 4>, 15), ('*', <TokenType.ASTERISK: 17>, 15), ('ptr2', <TokenType.IDENTIFIER: 2>, 15), ('=', <TokenType.EQUAL: 28>, 15), ('2', <TokenType.INT_CONSTANT: 3>, 15), ('+', <TokenType.PLUS: 18>, 15), ('int_arr', <TokenType.IDENTIFIER: 2>, 15), (';', <TokenType.SEMICOLON: 11>, 15), ('return', <TokenType.RETURN_KW: 6>, 16), ('(', <TokenType.OPEN_PAREN: 7>, 16), ('ptr1', <TokenType.IDENTIFIER: 2>, 16), ('==', <TokenType.TEQUALS: 24>, 16), ('ptr2', <TokenType.IDENTIFIER: 2>, 16), ('&&', <TokenType.TAMPERSANDS: 22>, 16), ('*', <TokenType.ASTERISK: 17>, 16), ('ptr2', <TokenType.IDENTIFIER: 2>, 16), ('==', <TokenType.TEQUALS: 24>, 16), ('99', <TokenType.INT_CONSTANT: 3>, 16), (')', <TokenType.CLOSE_PAREN: 8>, 16), (';', <TokenType.SEMICOLON: 11>, 16), ('}', <TokenType.CLOSE_BRACE: 10>, 17), ('int', <TokenType.INT_KW: 4>, 18), ('test_add_different_index_types', <TokenType.IDENTIFIER: 2>, 18), ('(', <TokenType.OPEN_PAREN: 7>, 18), ('void', <TokenType.VOID_KW: 5>, 18), (')', <TokenType.CLOSE_PAREN: 8>, 18), ('{', <TokenType.OPEN_BRACE: 9>, 18), ('double', <TokenType.DOUBLE_KW: 48>, 19), ('double_arr', <TokenType.IDENTIFIER: 2>, 19), ('[', <TokenType.OPEN_BRACKET: 50>, 19), ('11', <TokenType.INT_CONSTANT: 3>, 19), (']', <TokenType.CLOSE_BRACKET: 51>, 19), ('=', <TokenType.EQUAL: 28>, 19), ('{', <TokenType.OPEN_BRACE: 9>, 19), ('0', <TokenType.INT_CONSTANT: 3>, 19), (',', <TokenType.COMMA: 38>, 19), ('0', <TokenType.INT_CONSTANT: 3>, 19), (',', <TokenType.COMMA: 38>, 19), ('0', <TokenType.INT_CONSTANT: 3>, 19), (',', <TokenType.COMMA: 38>, 19), ('0', <TokenType.INT_CONSTANT: 3>, 19), (',', <TokenType.COMMA: 38>, 19), ('0', <TokenType.INT_CONSTANT: 3>, 19), (',', <TokenType.COMMA: 38>, 19), ('6.0', <TokenType.DOUBLE_CONSTANT: 47>, 19), ('}', <TokenType.CLOSE_BRACE: 10>, 19), (';', <TokenType.SEMICOLON: 11>, 19), ('double', <TokenType.DOUBLE_KW: 48>, 20), ('*', <TokenType.ASTERISK: 17>, 20), ('ptr1', <TokenType.IDENTIFIER: 2>, 20), ('=', <TokenType.EQUAL: 28>, 20), ('double_arr', <TokenType.IDENTIFIER: 2>, 20), ('+', <TokenType.PLUS: 18>, 20), ('5', <TokenType.INT_CONSTANT: 3>, 20), (';', <TokenType.SEMICOLON: 11>, 20), ('double', <TokenType.DOUBLE_KW: 48>, 21), ('*', <TokenType.ASTERISK: 17>, 21), ('ptr2', <TokenType.IDENTIFIER: 2>, 21), ('=', <TokenType.EQUAL: 28>, 21), ('double_arr', <TokenType.IDENTIFIER: 2>, 21), ('+', <TokenType.PLUS: 18>, 21), ('5l', <TokenType.LONG_CONSTANT: 42>, 21), (';', <TokenType.SEMICOLON: 11>, 21), ('double', <TokenType.DOUBLE_KW: 48>, 22), ('*', <TokenType.ASTERISK: 17>, 22), ('ptr3', <TokenType.IDENTIFIER: 2>, 22), ('=', <TokenType.EQUAL: 28>, 22), ('double_arr', <TokenType.IDENTIFIER: 2>, 22), ('+', <TokenType.PLUS: 18>, 22), ('5u', <TokenType.UINT_CONSTANT: 45>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('double', <TokenType.DOUBLE_KW: 48>, 23), ('*', <TokenType.ASTERISK: 17>, 23), ('ptr4', <TokenType.IDENTIFIER: 2>, 23), ('=', <TokenType.EQUAL: 28>, 23), ('double_arr', <TokenType.IDENTIFIER: 2>, 23), ('+', <TokenType.PLUS: 18>, 23), ('5ul', <TokenType.ULONG_CONSTANT: 46>, 23), (';', <TokenType.SEMICOLON: 11>, 23), ('return', <TokenType.RETURN_KW: 6>, 24), ('(', <TokenType.OPEN_PAREN: 7>, 24), ('ptr1', <TokenType.IDENTIFIER: 2>, 24), ('==', <TokenType.TEQUALS: 24>, 24), ('ptr2', <TokenType.IDENTIFIER: 2>, 24), ('&&', <TokenType.TAMPERSANDS: 22>, 24), ('ptr1', <TokenType.IDENTIFIER: 2>, 24), ('==', <TokenType.TEQUALS: 24>, 24), ('ptr3', <TokenType.IDENTIFIER: 2>, 24), ('&&', <TokenType.TAMPERSANDS: 22>, 24), ('ptr1', <TokenType.IDENTIFIER: 2>, 24), ('==', <TokenType.TEQUALS: 24>, 24), ('ptr4', <TokenType.IDENTIFIER: 2>, 24), ('&&', <TokenType.TAMPERSANDS: 22>, 24), ('*', <TokenType.ASTERISK: 17>, 24), ('ptr4', <TokenType.IDENTIFIER: 2>, 24), ('==', <TokenType.TEQUALS: 24>, 24), ('6.0', <TokenType.DOUBLE_CONSTANT: 47>, 24), (')', <TokenType.CLOSE_PAREN: 8>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('}', <TokenType.CLOSE_BRACE: 10>, 25), ('int', <TokenType.INT_KW: 4>, 26), ('test_add_complex_expressions', <TokenType.IDENTIFIER: 2>, 26), ('(', <TokenType.OPEN_PAREN: 7>, 26), ('void', <TokenType.VOID_KW: 5>, 26), (')', <TokenType.CLOSE_PAREN: 8>, 26), ('{', <TokenType.OPEN_BRACE: 9>, 26), ('static', <TokenType.STATIC_KW: 39>, 27), ('int', <TokenType.INT_KW: 4>, 27), ('flag', <TokenType.IDENTIFIER: 2>, 27), (';', <TokenType.SEMICOLON: 11>, 27), ('int', <TokenType.INT_KW: 4>, 28), ('i', <TokenType.IDENTIFIER: 2>, 28), ('=', <TokenType.EQUAL: 28>, 28), ('-', <TokenType.HYPHEN: 13>, 28), ('2', <TokenType.INT_CONSTANT: 3>, 28), (';', <TokenType.SEMICOLON: 11>, 28), ('int', <TokenType.INT_KW: 4>, 29), ('*', <TokenType.ASTERISK: 17>, 29), ('small_int_ptr', <TokenType.IDENTIFIER: 2>, 29), ('=', <TokenType.EQUAL: 28>, 29), ('&', <TokenType.AMPERSAND: 49>, 29), ('i', <TokenType.IDENTIFIER: 2>, 29), (';', <TokenType.SEMICOLON: 11>, 29), ('extern', <TokenType.EXTERN_KW: 40>, 30), ('int', <TokenType.INT_KW: 4>, 30), ('return_one', <TokenType.IDENTIFIER: 2>, 30), ('(', <TokenType.OPEN_PAREN: 7>, 30), ('void', <TokenType.VOID_KW: 5>, 30), (')', <TokenType.CLOSE_PAREN: 8>, 30), (';', <TokenType.SEMICOLON: 11>, 30), ('extern', <TokenType.EXTERN_KW: 40>, 31), ('int', <TokenType.INT_KW: 4>, 31), ('*', <TokenType.ASTERISK: 17>, 31), ('get_elem1_ptr', <TokenType.IDENTIFIER: 2>, 31), ('(', <TokenType.OPEN_PAREN: 7>, 31), ('int', <TokenType.INT_KW: 4>, 31), ('*', <TokenType.ASTERISK: 17>, 31), ('arr', <TokenType.IDENTIFIER: 2>, 31), (')', <TokenType.CLOSE_PAREN: 8>, 31), (';', <TokenType.SEMICOLON: 11>, 31), ('extern', <TokenType.EXTERN_KW: 40>, 32), ('int', <TokenType.INT_KW: 4>, 32), ('*', <TokenType.ASTERISK: 17>, 32), ('get_elem2_ptr', <TokenType.IDENTIFIER: 2>, 32), ('(', <TokenType.OPEN_PAREN: 7>, 32), ('int', <TokenType.INT_KW: 4>, 32), ('*', <TokenType.ASTERISK: 17>, 32), ('arr', <TokenType.IDENTIFIER: 2>, 32), (')', <TokenType.CLOSE_PAREN: 8>, 32), (';', <TokenType.SEMICOLON: 11>, 32), ('static', <TokenType.STATIC_KW: 39>, 33), ('int', <TokenType.INT_KW: 4>, 33), ('arr', <TokenType.IDENTIFIER: 2>, 33), ('[', <TokenType.OPEN_BRACKET: 50>, 33), ('4', <TokenType.INT_CONSTANT: 3>, 33), (']', <TokenType.CLOSE_BRACKET: 51>, 33), ('=', <TokenType.EQUAL: 28>, 33), ('{', <TokenType.OPEN_BRACE: 9>, 33), ('1', <TokenType.INT_CONSTANT: 3>, 33), (',', <TokenType.COMMA: 38>, 33), ('2', <TokenType.INT_CONSTANT: 3>, 33), (',', <TokenType.COMMA: 38>, 33), ('3', <TokenType.INT_CONSTANT: 3>, 33), (',', <TokenType.COMMA: 38>, 33), ('4', <TokenType.INT_CONSTANT: 3>, 33), ('}', <TokenType.CLOSE_BRACE: 10>, 33), (';', <TokenType.SEMICOLON: 11>, 33), ('int', <TokenType.INT_KW: 4>, 34), ('*', <TokenType.ASTERISK: 17>, 34), ('ptr', <TokenType.IDENTIFIER: 2>, 34), ('=', <TokenType.EQUAL: 28>, 34), ('return_one', <TokenType.IDENTIFIER: 2>, 34), ('(', <TokenType.OPEN_PAREN: 7>, 34), (')', <TokenType.CLOSE_PAREN: 8>, 34), ('+', <TokenType.PLUS: 18>, 34), ('(', <TokenType.OPEN_PAREN: 7>, 34), ('*', <TokenType.ASTERISK: 17>, 34), ('small_int_ptr', <TokenType.IDENTIFIER: 2>, 34), (')', <TokenType.CLOSE_PAREN: 8>, 34), ('+', <TokenType.PLUS: 18>, 34), ('(', <TokenType.OPEN_PAREN: 7>, 35), ('flag', <TokenType.IDENTIFIER: 2>, 35), ('?', <TokenType.QUESTION_MARK: 29>, 35), ('get_elem1_ptr', <TokenType.IDENTIFIER: 2>, 35), ('(', <TokenType.OPEN_PAREN: 7>, 35), ('arr', <TokenType.IDENTIFIER: 2>, 35), (')', <TokenType.CLOSE_PAREN: 8>, 35), (':', <TokenType.COLON: 30>, 35), ('get_elem2_ptr', <TokenType.IDENTIFIER: 2>, 35), ('(', <TokenType.OPEN_PAREN: 7>, 35), ('arr', <TokenType.IDENTIFIER: 2>, 35), (')', <TokenType.CLOSE_PAREN: 8>, 35), (')', <TokenType.CLOSE_PAREN: 8>, 35), (';', <TokenType.SEMICOLON: 11>, 35), ('return', <TokenType.RETURN_KW: 6>, 36), ('(', <TokenType.OPEN_PAREN: 7>, 36), ('ptr', <TokenType.IDENTIFIER: 2>, 36), ('==', <TokenType.TEQUALS: 24>, 36), ('arr', <TokenType.IDENTIFIER: 2>, 36), ('+', <TokenType.PLUS: 18>, 36), ('1', <TokenType.INT_CONSTANT: 3>, 36), ('&&', <TokenType.TAMPERSANDS: 22>, 36), ('*', <TokenType.ASTERISK: 17>, 36), ('ptr', <TokenType.IDENTIFIER: 2>, 36), ('==', <TokenType.TEQUALS: 24>, 36), ('2', <TokenType.INT_CONSTANT: 3>, 36), (')', <TokenType.CLOSE_PAREN: 8>, 36), (';', <TokenType.SEMICOLON: 11>, 36), ('}', <TokenType.CLOSE_BRACE: 10>, 37), ('int', <TokenType.INT_KW: 4>, 38), ('return_one', <TokenType.IDENTIFIER: 2>, 38), ('(', <TokenType.OPEN_PAREN: 7>, 38), ('void', <TokenType.VOID_KW: 5>, 38), (')', <TokenType.CLOSE_PAREN: 8>, 38), ('{', <TokenType.OPEN_BRACE: 9>, 38), ('return', <TokenType.RETURN_KW: 6>, 39), ('1', <TokenType.INT_CONSTANT: 3>, 39), (';', <TokenType.SEMICOLON: 11>, 39), ('}', <TokenType.CLOSE_BRACE: 10>, 40), ('int', <TokenType.INT_KW: 4>, 41), ('*', <TokenType.ASTERISK: 17>, 41), ('get_elem1_ptr', <TokenType.IDENTIFIER: 2>, 41), ('(', <TokenType.OPEN_PAREN: 7>, 41), ('int', <TokenType.INT_KW: 4>, 41), ('*', <TokenType.ASTERISK: 17>, 41), ('arr', <TokenType.IDENTIFIER: 2>, 41), (')', <TokenType.CLOSE_PAREN: 8>, 41), ('{', <TokenType.OPEN_BRACE: 9>, 41), ('return', <TokenType.RETURN_KW: 6>, 42), ('arr', <TokenType.IDENTIFIER: 2>, 42), ('+', <TokenType.PLUS: 18>, 42), ('1', <TokenType.INT_CONSTANT: 3>, 42), (';', <TokenType.SEMICOLON: 11>, 42), ('}', <TokenType.CLOSE_BRACE: 10>, 43), ('int', <TokenType.INT_KW: 4>, 44), ('*', <TokenType.ASTERISK: 17>, 44), ('get_elem2_ptr', <TokenType.IDENTIFIER: 2>, 44), ('(', <TokenType.OPEN_PAREN: 7>, 44), ('int', <TokenType.INT_KW: 4>, 44), ('*', <TokenType.ASTERISK: 17>, 44), ('arr', <TokenType.IDENTIFIER: 2>, 44), (')', <TokenType.CLOSE_PAREN: 8>, 44), ('{', <TokenType.OPEN_BRACE: 9>, 44), ('return', <TokenType.RETURN_KW: 6>, 45), ('arr', <TokenType.IDENTIFIER: 2>, 45), ('+', <TokenType.PLUS: 18>, 45), ('2', <TokenType.INT_CONSTANT: 3>, 45), (';', <TokenType.SEMICOLON: 11>, 45), ('}', <TokenType.CLOSE_BRACE: 10>, 46), ('int', <TokenType.INT_KW: 4>, 47), ('test_add_multi_dimensional', <TokenType.IDENTIFIER: 2>, 47), ('(', <TokenType.OPEN_PAREN: 7>, 47), ('void', <TokenType.VOID_KW: 5>, 47), (')', <TokenType.CLOSE_PAREN: 8>, 47), ('{', <TokenType.OPEN_BRACE: 9>, 47), ('static', <TokenType.STATIC_KW: 39>, 48), ('int', <TokenType.INT_KW: 4>, 48), ('index', <TokenType.IDENTIFIER: 2>, 48), ('=', <TokenType.EQUAL: 28>, 48), ('2', <TokenType.INT_CONSTANT: 3>, 48), (';', <TokenType.SEMICOLON: 11>, 48), ('int', <TokenType.INT_KW: 4>, 49), ('nested_arr', <TokenType.IDENTIFIER: 2>, 49), ('[', <TokenType.OPEN_BRACKET: 50>, 49), ('3', <TokenType.INT_CONSTANT: 3>, 49), (']', <TokenType.CLOSE_BRACKET: 51>, 49), ('[', <TokenType.OPEN_BRACKET: 50>, 49), ('3', <TokenType.INT_CONSTANT: 3>, 49), (']', <TokenType.CLOSE_BRACKET: 51>, 49), ('=', <TokenType.EQUAL: 28>, 49), ('{', <TokenType.OPEN_BRACE: 9>, 49), ('{', <TokenType.OPEN_BRACE: 9>, 49), ('1', <TokenType.INT_CONSTANT: 3>, 49), (',', <TokenType.COMMA: 38>, 49), ('2', <TokenType.INT_CONSTANT: 3>, 49), (',', <TokenType.COMMA: 38>, 49), ('3', <TokenType.INT_CONSTANT: 3>, 49), ('}', <TokenType.CLOSE_BRACE: 10>, 49), (',', <TokenType.COMMA: 38>, 49), ('{', <TokenType.OPEN_BRACE: 9>, 49), ('4', <TokenType.INT_CONSTANT: 3>, 49), (',', <TokenType.COMMA: 38>, 49), ('5', <TokenType.INT_CONSTANT: 3>, 49), (',', <TokenType.COMMA: 38>, 49), ('6', <TokenType.INT_CONSTANT: 3>, 49), ('}', <TokenType.CLOSE_BRACE: 10>, 49), (',', <TokenType.COMMA: 38>, 49), ('{', <TokenType.OPEN_BRACE: 9>, 49), ('7', <TokenType.INT_CONSTANT: 3>, 49), (',', <TokenType.COMMA: 38>, 49), ('8', <TokenType.INT_CONSTANT: 3>, 49), (',', <TokenType.COMMA: 38>, 49), ('9', <TokenType.INT_CONSTANT: 3>, 49), ('}', <TokenType.CLOSE_BRACE: 10>, 49), ('}', <TokenType.CLOSE_BRACE: 10>, 49), (';', <TokenType.SEMICOLON: 11>, 49), ('int', <TokenType.INT_KW: 4>, 50), ('(', <TokenType.OPEN_PAREN: 7>, 50), ('*', <TokenType.ASTERISK: 17>, 50), ('row_pointer', <TokenType.IDENTIFIER: 2>, 50), (')', <TokenType.CLOSE_PAREN: 8>, 50), ('[', <TokenType.OPEN_BRACKET: 50>, 50), ('3', <TokenType.INT_CONSTANT: 3>, 50), (']', <TokenType.CLOSE_BRACKET: 51>, 50), ('=', <TokenType.EQUAL: 28>, 50), ('nested_arr', <TokenType.IDENTIFIER: 2>, 50), ('+', <TokenType.PLUS: 18>, 50), ('index', <TokenType.IDENTIFIER: 2>, 50), (';', <TokenType.SEMICOLON: 11>, 50), ('return', <TokenType.RETURN_KW: 6>, 51), ('*', <TokenType.ASTERISK: 17>, 51), ('*', <TokenType.ASTERISK: 17>, 51), ('row_pointer', <TokenType.IDENTIFIER: 2>, 51), ('==', <TokenType.TEQUALS: 24>, 51), ('7', <TokenType.INT_CONSTANT: 3>, 51), (';', <TokenType.SEMICOLON: 11>, 51), ('}', <TokenType.CLOSE_BRACE: 10>, 52), ('int', <TokenType.INT_KW: 4>, 53), ('test_add_to_subarray_pointer', <TokenType.IDENTIFIER: 2>, 53), ('(', <TokenType.OPEN_PAREN: 7>, 53), ('void', <TokenType.VOID_KW: 5>, 53), (')', <TokenType.CLOSE_PAREN: 8>, 53), ('{', <TokenType.OPEN_BRACE: 9>, 53), ('static', <TokenType.STATIC_KW: 39>, 54), ('int', <TokenType.INT_KW: 4>, 54), ('index', <TokenType.IDENTIFIER: 2>, 54), ('=', <TokenType.EQUAL: 28>, 54), ('2', <TokenType.INT_CONSTANT: 3>, 54), (';', <TokenType.SEMICOLON: 11>, 54), ('int', <TokenType.INT_KW: 4>, 55), ('nested_arr', <TokenType.IDENTIFIER: 2>, 55), ('[', <TokenType.OPEN_BRACKET: 50>, 55), ('3', <TokenType.INT_CONSTANT: 3>, 55), (']', <TokenType.CLOSE_BRACKET: 51>, 55), ('[', <TokenType.OPEN_BRACKET: 50>, 55), ('3', <TokenType.INT_CONSTANT: 3>, 55), (']', <TokenType.CLOSE_BRACKET: 51>, 55), ('=', <TokenType.EQUAL: 28>, 55), ('{', <TokenType.OPEN_BRACE: 9>, 55), ('{', <TokenType.OPEN_BRACE: 9>, 55), ('1', <TokenType.INT_CONSTANT: 3>, 55), (',', <TokenType.COMMA: 38>, 55), ('2', <TokenType.INT_CONSTANT: 3>, 55), (',', <TokenType.COMMA: 38>, 55), ('3', <TokenType.INT_CONSTANT: 3>, 55), ('}', <TokenType.CLOSE_BRACE: 10>, 55), (',', <TokenType.COMMA: 38>, 55), ('{', <TokenType.OPEN_BRACE: 9>, 55), ('4', <TokenType.INT_CONSTANT: 3>, 55), (',', <TokenType.COMMA: 38>, 55), ('5', <TokenType.INT_CONSTANT: 3>, 55), (',', <TokenType.COMMA: 38>, 55), ('6', <TokenType.INT_CONSTANT: 3>, 55), ('}', <TokenType.CLOSE_BRACE: 10>, 55), (',', <TokenType.COMMA: 38>, 55), ('{', <TokenType.OPEN_BRACE: 9>, 55), ('7', <TokenType.INT_CONSTANT: 3>, 55), (',', <TokenType.COMMA: 38>, 55), ('8', <TokenType.INT_CONSTANT: 3>, 55), (',', <TokenType.COMMA: 38>, 55), ('9', <TokenType.INT_CONSTANT: 3>, 55), ('}', <TokenType.CLOSE_BRACE: 10>, 55), ('}', <TokenType.CLOSE_BRACE: 10>, 55), (';', <TokenType.SEMICOLON: 11>, 55), ('int', <TokenType.INT_KW: 4>, 56), ('*', <TokenType.ASTERISK: 17>, 56), ('row1', <TokenType.IDENTIFIER: 2>, 56), ('=', <TokenType.EQUAL: 28>, 56), ('*', <TokenType.ASTERISK: 17>, 56), ('(', <TokenType.OPEN_PAREN: 7>, 56), ('nested_arr', <TokenType.IDENTIFIER: 2>, 56), ('+', <TokenType.PLUS: 18>, 56), ('1', <TokenType.INT_CONSTANT: 3>, 56), (')', <TokenType.CLOSE_PAREN: 8>, 56), (';', <TokenType.SEMICOLON: 11>, 56), ('int', <TokenType.INT_KW: 4>, 57), ('*', <TokenType.ASTERISK: 17>, 57), ('elem_ptr', <TokenType.IDENTIFIER: 2>, 57), ('=', <TokenType.EQUAL: 28>, 57), ('row1', <TokenType.IDENTIFIER: 2>, 57), ('+', <TokenType.PLUS: 18>, 57), ('index', <TokenType.IDENTIFIER: 2>, 57), (';', <TokenType.SEMICOLON: 11>, 57), ('return', <TokenType.RETURN_KW: 6>, 58), ('*', <TokenType.ASTERISK: 17>, 58), ('elem_ptr', <TokenType.IDENTIFIER: 2>, 58), ('==', <TokenType.TEQUALS: 24>, 58), ('6', <TokenType.INT_CONSTANT: 3>, 58), (';', <TokenType.SEMICOLON: 11>, 58), ('}', <TokenType.CLOSE_BRACE: 10>, 59), ('int', <TokenType.INT_KW: 4>, 60), ('test_subtract_from_pointer', <TokenType.IDENTIFIER: 2>, 60), ('(', <TokenType.OPEN_PAREN: 7>, 60), ('void', <TokenType.VOID_KW: 5>, 60), (')', <TokenType.CLOSE_PAREN: 8>, 60), ('{', <TokenType.OPEN_BRACE: 9>, 60), ('long', <TokenType.LONG_KW: 41>, 61), ('long_arr', <TokenType.IDENTIFIER: 2>, 61), ('[', <TokenType.OPEN_BRACKET: 50>, 61), ('5', <TokenType.INT_CONSTANT: 3>, 61), (']', <TokenType.CLOSE_BRACKET: 51>, 61), ('=', <TokenType.EQUAL: 28>, 61), ('{', <TokenType.OPEN_BRACE: 9>, 61), ('10', <TokenType.INT_CONSTANT: 3>, 61), (',', <TokenType.COMMA: 38>, 61), ('9', <TokenType.INT_CONSTANT: 3>, 61), (',', <TokenType.COMMA: 38>, 61), ('8', <TokenType.INT_CONSTANT: 3>, 61), (',', <TokenType.COMMA: 38>, 61), ('7', <TokenType.INT_CONSTANT: 3>, 61), (',', <TokenType.COMMA: 38>, 61), ('6', <TokenType.INT_CONSTANT: 3>, 61), ('}', <TokenType.CLOSE_BRACE: 10>, 61), (';', <TokenType.SEMICOLON: 11>, 61), ('long', <TokenType.LONG_KW: 41>, 62), ('*', <TokenType.ASTERISK: 17>, 62), ('one_past_the_end', <TokenType.IDENTIFIER: 2>, 62), ('=', <TokenType.EQUAL: 28>, 62), ('long_arr', <TokenType.IDENTIFIER: 2>, 62), ('+', <TokenType.PLUS: 18>, 62), ('5', <TokenType.INT_CONSTANT: 3>, 62), (';', <TokenType.SEMICOLON: 11>, 62), ('static', <TokenType.STATIC_KW: 39>, 63), ('int', <TokenType.INT_KW: 4>, 63), ('index', <TokenType.IDENTIFIER: 2>, 63), ('=', <TokenType.EQUAL: 28>, 63), ('3', <TokenType.INT_CONSTANT: 3>, 63), (';', <TokenType.SEMICOLON: 11>, 63), ('long', <TokenType.LONG_KW: 41>, 64), ('*', <TokenType.ASTERISK: 17>, 64), ('subtraction_result', <TokenType.IDENTIFIER: 2>, 64), ('=', <TokenType.EQUAL: 28>, 64), ('one_past_the_end', <TokenType.IDENTIFIER: 2>, 64), ('-', <TokenType.HYPHEN: 13>, 64), ('index', <TokenType.IDENTIFIER: 2>, 64), (';', <TokenType.SEMICOLON: 11>, 64), ('return', <TokenType.RETURN_KW: 6>, 65), ('*', <TokenType.ASTERISK: 17>, 65), ('subtraction_result', <TokenType.IDENTIFIER: 2>, 65), ('==', <TokenType.TEQUALS: 24>, 65), ('8', <TokenType.INT_CONSTANT: 3>, 65), (';', <TokenType.SEMICOLON: 11>, 65), ('}', <TokenType.CLOSE_BRACE: 10>, 66), ('int', <TokenType.INT_KW: 4>, 67), ('test_subtract_negative_index', <TokenType.IDENTIFIER: 2>, 67), ('(', <TokenType.OPEN_PAREN: 7>, 67), ('void', <TokenType.VOID_KW: 5>, 67), (')', <TokenType.CLOSE_PAREN: 8>, 67), ('{', <TokenType.OPEN_BRACE: 9>, 67), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 68), ('arr', <TokenType.IDENTIFIER: 2>, 68), ('[', <TokenType.OPEN_BRACKET: 50>, 68), ('5', <TokenType.INT_CONSTANT: 3>, 68), (']', <TokenType.CLOSE_BRACKET: 51>, 68), ('=', <TokenType.EQUAL: 28>, 68), ('{', <TokenType.OPEN_BRACE: 9>, 68), ('100', <TokenType.INT_CONSTANT: 3>, 68), (',', <TokenType.COMMA: 38>, 68), ('101', <TokenType.INT_CONSTANT: 3>, 68), (',', <TokenType.COMMA: 38>, 68), ('102', <TokenType.INT_CONSTANT: 3>, 68), (',', <TokenType.COMMA: 38>, 68), ('103', <TokenType.INT_CONSTANT: 3>, 68), (',', <TokenType.COMMA: 38>, 68), ('104', <TokenType.INT_CONSTANT: 3>, 68), ('}', <TokenType.CLOSE_BRACE: 10>, 68), (';', <TokenType.SEMICOLON: 11>, 68), ('unsigned', <TokenType.UNSIGNED_KW: 44>, 69), ('*', <TokenType.ASTERISK: 17>, 69), ('ptr', <TokenType.IDENTIFIER: 2>, 69), ('=', <TokenType.EQUAL: 28>, 69), ('arr', <TokenType.IDENTIFIER: 2>, 69), ('-', <TokenType.HYPHEN: 13>, 69), ('(', <TokenType.OPEN_PAREN: 7>, 69), ('-', <TokenType.HYPHEN: 13>, 69), ('3', <TokenType.INT_CONSTANT: 3>, 69), (')', <TokenType.CLOSE_PAREN: 8>, 69), (';', <TokenType.SEMICOLON: 11>, 69), ('return', <TokenType.RETURN_KW: 6>, 70), ('*', <TokenType.ASTERISK: 17>, 70), ('ptr', <TokenType.IDENTIFIER: 2>, 70), ('==', <TokenType.TEQUALS: 24>, 70), ('103', <TokenType.INT_CONSTANT: 3>, 70), (';', <TokenType.SEMICOLON: 11>, 70), ('}', <TokenType.CLOSE_BRACE: 10>, 71), ('int', <TokenType.INT_KW: 4>, 72), ('test_subtract_different_index_types', <TokenType.IDENTIFIER: 2>, 72), ('(', <TokenType.OPEN_PAREN: 7>, 72), ('void', <TokenType.VOID_KW: 5>, 72), (')', <TokenType.CLOSE_PAREN: 8>, 72), ('{', <TokenType.OPEN_BRACE: 9>, 72), ('double', <TokenType.DOUBLE_KW: 48>, 73), ('double_arr', <TokenType.IDENTIFIER: 2>, 73), ('[', <TokenType.OPEN_BRACKET: 50>, 73), ('11', <TokenType.INT_CONSTANT: 3>, 73), (']', <TokenType.CLOSE_BRACKET: 51>, 73), ('=', <TokenType.EQUAL: 28>, 73), ('{', <TokenType.OPEN_BRACE: 9>, 73), ('0', <TokenType.INT_CONSTANT: 3>, 73), (',', <TokenType.COMMA: 38>, 73), ('0', <TokenType.INT_CONSTANT: 3>, 73), (',', <TokenType.COMMA: 38>, 73), ('0', <TokenType.INT_CONSTANT: 3>, 73), (',', <TokenType.COMMA: 38>, 73), ('0', <TokenType.INT_CONSTANT: 3>, 73), (',', <TokenType.COMMA: 38>, 73), ('0', <TokenType.INT_CONSTANT: 3>, 73), (',', <TokenType.COMMA: 38>, 73), ('0', <TokenType.INT_CONSTANT: 3>, 73), (',', <TokenType.COMMA: 38>, 73), ('6.0', <TokenType.DOUBLE_CONSTANT: 47>, 73), ('}', <TokenType.CLOSE_BRACE: 10>, 73), (';', <TokenType.SEMICOLON: 11>, 73), ('double', <TokenType.DOUBLE_KW: 48>, 74), ('*', <TokenType.ASTERISK: 17>, 74), ('end_ptr', <TokenType.IDENTIFIER: 2>, 74), ('=', <TokenType.EQUAL: 28>, 74), ('double_arr', <TokenType.IDENTIFIER: 2>, 74), ('+', <TokenType.PLUS: 18>, 74), ('11', <TokenType.INT_CONSTANT: 3>, 74), (';', <TokenType.SEMICOLON: 11>, 74), ('double', <TokenType.DOUBLE_KW: 48>, 75), ('*', <TokenType.ASTERISK: 17>, 75), ('ptr1', <TokenType.IDENTIFIER: 2>, 75), ('=', <TokenType.EQUAL: 28>, 75), ('end_ptr', <TokenType.IDENTIFIER: 2>, 75), ('-', <TokenType.HYPHEN: 13>, 75), ('5', <TokenType.INT_CONSTANT: 3>, 75), (';', <TokenType.SEMICOLON: 11>, 75), ('double', <TokenType.DOUBLE_KW: 48>, 76), ('*', <TokenType.ASTERISK: 17>, 76), ('ptr2', <TokenType.IDENTIFIER: 2>, 76), ('=', <TokenType.EQUAL: 28>, 76), ('end_ptr', <TokenType.IDENTIFIER: 2>, 76), ('-', <TokenType.HYPHEN: 13>, 76), ('5l', <TokenType.LONG_CONSTANT: 42>, 76), (';', <TokenType.SEMICOLON: 11>, 76), ('double', <TokenType.DOUBLE_KW: 48>, 77), ('*', <TokenType.ASTERISK: 17>, 77), ('ptr3', <TokenType.IDENTIFIER: 2>, 77), ('=', <TokenType.EQUAL: 28>, 77), ('end_ptr', <TokenType.IDENTIFIER: 2>, 77), ('-', <TokenType.HYPHEN: 13>, 77), ('5u', <TokenType.UINT_CONSTANT: 45>, 77), (';', <TokenType.SEMICOLON: 11>, 77), ('double', <TokenType.DOUBLE_KW: 48>, 78), ('*', <TokenType.ASTERISK: 17>, 78), ('ptr4', <TokenType.IDENTIFIER: 2>, 78), ('=', <TokenType.EQUAL: 28>, 78), ('end_ptr', <TokenType.IDENTIFIER: 2>, 78), ('-', <TokenType.HYPHEN: 13>, 78), ('5ul', <TokenType.ULONG_CONSTANT: 46>, 78), (';', <TokenType.SEMICOLON: 11>, 78), ('return', <TokenType.RETURN_KW: 6>, 79), ('(', <TokenType.OPEN_PAREN: 7>, 79), ('ptr1', <TokenType.IDENTIFIER: 2>, 79), ('==', <TokenType.TEQUALS: 24>, 79), ('ptr2', <TokenType.IDENTIFIER: 2>, 79), ('&&', <TokenType.TAMPERSANDS: 22>, 79), ('ptr1', <TokenType.IDENTIFIER: 2>, 79), ('==', <TokenType.TEQUALS: 24>, 79), ('ptr3', <TokenType.IDENTIFIER: 2>, 79), ('&&', <TokenType.TAMPERSANDS: 22>, 79), ('ptr1', <TokenType.IDENTIFIER: 2>, 79), ('==', <TokenType.TEQUALS: 24>, 79), ('ptr4', <TokenType.IDENTIFIER: 2>, 79), ('&&', <TokenType.TAMPERSANDS: 22>, 79), ('*', <TokenType.ASTERISK: 17>, 79), ('ptr4', <TokenType.IDENTIFIER: 2>, 79), ('==', <TokenType.TEQUALS: 24>, 79), ('6.0', <TokenType.DOUBLE_CONSTANT: 47>, 79), (')', <TokenType.CLOSE_PAREN: 8>, 79), (';', <TokenType.SEMICOLON: 11>, 79), ('}', <TokenType.CLOSE_BRACE: 10>, 80), ('int', <TokenType.INT_KW: 4>, 81), ('test_subtract_complex_expressions', <TokenType.IDENTIFIER: 2>, 81), ('(', <TokenType.OPEN_PAREN: 7>, 81), ('void', <TokenType.VOID_KW: 5>, 81), (')', <TokenType.CLOSE_PAREN: 8>, 81), ('{', <TokenType.OPEN_BRACE: 9>, 81), ('static', <TokenType.STATIC_KW: 39>, 82), ('int', <TokenType.INT_KW: 4>, 82), ('flag', <TokenType.IDENTIFIER: 2>, 82), ('=', <TokenType.EQUAL: 28>, 82), ('1', <TokenType.INT_CONSTANT: 3>, 82), (';', <TokenType.SEMICOLON: 11>, 82), ('static', <TokenType.STATIC_KW: 39>, 83), ('int', <TokenType.INT_KW: 4>, 83), ('four', <TokenType.IDENTIFIER: 2>, 83), ('=', <TokenType.EQUAL: 28>, 83), ('4', <TokenType.INT_CONSTANT: 3>, 83), (';', <TokenType.SEMICOLON: 11>, 83), ('static', <TokenType.STATIC_KW: 39>, 84), ('int', <TokenType.INT_KW: 4>, 84), ('arr', <TokenType.IDENTIFIER: 2>, 84), ('[', <TokenType.OPEN_BRACKET: 50>, 84), ('4', <TokenType.INT_CONSTANT: 3>, 84), (']', <TokenType.CLOSE_BRACKET: 51>, 84), ('=', <TokenType.EQUAL: 28>, 84), ('{', <TokenType.OPEN_BRACE: 9>, 84), ('1', <TokenType.INT_CONSTANT: 3>, 84), (',', <TokenType.COMMA: 38>, 84), ('2', <TokenType.INT_CONSTANT: 3>, 84), (',', <TokenType.COMMA: 38>, 84), ('3', <TokenType.INT_CONSTANT: 3>, 84), (',', <TokenType.COMMA: 38>, 84), ('4', <TokenType.INT_CONSTANT: 3>, 84), ('}', <TokenType.CLOSE_BRACE: 10>, 84), (';', <TokenType.SEMICOLON: 11>, 84), ('int', <TokenType.INT_KW: 4>, 85), ('*', <TokenType.ASTERISK: 17>, 85), ('ptr', <TokenType.IDENTIFIER: 2>, 85), ('=', <TokenType.EQUAL: 28>, 85), ('(', <TokenType.OPEN_PAREN: 7>, 85), ('flag', <TokenType.IDENTIFIER: 2>, 85), ('?', <TokenType.QUESTION_MARK: 29>, 85), ('get_elem1_ptr', <TokenType.IDENTIFIER: 2>, 85), ('(', <TokenType.OPEN_PAREN: 7>, 85), ('arr', <TokenType.IDENTIFIER: 2>, 85), (')', <TokenType.CLOSE_PAREN: 8>, 85), (':', <TokenType.COLON: 30>, 85), ('get_elem2_ptr', <TokenType.IDENTIFIER: 2>, 85), ('(', <TokenType.OPEN_PAREN: 7>, 85), ('arr', <TokenType.IDENTIFIER: 2>, 85), (')', <TokenType.CLOSE_PAREN: 8>, 85), (')', <TokenType.CLOSE_PAREN: 8>, 85), ('-', <TokenType.HYPHEN: 13>, 85), ('(', <TokenType.OPEN_PAREN: 7>, 85), ('four', <TokenType.IDENTIFIER: 2>, 85), ('/', <TokenType.FORWARD_SLASH: 15>, 85), ('-', <TokenType.HYPHEN: 13>, 85), ('2', <TokenType.INT_CONSTANT: 3>, 85), (')', <TokenType.CLOSE_PAREN: 8>, 85), (';', <TokenType.SEMICOLON: 11>, 85), ('return', <TokenType.RETURN_KW: 6>, 86), ('(', <TokenType.OPEN_PAREN: 7>, 86), ('*', <TokenType.ASTERISK: 17>, 86), ('ptr', <TokenType.IDENTIFIER: 2>, 86), ('==', <TokenType.TEQUALS: 24>, 86), ('4', <TokenType.INT_CONSTANT: 3>, 86), (')', <TokenType.CLOSE_PAREN: 8>, 86), (';', <TokenType.SEMICOLON: 11>, 86), ('}', <TokenType.CLOSE_BRACE: 10>, 87), ('int', <TokenType.INT_KW: 4>, 88), ('test_subtract_multi_dimensional', <TokenType.IDENTIFIER: 2>, 88), ('(', <TokenType.OPEN_PAREN: 7>, 88), ('void', <TokenType.VOID_KW: 5>, 88), (')', <TokenType.CLOSE_PAREN: 8>, 88), ('{', <TokenType.OPEN_BRACE: 9>, 88), ('static', <TokenType.STATIC_KW: 39>, 89), ('int', <TokenType.INT_KW: 4>, 89), ('index', <TokenType.IDENTIFIER: 2>, 89), ('=', <TokenType.EQUAL: 28>, 89), ('1', <TokenType.INT_CONSTANT: 3>, 89), (';', <TokenType.SEMICOLON: 11>, 89), ('int', <TokenType.INT_KW: 4>, 90), ('nested_arr', <TokenType.IDENTIFIER: 2>, 90), ('[', <TokenType.OPEN_BRACKET: 50>, 90), ('3', <TokenType.INT_CONSTANT: 3>, 90), (']', <TokenType.CLOSE_BRACKET: 51>, 90), ('[', <TokenType.OPEN_BRACKET: 50>, 90), ('3', <TokenType.INT_CONSTANT: 3>, 90), (']', <TokenType.CLOSE_BRACKET: 51>, 90), ('=', <TokenType.EQUAL: 28>, 90), ('{', <TokenType.OPEN_BRACE: 9>, 90), ('{', <TokenType.OPEN_BRACE: 9>, 90), ('1', <TokenType.INT_CONSTANT: 3>, 90), (',', <TokenType.COMMA: 38>, 90), ('2', <TokenType.INT_CONSTANT: 3>, 90), (',', <TokenType.COMMA: 38>, 90), ('3', <TokenType.INT_CONSTANT: 3>, 90), ('}', <TokenType.CLOSE_BRACE: 10>, 90), (',', <TokenType.COMMA: 38>, 90), ('{', <TokenType.OPEN_BRACE: 9>, 90), ('4', <TokenType.INT_CONSTANT: 3>, 90), (',', <TokenType.COMMA: 38>, 90), ('5', <TokenType.INT_CONSTANT: 3>, 90), (',', <TokenType.COMMA: 38>, 90), ('6', <TokenType.INT_CONSTANT: 3>, 90), ('}', <TokenType.CLOSE_BRACE: 10>, 90), (',', <TokenType.COMMA: 38>, 90), ('{', <TokenType.OPEN_BRACE: 9>, 90), ('7', <TokenType.INT_CONSTANT: 3>, 90), (',', <TokenType.COMMA: 38>, 90), ('8', <TokenType.INT_CONSTANT: 3>, 90), (',', <TokenType.COMMA: 38>, 90), ('9', <TokenType.INT_CONSTANT: 3>, 90), ('}', <TokenType.CLOSE_BRACE: 10>, 90), ('}', <TokenType.CLOSE_BRACE: 10>, 90), (';', <TokenType.SEMICOLON: 11>, 90), ('int', <TokenType.INT_KW: 4>, 91), ('(', <TokenType.OPEN_PAREN: 7>, 91), ('*', <TokenType.ASTERISK: 17>, 91), ('last_row_pointer', <TokenType.IDENTIFIER: 2>, 91), (')', <TokenType.CLOSE_PAREN: 8>, 91), ('[', <TokenType.OPEN_BRACKET: 50>, 91), ('3', <TokenType.INT_CONSTANT: 3>, 91), (']', <TokenType.CLOSE_BRACKET: 51>, 91), ('=', <TokenType.EQUAL: 28>, 91), ('nested_arr', <TokenType.IDENTIFIER: 2>, 91), ('+', <TokenType.PLUS: 18>, 91), ('2', <TokenType.INT_CONSTANT: 3>, 91), (';', <TokenType.SEMICOLON: 11>, 91), ('int', <TokenType.INT_KW: 4>, 92), ('(', <TokenType.OPEN_PAREN: 7>, 92), ('*', <TokenType.ASTERISK: 17>, 92), ('row_pointer', <TokenType.IDENTIFIER: 2>, 92), (')', <TokenType.CLOSE_PAREN: 8>, 92), ('[', <TokenType.OPEN_BRACKET: 50>, 92), ('3', <TokenType.INT_CONSTANT: 3>, 92), (']', <TokenType.CLOSE_BRACKET: 51>, 92), ('=', <TokenType.EQUAL: 28>, 92), ('last_row_pointer', <TokenType.IDENTIFIER: 2>, 92), ('-', <TokenType.HYPHEN: 13>, 92), ('index', <TokenType.IDENTIFIER: 2>, 92), (';', <TokenType.SEMICOLON: 11>, 92), ('return', <TokenType.RETURN_KW: 6>, 93), ('(', <TokenType.OPEN_PAREN: 7>, 93), ('*', <TokenType.ASTERISK: 17>, 93), ('*', <TokenType.ASTERISK: 17>, 93), ('row_pointer', <TokenType.IDENTIFIER: 2>, 93), ('==', <TokenType.TEQUALS: 24>, 93), ('4', <TokenType.INT_CONSTANT: 3>, 93), (')', <TokenType.CLOSE_PAREN: 8>, 93), (';', <TokenType.SEMICOLON: 11>, 93), ('}', <TokenType.CLOSE_BRACE: 10>, 94), ('int', <TokenType.INT_KW: 4>, 95), ('main', <TokenType.IDENTIFIER: 2>, 95), ('(', <TokenType.OPEN_PAREN: 7>, 95), ('void', <TokenType.VOID_KW: 5>, 95), (')', <TokenType.CLOSE_PAREN: 8>, 95), ('{', <TokenType.OPEN_BRACE: 9>, 95), ('if', <TokenType.IF_KW: 31>, 96), ('(', <TokenType.OPEN_PAREN: 7>, 96), ('!', <TokenType.EXCLAMATION: 19>, 96), ('test_add_constant_to_pointer', <TokenType.IDENTIFIER: 2>, 96), ('(', <TokenType.OPEN_PAREN: 7>, 96), (')', <TokenType.CLOSE_PAREN: 8>, 96), (')', <TokenType.CLOSE_PAREN: 8>, 96), ('{', <TokenType.OPEN_BRACE: 9>, 96), ('return', <TokenType.RETURN_KW: 6>, 97), ('1', <TokenType.INT_CONSTANT: 3>, 97), (';', <TokenType.SEMICOLON: 11>, 97), ('}', <TokenType.CLOSE_BRACE: 10>, 98), ('if', <TokenType.IF_KW: 31>, 99), ('(', <TokenType.OPEN_PAREN: 7>, 99), ('!', <TokenType.EXCLAMATION: 19>, 99), ('test_add_negative_index', <TokenType.IDENTIFIER: 2>, 99), ('(', <TokenType.OPEN_PAREN: 7>, 99), (')', <TokenType.CLOSE_PAREN: 8>, 99), (')', <TokenType.CLOSE_PAREN: 8>, 99), ('{', <TokenType.OPEN_BRACE: 9>, 99), ('return', <TokenType.RETURN_KW: 6>, 100), ('2', <TokenType.INT_CONSTANT: 3>, 100), (';', <TokenType.SEMICOLON: 11>, 100), ('}', <TokenType.CLOSE_BRACE: 10>, 101), ('if', <TokenType.IF_KW: 31>, 102), ('(', <TokenType.OPEN_PAREN: 7>, 102), ('!', <TokenType.EXCLAMATION: 19>, 102), ('test_add_pointer_to_int', <TokenType.IDENTIFIER: 2>, 102), ('(', <TokenType.OPEN_PAREN: 7>, 102), (')', <TokenType.CLOSE_PAREN: 8>, 102), (')', <TokenType.CLOSE_PAREN: 8>, 102), ('{', <TokenType.OPEN_BRACE: 9>, 102), ('return', <TokenType.RETURN_KW: 6>, 103), ('3', <TokenType.INT_CONSTANT: 3>, 103), (';', <TokenType.SEMICOLON: 11>, 103), ('}', <TokenType.CLOSE_BRACE: 10>, 104), ('if', <TokenType.IF_KW: 31>, 105), ('(', <TokenType.OPEN_PAREN: 7>, 105), ('!', <TokenType.EXCLAMATION: 19>, 105), ('test_add_different_index_types', <TokenType.IDENTIFIER: 2>, 105), ('(', <TokenType.OPEN_PAREN: 7>, 105), (')', <TokenType.CLOSE_PAREN: 8>, 105), (')', <TokenType.CLOSE_PAREN: 8>, 105), ('{', <TokenType.OPEN_BRACE: 9>, 105), ('return', <TokenType.RETURN_KW: 6>, 106), ('4', <TokenType.INT_CONSTANT: 3>, 106), (';', <TokenType.SEMICOLON: 11>, 106), ('}', <TokenType.CLOSE_BRACE: 10>, 107), ('if', <TokenType.IF_KW: 31>, 108), ('(', <TokenType.OPEN_PAREN: 7>, 108), ('!', <TokenType.EXCLAMATION: 19>, 108), ('test_add_complex_expressions', <TokenType.IDENTIFIER: 2>, 108), ('(', <TokenType.OPEN_PAREN: 7>, 108), (')', <TokenType.CLOSE_PAREN: 8>, 108), (')', <TokenType.CLOSE_PAREN: 8>, 108), ('{', <TokenType.OPEN_BRACE: 9>, 108), ('return', <TokenType.RETURN_KW: 6>, 109), ('5', <TokenType.INT_CONSTANT: 3>, 109), (';', <TokenType.SEMICOLON: 11>, 109), ('}', <TokenType.CLOSE_BRACE: 10>, 110), ('if', <TokenType.IF_KW: 31>, 111), ('(', <TokenType.OPEN_PAREN: 7>, 111), ('!', <TokenType.EXCLAMATION: 19>, 111), ('test_add_multi_dimensional', <TokenType.IDENTIFIER: 2>, 111), ('(', <TokenType.OPEN_PAREN: 7>, 111), (')', <TokenType.CLOSE_PAREN: 8>, 111), (')', <TokenType.CLOSE_PAREN: 8>, 111), ('{', <TokenType.OPEN_BRACE: 9>, 111), ('return', <TokenType.RETURN_KW: 6>, 112), ('6', <TokenType.INT_CONSTANT: 3>, 112), (';', <TokenType.SEMICOLON: 11>, 112), ('}', <TokenType.CLOSE_BRACE: 10>, 113), ('if', <TokenType.IF_KW: 31>, 114), ('(', <TokenType.OPEN_PAREN: 7>, 114), ('!', <TokenType.EXCLAMATION: 19>, 114), ('test_add_to_subarray_pointer', <TokenType.IDENTIFIER: 2>, 114), ('(', <TokenType.OPEN_PAREN: 7>, 114), (')', <TokenType.CLOSE_PAREN: 8>, 114), (')', <TokenType.CLOSE_PAREN: 8>, 114), ('{', <TokenType.OPEN_BRACE: 9>, 114), ('return', <TokenType.RETURN_KW: 6>, 115), ('7', <TokenType.INT_CONSTANT: 3>, 115), (';', <TokenType.SEMICOLON: 11>, 115), ('}', <TokenType.CLOSE_BRACE: 10>, 116), ('if', <TokenType.IF_KW: 31>, 117), ('(', <TokenType.OPEN_PAREN: 7>, 117), ('!', <TokenType.EXCLAMATION: 19>, 117), ('test_subtract_from_pointer', <TokenType.IDENTIFIER: 2>, 117), ('(', <TokenType.OPEN_PAREN: 7>, 117), (')', <TokenType.CLOSE_PAREN: 8>, 117), (')', <TokenType.CLOSE_PAREN: 8>, 117), ('{', <TokenType.OPEN_BRACE: 9>, 117), ('return', <TokenType.RETURN_KW: 6>, 118), ('8', <TokenType.INT_CONSTANT: 3>, 118), (';', <TokenType.SEMICOLON: 11>, 118), ('}', <TokenType.CLOSE_BRACE: 10>, 119), ('if', <TokenType.IF_KW: 31>, 120), ('(', <TokenType.OPEN_PAREN: 7>, 120), ('!', <TokenType.EXCLAMATION: 19>, 120), ('test_subtract_negative_index', <TokenType.IDENTIFIER: 2>, 120), ('(', <TokenType.OPEN_PAREN: 7>, 120), (')', <TokenType.CLOSE_PAREN: 8>, 120), (')', <TokenType.CLOSE_PAREN: 8>, 120), ('{', <TokenType.OPEN_BRACE: 9>, 120), ('return', <TokenType.RETURN_KW: 6>, 121), ('9', <TokenType.INT_CONSTANT: 3>, 121), (';', <TokenType.SEMICOLON: 11>, 121), ('}', <TokenType.CLOSE_BRACE: 10>, 122), ('if', <TokenType.IF_KW: 31>, 123), ('(', <TokenType.OPEN_PAREN: 7>, 123), ('!', <TokenType.EXCLAMATION: 19>, 123), ('test_subtract_different_index_types', <TokenType.IDENTIFIER: 2>, 123), ('(', <TokenType.OPEN_PAREN: 7>, 123), (')', <TokenType.CLOSE_PAREN: 8>, 123), (')', <TokenType.CLOSE_PAREN: 8>, 123), ('{', <TokenType.OPEN_BRACE: 9>, 123), ('return', <TokenType.RETURN_KW: 6>, 124), ('10', <TokenType.INT_CONSTANT: 3>, 124), (';', <TokenType.SEMICOLON: 11>, 124), ('}', <TokenType.CLOSE_BRACE: 10>, 125), ('if', <TokenType.IF_KW: 31>, 126), ('(', <TokenType.OPEN_PAREN: 7>, 126), ('!', <TokenType.EXCLAMATION: 19>, 126), ('test_subtract_complex_expressions', <TokenType.IDENTIFIER: 2>, 126), ('(', <TokenType.OPEN_PAREN: 7>, 126), (')', <TokenType.CLOSE_PAREN: 8>, 126), (')', <TokenType.CLOSE_PAREN: 8>, 126), ('{', <TokenType.OPEN_BRACE: 9>, 126), ('return', <TokenType.RETURN_KW: 6>, 127), ('11', <TokenType.INT_CONSTANT: 3>, 127), (';', <TokenType.SEMICOLON: 11>, 127), ('}', <TokenType.CLOSE_BRACE: 10>, 128), ('return', <TokenType.RETURN_KW: 6>, 129), ('0', <TokenType.INT_CONSTANT: 3>, 129), (';', <TokenType.SEMICOLON: 11>, 129), ('}', <TokenType.CLOSE_BRACE: 10>, 130)]
<parser.Int object at 0x7f8f86610e60>
[<parser.TypeS object at 0x7f8f8a0d6180>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_constant_to_pointer) [])
FunType: ParamTypes: [] Return Type: int
<parser.Long object at 0x7f8f864591c0>
[<parser.TypeS object at 0x7f8f864591f0>]
[<class 'parser.Long'>]
long
long (ArrayDeclarator: (IdenDeclarator: long_arr), 12)
ArrayType: long Size: 12
<parser.Long object at 0x7f8f86459250>
[<parser.TypeS object at 0x7f8f864591f0>]
[<class 'parser.Long'>]
long
long (PointerDeclarator: (IdenDeclarator: ptr))
Plong
<parser.Int object at 0x7f8f8a0d6180>
[<parser.TypeS object at 0x7f8f86610e60>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_negative_index) [])
FunType: ParamTypes: [] Return Type: int
<parser.Unsigned object at 0x7f8f86459d90>
[<parser.TypeS object at 0x7f8f86459dc0>]
[<class 'parser.Unsigned'>]
uint
uint (ArrayDeclarator: (IdenDeclarator: unsigned_arr), 12)
ArrayType: uint Size: 12
<parser.Unsigned object at 0x7f8f86459e50>
[<parser.TypeS object at 0x7f8f86459dc0>]
[<class 'parser.Unsigned'>]
uint
uint (PointerDeclarator: (IdenDeclarator: end_ptr))
Puint
<parser.Unsigned object at 0x7f8f8645a690>
[<parser.TypeS object at 0x7f8f86459dc0>]
[<class 'parser.Unsigned'>]
uint
uint (PointerDeclarator: (IdenDeclarator: ptr))
Puint
<parser.Int object at 0x7f8f86610e60>
[<parser.TypeS object at 0x7f8f8a0d6180>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_pointer_to_int) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f8650f680>
[<parser.TypeS object at 0x7f8f8645ad50>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (IdenDeclarator: int_arr), 5)
ArrayType: int Size: 5
<parser.Int object at 0x7f8f8645ae10>
[<parser.TypeS object at 0x7f8f8645ade0>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: ptr1))
Pint
<parser.Int object at 0x7f8f8645b110>
[<parser.TypeS object at 0x7f8f8645ade0>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: ptr2))
Pint
<parser.Int object at 0x7f8f8a0d6180>
[<parser.TypeS object at 0x7f8f86610e60>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_different_index_types) [])
FunType: ParamTypes: [] Return Type: int
<parser.Double object at 0x7f8f8645b860>
[<parser.TypeS object at 0x7f8f8645b890>]
[<class 'parser.Double'>]
double
double (ArrayDeclarator: (IdenDeclarator: double_arr), 11)
ArrayType: double Size: 11
<parser.Double object at 0x7f8f8645b920>
[<parser.TypeS object at 0x7f8f8645b890>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr1))
Pdouble
<parser.Double object at 0x7f8f8645bda0>
[<parser.TypeS object at 0x7f8f8645b890>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr2))
Pdouble
<parser.Double object at 0x7f8f8645bda0>
[<parser.TypeS object at 0x7f8f86470080>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr3))
Pdouble
<parser.Double object at 0x7f8f864702c0>
[<parser.TypeS object at 0x7f8f86470290>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr4))
Pdouble
<parser.Int object at 0x7f8f8645b7d0>
[<parser.TypeS object at 0x7f8f8645b7a0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_complex_expressions) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f86470b30>
[<parser.Static object at 0x7f8f86470b00>, <parser.TypeS object at 0x7f8f86470b60>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: flag)
int
<parser.Int object at 0x7f8f86470b60>
[<parser.TypeS object at 0x7f8f86470b30>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: i)
int
<parser.Int object at 0x7f8f86470b30>
[<parser.TypeS object at 0x7f8f86470b60>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: small_int_ptr))
Pint
<parser.Int object at 0x7f8f86470b60>
[<parser.Extern object at 0x7f8f86470e90>, <parser.TypeS object at 0x7f8f86470b30>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: return_one) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f86470b30>
[<parser.Extern object at 0x7f8f86471070>, <parser.TypeS object at 0x7f8f86470b60>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (PointerDeclarator: (FunDeclarator: (IdenDeclarator: get_elem1_ptr) [int (PointerDeclarator: (IdenDeclarator: arr))]))
FunType: ParamTypes: [Pint] Return Type: Pint
<parser.Int object at 0x7f8f864711c0>
[<parser.Extern object at 0x7f8f864711f0>, <parser.TypeS object at 0x7f8f86471310>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (PointerDeclarator: (FunDeclarator: (IdenDeclarator: get_elem2_ptr) [int (PointerDeclarator: (IdenDeclarator: arr))]))
FunType: ParamTypes: [Pint] Return Type: Pint
<parser.Int object at 0x7f8f864712b0>
[<parser.Static object at 0x7f8f86471070>, <parser.TypeS object at 0x7f8f86470b30>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (IdenDeclarator: arr), 4)
ArrayType: int Size: 4
<parser.Int object at 0x7f8f864714c0>
[<parser.TypeS object at 0x7f8f86470b30>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: ptr))
Pint
<parser.Int object at 0x7f8f8645b7a0>
[<parser.TypeS object at 0x7f8f8645b7d0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: return_one) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f8645b7d0>
[<parser.TypeS object at 0x7f8f8645b7a0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (PointerDeclarator: (FunDeclarator: (IdenDeclarator: get_elem1_ptr) [int (PointerDeclarator: (IdenDeclarator: arr))]))
FunType: ParamTypes: [Pint] Return Type: Pint
<parser.Int object at 0x7f8f8645b7a0>
[<parser.TypeS object at 0x7f8f8645b7d0>]
[<class 'parser.Int'>]
int
[<class 'parser.Int'>]
int (PointerDeclarator: (FunDeclarator: (IdenDeclarator: get_elem2_ptr) [int (PointerDeclarator: (IdenDeclarator: arr))]))
FunType: ParamTypes: [Pint] Return Type: Pint
<parser.Int object at 0x7f8f8645b7d0>
[<parser.TypeS object at 0x7f8f8645b7a0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_multi_dimensional) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f86472b40>
[<parser.Static object at 0x7f8f86472b10>, <parser.TypeS object at 0x7f8f86472ba0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: index)
int
<parser.Int object at 0x7f8f86472ba0>
[<parser.TypeS object at 0x7f8f86472b70>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (ArrayDeclarator: (IdenDeclarator: nested_arr), 3), 3)
ArrayType: ArrayType: int Size: 3 Size: 3
<parser.Int object at 0x7f8f86472e10>
[<parser.TypeS object at 0x7f8f86472de0>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (PointerDeclarator: (IdenDeclarator: row_pointer)), 3)
PArrayType: int Size: 3
<parser.Int object at 0x7f8f8645b7a0>
[<parser.TypeS object at 0x7f8f8645b7d0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_add_to_subarray_pointer) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f86473ad0>
[<parser.Static object at 0x7f8f86473aa0>, <parser.TypeS object at 0x7f8f86473b00>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: index)
int
<parser.Int object at 0x7f8f86473ad0>
[<parser.TypeS object at 0x7f8f86473aa0>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (ArrayDeclarator: (IdenDeclarator: nested_arr), 3), 3)
ArrayType: ArrayType: int Size: 3 Size: 3
<parser.Int object at 0x7f8f86473d10>
[<parser.TypeS object at 0x7f8f86473aa0>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: row1))
Pint
<parser.Int object at 0x7f8f86473d10>
[<parser.TypeS object at 0x7f8f86478590>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: elem_ptr))
Pint
<parser.Int object at 0x7f8f86473a10>
[<parser.TypeS object at 0x7f8f864739e0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_subtract_from_pointer) [])
FunType: ParamTypes: [] Return Type: int
<parser.Long object at 0x7f8f86478ce0>
[<parser.TypeS object at 0x7f8f86478d10>]
[<class 'parser.Long'>]
long
long (ArrayDeclarator: (IdenDeclarator: long_arr), 5)
ArrayType: long Size: 5
<parser.Long object at 0x7f8f86478da0>
[<parser.TypeS object at 0x7f8f86459a30>]
[<class 'parser.Long'>]
long
long (PointerDeclarator: (IdenDeclarator: one_past_the_end))
Plong
<parser.Int object at 0x7f8f86459a30>
[<parser.Static object at 0x7f8f8645b1a0>, <parser.TypeS object at 0x7f8f86478da0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: index)
int
<parser.Long object at 0x7f8f8645b1a0>
[<parser.TypeS object at 0x7f8f86479280>]
[<class 'parser.Long'>]
long
long (PointerDeclarator: (IdenDeclarator: subtraction_result))
Plong
<parser.Int object at 0x7f8f864739e0>
[<parser.TypeS object at 0x7f8f86473a10>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_subtract_negative_index) [])
FunType: ParamTypes: [] Return Type: int
<parser.Unsigned object at 0x7f8f864798e0>
[<parser.TypeS object at 0x7f8f86479910>]
[<class 'parser.Unsigned'>]
uint
uint (ArrayDeclarator: (IdenDeclarator: arr), 5)
ArrayType: uint Size: 5
<parser.Unsigned object at 0x7f8f864799a0>
[<parser.TypeS object at 0x7f8f86479910>]
[<class 'parser.Unsigned'>]
uint
uint (PointerDeclarator: (IdenDeclarator: ptr))
Puint
<parser.Int object at 0x7f8f86473a10>
[<parser.TypeS object at 0x7f8f864739e0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_subtract_different_index_types) [])
FunType: ParamTypes: [] Return Type: int
<parser.Double object at 0x7f8f8647a2a0>
[<parser.TypeS object at 0x7f8f8647a2d0>]
[<class 'parser.Double'>]
double
double (ArrayDeclarator: (IdenDeclarator: double_arr), 11)
ArrayType: double Size: 11
<parser.Double object at 0x7f8f8647a360>
[<parser.TypeS object at 0x7f8f8647a2d0>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: end_ptr))
Pdouble
<parser.Double object at 0x7f8f8647a930>
[<parser.TypeS object at 0x7f8f8647a8d0>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr1))
Pdouble
<parser.Double object at 0x7f8f8647aba0>
[<parser.TypeS object at 0x7f8f8647a8d0>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr2))
Pdouble
<parser.Double object at 0x7f8f8647ae70>
[<parser.TypeS object at 0x7f8f8647a8d0>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr3))
Pdouble
<parser.Double object at 0x7f8f8647b110>
[<parser.TypeS object at 0x7f8f8647a8d0>]
[<class 'parser.Double'>]
double
double (PointerDeclarator: (IdenDeclarator: ptr4))
Pdouble
<parser.Int object at 0x7f8f864739e0>
[<parser.TypeS object at 0x7f8f86473a10>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_subtract_complex_expressions) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f8647bb90>
[<parser.Static object at 0x7f8f8639e1b0>, <parser.TypeS object at 0x7f8f8647bbc0>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: flag)
int
<parser.Int object at 0x7f8f8647bbc0>
[<parser.Static object at 0x7f8f8647bc20>, <parser.TypeS object at 0x7f8f8647bb90>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: four)
int
<parser.Int object at 0x7f8f8647bbc0>
[<parser.Static object at 0x7f8f8647bb90>, <parser.TypeS object at 0x7f8f8647bc20>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (IdenDeclarator: arr), 4)
ArrayType: int Size: 4
<parser.Int object at 0x7f8f8647bc20>
[<parser.TypeS object at 0x7f8f8647bbc0>]
[<class 'parser.Int'>]
int
int (PointerDeclarator: (IdenDeclarator: ptr))
Pint
<parser.Int object at 0x7f8f8647bb00>
[<parser.TypeS object at 0x7f8f8647bad0>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: test_subtract_multi_dimensional) [])
FunType: ParamTypes: [] Return Type: int
<parser.Int object at 0x7f8f86280b00>
[<parser.Static object at 0x7f8f86280ad0>, <parser.TypeS object at 0x7f8f86280b30>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: index)
int
<parser.Int object at 0x7f8f86280b30>
[<parser.TypeS object at 0x7f8f86280b00>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (ArrayDeclarator: (IdenDeclarator: nested_arr), 3), 3)
ArrayType: ArrayType: int Size: 3 Size: 3
<parser.Int object at 0x7f8f86280d70>
[<parser.TypeS object at 0x7f8f86280d40>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (PointerDeclarator: (IdenDeclarator: last_row_pointer)), 3)
PArrayType: int Size: 3
<parser.Int object at 0x7f8f862814f0>
[<parser.TypeS object at 0x7f8f862814c0>]
[<class 'parser.Int'>]
int
int (ArrayDeclarator: (PointerDeclarator: (IdenDeclarator: row_pointer)), 3)
PArrayType: int Size: 3
<parser.Int object at 0x7f8f8647bad0>
[<parser.TypeS object at 0x7f8f8647bb00>]
[<class 'parser.Int'>]
int
int (FunDeclarator: (IdenDeclarator: main) [])
FunType: ParamTypes: [] Return Type: int
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
AST Program:
FunDecl: NULL test_add_constant_to_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 12) long_arr = 
CI:[SI: (0), SI: (0), SI: (3), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (13), ]
Declaration:
VarDecl: NULL Plong ptr = SI: ((long_arr) ADD (10))
Statement: return ((*(ptr)) EQUAL (13))
FunDecl: NULL test_add_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 12) unsigned_arr = 
CI:[SI: (0), SI: (0), SI: (2), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (42), ]
Declaration:
VarDecl: NULL Puint end_ptr = SI: ((unsigned_arr) ADD (12))
Declaration:
VarDecl: NULL Puint ptr = SI: ((end_ptr) ADD (NEGATE (10)))
Statement: return ((*(ptr)) EQUAL (2))
FunDecl: NULL test_add_pointer_to_int () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( int, size: 5) int_arr = 
CI:[SI: (0), SI: (98), SI: (99), ]
Declaration:
VarDecl: NULL Pint ptr1 = SI: ((int_arr) ADD (2))
Declaration:
VarDecl: NULL Pint ptr2 = SI: ((2) ADD (int_arr))
Statement: return (((ptr1) EQUAL (ptr2)) AND ((*(ptr2)) EQUAL (99)))
FunDecl: NULL test_add_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr = 
CI:[SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (6.0), ]
Declaration:
VarDecl: NULL Pdouble ptr1 = SI: ((double_arr) ADD (5))
Declaration:
VarDecl: NULL Pdouble ptr2 = SI: ((double_arr) ADD (5))
Declaration:
VarDecl: NULL Pdouble ptr3 = SI: ((double_arr) ADD (5))
Declaration:
VarDecl: NULL Pdouble ptr4 = SI: ((double_arr) ADD (5))
Statement: return (((((ptr1) EQUAL (ptr2)) AND ((ptr1) EQUAL (ptr3))) AND ((ptr1) EQUAL (ptr4))) AND ((*(ptr4)) EQUAL (6.0)))
FunDecl: NULL test_add_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag
Declaration:
VarDecl: NULL int i = SI: (NEGATE (2))
Declaration:
VarDecl: NULL Pint small_int_ptr = SI: (&(i))
Declaration:
FunDecl: EXTERN return_one () ParamTypes: () ReturnType: int

Declaration:
FunDecl: EXTERN get_elem1_ptr (arr, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
FunDecl: EXTERN get_elem2_ptr (arr, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr = 
CI:[SI: (1), SI: (2), SI: (3), SI: (4), ]
Declaration:
VarDecl: NULL Pint ptr = SI: (((return_one()) ADD (*(small_int_ptr))) ADD (((flag)) ? (get_elem1_ptr((arr), )) : (get_elem2_ptr((arr), ))))
Statement: return (((ptr) EQUAL ((arr) ADD (1))) AND ((*(ptr)) EQUAL (2)))
FunDecl: NULL return_one () ParamTypes: () ReturnType: int
Statement: return (1)
FunDecl: NULL get_elem1_ptr (arr, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr) ADD (1))
FunDecl: NULL get_elem2_ptr (arr, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr) ADD (2))
FunDecl: NULL test_add_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index = SI: (2)
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr = 
CI:[
	CI:[SI: (1), SI: (2), SI: (3), ], 
	CI:[SI: (4), SI: (5), SI: (6), ], 
	CI:[SI: (7), SI: (8), SI: (9), ], ]
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer = SI: ((nested_arr) ADD (index))
Statement: return ((*(*(row_pointer))) EQUAL (7))
FunDecl: NULL test_add_to_subarray_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index = SI: (2)
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr = 
CI:[
	CI:[SI: (1), SI: (2), SI: (3), ], 
	CI:[SI: (4), SI: (5), SI: (6), ], 
	CI:[SI: (7), SI: (8), SI: (9), ], ]
Declaration:
VarDecl: NULL Pint row1 = SI: (*((nested_arr) ADD (1)))
Declaration:
VarDecl: NULL Pint elem_ptr = SI: ((row1) ADD (index))
Statement: return ((*(elem_ptr)) EQUAL (6))
FunDecl: NULL test_subtract_from_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 5) long_arr = 
CI:[SI: (10), SI: (9), SI: (8), SI: (7), SI: (6), ]
Declaration:
VarDecl: NULL Plong one_past_the_end = SI: ((long_arr) ADD (5))
Declaration:
VarDecl: STATIC int index = SI: (3)
Declaration:
VarDecl: NULL Plong subtraction_result = SI: ((one_past_the_end) SUBTRACT (index))
Statement: return ((*(subtraction_result)) EQUAL (8))
FunDecl: NULL test_subtract_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 5) arr = 
CI:[SI: (100), SI: (101), SI: (102), SI: (103), SI: (104), ]
Declaration:
VarDecl: NULL Puint ptr = SI: ((arr) SUBTRACT (NEGATE (3)))
Statement: return ((*(ptr)) EQUAL (103))
FunDecl: NULL test_subtract_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr = 
CI:[SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (6.0), ]
Declaration:
VarDecl: NULL Pdouble end_ptr = SI: ((double_arr) ADD (11))
Declaration:
VarDecl: NULL Pdouble ptr1 = SI: ((end_ptr) SUBTRACT (5))
Declaration:
VarDecl: NULL Pdouble ptr2 = SI: ((end_ptr) SUBTRACT (5))
Declaration:
VarDecl: NULL Pdouble ptr3 = SI: ((end_ptr) SUBTRACT (5))
Declaration:
VarDecl: NULL Pdouble ptr4 = SI: ((end_ptr) SUBTRACT (5))
Statement: return (((((ptr1) EQUAL (ptr2)) AND ((ptr1) EQUAL (ptr3))) AND ((ptr1) EQUAL (ptr4))) AND ((*(ptr4)) EQUAL (6.0)))
FunDecl: NULL test_subtract_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag = SI: (1)
Declaration:
VarDecl: STATIC int four = SI: (4)
Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr = 
CI:[SI: (1), SI: (2), SI: (3), SI: (4), ]
Declaration:
VarDecl: NULL Pint ptr = SI: ((((flag)) ? (get_elem1_ptr((arr), )) : (get_elem2_ptr((arr), ))) SUBTRACT ((four) DIVIDE (NEGATE (2))))
Statement: return ((*(ptr)) EQUAL (4))
FunDecl: NULL test_subtract_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index = SI: (1)
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr = 
CI:[
	CI:[SI: (1), SI: (2), SI: (3), ], 
	CI:[SI: (4), SI: (5), SI: (6), ], 
	CI:[SI: (7), SI: (8), SI: (9), ], ]
Declaration:
VarDecl: NULL PArrayType( int, size: 3) last_row_pointer = SI: ((nested_arr) ADD (2))
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer = SI: ((last_row_pointer) SUBTRACT (index))
Statement: return ((*(*(row_pointer))) EQUAL (4))
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: if ((NOT (test_add_constant_to_pointer())))
	Statement: return (1)
Statement: if ((NOT (test_add_negative_index())))
	Statement: return (2)
Statement: if ((NOT (test_add_pointer_to_int())))
	Statement: return (3)
Statement: if ((NOT (test_add_different_index_types())))
	Statement: return (4)
Statement: if ((NOT (test_add_complex_expressions())))
	Statement: return (5)
Statement: if ((NOT (test_add_multi_dimensional())))
	Statement: return (6)
Statement: if ((NOT (test_add_to_subarray_pointer())))
	Statement: return (7)
Statement: if ((NOT (test_subtract_from_pointer())))
	Statement: return (8)
Statement: if ((NOT (test_subtract_negative_index())))
	Statement: return (9)
Statement: if ((NOT (test_subtract_different_index_types())))
	Statement: return (10)
Statement: if ((NOT (test_subtract_complex_expressions())))
	Statement: return (11)
Statement: return (0)

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
<class 'parser.FunctionCall_Exp'>
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
<class 'parser.FunctionCall_Exp'>
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
AST Program:
FunDecl: NULL test_add_constant_to_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 12) long_arr.0 = 
CI:[SI: (0), SI: (0), SI: (3), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (13), ]
Declaration:
VarDecl: NULL Plong ptr.1 = SI: ((long_arr.0) ADD (10))
Statement: return ((*(ptr.1)) EQUAL (13))
FunDecl: NULL test_add_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 12) unsigned_arr.2 = 
CI:[SI: (0), SI: (0), SI: (2), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (42), ]
Declaration:
VarDecl: NULL Puint end_ptr.3 = SI: ((unsigned_arr.2) ADD (12))
Declaration:
VarDecl: NULL Puint ptr.4 = SI: ((end_ptr.3) ADD (NEGATE (10)))
Statement: return ((*(ptr.4)) EQUAL (2))
FunDecl: NULL test_add_pointer_to_int () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( int, size: 5) int_arr.5 = 
CI:[SI: (0), SI: (98), SI: (99), ]
Declaration:
VarDecl: NULL Pint ptr1.6 = SI: ((int_arr.5) ADD (2))
Declaration:
VarDecl: NULL Pint ptr2.7 = SI: ((2) ADD (int_arr.5))
Statement: return (((ptr1.6) EQUAL (ptr2.7)) AND ((*(ptr2.7)) EQUAL (99)))
FunDecl: NULL test_add_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr.8 = 
CI:[SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (6.0), ]
Declaration:
VarDecl: NULL Pdouble ptr1.9 = SI: ((double_arr.8) ADD (5))
Declaration:
VarDecl: NULL Pdouble ptr2.10 = SI: ((double_arr.8) ADD (5))
Declaration:
VarDecl: NULL Pdouble ptr3.11 = SI: ((double_arr.8) ADD (5))
Declaration:
VarDecl: NULL Pdouble ptr4.12 = SI: ((double_arr.8) ADD (5))
Statement: return (((((ptr1.9) EQUAL (ptr2.10)) AND ((ptr1.9) EQUAL (ptr3.11))) AND ((ptr1.9) EQUAL (ptr4.12))) AND ((*(ptr4.12)) EQUAL (6.0)))
FunDecl: NULL test_add_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag.13
Declaration:
VarDecl: NULL int i.14 = SI: (NEGATE (2))
Declaration:
VarDecl: NULL Pint small_int_ptr.15 = SI: (&(i.14))
Declaration:
FunDecl: EXTERN return_one () ParamTypes: () ReturnType: int

Declaration:
FunDecl: EXTERN get_elem1_ptr (arr.16, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
FunDecl: EXTERN get_elem2_ptr (arr.17, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr.18 = 
CI:[SI: (1), SI: (2), SI: (3), SI: (4), ]
Declaration:
VarDecl: NULL Pint ptr.19 = SI: (((return_one()) ADD (*(small_int_ptr.15))) ADD (((flag.13)) ? (get_elem1_ptr((arr.18), )) : (get_elem2_ptr((arr.18), ))))
Statement: return (((ptr.19) EQUAL ((arr.18) ADD (1))) AND ((*(ptr.19)) EQUAL (2)))
FunDecl: NULL return_one () ParamTypes: () ReturnType: int
Statement: return (1)
FunDecl: NULL get_elem1_ptr (arr.20, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr.20) ADD (1))
FunDecl: NULL get_elem2_ptr (arr.21, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr.21) ADD (2))
FunDecl: NULL test_add_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.22 = SI: (2)
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.23 = 
CI:[
	CI:[SI: (1), SI: (2), SI: (3), ], 
	CI:[SI: (4), SI: (5), SI: (6), ], 
	CI:[SI: (7), SI: (8), SI: (9), ], ]
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer.24 = SI: ((nested_arr.23) ADD (index.22))
Statement: return ((*(*(row_pointer.24))) EQUAL (7))
FunDecl: NULL test_add_to_subarray_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.25 = SI: (2)
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.26 = 
CI:[
	CI:[SI: (1), SI: (2), SI: (3), ], 
	CI:[SI: (4), SI: (5), SI: (6), ], 
	CI:[SI: (7), SI: (8), SI: (9), ], ]
Declaration:
VarDecl: NULL Pint row1.27 = SI: (*((nested_arr.26) ADD (1)))
Declaration:
VarDecl: NULL Pint elem_ptr.28 = SI: ((row1.27) ADD (index.25))
Statement: return ((*(elem_ptr.28)) EQUAL (6))
FunDecl: NULL test_subtract_from_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 5) long_arr.29 = 
CI:[SI: (10), SI: (9), SI: (8), SI: (7), SI: (6), ]
Declaration:
VarDecl: NULL Plong one_past_the_end.30 = SI: ((long_arr.29) ADD (5))
Declaration:
VarDecl: STATIC int index.31 = SI: (3)
Declaration:
VarDecl: NULL Plong subtraction_result.32 = SI: ((one_past_the_end.30) SUBTRACT (index.31))
Statement: return ((*(subtraction_result.32)) EQUAL (8))
FunDecl: NULL test_subtract_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 5) arr.33 = 
CI:[SI: (100), SI: (101), SI: (102), SI: (103), SI: (104), ]
Declaration:
VarDecl: NULL Puint ptr.34 = SI: ((arr.33) SUBTRACT (NEGATE (3)))
Statement: return ((*(ptr.34)) EQUAL (103))
FunDecl: NULL test_subtract_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr.35 = 
CI:[SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (0), SI: (6.0), ]
Declaration:
VarDecl: NULL Pdouble end_ptr.36 = SI: ((double_arr.35) ADD (11))
Declaration:
VarDecl: NULL Pdouble ptr1.37 = SI: ((end_ptr.36) SUBTRACT (5))
Declaration:
VarDecl: NULL Pdouble ptr2.38 = SI: ((end_ptr.36) SUBTRACT (5))
Declaration:
VarDecl: NULL Pdouble ptr3.39 = SI: ((end_ptr.36) SUBTRACT (5))
Declaration:
VarDecl: NULL Pdouble ptr4.40 = SI: ((end_ptr.36) SUBTRACT (5))
Statement: return (((((ptr1.37) EQUAL (ptr2.38)) AND ((ptr1.37) EQUAL (ptr3.39))) AND ((ptr1.37) EQUAL (ptr4.40))) AND ((*(ptr4.40)) EQUAL (6.0)))
FunDecl: NULL test_subtract_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag.41 = SI: (1)
Declaration:
VarDecl: STATIC int four.42 = SI: (4)
Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr.43 = 
CI:[SI: (1), SI: (2), SI: (3), SI: (4), ]
Declaration:
VarDecl: NULL Pint ptr.44 = SI: ((((flag.41)) ? (get_elem1_ptr((arr.43), )) : (get_elem2_ptr((arr.43), ))) SUBTRACT ((four.42) DIVIDE (NEGATE (2))))
Statement: return ((*(ptr.44)) EQUAL (4))
FunDecl: NULL test_subtract_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.45 = SI: (1)
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.46 = 
CI:[
	CI:[SI: (1), SI: (2), SI: (3), ], 
	CI:[SI: (4), SI: (5), SI: (6), ], 
	CI:[SI: (7), SI: (8), SI: (9), ], ]
Declaration:
VarDecl: NULL PArrayType( int, size: 3) last_row_pointer.47 = SI: ((nested_arr.46) ADD (2))
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer.48 = SI: ((last_row_pointer.47) SUBTRACT (index.45))
Statement: return ((*(*(row_pointer.48))) EQUAL (4))
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: if ((NOT (test_add_constant_to_pointer())))
	Statement: return (1)
Statement: if ((NOT (test_add_negative_index())))
	Statement: return (2)
Statement: if ((NOT (test_add_pointer_to_int())))
	Statement: return (3)
Statement: if ((NOT (test_add_different_index_types())))
	Statement: return (4)
Statement: if ((NOT (test_add_complex_expressions())))
	Statement: return (5)
Statement: if ((NOT (test_add_multi_dimensional())))
	Statement: return (6)
Statement: if ((NOT (test_add_to_subarray_pointer())))
	Statement: return (7)
Statement: if ((NOT (test_subtract_from_pointer())))
	Statement: return (8)
Statement: if ((NOT (test_subtract_negative_index())))
	Statement: return (9)
Statement: if ((NOT (test_subtract_different_index_types())))
	Statement: return (10)
Statement: if ((NOT (test_subtract_complex_expressions())))
	Statement: return (11)
Statement: return (0)

[&(arr.18 RetType: ArrayType: int Size: 4) RetType: Pint]
[&(arr.18 RetType: ArrayType: int Size: 4) RetType: Pint]
Old:  Pint New: Pint
Old:  Pint New: Pint
[&(arr.43 RetType: ArrayType: int Size: 4) RetType: Pint]
[&(arr.43 RetType: ArrayType: int Size: 4) RetType: Pint]
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
AST Program:
FunDecl: NULL test_add_constant_to_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 12) long_arr.0 = 
CI:[SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (3 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (13 : int) : long) : long, SI: (0 : long) : long, ]
: ArrayType( long, size: 12)
Declaration:
VarDecl: NULL Plong ptr.1 = SI: ((&(long_arr.0 : ArrayType( long, size: 12)) : Plong) ADD ((long) (10 : int) : long) : Plong) : Plong
Statement: return ((*(ptr.1 : Plong) : long) EQUAL ((long) (13 : int) : long) : int)
FunDecl: NULL test_add_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 12) unsigned_arr.2 = 
CI:[SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (2 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (42 : int) : uint) : uint, SI: (0 : uint) : uint, ]
: ArrayType( uint, size: 12)
Declaration:
VarDecl: NULL Puint end_ptr.3 = SI: ((&(unsigned_arr.2 : ArrayType( uint, size: 12)) : Puint) ADD ((long) (12 : int) : long) : Puint) : Puint
Declaration:
VarDecl: NULL Puint ptr.4 = SI: ((end_ptr.3 : Puint) ADD ((long) (NEGATE (10 : int) : int) : long) : Puint) : Puint
Statement: return ((*(ptr.4 : Puint) : uint) EQUAL ((uint) (2 : int) : uint) : int)
FunDecl: NULL test_add_pointer_to_int () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( int, size: 5) int_arr.5 = 
CI:[SI: (0 : int) : int, SI: (98 : int) : int, SI: (99 : int) : int, SI: (0 : int) : int, SI: (0 : int) : int, ]
: ArrayType( int, size: 5)
Declaration:
VarDecl: NULL Pint ptr1.6 = SI: ((&(int_arr.5 : ArrayType( int, size: 5)) : Pint) ADD ((long) (2 : int) : long) : Pint) : Pint
Declaration:
VarDecl: NULL Pint ptr2.7 = SI: (((long) (2 : int) : long) ADD (&(int_arr.5 : ArrayType( int, size: 5)) : Pint) : Pint) : Pint
Statement: return (((ptr1.6 : Pint) EQUAL (ptr2.7 : Pint) : int) AND ((*(ptr2.7 : Pint) : int) EQUAL (99 : int) : int) : int)
FunDecl: NULL test_add_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr.8 = 
CI:[SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: (6.0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, ]
: ArrayType( double, size: 11)
Declaration:
VarDecl: NULL Pdouble ptr1.9 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (5 : int) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr2.10 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD (5 : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr3.11 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (5 : uint) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr4.12 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (5 : ulong) : long) : Pdouble) : Pdouble
Statement: return (((((ptr1.9 : Pdouble) EQUAL (ptr2.10 : Pdouble) : int) AND ((ptr1.9 : Pdouble) EQUAL (ptr3.11 : Pdouble) : int) : int) AND ((ptr1.9 : Pdouble) EQUAL (ptr4.12 : Pdouble) : int) : int) AND ((*(ptr4.12 : Pdouble) : double) EQUAL (6.0 : double) : int) : int)
FunDecl: NULL test_add_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag.13
Declaration:
VarDecl: NULL int i.14 = SI: (NEGATE (2 : int) : int) : int
Declaration:
VarDecl: NULL Pint small_int_ptr.15 = SI: (&(i.14 : int) : Pint) : Pint
Declaration:
FunDecl: EXTERN return_one () ParamTypes: () ReturnType: int

Declaration:
FunDecl: EXTERN get_elem1_ptr (arr.16, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
FunDecl: EXTERN get_elem2_ptr (arr.17, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr.18 = 
CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, SI: (4 : int) : int, ]
: ArrayType( int, size: 4)
Declaration:
VarDecl: NULL Pint ptr.19 = SI: (((long) ((return_one() : int) ADD (*(small_int_ptr.15 : Pint) : int) : int) : long) ADD (((flag.13 : int)) ? (get_elem1_ptr((&(arr.18 : ArrayType( int, size: 4)) : Pint), ) : Pint) : (get_elem2_ptr((&(arr.18 : ArrayType( int, size: 4)) : Pint), ) : Pint) : Pint) : Pint) : Pint
Statement: return (((ptr.19 : Pint) EQUAL ((&(arr.18 : ArrayType( int, size: 4)) : Pint) ADD ((long) (1 : int) : long) : Pint) : int) AND ((*(ptr.19 : Pint) : int) EQUAL (2 : int) : int) : int)
FunDecl: NULL return_one () ParamTypes: () ReturnType: int
Statement: return (1 : int)
FunDecl: NULL get_elem1_ptr (arr.20, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr.20 : Pint) ADD ((long) (1 : int) : long) : Pint)
FunDecl: NULL get_elem2_ptr (arr.21, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr.21 : Pint) ADD ((long) (2 : int) : long) : Pint)
FunDecl: NULL test_add_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.22 = SI: (2 : int) : int
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.23 = 
CI:[
	CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (4 : int) : int, SI: (5 : int) : int, SI: (6 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (7 : int) : int, SI: (8 : int) : int, SI: (9 : int) : int, ]
	: ArrayType( int, size: 3), ]
: ArrayType( ArrayType( int, size: 3), size: 3)
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer.24 = SI: ((&(nested_arr.23 : ArrayType( ArrayType( int, size: 3), size: 3)) : PArrayType( int, size: 3)) ADD ((long) (index.22 : int) : long) : PArrayType( int, size: 3)) : PArrayType( int, size: 3)
Statement: return ((*(&(*(row_pointer.24 : PArrayType( int, size: 3)) : ArrayType( int, size: 3)) : Pint) : int) EQUAL (7 : int) : int)
FunDecl: NULL test_add_to_subarray_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.25 = SI: (2 : int) : int
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.26 = 
CI:[
	CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (4 : int) : int, SI: (5 : int) : int, SI: (6 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (7 : int) : int, SI: (8 : int) : int, SI: (9 : int) : int, ]
	: ArrayType( int, size: 3), ]
: ArrayType( ArrayType( int, size: 3), size: 3)
Declaration:
VarDecl: NULL Pint row1.27 = SI: (&(*((&(nested_arr.26 : ArrayType( ArrayType( int, size: 3), size: 3)) : PArrayType( int, size: 3)) ADD ((long) (1 : int) : long) : PArrayType( int, size: 3)) : ArrayType( int, size: 3)) : Pint) : Pint
Declaration:
VarDecl: NULL Pint elem_ptr.28 = SI: ((row1.27 : Pint) ADD ((long) (index.25 : int) : long) : Pint) : Pint
Statement: return ((*(elem_ptr.28 : Pint) : int) EQUAL (6 : int) : int)
FunDecl: NULL test_subtract_from_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 5) long_arr.29 = 
CI:[SI: ((long) (10 : int) : long) : long, SI: ((long) (9 : int) : long) : long, SI: ((long) (8 : int) : long) : long, SI: ((long) (7 : int) : long) : long, SI: ((long) (6 : int) : long) : long, ]
: ArrayType( long, size: 5)
Declaration:
VarDecl: NULL Plong one_past_the_end.30 = SI: ((&(long_arr.29 : ArrayType( long, size: 5)) : Plong) ADD ((long) (5 : int) : long) : Plong) : Plong
Declaration:
VarDecl: STATIC int index.31 = SI: (3 : int) : int
Declaration:
VarDecl: NULL Plong subtraction_result.32 = SI: ((one_past_the_end.30 : Plong) SUBTRACT ((long) (index.31 : int) : long) : Plong) : Plong
Statement: return ((*(subtraction_result.32 : Plong) : long) EQUAL ((long) (8 : int) : long) : int)
FunDecl: NULL test_subtract_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 5) arr.33 = 
CI:[SI: ((uint) (100 : int) : uint) : uint, SI: ((uint) (101 : int) : uint) : uint, SI: ((uint) (102 : int) : uint) : uint, SI: ((uint) (103 : int) : uint) : uint, SI: ((uint) (104 : int) : uint) : uint, ]
: ArrayType( uint, size: 5)
Declaration:
VarDecl: NULL Puint ptr.34 = SI: ((&(arr.33 : ArrayType( uint, size: 5)) : Puint) SUBTRACT ((long) (NEGATE (3 : int) : int) : long) : Puint) : Puint
Statement: return ((*(ptr.34 : Puint) : uint) EQUAL ((uint) (103 : int) : uint) : int)
FunDecl: NULL test_subtract_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr.35 = 
CI:[SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: (6.0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, ]
: ArrayType( double, size: 11)
Declaration:
VarDecl: NULL Pdouble end_ptr.36 = SI: ((&(double_arr.35 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (11 : int) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr1.37 = SI: ((end_ptr.36 : Pdouble) SUBTRACT ((long) (5 : int) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr2.38 = SI: ((end_ptr.36 : Pdouble) SUBTRACT (5 : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr3.39 = SI: ((end_ptr.36 : Pdouble) SUBTRACT ((long) (5 : uint) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr4.40 = SI: ((end_ptr.36 : Pdouble) SUBTRACT ((long) (5 : ulong) : long) : Pdouble) : Pdouble
Statement: return (((((ptr1.37 : Pdouble) EQUAL (ptr2.38 : Pdouble) : int) AND ((ptr1.37 : Pdouble) EQUAL (ptr3.39 : Pdouble) : int) : int) AND ((ptr1.37 : Pdouble) EQUAL (ptr4.40 : Pdouble) : int) : int) AND ((*(ptr4.40 : Pdouble) : double) EQUAL (6.0 : double) : int) : int)
FunDecl: NULL test_subtract_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag.41 = SI: (1 : int) : int
Declaration:
VarDecl: STATIC int four.42 = SI: (4 : int) : int
Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr.43 = 
CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, SI: (4 : int) : int, ]
: ArrayType( int, size: 4)
Declaration:
VarDecl: NULL Pint ptr.44 = SI: ((((flag.41 : int)) ? (get_elem1_ptr((&(arr.43 : ArrayType( int, size: 4)) : Pint), ) : Pint) : (get_elem2_ptr((&(arr.43 : ArrayType( int, size: 4)) : Pint), ) : Pint) : Pint) SUBTRACT ((long) ((four.42 : int) DIVIDE (NEGATE (2 : int) : int) : int) : long) : Pint) : Pint
Statement: return ((*(ptr.44 : Pint) : int) EQUAL (4 : int) : int)
FunDecl: NULL test_subtract_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.45 = SI: (1 : int) : int
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.46 = 
CI:[
	CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (4 : int) : int, SI: (5 : int) : int, SI: (6 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (7 : int) : int, SI: (8 : int) : int, SI: (9 : int) : int, ]
	: ArrayType( int, size: 3), ]
: ArrayType( ArrayType( int, size: 3), size: 3)
Declaration:
VarDecl: NULL PArrayType( int, size: 3) last_row_pointer.47 = SI: ((&(nested_arr.46 : ArrayType( ArrayType( int, size: 3), size: 3)) : PArrayType( int, size: 3)) ADD ((long) (2 : int) : long) : PArrayType( int, size: 3)) : PArrayType( int, size: 3)
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer.48 = SI: ((last_row_pointer.47 : PArrayType( int, size: 3)) SUBTRACT ((long) (index.45 : int) : long) : PArrayType( int, size: 3)) : PArrayType( int, size: 3)
Statement: return ((*(&(*(row_pointer.48 : PArrayType( int, size: 3)) : ArrayType( int, size: 3)) : Pint) : int) EQUAL (4 : int) : int)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: if ((NOT (test_add_constant_to_pointer() : int) : int))
	Statement: return (1 : int)
Statement: if ((NOT (test_add_negative_index() : int) : int))
	Statement: return (2 : int)
Statement: if ((NOT (test_add_pointer_to_int() : int) : int))
	Statement: return (3 : int)
Statement: if ((NOT (test_add_different_index_types() : int) : int))
	Statement: return (4 : int)
Statement: if ((NOT (test_add_complex_expressions() : int) : int))
	Statement: return (5 : int)
Statement: if ((NOT (test_add_multi_dimensional() : int) : int))
	Statement: return (6 : int)
Statement: if ((NOT (test_add_to_subarray_pointer() : int) : int))
	Statement: return (7 : int)
Statement: if ((NOT (test_subtract_from_pointer() : int) : int))
	Statement: return (8 : int)
Statement: if ((NOT (test_subtract_negative_index() : int) : int))
	Statement: return (9 : int)
Statement: if ((NOT (test_subtract_different_index_types() : int) : int))
	Statement: return (10 : int)
Statement: if ((NOT (test_subtract_complex_expressions() : int) : int))
	Statement: return (11 : int)
Statement: return (0 : int)

Type Table:
 {}
Symbol Table:
 {'test_add_constant_to_pointer': test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'long_arr.0': long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>, 'ptr.1': ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>, 'test_add_negative_index': test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'unsigned_arr.2': unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>, 'end_ptr.3': end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>, 'ptr.4': ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>, 'test_add_pointer_to_int': test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'int_arr.5': int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>, 'ptr1.6': ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>, 'ptr2.7': ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>, 'test_add_different_index_types': test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'double_arr.8': double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>, 'ptr1.9': ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>, 'ptr2.10': ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>, 'ptr3.11': ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>, 'ptr4.12': ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>, 'test_add_complex_expressions': test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'flag.13': flag.13 int InitialVal: InitialList: [c_int(0)] Global: False, 'i.14': i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>, 'small_int_ptr.15': small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>, 'return_one': return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'get_elem1_ptr': get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True, 'get_elem2_ptr': get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True, 'arr.18': arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False, 'ptr.19': ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>, 'arr.20': arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>, 'arr.21': arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>, 'test_add_multi_dimensional': test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.22': index.22 int InitialVal: InitialList: [c_int(2)] Global: False, 'nested_arr.23': nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>, 'row_pointer.24': row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>, 'test_add_to_subarray_pointer': test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.25': index.25 int InitialVal: InitialList: [c_int(2)] Global: False, 'nested_arr.26': nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>, 'row1.27': row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>, 'elem_ptr.28': elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>, 'test_subtract_from_pointer': test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'long_arr.29': long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>, 'one_past_the_end.30': one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>, 'index.31': index.31 int InitialVal: InitialList: [c_int(3)] Global: False, 'subtraction_result.32': subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>, 'test_subtract_negative_index': test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'arr.33': arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>, 'ptr.34': ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>, 'test_subtract_different_index_types': test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'double_arr.35': double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>, 'end_ptr.36': end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>, 'ptr1.37': ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>, 'ptr2.38': ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>, 'ptr3.39': ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>, 'ptr4.40': ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>, 'test_subtract_complex_expressions': test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'flag.41': flag.41 int InitialVal: InitialList: [c_int(1)] Global: False, 'four.42': four.42 int InitialVal: InitialList: [c_int(4)] Global: False, 'arr.43': arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False, 'ptr.44': ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>, 'test_subtract_multi_dimensional': test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.45': index.45 int InitialVal: InitialList: [c_int(1)] Global: False, 'nested_arr.46': nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>, 'last_row_pointer.47': last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>, 'row_pointer.48': row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True}
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
AST Program:
FunDecl: NULL test_add_constant_to_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 12) long_arr.0 = 
CI:[SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (3 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (0 : int) : long) : long, SI: ((long) (13 : int) : long) : long, SI: (0 : long) : long, ]
: ArrayType( long, size: 12)
Declaration:
VarDecl: NULL Plong ptr.1 = SI: ((&(long_arr.0 : ArrayType( long, size: 12)) : Plong) ADD ((long) (10 : int) : long) : Plong) : Plong
Statement: return ((*(ptr.1 : Plong) : long) EQUAL ((long) (13 : int) : long) : int)
FunDecl: NULL test_add_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 12) unsigned_arr.2 = 
CI:[SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (2 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (0 : int) : uint) : uint, SI: ((uint) (42 : int) : uint) : uint, SI: (0 : uint) : uint, ]
: ArrayType( uint, size: 12)
Declaration:
VarDecl: NULL Puint end_ptr.3 = SI: ((&(unsigned_arr.2 : ArrayType( uint, size: 12)) : Puint) ADD ((long) (12 : int) : long) : Puint) : Puint
Declaration:
VarDecl: NULL Puint ptr.4 = SI: ((end_ptr.3 : Puint) ADD ((long) (NEGATE (10 : int) : int) : long) : Puint) : Puint
Statement: return ((*(ptr.4 : Puint) : uint) EQUAL ((uint) (2 : int) : uint) : int)
FunDecl: NULL test_add_pointer_to_int () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( int, size: 5) int_arr.5 = 
CI:[SI: (0 : int) : int, SI: (98 : int) : int, SI: (99 : int) : int, SI: (0 : int) : int, SI: (0 : int) : int, ]
: ArrayType( int, size: 5)
Declaration:
VarDecl: NULL Pint ptr1.6 = SI: ((&(int_arr.5 : ArrayType( int, size: 5)) : Pint) ADD ((long) (2 : int) : long) : Pint) : Pint
Declaration:
VarDecl: NULL Pint ptr2.7 = SI: (((long) (2 : int) : long) ADD (&(int_arr.5 : ArrayType( int, size: 5)) : Pint) : Pint) : Pint
Statement: return (((ptr1.6 : Pint) EQUAL (ptr2.7 : Pint) : int) AND ((*(ptr2.7 : Pint) : int) EQUAL (99 : int) : int) : int)
FunDecl: NULL test_add_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr.8 = 
CI:[SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: (6.0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, ]
: ArrayType( double, size: 11)
Declaration:
VarDecl: NULL Pdouble ptr1.9 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (5 : int) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr2.10 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD (5 : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr3.11 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (5 : uint) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr4.12 = SI: ((&(double_arr.8 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (5 : ulong) : long) : Pdouble) : Pdouble
Statement: return (((((ptr1.9 : Pdouble) EQUAL (ptr2.10 : Pdouble) : int) AND ((ptr1.9 : Pdouble) EQUAL (ptr3.11 : Pdouble) : int) : int) AND ((ptr1.9 : Pdouble) EQUAL (ptr4.12 : Pdouble) : int) : int) AND ((*(ptr4.12 : Pdouble) : double) EQUAL (6.0 : double) : int) : int)
FunDecl: NULL test_add_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag.13
Declaration:
VarDecl: NULL int i.14 = SI: (NEGATE (2 : int) : int) : int
Declaration:
VarDecl: NULL Pint small_int_ptr.15 = SI: (&(i.14 : int) : Pint) : Pint
Declaration:
FunDecl: EXTERN return_one () ParamTypes: () ReturnType: int

Declaration:
FunDecl: EXTERN get_elem1_ptr (arr.16, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
FunDecl: EXTERN get_elem2_ptr (arr.17, ) ParamTypes: (Pint, ) ReturnType: Pint

Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr.18 = 
CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, SI: (4 : int) : int, ]
: ArrayType( int, size: 4)
Declaration:
VarDecl: NULL Pint ptr.19 = SI: (((long) ((return_one() : int) ADD (*(small_int_ptr.15 : Pint) : int) : int) : long) ADD (((flag.13 : int)) ? (get_elem1_ptr((&(arr.18 : ArrayType( int, size: 4)) : Pint), ) : Pint) : (get_elem2_ptr((&(arr.18 : ArrayType( int, size: 4)) : Pint), ) : Pint) : Pint) : Pint) : Pint
Statement: return (((ptr.19 : Pint) EQUAL ((&(arr.18 : ArrayType( int, size: 4)) : Pint) ADD ((long) (1 : int) : long) : Pint) : int) AND ((*(ptr.19 : Pint) : int) EQUAL (2 : int) : int) : int)
FunDecl: NULL return_one () ParamTypes: () ReturnType: int
Statement: return (1 : int)
FunDecl: NULL get_elem1_ptr (arr.20, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr.20 : Pint) ADD ((long) (1 : int) : long) : Pint)
FunDecl: NULL get_elem2_ptr (arr.21, ) ParamTypes: (Pint, ) ReturnType: Pint
Statement: return ((arr.21 : Pint) ADD ((long) (2 : int) : long) : Pint)
FunDecl: NULL test_add_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.22 = SI: (2 : int) : int
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.23 = 
CI:[
	CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (4 : int) : int, SI: (5 : int) : int, SI: (6 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (7 : int) : int, SI: (8 : int) : int, SI: (9 : int) : int, ]
	: ArrayType( int, size: 3), ]
: ArrayType( ArrayType( int, size: 3), size: 3)
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer.24 = SI: ((&(nested_arr.23 : ArrayType( ArrayType( int, size: 3), size: 3)) : PArrayType( int, size: 3)) ADD ((long) (index.22 : int) : long) : PArrayType( int, size: 3)) : PArrayType( int, size: 3)
Statement: return ((*(&(*(row_pointer.24 : PArrayType( int, size: 3)) : ArrayType( int, size: 3)) : Pint) : int) EQUAL (7 : int) : int)
FunDecl: NULL test_add_to_subarray_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.25 = SI: (2 : int) : int
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.26 = 
CI:[
	CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (4 : int) : int, SI: (5 : int) : int, SI: (6 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (7 : int) : int, SI: (8 : int) : int, SI: (9 : int) : int, ]
	: ArrayType( int, size: 3), ]
: ArrayType( ArrayType( int, size: 3), size: 3)
Declaration:
VarDecl: NULL Pint row1.27 = SI: (&(*((&(nested_arr.26 : ArrayType( ArrayType( int, size: 3), size: 3)) : PArrayType( int, size: 3)) ADD ((long) (1 : int) : long) : PArrayType( int, size: 3)) : ArrayType( int, size: 3)) : Pint) : Pint
Declaration:
VarDecl: NULL Pint elem_ptr.28 = SI: ((row1.27 : Pint) ADD ((long) (index.25 : int) : long) : Pint) : Pint
Statement: return ((*(elem_ptr.28 : Pint) : int) EQUAL (6 : int) : int)
FunDecl: NULL test_subtract_from_pointer () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( long, size: 5) long_arr.29 = 
CI:[SI: ((long) (10 : int) : long) : long, SI: ((long) (9 : int) : long) : long, SI: ((long) (8 : int) : long) : long, SI: ((long) (7 : int) : long) : long, SI: ((long) (6 : int) : long) : long, ]
: ArrayType( long, size: 5)
Declaration:
VarDecl: NULL Plong one_past_the_end.30 = SI: ((&(long_arr.29 : ArrayType( long, size: 5)) : Plong) ADD ((long) (5 : int) : long) : Plong) : Plong
Declaration:
VarDecl: STATIC int index.31 = SI: (3 : int) : int
Declaration:
VarDecl: NULL Plong subtraction_result.32 = SI: ((one_past_the_end.30 : Plong) SUBTRACT ((long) (index.31 : int) : long) : Plong) : Plong
Statement: return ((*(subtraction_result.32 : Plong) : long) EQUAL ((long) (8 : int) : long) : int)
FunDecl: NULL test_subtract_negative_index () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( uint, size: 5) arr.33 = 
CI:[SI: ((uint) (100 : int) : uint) : uint, SI: ((uint) (101 : int) : uint) : uint, SI: ((uint) (102 : int) : uint) : uint, SI: ((uint) (103 : int) : uint) : uint, SI: ((uint) (104 : int) : uint) : uint, ]
: ArrayType( uint, size: 5)
Declaration:
VarDecl: NULL Puint ptr.34 = SI: ((&(arr.33 : ArrayType( uint, size: 5)) : Puint) SUBTRACT ((long) (NEGATE (3 : int) : int) : long) : Puint) : Puint
Statement: return ((*(ptr.34 : Puint) : uint) EQUAL ((uint) (103 : int) : uint) : int)
FunDecl: NULL test_subtract_different_index_types () ParamTypes: () ReturnType: int
Declaration:
VarDecl: NULL ArrayType( double, size: 11) double_arr.35 = 
CI:[SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: ((double) (0 : int) : double) : double, SI: (6.0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, SI: (0 : double) : double, ]
: ArrayType( double, size: 11)
Declaration:
VarDecl: NULL Pdouble end_ptr.36 = SI: ((&(double_arr.35 : ArrayType( double, size: 11)) : Pdouble) ADD ((long) (11 : int) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr1.37 = SI: ((end_ptr.36 : Pdouble) SUBTRACT ((long) (5 : int) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr2.38 = SI: ((end_ptr.36 : Pdouble) SUBTRACT (5 : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr3.39 = SI: ((end_ptr.36 : Pdouble) SUBTRACT ((long) (5 : uint) : long) : Pdouble) : Pdouble
Declaration:
VarDecl: NULL Pdouble ptr4.40 = SI: ((end_ptr.36 : Pdouble) SUBTRACT ((long) (5 : ulong) : long) : Pdouble) : Pdouble
Statement: return (((((ptr1.37 : Pdouble) EQUAL (ptr2.38 : Pdouble) : int) AND ((ptr1.37 : Pdouble) EQUAL (ptr3.39 : Pdouble) : int) : int) AND ((ptr1.37 : Pdouble) EQUAL (ptr4.40 : Pdouble) : int) : int) AND ((*(ptr4.40 : Pdouble) : double) EQUAL (6.0 : double) : int) : int)
FunDecl: NULL test_subtract_complex_expressions () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int flag.41 = SI: (1 : int) : int
Declaration:
VarDecl: STATIC int four.42 = SI: (4 : int) : int
Declaration:
VarDecl: STATIC ArrayType( int, size: 4) arr.43 = 
CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, SI: (4 : int) : int, ]
: ArrayType( int, size: 4)
Declaration:
VarDecl: NULL Pint ptr.44 = SI: ((((flag.41 : int)) ? (get_elem1_ptr((&(arr.43 : ArrayType( int, size: 4)) : Pint), ) : Pint) : (get_elem2_ptr((&(arr.43 : ArrayType( int, size: 4)) : Pint), ) : Pint) : Pint) SUBTRACT ((long) ((four.42 : int) DIVIDE (NEGATE (2 : int) : int) : int) : long) : Pint) : Pint
Statement: return ((*(ptr.44 : Pint) : int) EQUAL (4 : int) : int)
FunDecl: NULL test_subtract_multi_dimensional () ParamTypes: () ReturnType: int
Declaration:
VarDecl: STATIC int index.45 = SI: (1 : int) : int
Declaration:
VarDecl: NULL ArrayType( ArrayType( int, size: 3), size: 3) nested_arr.46 = 
CI:[
	CI:[SI: (1 : int) : int, SI: (2 : int) : int, SI: (3 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (4 : int) : int, SI: (5 : int) : int, SI: (6 : int) : int, ]
	: ArrayType( int, size: 3), 
	CI:[SI: (7 : int) : int, SI: (8 : int) : int, SI: (9 : int) : int, ]
	: ArrayType( int, size: 3), ]
: ArrayType( ArrayType( int, size: 3), size: 3)
Declaration:
VarDecl: NULL PArrayType( int, size: 3) last_row_pointer.47 = SI: ((&(nested_arr.46 : ArrayType( ArrayType( int, size: 3), size: 3)) : PArrayType( int, size: 3)) ADD ((long) (2 : int) : long) : PArrayType( int, size: 3)) : PArrayType( int, size: 3)
Declaration:
VarDecl: NULL PArrayType( int, size: 3) row_pointer.48 = SI: ((last_row_pointer.47 : PArrayType( int, size: 3)) SUBTRACT ((long) (index.45 : int) : long) : PArrayType( int, size: 3)) : PArrayType( int, size: 3)
Statement: return ((*(&(*(row_pointer.48 : PArrayType( int, size: 3)) : ArrayType( int, size: 3)) : Pint) : int) EQUAL (4 : int) : int)
FunDecl: NULL main () ParamTypes: () ReturnType: int
Statement: if ((NOT (test_add_constant_to_pointer() : int) : int))
	Statement: return (1 : int)
Statement: if ((NOT (test_add_negative_index() : int) : int))
	Statement: return (2 : int)
Statement: if ((NOT (test_add_pointer_to_int() : int) : int))
	Statement: return (3 : int)
Statement: if ((NOT (test_add_different_index_types() : int) : int))
	Statement: return (4 : int)
Statement: if ((NOT (test_add_complex_expressions() : int) : int))
	Statement: return (5 : int)
Statement: if ((NOT (test_add_multi_dimensional() : int) : int))
	Statement: return (6 : int)
Statement: if ((NOT (test_add_to_subarray_pointer() : int) : int))
	Statement: return (7 : int)
Statement: if ((NOT (test_subtract_from_pointer() : int) : int))
	Statement: return (8 : int)
Statement: if ((NOT (test_subtract_negative_index() : int) : int))
	Statement: return (9 : int)
Statement: if ((NOT (test_subtract_different_index_types() : int) : int))
	Statement: return (10 : int)
Statement: if ((NOT (test_subtract_complex_expressions() : int) : int))
	Statement: return (11 : int)
Statement: return (0 : int)

test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
TAC Program:[Function: test_add_constant_to_pointer ([]) instructions:[SignExtend tmp.49 = 0, CopyToOffset(long_arr.0 + 0) = tmp.49 , SignExtend tmp.50 = 0, CopyToOffset(long_arr.0 + 8) = tmp.50 , SignExtend tmp.51 = 3, CopyToOffset(long_arr.0 + 16) = tmp.51 , SignExtend tmp.52 = 0, CopyToOffset(long_arr.0 + 24) = tmp.52 , SignExtend tmp.53 = 0, CopyToOffset(long_arr.0 + 32) = tmp.53 , SignExtend tmp.54 = 0, CopyToOffset(long_arr.0 + 40) = tmp.54 , SignExtend tmp.55 = 0, CopyToOffset(long_arr.0 + 48) = tmp.55 , SignExtend tmp.56 = 0, CopyToOffset(long_arr.0 + 56) = tmp.56 , SignExtend tmp.57 = 0, CopyToOffset(long_arr.0 + 64) = tmp.57 , SignExtend tmp.58 = 0, CopyToOffset(long_arr.0 + 72) = tmp.58 , SignExtend tmp.59 = 13, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, SignExtend tmp.62 = 10, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, CopyToOffset(ptr.1 + 0) = tmp.64 , tmp.65 = Load ptr.1 , SignExtend tmp.66 = 13, tmp.67 = tmp.65 == tmp.66, Return tmp.67, Return 0], Function: test_add_negative_index ([]) instructions:[Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, SignExtend tmp.81 = 12, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, CopyToOffset(end_ptr.3 + 0) = tmp.83 , Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, CopyToOffset(ptr.4 + 0) = tmp.88 , tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91, Return 0], Function: test_add_pointer_to_int ([]) instructions:[CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, SignExtend tmp.94 = 2, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, CopyToOffset(ptr1.6 + 0) = tmp.96 , tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, SignExtend tmp.99 = 2, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, CopyToOffset(ptr2.7 + 0) = tmp.101 , tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106, Return 0], Function: test_add_different_index_types ([]) instructions:[IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, SignExtend tmp.115 = 5, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, CopyToOffset(ptr1.9 + 0) = tmp.117 , tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, CopyToOffset(ptr2.10 + 0) = tmp.121 , tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, CopyToOffset(ptr3.11 + 0) = tmp.126 , tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, CopyToOffset(ptr4.12 + 0) = tmp.131 , tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133), tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144, Return 0], Function: test_add_complex_expressions ([]) instructions:[tmp.146 = -2, CopyToOffset(i.14 + 0) = tmp.146 , tmp.147 = Get Address i.14 , CopyToOffset(small_int_ptr.15 + 0) = tmp.147 , Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149), tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159, Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, CopyToOffset(ptr.19 + 0) = tmp.166 , tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, SignExtend tmp.169 = 1, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176, Return 0], Function: return_one ([]) instructions:[Return 1, Return 0], Function: get_elem1_ptr (['arr.20']) instructions:[Copy tmp.178 = arr.20, SignExtend tmp.179 = 1, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181, Return 0], Function: get_elem2_ptr (['arr.21']) instructions:[Copy tmp.182 = arr.21, SignExtend tmp.183 = 2, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185, Return 0], Function: test_add_multi_dimensional ([]) instructions:[CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, CopyToOffset(row_pointer.24 + 0) = tmp.190 , tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192, Return 0], Function: test_add_to_subarray_pointer ([]) instructions:[CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, SignExtend tmp.195 = 1, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, CopyToOffset(row1.27 + 0) = tmp.197 , Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, CopyToOffset(elem_ptr.28 + 0) = tmp.201 , tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203, Return 0], Function: test_subtract_from_pointer ([]) instructions:[SignExtend tmp.204 = 10, CopyToOffset(long_arr.29 + 0) = tmp.204 , SignExtend tmp.205 = 9, CopyToOffset(long_arr.29 + 8) = tmp.205 , SignExtend tmp.206 = 8, CopyToOffset(long_arr.29 + 16) = tmp.206 , SignExtend tmp.207 = 7, CopyToOffset(long_arr.29 + 24) = tmp.207 , SignExtend tmp.208 = 6, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, SignExtend tmp.211 = 5, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, CopyToOffset(one_past_the_end.30 + 0) = tmp.213 , Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, CopyToOffset(subtraction_result.32 + 0) = tmp.218 , tmp.219 = Load subtraction_result.32 , SignExtend tmp.220 = 8, tmp.221 = tmp.219 == tmp.220, Return tmp.221, Return 0], Function: test_subtract_negative_index ([]) instructions:[Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, CopyToOffset(ptr.34 + 0) = tmp.233 , tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236, Return 0], Function: test_subtract_different_index_types ([]) instructions:[IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, SignExtend tmp.245 = 11, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, CopyToOffset(end_ptr.36 + 0) = tmp.247 , Copy tmp.248 = end_ptr.36, SignExtend tmp.249 = 5, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, CopyToOffset(ptr1.37 + 0) = tmp.252 , Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, CopyToOffset(ptr2.38 + 0) = tmp.256 , Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, CopyToOffset(ptr3.39 + 0) = tmp.261 , Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, CopyToOffset(ptr4.40 + 0) = tmp.266 , tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268), tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279, Return 0], Function: test_subtract_complex_expressions ([]) instructions:[Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282), tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292, Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, CopyToOffset(ptr.44 + 0) = tmp.299 , tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301, Return 0], Function: test_subtract_multi_dimensional ([]) instructions:[CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, SignExtend tmp.304 = 2, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, CopyToOffset(last_row_pointer.47 + 0) = tmp.306 , Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, CopyToOffset(row_pointer.48 + 0) = tmp.311 , tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313, Return 0], Function: main ([]) instructions:[tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357), Return 11, Label(tmp.357), Return 0, Return 0], Global: False flag.13 = [c_int(0)], Global: False arr.18 = [c_int(1), c_int(2), c_int(3), c_int(4)], Global: False index.22 = [c_int(2)], Global: False index.25 = [c_int(2)], Global: False index.31 = [c_int(3)], Global: False flag.41 = [c_int(1)], Global: False four.42 = [c_int(4)], Global: False arr.43 = [c_int(1), c_int(2), c_int(3), c_int(4)], Global: False index.45 = [c_int(1)]]
Type Table:
 {}
Symbol Table:
 {'test_add_constant_to_pointer': test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'long_arr.0': long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>, 'ptr.1': ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>, 'test_add_negative_index': test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'unsigned_arr.2': unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>, 'end_ptr.3': end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>, 'ptr.4': ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>, 'test_add_pointer_to_int': test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'int_arr.5': int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>, 'ptr1.6': ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>, 'ptr2.7': ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>, 'test_add_different_index_types': test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'double_arr.8': double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>, 'ptr1.9': ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>, 'ptr2.10': ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>, 'ptr3.11': ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>, 'ptr4.12': ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>, 'test_add_complex_expressions': test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'flag.13': flag.13 int InitialVal: InitialList: [c_int(0)] Global: False, 'i.14': i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>, 'small_int_ptr.15': small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>, 'return_one': return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'get_elem1_ptr': get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True, 'get_elem2_ptr': get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True, 'arr.18': arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False, 'ptr.19': ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>, 'arr.20': arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>, 'arr.21': arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>, 'test_add_multi_dimensional': test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.22': index.22 int InitialVal: InitialList: [c_int(2)] Global: False, 'nested_arr.23': nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>, 'row_pointer.24': row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>, 'test_add_to_subarray_pointer': test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.25': index.25 int InitialVal: InitialList: [c_int(2)] Global: False, 'nested_arr.26': nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>, 'row1.27': row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>, 'elem_ptr.28': elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>, 'test_subtract_from_pointer': test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'long_arr.29': long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>, 'one_past_the_end.30': one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>, 'index.31': index.31 int InitialVal: InitialList: [c_int(3)] Global: False, 'subtraction_result.32': subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>, 'test_subtract_negative_index': test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'arr.33': arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>, 'ptr.34': ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>, 'test_subtract_different_index_types': test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'double_arr.35': double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>, 'end_ptr.36': end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>, 'ptr1.37': ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>, 'ptr2.38': ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>, 'ptr3.39': ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>, 'ptr4.40': ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>, 'test_subtract_complex_expressions': test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'flag.41': flag.41 int InitialVal: InitialList: [c_int(1)] Global: False, 'four.42': four.42 int InitialVal: InitialList: [c_int(4)] Global: False, 'arr.43': arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False, 'ptr.44': ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>, 'test_subtract_multi_dimensional': test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.45': index.45 int InitialVal: InitialList: [c_int(1)] Global: False, 'nested_arr.46': nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>, 'last_row_pointer.47': last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>, 'row_pointer.48': row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'tmp.49': tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>, 'tmp.50': tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>, 'tmp.51': tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>, 'tmp.52': tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>, 'tmp.53': tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>, 'tmp.54': tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>, 'tmp.55': tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>, 'tmp.56': tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>, 'tmp.57': tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>, 'tmp.58': tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>, 'tmp.59': tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>, 'tmp.60': tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>, 'tmp.61': tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>, 'tmp.62': tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>, 'tmp.63': tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>, 'tmp.64': tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>, 'tmp.65': tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>, 'tmp.66': tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>, 'tmp.67': tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>, 'tmp.68': tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>, 'tmp.69': tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>, 'tmp.70': tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>, 'tmp.71': tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>, 'tmp.72': tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>, 'tmp.73': tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>, 'tmp.74': tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>, 'tmp.75': tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>, 'tmp.76': tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>, 'tmp.77': tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>, 'tmp.78': tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>, 'tmp.79': tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>, 'tmp.80': tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>, 'tmp.81': tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>, 'tmp.82': tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>, 'tmp.83': tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>, 'tmp.84': tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>, 'tmp.85': tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>, 'tmp.86': tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>, 'tmp.87': tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>, 'tmp.88': tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>, 'tmp.89': tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>, 'tmp.90': tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>, 'tmp.91': tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>, 'tmp.92': tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>, 'tmp.93': tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>, 'tmp.94': tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>, 'tmp.95': tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>, 'tmp.96': tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>, 'tmp.97': tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>, 'tmp.98': tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>, 'tmp.99': tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>, 'tmp.100': tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>, 'tmp.101': tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>, 'tmp.102': tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>, 'tmp.104': tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>, 'tmp.105': tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>, 'tmp.106': tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>, 'tmp.108': tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>, 'tmp.109': tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>, 'tmp.110': tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>, 'tmp.111': tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>, 'tmp.112': tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>, 'tmp.113': tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>, 'tmp.114': tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>, 'tmp.115': tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>, 'tmp.116': tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>, 'tmp.117': tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>, 'tmp.118': tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>, 'tmp.119': tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>, 'tmp.120': tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>, 'tmp.121': tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>, 'tmp.122': tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>, 'tmp.123': tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>, 'tmp.124': tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>, 'tmp.125': tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>, 'tmp.126': tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>, 'tmp.127': tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>, 'tmp.128': tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>, 'tmp.129': tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>, 'tmp.130': tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>, 'tmp.131': tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>, 'tmp.132': tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>, 'tmp.134': tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>, 'tmp.135': tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>, 'tmp.138': tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>, 'tmp.139': tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>, 'tmp.142': tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>, 'tmp.143': tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>, 'tmp.144': tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>, 'tmp.146': tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>, 'tmp.147': tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>, 'tmp.148': tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>, 'tmp.150': tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>, 'tmp.151': tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>, 'tmp.152': tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>, 'tmp.153': tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>, 'tmp.154': tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>, 'tmp.156': tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>, 'tmp.157': tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>, 'tmp.158': tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>, 'tmp.159': tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>, 'tmp.160': tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>, 'tmp.161': tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>, 'tmp.162': tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>, 'tmp.163': tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>, 'tmp.164': tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>, 'tmp.165': tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>, 'tmp.166': tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>, 'tmp.167': tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>, 'tmp.168': tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>, 'tmp.169': tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>, 'tmp.170': tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>, 'tmp.171': tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>, 'tmp.172': tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>, 'tmp.174': tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>, 'tmp.175': tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>, 'tmp.176': tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>, 'tmp.178': tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>, 'tmp.179': tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>, 'tmp.180': tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>, 'tmp.181': tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>, 'tmp.182': tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>, 'tmp.183': tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>, 'tmp.184': tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>, 'tmp.185': tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>, 'tmp.186': tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>, 'tmp.187': tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>, 'tmp.188': tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>, 'tmp.189': tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>, 'tmp.190': tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>, 'tmp.191': tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>, 'tmp.192': tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>, 'tmp.193': tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>, 'tmp.194': tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>, 'tmp.195': tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>, 'tmp.196': tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>, 'tmp.197': tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>, 'tmp.198': tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>, 'tmp.199': tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>, 'tmp.200': tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>, 'tmp.201': tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>, 'tmp.202': tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>, 'tmp.203': tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>, 'tmp.204': tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>, 'tmp.205': tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>, 'tmp.206': tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>, 'tmp.207': tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>, 'tmp.208': tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>, 'tmp.209': tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>, 'tmp.210': tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>, 'tmp.211': tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>, 'tmp.212': tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>, 'tmp.213': tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>, 'tmp.214': tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>, 'tmp.215': tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>, 'tmp.216': tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>, 'tmp.217': tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>, 'tmp.218': tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>, 'tmp.219': tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>, 'tmp.220': tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>, 'tmp.221': tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>, 'tmp.222': tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>, 'tmp.223': tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>, 'tmp.224': tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>, 'tmp.225': tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>, 'tmp.226': tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>, 'tmp.227': tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>, 'tmp.228': tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>, 'tmp.229': tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>, 'tmp.230': tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>, 'tmp.231': tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>, 'tmp.232': tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>, 'tmp.233': tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>, 'tmp.234': tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>, 'tmp.235': tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>, 'tmp.236': tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>, 'tmp.237': tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>, 'tmp.238': tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>, 'tmp.239': tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>, 'tmp.240': tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>, 'tmp.241': tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>, 'tmp.242': tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>, 'tmp.243': tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>, 'tmp.244': tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>, 'tmp.245': tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>, 'tmp.246': tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>, 'tmp.247': tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>, 'tmp.248': tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>, 'tmp.249': tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>, 'tmp.250': tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>, 'tmp.251': tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>, 'tmp.252': tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>, 'tmp.253': tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>, 'tmp.254': tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>, 'tmp.255': tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>, 'tmp.256': tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>, 'tmp.257': tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>, 'tmp.258': tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>, 'tmp.259': tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>, 'tmp.260': tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>, 'tmp.261': tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>, 'tmp.262': tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>, 'tmp.263': tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>, 'tmp.264': tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>, 'tmp.265': tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>, 'tmp.266': tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>, 'tmp.267': tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>, 'tmp.269': tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>, 'tmp.270': tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>, 'tmp.273': tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>, 'tmp.274': tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>, 'tmp.277': tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>, 'tmp.278': tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>, 'tmp.279': tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>, 'tmp.281': tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>, 'tmp.283': tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>, 'tmp.284': tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>, 'tmp.285': tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>, 'tmp.286': tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>, 'tmp.287': tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>, 'tmp.289': tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>, 'tmp.290': tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>, 'tmp.291': tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>, 'tmp.292': tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>, 'tmp.293': tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>, 'tmp.294': tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>, 'tmp.295': tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>, 'tmp.296': tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>, 'tmp.297': tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>, 'tmp.298': tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>, 'tmp.299': tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>, 'tmp.300': tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>, 'tmp.301': tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>, 'tmp.302': tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>, 'tmp.303': tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>, 'tmp.304': tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>, 'tmp.305': tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>, 'tmp.306': tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>, 'tmp.307': tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>, 'tmp.308': tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>, 'tmp.309': tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>, 'tmp.310': tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>, 'tmp.311': tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>, 'tmp.312': tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>, 'tmp.313': tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>, 'tmp.314': tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>, 'tmp.315': tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>, 'tmp.316': tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>, 'tmp.318': tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>, 'tmp.319': tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>, 'tmp.320': tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>, 'tmp.322': tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>, 'tmp.323': tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>, 'tmp.324': tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>, 'tmp.326': tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>, 'tmp.327': tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>, 'tmp.328': tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>, 'tmp.330': tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>, 'tmp.331': tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>, 'tmp.332': tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>, 'tmp.334': tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>, 'tmp.335': tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>, 'tmp.336': tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>, 'tmp.338': tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>, 'tmp.339': tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>, 'tmp.340': tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>, 'tmp.342': tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>, 'tmp.343': tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>, 'tmp.344': tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>, 'tmp.346': tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>, 'tmp.347': tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>, 'tmp.348': tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>, 'tmp.350': tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>, 'tmp.351': tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>, 'tmp.352': tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>, 'tmp.354': tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>, 'tmp.355': tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>, 'tmp.356': tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>}
OPTIMIZING FUNCTION Function: test_add_constant_to_pointer ([]) instructions:[SignExtend tmp.49 = 0, CopyToOffset(long_arr.0 + 0) = tmp.49 , SignExtend tmp.50 = 0, CopyToOffset(long_arr.0 + 8) = tmp.50 , SignExtend tmp.51 = 3, CopyToOffset(long_arr.0 + 16) = tmp.51 , SignExtend tmp.52 = 0, CopyToOffset(long_arr.0 + 24) = tmp.52 , SignExtend tmp.53 = 0, CopyToOffset(long_arr.0 + 32) = tmp.53 , SignExtend tmp.54 = 0, CopyToOffset(long_arr.0 + 40) = tmp.54 , SignExtend tmp.55 = 0, CopyToOffset(long_arr.0 + 48) = tmp.55 , SignExtend tmp.56 = 0, CopyToOffset(long_arr.0 + 56) = tmp.56 , SignExtend tmp.57 = 0, CopyToOffset(long_arr.0 + 64) = tmp.57 , SignExtend tmp.58 = 0, CopyToOffset(long_arr.0 + 72) = tmp.58 , SignExtend tmp.59 = 13, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, SignExtend tmp.62 = 10, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, CopyToOffset(ptr.1 + 0) = tmp.64 , tmp.65 = Load ptr.1 , SignExtend tmp.66 = 13, tmp.67 = tmp.65 == tmp.66, Return tmp.67, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{long_arr.0}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [SignExtend tmp.49 = 0, CopyToOffset(long_arr.0 + 0) = tmp.49 , SignExtend tmp.50 = 0, CopyToOffset(long_arr.0 + 8) = tmp.50 , SignExtend tmp.51 = 3, CopyToOffset(long_arr.0 + 16) = tmp.51 , SignExtend tmp.52 = 0, CopyToOffset(long_arr.0 + 24) = tmp.52 , SignExtend tmp.53 = 0, CopyToOffset(long_arr.0 + 32) = tmp.53 , SignExtend tmp.54 = 0, CopyToOffset(long_arr.0 + 40) = tmp.54 , SignExtend tmp.55 = 0, CopyToOffset(long_arr.0 + 48) = tmp.55 , SignExtend tmp.56 = 0, CopyToOffset(long_arr.0 + 56) = tmp.56 , SignExtend tmp.57 = 0, CopyToOffset(long_arr.0 + 64) = tmp.57 , SignExtend tmp.58 = 0, CopyToOffset(long_arr.0 + 72) = tmp.58 , SignExtend tmp.59 = 13, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, SignExtend tmp.62 = 10, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, CopyToOffset(ptr.1 + 0) = tmp.64 , tmp.65 = Load ptr.1 , SignExtend tmp.66 = 13, tmp.67 = tmp.65 == tmp.66, Return tmp.67, Return 0]
NEW LIST [Copy tmp.49 = 0L, CopyToOffset(long_arr.0 + 0) = tmp.49 , Copy tmp.50 = 0L, CopyToOffset(long_arr.0 + 8) = tmp.50 , Copy tmp.51 = 3L, CopyToOffset(long_arr.0 + 16) = tmp.51 , Copy tmp.52 = 0L, CopyToOffset(long_arr.0 + 24) = tmp.52 , Copy tmp.53 = 0L, CopyToOffset(long_arr.0 + 32) = tmp.53 , Copy tmp.54 = 0L, CopyToOffset(long_arr.0 + 40) = tmp.54 , Copy tmp.55 = 0L, CopyToOffset(long_arr.0 + 48) = tmp.55 , Copy tmp.56 = 0L, CopyToOffset(long_arr.0 + 56) = tmp.56 , Copy tmp.57 = 0L, CopyToOffset(long_arr.0 + 64) = tmp.57 , Copy tmp.58 = 0L, CopyToOffset(long_arr.0 + 72) = tmp.58 , Copy tmp.59 = 13L, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, Copy tmp.62 = 10L, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, Copy ptr.1 = tmp.64, tmp.65 = Load ptr.1 , Copy tmp.66 = 13L, tmp.67 = tmp.65 == tmp.66, Return tmp.67, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.49 = 0L
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.49 = 0L, CopyToOffset(long_arr.0 + 0) = tmp.49 , Copy tmp.50 = 0L, CopyToOffset(long_arr.0 + 8) = tmp.50 , Copy tmp.51 = 3L, CopyToOffset(long_arr.0 + 16) = tmp.51 , Copy tmp.52 = 0L, CopyToOffset(long_arr.0 + 24) = tmp.52 , Copy tmp.53 = 0L, CopyToOffset(long_arr.0 + 32) = tmp.53 , Copy tmp.54 = 0L, CopyToOffset(long_arr.0 + 40) = tmp.54 , Copy tmp.55 = 0L, CopyToOffset(long_arr.0 + 48) = tmp.55 , Copy tmp.56 = 0L, CopyToOffset(long_arr.0 + 56) = tmp.56 , Copy tmp.57 = 0L, CopyToOffset(long_arr.0 + 64) = tmp.57 , Copy tmp.58 = 0L, CopyToOffset(long_arr.0 + 72) = tmp.58 , Copy tmp.59 = 13L, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, Copy tmp.62 = 10L, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, Copy ptr.1 = tmp.64, tmp.65 = Load ptr.1 , Copy tmp.66 = 13L, tmp.67 = tmp.65 == tmp.66, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.49 = 0L: set(), CopyToOffset(long_arr.0 + 0) = tmp.49 : set(), Copy tmp.50 = 0L: set(), CopyToOffset(long_arr.0 + 8) = tmp.50 : set(), Copy tmp.51 = 3L: set(), CopyToOffset(long_arr.0 + 16) = tmp.51 : set(), Copy tmp.52 = 0L: set(), CopyToOffset(long_arr.0 + 24) = tmp.52 : set(), Copy tmp.53 = 0L: set(), CopyToOffset(long_arr.0 + 32) = tmp.53 : set(), Copy tmp.54 = 0L: set(), CopyToOffset(long_arr.0 + 40) = tmp.54 : set(), Copy tmp.55 = 0L: set(), CopyToOffset(long_arr.0 + 48) = tmp.55 : set(), Copy tmp.56 = 0L: set(), CopyToOffset(long_arr.0 + 56) = tmp.56 : set(), Copy tmp.57 = 0L: set(), CopyToOffset(long_arr.0 + 64) = tmp.57 : set(), Copy tmp.58 = 0L: set(), CopyToOffset(long_arr.0 + 72) = tmp.58 : set(), Copy tmp.59 = 13L: set(), CopyToOffset(long_arr.0 + 80) = tmp.59 : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.61 = tmp.60: set(), Copy tmp.62 = 10L: set(), Copy tmp.63 = tmp.62: set(), AddPtr tmp.64 = tmp.61 + tmp.63 * 8: set(), Copy ptr.1 = tmp.64: set(), tmp.65 = Load ptr.1 : set(), Copy tmp.66 = 13L: set(), tmp.67 = tmp.65 == tmp.66: set(), Return tmp.67: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.49 = 0L, CopyToOffset(long_arr.0 + 0) = tmp.49 , Copy tmp.50 = 0L, CopyToOffset(long_arr.0 + 8) = tmp.50 , Copy tmp.51 = 3L, CopyToOffset(long_arr.0 + 16) = tmp.51 , Copy tmp.52 = 0L, CopyToOffset(long_arr.0 + 24) = tmp.52 , Copy tmp.53 = 0L, CopyToOffset(long_arr.0 + 32) = tmp.53 , Copy tmp.54 = 0L, CopyToOffset(long_arr.0 + 40) = tmp.54 , Copy tmp.55 = 0L, CopyToOffset(long_arr.0 + 48) = tmp.55 , Copy tmp.56 = 0L, CopyToOffset(long_arr.0 + 56) = tmp.56 , Copy tmp.57 = 0L, CopyToOffset(long_arr.0 + 64) = tmp.57 , Copy tmp.58 = 0L, CopyToOffset(long_arr.0 + 72) = tmp.58 , Copy tmp.59 = 13L, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, Copy tmp.62 = 10L, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, Copy ptr.1 = tmp.64, tmp.65 = Load ptr.1 , Copy tmp.66 = 13L, tmp.67 = tmp.65 == tmp.66, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.49 = 0L: set(), CopyToOffset(long_arr.0 + 0) = tmp.49 : set(), Copy tmp.50 = 0L: set(), CopyToOffset(long_arr.0 + 8) = tmp.50 : set(), Copy tmp.51 = 3L: set(), CopyToOffset(long_arr.0 + 16) = tmp.51 : set(), Copy tmp.52 = 0L: set(), CopyToOffset(long_arr.0 + 24) = tmp.52 : set(), Copy tmp.53 = 0L: set(), CopyToOffset(long_arr.0 + 32) = tmp.53 : set(), Copy tmp.54 = 0L: set(), CopyToOffset(long_arr.0 + 40) = tmp.54 : set(), Copy tmp.55 = 0L: set(), CopyToOffset(long_arr.0 + 48) = tmp.55 : set(), Copy tmp.56 = 0L: set(), CopyToOffset(long_arr.0 + 56) = tmp.56 : set(), Copy tmp.57 = 0L: set(), CopyToOffset(long_arr.0 + 64) = tmp.57 : set(), Copy tmp.58 = 0L: set(), CopyToOffset(long_arr.0 + 72) = tmp.58 : set(), Copy tmp.59 = 13L: set(), CopyToOffset(long_arr.0 + 80) = tmp.59 : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.61 = tmp.60: set(), Copy tmp.62 = 10L: set(), Copy tmp.63 = tmp.62: set(), AddPtr tmp.64 = tmp.61 + tmp.63 * 8: set(), Copy ptr.1 = tmp.64: set(), tmp.65 = Load ptr.1 : set(), Copy tmp.66 = 13L: set(), tmp.67 = tmp.65 == tmp.66: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.49 = 0L, CopyToOffset(long_arr.0 + 0) = tmp.49 , Copy tmp.50 = 0L, CopyToOffset(long_arr.0 + 8) = tmp.50 , Copy tmp.51 = 3L, CopyToOffset(long_arr.0 + 16) = tmp.51 , Copy tmp.52 = 0L, CopyToOffset(long_arr.0 + 24) = tmp.52 , Copy tmp.53 = 0L, CopyToOffset(long_arr.0 + 32) = tmp.53 , Copy tmp.54 = 0L, CopyToOffset(long_arr.0 + 40) = tmp.54 , Copy tmp.55 = 0L, CopyToOffset(long_arr.0 + 48) = tmp.55 , Copy tmp.56 = 0L, CopyToOffset(long_arr.0 + 56) = tmp.56 , Copy tmp.57 = 0L, CopyToOffset(long_arr.0 + 64) = tmp.57 , Copy tmp.58 = 0L, CopyToOffset(long_arr.0 + 72) = tmp.58 , Copy tmp.59 = 13L, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, Copy tmp.62 = 10L, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, Copy ptr.1 = tmp.64, tmp.65 = Load ptr.1 , Copy tmp.66 = 13L, tmp.67 = tmp.65 == tmp.66, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.49 = 0L: set(), CopyToOffset(long_arr.0 + 0) = tmp.49 : set(), Copy tmp.50 = 0L: set(), CopyToOffset(long_arr.0 + 8) = tmp.50 : set(), Copy tmp.51 = 3L: set(), CopyToOffset(long_arr.0 + 16) = tmp.51 : set(), Copy tmp.52 = 0L: set(), CopyToOffset(long_arr.0 + 24) = tmp.52 : set(), Copy tmp.53 = 0L: set(), CopyToOffset(long_arr.0 + 32) = tmp.53 : set(), Copy tmp.54 = 0L: set(), CopyToOffset(long_arr.0 + 40) = tmp.54 : set(), Copy tmp.55 = 0L: set(), CopyToOffset(long_arr.0 + 48) = tmp.55 : set(), Copy tmp.56 = 0L: set(), CopyToOffset(long_arr.0 + 56) = tmp.56 : set(), Copy tmp.57 = 0L: set(), CopyToOffset(long_arr.0 + 64) = tmp.57 : set(), Copy tmp.58 = 0L: set(), CopyToOffset(long_arr.0 + 72) = tmp.58 : set(), Copy tmp.59 = 13L: set(), CopyToOffset(long_arr.0 + 80) = tmp.59 : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.61 = tmp.60: set(), Copy tmp.62 = 10L: set(), Copy tmp.63 = tmp.62: set(), AddPtr tmp.64 = tmp.61 + tmp.63 * 8: set(), Copy ptr.1 = tmp.64: set(), tmp.65 = Load ptr.1 : set(), Copy tmp.66 = 13L: set(), tmp.67 = tmp.65 == tmp.66: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.49 = 0L, CopyToOffset(long_arr.0 + 0) = tmp.49 , Copy tmp.50 = 0L, CopyToOffset(long_arr.0 + 8) = tmp.50 , Copy tmp.51 = 3L, CopyToOffset(long_arr.0 + 16) = tmp.51 , Copy tmp.52 = 0L, CopyToOffset(long_arr.0 + 24) = tmp.52 , Copy tmp.53 = 0L, CopyToOffset(long_arr.0 + 32) = tmp.53 , Copy tmp.54 = 0L, CopyToOffset(long_arr.0 + 40) = tmp.54 , Copy tmp.55 = 0L, CopyToOffset(long_arr.0 + 48) = tmp.55 , Copy tmp.56 = 0L, CopyToOffset(long_arr.0 + 56) = tmp.56 , Copy tmp.57 = 0L, CopyToOffset(long_arr.0 + 64) = tmp.57 , Copy tmp.58 = 0L, CopyToOffset(long_arr.0 + 72) = tmp.58 , Copy tmp.59 = 13L, CopyToOffset(long_arr.0 + 80) = tmp.59 , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, Copy tmp.62 = 10L, Copy tmp.63 = tmp.62, AddPtr tmp.64 = tmp.61 + tmp.63 * 8, Copy ptr.1 = tmp.64, tmp.65 = Load ptr.1 , Copy tmp.66 = 13L, tmp.67 = tmp.65 == tmp.66, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.49 = 0L: set(), CopyToOffset(long_arr.0 + 0) = tmp.49 : set(), Copy tmp.50 = 0L: set(), CopyToOffset(long_arr.0 + 8) = tmp.50 : set(), Copy tmp.51 = 3L: set(), CopyToOffset(long_arr.0 + 16) = tmp.51 : set(), Copy tmp.52 = 0L: set(), CopyToOffset(long_arr.0 + 24) = tmp.52 : set(), Copy tmp.53 = 0L: set(), CopyToOffset(long_arr.0 + 32) = tmp.53 : set(), Copy tmp.54 = 0L: set(), CopyToOffset(long_arr.0 + 40) = tmp.54 : set(), Copy tmp.55 = 0L: set(), CopyToOffset(long_arr.0 + 48) = tmp.55 : set(), Copy tmp.56 = 0L: set(), CopyToOffset(long_arr.0 + 56) = tmp.56 : set(), Copy tmp.57 = 0L: set(), CopyToOffset(long_arr.0 + 64) = tmp.57 : set(), Copy tmp.58 = 0L: set(), CopyToOffset(long_arr.0 + 72) = tmp.58 : set(), Copy tmp.59 = 13L: set(), CopyToOffset(long_arr.0 + 80) = tmp.59 : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.61 = tmp.60: set(), Copy tmp.62 = 10L: set(), Copy tmp.63 = tmp.62: set(), AddPtr tmp.64 = tmp.61 + tmp.63 * 8: set(), Copy ptr.1 = tmp.64: set(), tmp.65 = Load ptr.1 : set(), Copy tmp.66 = 13L: set(), tmp.67 = tmp.65 == tmp.66: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.49 = 0L set()
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 0) = tmp.49  {Copy tmp.49 = 0L}
Copy tmp.50 = 0L {Copy tmp.49 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 8) = tmp.50  {Copy tmp.50 = 0L, Copy tmp.49 = 0L}
Copy tmp.51 = 3L {Copy tmp.50 = 0L, Copy tmp.49 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 16) = tmp.51  {Copy tmp.50 = 0L, Copy tmp.51 = 3L, Copy tmp.49 = 0L}
Copy tmp.52 = 0L {Copy tmp.50 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 24) = tmp.52  {Copy tmp.50 = 0L, Copy tmp.51 = 3L, Copy tmp.52 = 0L, Copy tmp.49 = 0L}
Copy tmp.53 = 0L {Copy tmp.50 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 32) = tmp.53  {Copy tmp.50 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}
Copy tmp.54 = 0L {Copy tmp.50 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 40) = tmp.54  {Copy tmp.50 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}
Copy tmp.55 = 0L {Copy tmp.50 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 48) = tmp.55  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}
Copy tmp.56 = 0L {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 56) = tmp.56  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L}
Copy tmp.57 = 0L {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 64) = tmp.57  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}
Copy tmp.58 = 0L {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 72) = tmp.58  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}
Copy tmp.59 = 13L {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.0 + 80) = tmp.59  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}
CopyToOffset(long_arr.0 + 88) = 0L  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}
tmp.60 = Get Address long_arr.0  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}
Copy tmp.61 = tmp.60 {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}
Copy tmp.62 = 10L {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.61 = tmp.60, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}
<class 'parser.ConstLong'>
Copy tmp.63 = tmp.62 {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.59 = 13L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.57 = 0L}
AddPtr tmp.64 = tmp.61 + tmp.63 * 8 {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.59 = 13L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.57 = 0L}
Copy ptr.1 = tmp.64 {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.57 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.59 = 13L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.65 = Load ptr.1  {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.61 = tmp.60, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L, Copy ptr.1 = tmp.64}
Copy tmp.66 = 13L {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.59 = 13L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}
<class 'parser.ConstLong'>
tmp.67 = tmp.65 == tmp.66 {Copy tmp.50 = 0L, Copy tmp.63 = tmp.62, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.61 = tmp.60, Copy ptr.1 = tmp.64}
Return tmp.67 {Copy tmp.50 = 0L, Copy tmp.63 = tmp.62, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.61 = tmp.60, Copy tmp.51 = 3L, Copy tmp.59 = 13L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}
OLD ANNOT: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.63 = tmp.62, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.58 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.61 = tmp.60, Copy tmp.59 = 13L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}
NEW ANNOT: {Copy tmp.50 = 0L, Copy tmp.63 = tmp.62, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.61 = tmp.60, Copy tmp.51 = 3L, Copy tmp.59 = 13L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.49 = 0L, CopyToOffset(long_arr.0 + 0) = 0L , Copy tmp.50 = 0L, CopyToOffset(long_arr.0 + 8) = 0L , Copy tmp.51 = 3L, CopyToOffset(long_arr.0 + 16) = 3L , Copy tmp.52 = 0L, CopyToOffset(long_arr.0 + 24) = 0L , Copy tmp.53 = 0L, CopyToOffset(long_arr.0 + 32) = 0L , Copy tmp.54 = 0L, CopyToOffset(long_arr.0 + 40) = 0L , Copy tmp.55 = 0L, CopyToOffset(long_arr.0 + 48) = 0L , Copy tmp.56 = 0L, CopyToOffset(long_arr.0 + 56) = 0L , Copy tmp.57 = 0L, CopyToOffset(long_arr.0 + 64) = 0L , Copy tmp.58 = 0L, CopyToOffset(long_arr.0 + 72) = 0L , Copy tmp.59 = 13L, CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.61 = tmp.60, Copy tmp.62 = 10L, Copy tmp.63 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, Copy ptr.1 = tmp.64, tmp.65 = Load tmp.64 , Copy tmp.66 = 13L, tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.49 = 0L: set(), CopyToOffset(long_arr.0 + 0) = tmp.49 : {Copy tmp.49 = 0L}, Copy tmp.50 = 0L: {Copy tmp.49 = 0L}, CopyToOffset(long_arr.0 + 8) = tmp.50 : {Copy tmp.50 = 0L, Copy tmp.49 = 0L}, Copy tmp.51 = 3L: {Copy tmp.50 = 0L, Copy tmp.49 = 0L}, CopyToOffset(long_arr.0 + 16) = tmp.51 : {Copy tmp.50 = 0L, Copy tmp.51 = 3L, Copy tmp.49 = 0L}, Copy tmp.52 = 0L: {Copy tmp.50 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L}, CopyToOffset(long_arr.0 + 24) = tmp.52 : {Copy tmp.50 = 0L, Copy tmp.51 = 3L, Copy tmp.52 = 0L, Copy tmp.49 = 0L}, Copy tmp.53 = 0L: {Copy tmp.50 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L}, CopyToOffset(long_arr.0 + 32) = tmp.53 : {Copy tmp.50 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}, Copy tmp.54 = 0L: {Copy tmp.50 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}, CopyToOffset(long_arr.0 + 40) = tmp.54 : {Copy tmp.50 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}, Copy tmp.55 = 0L: {Copy tmp.50 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}, CopyToOffset(long_arr.0 + 48) = tmp.55 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}, Copy tmp.56 = 0L: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.51 = 3L, Copy tmp.53 = 0L}, CopyToOffset(long_arr.0 + 56) = tmp.56 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L}, Copy tmp.57 = 0L: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L}, CopyToOffset(long_arr.0 + 64) = tmp.57 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}, Copy tmp.58 = 0L: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}, CopyToOffset(long_arr.0 + 72) = tmp.58 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}, Copy tmp.59 = 13L: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L}, CopyToOffset(long_arr.0 + 80) = tmp.59 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}, CopyToOffset(long_arr.0 + 88) = 0L : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}, tmp.60 = Get Address long_arr.0 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}, Copy tmp.61 = tmp.60: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}, Copy tmp.62 = 10L: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.61 = tmp.60, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L}, Copy tmp.63 = tmp.62: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.59 = 13L, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.57 = 0L}, AddPtr tmp.64 = tmp.61 + tmp.63 * 8: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.59 = 13L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.57 = 0L}, Copy ptr.1 = tmp.64: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.57 = 0L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.59 = 13L}, tmp.65 = Load ptr.1 : {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.61 = tmp.60, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L, Copy ptr.1 = tmp.64}, Copy tmp.66 = 13L: {Copy tmp.50 = 0L, Copy tmp.55 = 0L, Copy tmp.54 = 0L, Copy tmp.63 = tmp.62, Copy tmp.52 = 0L, Copy tmp.59 = 13L, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.51 = 3L, Copy tmp.61 = tmp.60, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}, tmp.67 = tmp.65 == tmp.66: {Copy tmp.50 = 0L, Copy tmp.63 = tmp.62, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.51 = 3L, Copy tmp.57 = 0L, Copy tmp.59 = 13L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.61 = tmp.60, Copy ptr.1 = tmp.64}, Return tmp.67: {Copy tmp.50 = 0L, Copy tmp.63 = tmp.62, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.61 = tmp.60, Copy tmp.51 = 3L, Copy tmp.59 = 13L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}} ReachingCopies: {Copy tmp.50 = 0L, Copy tmp.63 = tmp.62, Copy tmp.49 = 0L, Copy tmp.58 = 0L, Copy tmp.53 = 0L, Copy tmp.61 = tmp.60, Copy tmp.51 = 3L, Copy tmp.59 = 13L, Copy tmp.55 = 0L, Copy tmp.66 = 13L, Copy tmp.54 = 0L, Copy tmp.52 = 0L, Copy tmp.62 = 10L, Copy tmp.56 = 0L, Copy tmp.57 = 0L, Copy ptr.1 = tmp.64}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.67 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.67 = tmp.65 == 13L {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.67, flag.41}
Copy tmp.66 = 13L {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}
tmp.65 = Load tmp.64  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}
Copy ptr.1 = tmp.64 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}
AddPtr tmp.64 = tmp.60 + tmp.62 * 8 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}
Copy tmp.63 = 10L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, tmp.62, index.22, flag.13, index.31, tmp.60, four.42}
Copy tmp.62 = 10L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, tmp.62, index.22, flag.13, index.31, tmp.60, four.42}
Copy tmp.61 = tmp.60 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}
tmp.60 = Get Address long_arr.0  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}
CopyToOffset(long_arr.0 + 88) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 80) = 13L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.59 = 13L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 72) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.58 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 64) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.57 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 56) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.56 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 48) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.55 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 40) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.54 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 32) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.53 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 24) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.52 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 16) = 3L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.51 = 3L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 8) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.50 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 0) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.49 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.49 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.50 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.51 = 3L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.52 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.53 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.54 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.55 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.56 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.57 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.58 = 0L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.59 = 13L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.61 = tmp.60 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42} for node 0
Copy tmp.63 = 10L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, tmp.62, index.22, flag.13, index.31, tmp.60, four.42} for node 0
Copy ptr.1 = tmp.64 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42} for node 0
Copy tmp.66 = 13L {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.49 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 0) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.50 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 8) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.51 = 3L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 16) = 3L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.52 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 24) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.53 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 32) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.54 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 40) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.55 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 48) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.56 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 56) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.57 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 64) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.58 = 0L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 72) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.59 = 13L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 80) = 13L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 88) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.60 = Get Address long_arr.0 : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}, Copy tmp.61 = tmp.60: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}, Copy tmp.62 = 10L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, tmp.62, index.22, flag.13, index.31, tmp.60, four.42}, Copy tmp.63 = 10L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, tmp.62, index.22, flag.13, index.31, tmp.60, four.42}, AddPtr tmp.64 = tmp.60 + tmp.62 * 8: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}, Copy ptr.1 = tmp.64: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}, tmp.65 = Load tmp.64 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}, Copy tmp.66 = 13L: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}, tmp.67 = tmp.65 == 13L: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.67, flag.41}, Return tmp.67: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{long_arr.0}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67]
NEW LIST [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(long_arr.0 + 0) = 0L 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.62 = 10L: set(), AddPtr tmp.64 = tmp.60 + tmp.62 * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.62 = 10L: set(), AddPtr tmp.64 = tmp.60 + tmp.62 * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.62 = 10L: set(), AddPtr tmp.64 = tmp.60 + tmp.62 * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + tmp.62 * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.62 = 10L: set(), AddPtr tmp.64 = tmp.60 + tmp.62 * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(long_arr.0 + 0) = 0L  set()
CopyToOffset(long_arr.0 + 8) = 0L  set()
CopyToOffset(long_arr.0 + 16) = 3L  set()
CopyToOffset(long_arr.0 + 24) = 0L  set()
CopyToOffset(long_arr.0 + 32) = 0L  set()
CopyToOffset(long_arr.0 + 40) = 0L  set()
CopyToOffset(long_arr.0 + 48) = 0L  set()
CopyToOffset(long_arr.0 + 56) = 0L  set()
CopyToOffset(long_arr.0 + 64) = 0L  set()
CopyToOffset(long_arr.0 + 72) = 0L  set()
CopyToOffset(long_arr.0 + 80) = 13L  set()
CopyToOffset(long_arr.0 + 88) = 0L  set()
tmp.60 = Get Address long_arr.0  set()
Copy tmp.62 = 10L set()
<class 'parser.ConstLong'>
AddPtr tmp.64 = tmp.60 + tmp.62 * 8 {Copy tmp.62 = 10L}
tmp.65 = Load tmp.64  {Copy tmp.62 = 10L}
tmp.67 = tmp.65 == 13L {Copy tmp.62 = 10L}
Return tmp.67 {Copy tmp.62 = 10L}
OLD ANNOT: {Copy tmp.62 = 10L}
NEW ANNOT: {Copy tmp.62 = 10L}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , Copy tmp.62 = 10L, AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), Copy tmp.62 = 10L: set(), AddPtr tmp.64 = tmp.60 + tmp.62 * 8: {Copy tmp.62 = 10L}, tmp.65 = Load tmp.64 : {Copy tmp.62 = 10L}, tmp.67 = tmp.65 == 13L: {Copy tmp.62 = 10L}, Return tmp.67: {Copy tmp.62 = 10L}} ReachingCopies: {Copy tmp.62 = 10L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.67 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.67 = tmp.65 == 13L {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.67, flag.41}
tmp.65 = Load tmp.64  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}
AddPtr tmp.64 = tmp.60 + 10L * 8 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}
Copy tmp.62 = 10L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}
tmp.60 = Get Address long_arr.0  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}
CopyToOffset(long_arr.0 + 88) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 80) = 13L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 72) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 64) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 56) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 48) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 40) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 32) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 24) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 16) = 3L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 8) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 0) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.62 = 10L {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 8) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 16) = 3L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 24) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 32) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 40) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 48) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 56) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 64) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 72) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 80) = 13L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 88) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.60 = Get Address long_arr.0 : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}, Copy tmp.62 = 10L: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}, AddPtr tmp.64 = tmp.60 + 10L * 8: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}, tmp.65 = Load tmp.64 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}, tmp.67 = tmp.65 == 13L: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.67, flag.41}, Return tmp.67: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{long_arr.0}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67]
NEW LIST [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(long_arr.0 + 0) = 0L 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), AddPtr tmp.64 = tmp.60 + 10L * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), AddPtr tmp.64 = tmp.60 + 10L * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), AddPtr tmp.64 = tmp.60 + 10L * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), AddPtr tmp.64 = tmp.60 + 10L * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(long_arr.0 + 0) = 0L  set()
CopyToOffset(long_arr.0 + 8) = 0L  set()
CopyToOffset(long_arr.0 + 16) = 3L  set()
CopyToOffset(long_arr.0 + 24) = 0L  set()
CopyToOffset(long_arr.0 + 32) = 0L  set()
CopyToOffset(long_arr.0 + 40) = 0L  set()
CopyToOffset(long_arr.0 + 48) = 0L  set()
CopyToOffset(long_arr.0 + 56) = 0L  set()
CopyToOffset(long_arr.0 + 64) = 0L  set()
CopyToOffset(long_arr.0 + 72) = 0L  set()
CopyToOffset(long_arr.0 + 80) = 13L  set()
CopyToOffset(long_arr.0 + 88) = 0L  set()
tmp.60 = Get Address long_arr.0  set()
AddPtr tmp.64 = tmp.60 + 10L * 8 set()
tmp.65 = Load tmp.64  set()
tmp.67 = tmp.65 == 13L set()
Return tmp.67 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : set(), CopyToOffset(long_arr.0 + 8) = 0L : set(), CopyToOffset(long_arr.0 + 16) = 3L : set(), CopyToOffset(long_arr.0 + 24) = 0L : set(), CopyToOffset(long_arr.0 + 32) = 0L : set(), CopyToOffset(long_arr.0 + 40) = 0L : set(), CopyToOffset(long_arr.0 + 48) = 0L : set(), CopyToOffset(long_arr.0 + 56) = 0L : set(), CopyToOffset(long_arr.0 + 64) = 0L : set(), CopyToOffset(long_arr.0 + 72) = 0L : set(), CopyToOffset(long_arr.0 + 80) = 13L : set(), CopyToOffset(long_arr.0 + 88) = 0L : set(), tmp.60 = Get Address long_arr.0 : set(), AddPtr tmp.64 = tmp.60 + 10L * 8: set(), tmp.65 = Load tmp.64 : set(), tmp.67 = tmp.65 == 13L: set(), Return tmp.67: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.67 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.67 = tmp.65 == 13L {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.67, flag.41}
tmp.65 = Load tmp.64  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}
AddPtr tmp.64 = tmp.60 + 10L * 8 {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}
tmp.60 = Get Address long_arr.0  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}
CopyToOffset(long_arr.0 + 88) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 80) = 13L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 72) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 64) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 56) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 48) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 40) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 32) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 24) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 16) = 3L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 8) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.0 + 0) = 0L  {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.0 + 0) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 8) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 16) = 3L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 24) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 32) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 40) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 48) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 56) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 64) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 72) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 80) = 13L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.0 + 88) = 0L : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.60 = Get Address long_arr.0 : {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.60, four.42}, AddPtr tmp.64 = tmp.60 + 10L * 8: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.64, four.42}, tmp.65 = Load tmp.64 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.65, four.42}, tmp.67 = tmp.65 == 13L: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.67, flag.41}, Return tmp.67: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, long_arr.0, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_add_negative_index ([]) instructions:[Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, SignExtend tmp.81 = 12, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, CopyToOffset(end_ptr.3 + 0) = tmp.83 , Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, CopyToOffset(ptr.4 + 0) = tmp.88 , tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{unsigned_arr.2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, SignExtend tmp.81 = 12, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, CopyToOffset(end_ptr.3 + 0) = tmp.83 , Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, CopyToOffset(ptr.4 + 0) = tmp.88 , tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91, Return 0]
NEW LIST [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, Copy end_ptr.3 = tmp.83, Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, Copy ptr.4 = tmp.88, tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.68 = 0
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, Copy end_ptr.3 = tmp.83, Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, Copy ptr.4 = tmp.88, tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.80 = tmp.79: set(), Copy tmp.81 = 12L: set(), Copy tmp.82 = tmp.81: set(), AddPtr tmp.83 = tmp.80 + tmp.82 * 4: set(), Copy end_ptr.3 = tmp.83: set(), Copy tmp.84 = end_ptr.3: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), Copy tmp.87 = tmp.86: set(), AddPtr tmp.88 = tmp.84 + tmp.87 * 4: set(), Copy ptr.4 = tmp.88: set(), tmp.89 = Load ptr.4 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, Copy end_ptr.3 = tmp.83, Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, Copy ptr.4 = tmp.88, tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.80 = tmp.79: set(), Copy tmp.81 = 12L: set(), Copy tmp.82 = tmp.81: set(), AddPtr tmp.83 = tmp.80 + tmp.82 * 4: set(), Copy end_ptr.3 = tmp.83: set(), Copy tmp.84 = end_ptr.3: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), Copy tmp.87 = tmp.86: set(), AddPtr tmp.88 = tmp.84 + tmp.87 * 4: set(), Copy ptr.4 = tmp.88: set(), tmp.89 = Load ptr.4 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, Copy end_ptr.3 = tmp.83, Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, Copy ptr.4 = tmp.88, tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.80 = tmp.79: set(), Copy tmp.81 = 12L: set(), Copy tmp.82 = tmp.81: set(), AddPtr tmp.83 = tmp.80 + tmp.82 * 4: set(), Copy end_ptr.3 = tmp.83: set(), Copy tmp.84 = end_ptr.3: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), Copy tmp.87 = tmp.86: set(), AddPtr tmp.88 = tmp.84 + tmp.87 * 4: set(), Copy ptr.4 = tmp.88: set(), tmp.89 = Load ptr.4 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.82 = tmp.81, AddPtr tmp.83 = tmp.80 + tmp.82 * 4, Copy end_ptr.3 = tmp.83, Copy tmp.84 = end_ptr.3, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = tmp.84 + tmp.87 * 4, Copy ptr.4 = tmp.88, tmp.89 = Load ptr.4 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.80 = tmp.79: set(), Copy tmp.81 = 12L: set(), Copy tmp.82 = tmp.81: set(), AddPtr tmp.83 = tmp.80 + tmp.82 * 4: set(), Copy end_ptr.3 = tmp.83: set(), Copy tmp.84 = end_ptr.3: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), Copy tmp.87 = tmp.86: set(), AddPtr tmp.88 = tmp.84 + tmp.87 * 4: set(), Copy ptr.4 = tmp.88: set(), tmp.89 = Load ptr.4 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.68 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 0) = tmp.68  set()
Copy tmp.69 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 4) = tmp.69  set()
Copy tmp.70 = 2 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 8) = tmp.70  set()
Copy tmp.71 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 12) = tmp.71  set()
Copy tmp.72 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 16) = tmp.72  set()
Copy tmp.73 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 20) = tmp.73  set()
Copy tmp.74 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 24) = tmp.74  set()
Copy tmp.75 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 28) = tmp.75  set()
Copy tmp.76 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 32) = tmp.76  set()
Copy tmp.77 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 36) = tmp.77  set()
Copy tmp.78 = 42 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 40) = tmp.78  set()
CopyToOffset(unsigned_arr.2 + 44) = 0U  set()
tmp.79 = Get Address unsigned_arr.2  set()
Copy tmp.80 = tmp.79 set()
Copy tmp.81 = 12L {Copy tmp.80 = tmp.79}
<class 'parser.ConstLong'>
Copy tmp.82 = tmp.81 {Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}
AddPtr tmp.83 = tmp.80 + tmp.82 * 4 {Copy tmp.82 = tmp.81, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}
Copy end_ptr.3 = tmp.83 {Copy tmp.82 = tmp.81, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.84 = end_ptr.3 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}
tmp.85 = -10 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}
SignExtend tmp.86 = tmp.85 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}
Copy tmp.87 = tmp.86 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}
AddPtr tmp.88 = tmp.84 + tmp.87 * 4 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}
Copy ptr.4 = tmp.88 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.89 = Load ptr.4  {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}
Copy tmp.90 = 2 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
tmp.91 = tmp.89 == tmp.90 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}
Return tmp.91 {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}
OLD ANNOT: {Copy tmp.71 = 0, Copy tmp.84 = end_ptr.3, Copy tmp.75 = 0, Copy tmp.69 = 0, Copy tmp.76 = 0, Copy tmp.72 = 0, Copy tmp.90 = 2, Copy tmp.78 = 42, Copy tmp.82 = tmp.81, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.68 = 0, Copy tmp.70 = 2, Copy tmp.73 = 0, Copy ptr.4 = tmp.88, Copy end_ptr.3 = tmp.83, Copy tmp.74 = 0, Copy tmp.77 = 0, Copy tmp.81 = 12L}
NEW ANNOT: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.82 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, Copy tmp.84 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, Copy tmp.87 = tmp.86, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, Copy ptr.4 = tmp.88, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.80 = tmp.79: set(), Copy tmp.81 = 12L: {Copy tmp.80 = tmp.79}, Copy tmp.82 = tmp.81: {Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}, AddPtr tmp.83 = tmp.80 + tmp.82 * 4: {Copy tmp.82 = tmp.81, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}, Copy end_ptr.3 = tmp.83: {Copy tmp.82 = tmp.81, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}, Copy tmp.84 = end_ptr.3: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L}, tmp.85 = -10: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}, SignExtend tmp.86 = tmp.85: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}, Copy tmp.87 = tmp.86: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}, AddPtr tmp.88 = tmp.84 + tmp.87 * 4: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}, Copy ptr.4 = tmp.88: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy tmp.84 = end_ptr.3}, tmp.89 = Load ptr.4 : {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}, Copy tmp.90 = 2: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}, tmp.91 = tmp.89 == tmp.90: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}, Return tmp.91: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}} ReachingCopies: {Copy tmp.82 = tmp.81, Copy end_ptr.3 = tmp.83, Copy tmp.80 = tmp.79, Copy tmp.87 = tmp.86, Copy tmp.81 = 12L, Copy ptr.4 = tmp.88, Copy tmp.84 = end_ptr.3}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.91 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.91 = tmp.89 == tmp.90 {four.42, arr.43, tmp.91, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.90 = 2 {arr.43, index.25, tmp.90, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}
tmp.89 = Load tmp.88  {arr.43, index.25, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}
Copy ptr.4 = tmp.88 {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4 {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.87 = tmp.86 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.86, index.22, flag.13, index.31, four.42}
SignExtend tmp.86 = tmp.85 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.86, index.22, flag.13, index.31, four.42}
tmp.85 = -10 {arr.43, unsigned_arr.2, index.25, tmp.85, arr.18, flag.41, end_ptr.3, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.84 = tmp.83 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, index.22, flag.13, index.31, four.42}
Copy end_ptr.3 = tmp.83 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.83, index.22, flag.13, index.31, four.42}
AddPtr tmp.83 = tmp.79 + tmp.81 * 4 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}
Copy tmp.82 = 12L {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, tmp.81, four.42}
Copy tmp.81 = 12L {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, tmp.81, four.42}
Copy tmp.80 = tmp.79 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}
tmp.79 = Get Address unsigned_arr.2  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 44) = 0U  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 40) = tmp.78  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.78 = 42 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.78, flag.41}
CopyToOffset(unsigned_arr.2 + 36) = tmp.77  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.77 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.77, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 32) = tmp.76  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.76 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.76, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 28) = tmp.75  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.75 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.75}
CopyToOffset(unsigned_arr.2 + 24) = tmp.74  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.74 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, tmp.74, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 20) = tmp.73  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.73 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.73, flag.41}
CopyToOffset(unsigned_arr.2 + 16) = tmp.72  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.72 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.72, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 12) = tmp.71  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.71 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.71, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 8) = tmp.70  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.70 = 2 {arr.43, four.42, unsigned_arr.2, index.25, tmp.70, arr.18, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 4) = tmp.69  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.69 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.69, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 0) = tmp.68  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.68 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.68, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.80 = tmp.79 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.82 = 12L {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, tmp.81, four.42} for node 0
Copy tmp.84 = tmp.83 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.87 = tmp.86 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.86, index.22, flag.13, index.31, four.42} for node 0
Copy ptr.4 = tmp.88 {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.68, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.69 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.69, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.70 = 2: {arr.43, four.42, unsigned_arr.2, index.25, tmp.70, arr.18, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.71 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.71, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.72 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.72, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.73 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.73, flag.41}, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.74 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, tmp.74, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.75 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.75}, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.76 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.76, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.77 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.77, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.78 = 42: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.78, flag.41}, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(unsigned_arr.2 + 44) = 0U : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.79 = Get Address unsigned_arr.2 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.80 = tmp.79: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.81 = 12L: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, tmp.81, four.42}, Copy tmp.82 = 12L: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, tmp.81, four.42}, AddPtr tmp.83 = tmp.79 + tmp.81 * 4: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}, Copy end_ptr.3 = tmp.83: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.83, index.22, flag.13, index.31, four.42}, Copy tmp.84 = tmp.83: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, index.22, flag.13, index.31, four.42}, tmp.85 = -10: {arr.43, unsigned_arr.2, index.25, tmp.85, arr.18, flag.41, end_ptr.3, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.86 = tmp.85: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.86, index.22, flag.13, index.31, four.42}, Copy tmp.87 = tmp.86: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, end_ptr.3, index.45, tmp.86, index.22, flag.13, index.31, four.42}, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4: {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy ptr.4 = tmp.88: {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.89 = Load tmp.88 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}, Copy tmp.90 = 2: {arr.43, index.25, tmp.90, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}, tmp.91 = tmp.89 == tmp.90: {four.42, arr.43, tmp.91, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.91: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{unsigned_arr.2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91]
NEW LIST [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.68 = 0


ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.81 = 12L: set(), AddPtr tmp.83 = tmp.79 + tmp.81 * 4: set(), Copy end_ptr.3 = tmp.83: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.81 = 12L: set(), AddPtr tmp.83 = tmp.79 + tmp.81 * 4: set(), Copy end_ptr.3 = tmp.83: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.81 = 12L: set(), AddPtr tmp.83 = tmp.79 + tmp.81 * 4: set(), Copy end_ptr.3 = tmp.83: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + tmp.81 * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.81 = 12L: set(), AddPtr tmp.83 = tmp.79 + tmp.81 * 4: set(), Copy end_ptr.3 = tmp.83: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.68 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 0) = tmp.68  set()
Copy tmp.69 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 4) = tmp.69  set()
Copy tmp.70 = 2 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 8) = tmp.70  set()
Copy tmp.71 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 12) = tmp.71  set()
Copy tmp.72 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 16) = tmp.72  set()
Copy tmp.73 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 20) = tmp.73  set()
Copy tmp.74 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 24) = tmp.74  set()
Copy tmp.75 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 28) = tmp.75  set()
Copy tmp.76 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 32) = tmp.76  set()
Copy tmp.77 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 36) = tmp.77  set()
Copy tmp.78 = 42 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 40) = tmp.78  set()
CopyToOffset(unsigned_arr.2 + 44) = 0U  set()
tmp.79 = Get Address unsigned_arr.2  set()
Copy tmp.81 = 12L set()
<class 'parser.ConstLong'>
AddPtr tmp.83 = tmp.79 + tmp.81 * 4 {Copy tmp.81 = 12L}
Copy end_ptr.3 = tmp.83 {Copy tmp.81 = 12L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.85 = -10 {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
SignExtend tmp.86 = tmp.85 {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4 {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
tmp.89 = Load tmp.88  {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
Copy tmp.90 = 2 {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
tmp.91 = tmp.89 == tmp.90 {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
Return tmp.91 {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
OLD ANNOT: {Copy tmp.73 = 0, Copy tmp.75 = 0, Copy tmp.69 = 0, Copy tmp.71 = 0, Copy tmp.76 = 0, Copy tmp.68 = 0, Copy end_ptr.3 = tmp.83, Copy tmp.72 = 0, Copy tmp.70 = 2, Copy tmp.74 = 0, Copy tmp.77 = 0, Copy tmp.81 = 12L, Copy tmp.90 = 2, Copy tmp.78 = 42}
NEW ANNOT: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , Copy tmp.81 = 12L, AddPtr tmp.83 = tmp.79 + 12L * 4, Copy end_ptr.3 = tmp.83, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), Copy tmp.81 = 12L: set(), AddPtr tmp.83 = tmp.79 + tmp.81 * 4: {Copy tmp.81 = 12L}, Copy end_ptr.3 = tmp.83: {Copy tmp.81 = 12L}, tmp.85 = -10: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}, SignExtend tmp.86 = tmp.85: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}, AddPtr tmp.88 = end_ptr.3 + tmp.86 * 4: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}, tmp.89 = Load tmp.88 : {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}, Copy tmp.90 = 2: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}, tmp.91 = tmp.89 == tmp.90: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}, Return tmp.91: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}} ReachingCopies: {Copy end_ptr.3 = tmp.83, Copy tmp.81 = 12L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.91 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.91 = tmp.89 == tmp.90 {four.42, arr.43, tmp.91, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.90 = 2 {arr.43, index.25, tmp.90, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}
tmp.89 = Load tmp.88  {arr.43, index.25, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}
AddPtr tmp.88 = tmp.83 + tmp.86 * 4 {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
SignExtend tmp.86 = tmp.85 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.86, tmp.83, index.22, flag.13, index.31, four.42}
tmp.85 = -10 {arr.43, unsigned_arr.2, index.25, tmp.85, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}
Copy end_ptr.3 = tmp.83 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}
AddPtr tmp.83 = tmp.79 + 12L * 4 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}
Copy tmp.81 = 12L {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}
tmp.79 = Get Address unsigned_arr.2  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 44) = 0U  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 40) = tmp.78  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.78 = 42 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.78, four.42}
CopyToOffset(unsigned_arr.2 + 36) = tmp.77  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.77 = 0 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.77, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 32) = tmp.76  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.76 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.76, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 28) = tmp.75  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.75 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.75}
CopyToOffset(unsigned_arr.2 + 24) = tmp.74  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.74 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, tmp.74, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 20) = tmp.73  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.73 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.73, flag.41}
CopyToOffset(unsigned_arr.2 + 16) = tmp.72  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.72 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.72, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 12) = tmp.71  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.71 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.71, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 8) = tmp.70  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.70 = 2 {arr.43, four.42, unsigned_arr.2, index.25, tmp.70, arr.18, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 4) = tmp.69  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.69 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.69, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 0) = tmp.68  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.68 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.68, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.81 = 12L {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy end_ptr.3 = tmp.83 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.68, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.69 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.69, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.70 = 2: {arr.43, four.42, unsigned_arr.2, index.25, tmp.70, arr.18, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.71 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.71, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.72 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.72, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.73 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.73, flag.41}, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.74 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, tmp.74, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.75 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.75}, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.76 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.76, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.77 = 0: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.77, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.78 = 42: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.78, four.42}, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(unsigned_arr.2 + 44) = 0U : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.79 = Get Address unsigned_arr.2 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.81 = 12L: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}, AddPtr tmp.83 = tmp.79 + 12L * 4: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}, Copy end_ptr.3 = tmp.83: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}, tmp.85 = -10: {arr.43, unsigned_arr.2, index.25, tmp.85, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}, SignExtend tmp.86 = tmp.85: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.86, tmp.83, index.22, flag.13, index.31, four.42}, AddPtr tmp.88 = tmp.83 + tmp.86 * 4: {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.89 = Load tmp.88 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}, Copy tmp.90 = 2: {arr.43, index.25, tmp.90, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}, tmp.91 = tmp.89 == tmp.90: {four.42, arr.43, tmp.91, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.91: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{unsigned_arr.2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91]
NEW LIST [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.68 = 0


ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), AddPtr tmp.83 = tmp.79 + 12L * 4: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = tmp.83 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), AddPtr tmp.83 = tmp.79 + 12L * 4: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = tmp.83 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), AddPtr tmp.83 = tmp.79 + 12L * 4: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = tmp.83 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), AddPtr tmp.83 = tmp.79 + 12L * 4: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = tmp.83 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.68 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 0) = tmp.68  set()
Copy tmp.69 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 4) = tmp.69  set()
Copy tmp.70 = 2 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 8) = tmp.70  set()
Copy tmp.71 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 12) = tmp.71  set()
Copy tmp.72 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 16) = tmp.72  set()
Copy tmp.73 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 20) = tmp.73  set()
Copy tmp.74 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 24) = tmp.74  set()
Copy tmp.75 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 28) = tmp.75  set()
Copy tmp.76 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 32) = tmp.76  set()
Copy tmp.77 = 0 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 36) = tmp.77  set()
Copy tmp.78 = 42 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(unsigned_arr.2 + 40) = tmp.78  set()
CopyToOffset(unsigned_arr.2 + 44) = 0U  set()
tmp.79 = Get Address unsigned_arr.2  set()
AddPtr tmp.83 = tmp.79 + 12L * 4 set()
tmp.85 = -10 set()
SignExtend tmp.86 = tmp.85 set()
AddPtr tmp.88 = tmp.83 + tmp.86 * 4 set()
tmp.89 = Load tmp.88  set()
Copy tmp.90 = 2 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
tmp.91 = tmp.89 == tmp.90 set()
Return tmp.91 set()
OLD ANNOT: {Copy tmp.73 = 0, Copy tmp.75 = 0, Copy tmp.69 = 0, Copy tmp.71 = 0, Copy tmp.76 = 0, Copy tmp.68 = 0, Copy tmp.72 = 0, Copy tmp.70 = 2, Copy tmp.74 = 0, Copy tmp.77 = 0, Copy tmp.90 = 2, Copy tmp.78 = 42}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: set(), CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : set(), Copy tmp.69 = 0: set(), CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : set(), Copy tmp.70 = 2: set(), CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : set(), Copy tmp.71 = 0: set(), CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : set(), Copy tmp.72 = 0: set(), CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : set(), Copy tmp.73 = 0: set(), CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : set(), Copy tmp.74 = 0: set(), CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : set(), Copy tmp.75 = 0: set(), CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : set(), Copy tmp.76 = 0: set(), CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : set(), Copy tmp.77 = 0: set(), CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : set(), Copy tmp.78 = 42: set(), CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : set(), CopyToOffset(unsigned_arr.2 + 44) = 0U : set(), tmp.79 = Get Address unsigned_arr.2 : set(), AddPtr tmp.83 = tmp.79 + 12L * 4: set(), tmp.85 = -10: set(), SignExtend tmp.86 = tmp.85: set(), AddPtr tmp.88 = tmp.83 + tmp.86 * 4: set(), tmp.89 = Load tmp.88 : set(), Copy tmp.90 = 2: set(), tmp.91 = tmp.89 == tmp.90: set(), Return tmp.91: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.91 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.91 = tmp.89 == tmp.90 {four.42, arr.43, tmp.91, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.90 = 2 {arr.43, index.25, tmp.90, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}
tmp.89 = Load tmp.88  {arr.43, index.25, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}
AddPtr tmp.88 = tmp.83 + tmp.86 * 4 {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
SignExtend tmp.86 = tmp.85 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.86, tmp.83, index.22, flag.13, index.31, four.42}
tmp.85 = -10 {arr.43, unsigned_arr.2, index.25, tmp.85, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}
AddPtr tmp.83 = tmp.79 + 12L * 4 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}
tmp.79 = Get Address unsigned_arr.2  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 44) = 0U  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 40) = tmp.78  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.78 = 42 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.78, four.42}
CopyToOffset(unsigned_arr.2 + 36) = tmp.77  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.77 = 0 {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.77, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(unsigned_arr.2 + 32) = tmp.76  {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.76 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.76, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 28) = tmp.75  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.75 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.75}
CopyToOffset(unsigned_arr.2 + 24) = tmp.74  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.74 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, tmp.74, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 20) = tmp.73  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.73 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.73, flag.41}
CopyToOffset(unsigned_arr.2 + 16) = tmp.72  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.72 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.72, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 12) = tmp.71  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.71 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.71, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 8) = tmp.70  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.70 = 2 {arr.43, four.42, unsigned_arr.2, index.25, tmp.70, arr.18, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 4) = tmp.69  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.69 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.69, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(unsigned_arr.2 + 0) = tmp.68  {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.68 = 0 {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.68, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.68 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.68, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.69 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.69, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.70 = 2: {arr.43, four.42, unsigned_arr.2, index.25, tmp.70, arr.18, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.71 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.71, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.72 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.72, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.73 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.73, flag.41}, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.74 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, tmp.74, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.75 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.75}, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 : {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.76 = 0: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, tmp.76, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.77 = 0: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.77, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.78 = 42: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.78, four.42}, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(unsigned_arr.2 + 44) = 0U : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.79 = Get Address unsigned_arr.2 : {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, tmp.79, index.45, index.22, flag.13, index.31, four.42}, AddPtr tmp.83 = tmp.79 + 12L * 4: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}, tmp.85 = -10: {arr.43, unsigned_arr.2, index.25, tmp.85, arr.18, flag.41, index.45, tmp.83, index.22, flag.13, index.31, four.42}, SignExtend tmp.86 = tmp.85: {arr.43, unsigned_arr.2, index.25, arr.18, flag.41, index.45, tmp.86, tmp.83, index.22, flag.13, index.31, four.42}, AddPtr tmp.88 = tmp.83 + tmp.86 * 4: {arr.43, unsigned_arr.2, index.25, tmp.88, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.89 = Load tmp.88 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}, Copy tmp.90 = 2: {arr.43, index.25, tmp.90, arr.18, flag.41, index.45, tmp.89, index.22, flag.13, index.31, four.42}, tmp.91 = tmp.89 == tmp.90: {four.42, arr.43, tmp.91, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.91: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, unsigned_arr.2, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_add_pointer_to_int ([]) instructions:[CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, SignExtend tmp.94 = 2, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, CopyToOffset(ptr1.6 + 0) = tmp.96 , tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, SignExtend tmp.99 = 2, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, CopyToOffset(ptr2.7 + 0) = tmp.101 , tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{int_arr.5}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, SignExtend tmp.94 = 2, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, CopyToOffset(ptr1.6 + 0) = tmp.96 , tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, SignExtend tmp.99 = 2, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, CopyToOffset(ptr2.7 + 0) = tmp.101 , tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106, Return 0]
NEW LIST [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, Copy ptr1.6 = tmp.96, tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, Copy tmp.99 = 2L, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, Copy ptr2.7 = tmp.101, tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106, Return 0]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(int_arr.5 + 0) = 0 
tmp.104 = Load ptr2.7 
Copy tmp.106 = 1
Label(tmp.103)
Label(tmp.107)
Return 0









ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, Copy ptr1.6 = tmp.96, tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, Copy tmp.99 = 2L, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, Copy ptr2.7 = tmp.101, tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.93 = tmp.92: set(), Copy tmp.94 = 2L: set(), Copy tmp.95 = tmp.94: set(), AddPtr tmp.96 = tmp.93 + tmp.95 * 4: set(), Copy ptr1.6 = tmp.96: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.98 = tmp.97: set(), Copy tmp.99 = 2L: set(), Copy tmp.100 = tmp.99: set(), AddPtr tmp.101 = tmp.98 + tmp.100 * 4: set(), Copy ptr2.7 = tmp.101: set(), tmp.102 = ptr1.6 == ptr2.7: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load ptr2.7 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
5 5: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {4, 5}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, Copy ptr1.6 = tmp.96, tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, Copy tmp.99 = 2L, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, Copy ptr2.7 = tmp.101, tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.93 = tmp.92: set(), Copy tmp.94 = 2L: set(), Copy tmp.95 = tmp.94: set(), AddPtr tmp.96 = tmp.93 + tmp.95 * 4: set(), Copy ptr1.6 = tmp.96: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.98 = tmp.97: set(), Copy tmp.99 = 2L: set(), Copy tmp.100 = tmp.99: set(), AddPtr tmp.101 = tmp.98 + tmp.100 * 4: set(), Copy ptr2.7 = tmp.101: set(), tmp.102 = ptr1.6 == ptr2.7: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load ptr2.7 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, Copy ptr1.6 = tmp.96, tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, Copy tmp.99 = 2L, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, Copy ptr2.7 = tmp.101, tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.93 = tmp.92: set(), Copy tmp.94 = 2L: set(), Copy tmp.95 = tmp.94: set(), AddPtr tmp.96 = tmp.93 + tmp.95 * 4: set(), Copy ptr1.6 = tmp.96: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.98 = tmp.97: set(), Copy tmp.99 = 2L: set(), Copy tmp.100 = tmp.99: set(), AddPtr tmp.101 = tmp.98 + tmp.100 * 4: set(), Copy ptr2.7 = tmp.101: set(), tmp.102 = ptr1.6 == ptr2.7: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load ptr2.7 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, AddPtr tmp.96 = tmp.93 + tmp.95 * 4, Copy ptr1.6 = tmp.96, tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, Copy tmp.99 = 2L, Copy tmp.100 = tmp.99, AddPtr tmp.101 = tmp.98 + tmp.100 * 4, Copy ptr2.7 = tmp.101, tmp.102 = ptr1.6 == ptr2.7, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.93 = tmp.92: set(), Copy tmp.94 = 2L: set(), Copy tmp.95 = tmp.94: set(), AddPtr tmp.96 = tmp.93 + tmp.95 * 4: set(), Copy ptr1.6 = tmp.96: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.98 = tmp.97: set(), Copy tmp.99 = 2L: set(), Copy tmp.100 = tmp.99: set(), AddPtr tmp.101 = tmp.98 + tmp.100 * 4: set(), Copy ptr2.7 = tmp.101: set(), tmp.102 = ptr1.6 == ptr2.7: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load ptr2.7 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load ptr2.7 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
--------------IMAP for block 0-------------------
CopyToOffset(int_arr.5 + 0) = 0  set()
CopyToOffset(int_arr.5 + 4) = 98  set()
CopyToOffset(int_arr.5 + 8) = 99  set()
CopyToOffset(int_arr.5 + 12) = 0  set()
CopyToOffset(int_arr.5 + 16) = 0  set()
tmp.92 = Get Address int_arr.5  set()
Copy tmp.93 = tmp.92 set()
Copy tmp.94 = 2L {Copy tmp.93 = tmp.92}
<class 'parser.ConstLong'>
Copy tmp.95 = tmp.94 {Copy tmp.93 = tmp.92, Copy tmp.94 = 2L}
AddPtr tmp.96 = tmp.93 + tmp.95 * 4 {Copy tmp.95 = tmp.94, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L}
Copy ptr1.6 = tmp.96 {Copy tmp.94 = 2L, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.97 = Get Address int_arr.5  {Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L}
Copy tmp.98 = tmp.97 {Copy ptr1.6 = tmp.96, Copy tmp.94 = 2L, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94}
Copy tmp.99 = 2L {Copy tmp.98 = tmp.97, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94}
<class 'parser.ConstLong'>
Copy tmp.100 = tmp.99 {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94}
AddPtr tmp.101 = tmp.98 + tmp.100 * 4 {Copy tmp.94 = 2L, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96}
Copy ptr2.7 = tmp.101 {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.102 = ptr1.6 == ptr2.7 {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
JumpIfZero(tmp.102, tmp.103) {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
OLD ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
NEW ANNOT: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.104 = Load ptr2.7  {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
tmp.105 = tmp.104 == 99 {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
JumpIfZero(tmp.105, tmp.103) {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
OLD ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
NEW ANNOT: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.106 = 1 {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
<class 'parser.ConstInt'>
Jump(tmp.107) {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
OLD ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
NEW ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.103) {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
Copy tmp.106 = 0 {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
NEW ANNOT: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.107) {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
Return tmp.106 {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
OLD ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
NEW ANNOT: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, Copy ptr1.6 = tmp.96, tmp.97 = Get Address int_arr.5 , Copy tmp.98 = tmp.97, Copy tmp.99 = 2L, Copy tmp.100 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, Copy ptr2.7 = tmp.101, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.93 = tmp.92: set(), Copy tmp.94 = 2L: {Copy tmp.93 = tmp.92}, Copy tmp.95 = tmp.94: {Copy tmp.93 = tmp.92, Copy tmp.94 = 2L}, AddPtr tmp.96 = tmp.93 + tmp.95 * 4: {Copy tmp.95 = tmp.94, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L}, Copy ptr1.6 = tmp.96: {Copy tmp.94 = 2L, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94}, tmp.97 = Get Address int_arr.5 : {Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L}, Copy tmp.98 = tmp.97: {Copy ptr1.6 = tmp.96, Copy tmp.94 = 2L, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94}, Copy tmp.99 = 2L: {Copy tmp.98 = tmp.97, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94}, Copy tmp.100 = tmp.99: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94}, AddPtr tmp.101 = tmp.98 + tmp.100 * 4: {Copy tmp.94 = 2L, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96}, Copy ptr2.7 = tmp.101: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy tmp.95 = tmp.94}, tmp.102 = ptr1.6 == ptr2.7: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}, JumpIfZero(tmp.102, tmp.103): {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}} ReachingCopies: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load ptr2.7 : {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}, tmp.105 = tmp.104 == 99: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}, JumpIfZero(tmp.105, tmp.103): {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}} ReachingCopies: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}, Jump(tmp.107): {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}} ReachingCopies: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}, Copy tmp.106 = 0: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.94 = 2L, Copy tmp.95 = tmp.94, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}} ReachingCopies: {Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.106 = 0, Copy tmp.94 = 2L, Copy ptr1.6 = tmp.96, Copy ptr2.7 = tmp.101}
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}, Return tmp.106: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}} ReachingCopies: {Copy ptr1.6 = tmp.96, Copy tmp.99 = 2L, Copy tmp.98 = tmp.97, Copy tmp.100 = tmp.99, Copy tmp.93 = tmp.92, Copy tmp.95 = tmp.94, Copy tmp.94 = 2L, Copy ptr2.7 = tmp.101}
EXIT Exit: EXIT {4}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 4-------------------
Return tmp.106 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.107) {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.106 = 0 {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
Label(tmp.103) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.107) {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
Copy tmp.106 = 1 {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.105, tmp.103) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.105 = tmp.104 == 99 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.105, four.42}
tmp.104 = Load tmp.101  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.104, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.102, tmp.103) {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.102 = tmp.96 == tmp.101 {arr.43, tmp.101, four.42, index.25, arr.18, index.45, tmp.102, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy ptr2.7 = tmp.101 {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
AddPtr tmp.101 = tmp.97 + tmp.99 * 4 {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.100 = 2L {arr.43, four.42, index.25, tmp.96, arr.18, tmp.99, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.99 = 2L {arr.43, four.42, index.25, tmp.96, arr.18, tmp.99, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.98 = tmp.97 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.97 = Get Address int_arr.5  {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy ptr1.6 = tmp.96 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
AddPtr tmp.96 = tmp.92 + tmp.94 * 4 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.95 = 2L {arr.43, four.42, tmp.94, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.94 = 2L {arr.43, four.42, tmp.94, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.93 = tmp.92 {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.92 = Get Address int_arr.5  {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 16) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 12) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 8) = 99  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 4) = 98  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 0) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.93 = tmp.92 {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
Copy tmp.95 = 2L {arr.43, four.42, tmp.94, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
Copy ptr1.6 = tmp.96 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
Copy tmp.98 = tmp.97 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
Copy tmp.100 = 2L {arr.43, four.42, index.25, tmp.96, arr.18, tmp.99, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
Copy ptr2.7 = tmp.101 {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 4) = 98 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 8) = 99 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 12) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 16) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.92 = Get Address int_arr.5 : {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.93 = tmp.92: {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.94 = 2L: {arr.43, four.42, tmp.94, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.95 = 2L: {arr.43, four.42, tmp.94, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, AddPtr tmp.96 = tmp.92 + tmp.94 * 4: {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy ptr1.6 = tmp.96: {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.97 = Get Address int_arr.5 : {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.98 = tmp.97: {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.99 = 2L: {arr.43, four.42, index.25, tmp.96, arr.18, tmp.99, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.100 = 2L: {arr.43, four.42, index.25, tmp.96, arr.18, tmp.99, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, AddPtr tmp.101 = tmp.97 + tmp.99 * 4: {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy ptr2.7 = tmp.101: {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.102 = tmp.96 == tmp.101: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, tmp.102, index.22, flag.13, index.31, int_arr.5, flag.41}, JumpIfZero(tmp.102, tmp.103): {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.104, four.42}, tmp.105 = tmp.104 == 99: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.105, four.42}, JumpIfZero(tmp.105, tmp.103): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}, Jump(tmp.107): {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.106 = 0: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}, Return tmp.106: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {4}
--------------ADDRESS TAKEN ANALYSIS.------------------
{int_arr.5}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106]
NEW LIST [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(int_arr.5 + 0) = 0 
tmp.104 = Load tmp.101 
Copy tmp.106 = 1
Label(tmp.103)
Label(tmp.107)








ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.94 = 2L: set(), AddPtr tmp.96 = tmp.92 + tmp.94 * 4: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.99 = 2L: set(), AddPtr tmp.101 = tmp.97 + tmp.99 * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.94 = 2L: set(), AddPtr tmp.96 = tmp.92 + tmp.94 * 4: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.99 = 2L: set(), AddPtr tmp.101 = tmp.97 + tmp.99 * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.94 = 2L: set(), AddPtr tmp.96 = tmp.92 + tmp.94 * 4: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.99 = 2L: set(), AddPtr tmp.101 = tmp.97 + tmp.99 * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + tmp.94 * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + tmp.99 * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.94 = 2L: set(), AddPtr tmp.96 = tmp.92 + tmp.94 * 4: set(), tmp.97 = Get Address int_arr.5 : set(), Copy tmp.99 = 2L: set(), AddPtr tmp.101 = tmp.97 + tmp.99 * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
--------------IMAP for block 0-------------------
CopyToOffset(int_arr.5 + 0) = 0  set()
CopyToOffset(int_arr.5 + 4) = 98  set()
CopyToOffset(int_arr.5 + 8) = 99  set()
CopyToOffset(int_arr.5 + 12) = 0  set()
CopyToOffset(int_arr.5 + 16) = 0  set()
tmp.92 = Get Address int_arr.5  set()
Copy tmp.94 = 2L set()
<class 'parser.ConstLong'>
AddPtr tmp.96 = tmp.92 + tmp.94 * 4 {Copy tmp.94 = 2L}
tmp.97 = Get Address int_arr.5  {Copy tmp.94 = 2L}
Copy tmp.99 = 2L {Copy tmp.94 = 2L}
<class 'parser.ConstLong'>
AddPtr tmp.101 = tmp.97 + tmp.99 * 4 {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
tmp.102 = tmp.96 == tmp.101 {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
JumpIfZero(tmp.102, tmp.103) {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
NEW ANNOT: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.104 = Load tmp.101  {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
tmp.105 = tmp.104 == 99 {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
JumpIfZero(tmp.105, tmp.103) {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
NEW ANNOT: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.106 = 1 {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
<class 'parser.ConstInt'>
Jump(tmp.107) {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
NEW ANNOT: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.103) {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
Copy tmp.106 = 0 {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
NEW ANNOT: {Copy tmp.106 = 0, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.107) {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
Return tmp.106 {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
NEW ANNOT: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , Copy tmp.94 = 2L, AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , Copy tmp.99 = 2L, AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), Copy tmp.94 = 2L: set(), AddPtr tmp.96 = tmp.92 + tmp.94 * 4: {Copy tmp.94 = 2L}, tmp.97 = Get Address int_arr.5 : {Copy tmp.94 = 2L}, Copy tmp.99 = 2L: {Copy tmp.94 = 2L}, AddPtr tmp.101 = tmp.97 + tmp.99 * 4: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, tmp.102 = tmp.96 == tmp.101: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, JumpIfZero(tmp.102, tmp.103): {Copy tmp.99 = 2L, Copy tmp.94 = 2L}} ReachingCopies: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, tmp.105 = tmp.104 == 99: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, JumpIfZero(tmp.105, tmp.103): {Copy tmp.99 = 2L, Copy tmp.94 = 2L}} ReachingCopies: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, Jump(tmp.107): {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}} ReachingCopies: {Copy tmp.106 = 1, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, Copy tmp.106 = 0: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}} ReachingCopies: {Copy tmp.106 = 0, Copy tmp.99 = 2L, Copy tmp.94 = 2L}
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): {Copy tmp.99 = 2L, Copy tmp.94 = 2L}, Return tmp.106: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}} ReachingCopies: {Copy tmp.99 = 2L, Copy tmp.94 = 2L}
EXIT Exit: EXIT {4}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 4-------------------
Return tmp.106 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.107) {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.106 = 0 {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
Label(tmp.103) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.107) {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
Copy tmp.106 = 1 {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.105, tmp.103) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.105 = tmp.104 == 99 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.105, four.42}
tmp.104 = Load tmp.101  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.104, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.102, tmp.103) {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.102 = tmp.96 == tmp.101 {arr.43, tmp.101, four.42, index.25, arr.18, index.45, tmp.102, index.22, flag.13, index.31, int_arr.5, flag.41}
AddPtr tmp.101 = tmp.97 + 2L * 4 {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.99 = 2L {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.97 = Get Address int_arr.5  {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
AddPtr tmp.96 = tmp.92 + 2L * 4 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
Copy tmp.94 = 2L {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.92 = Get Address int_arr.5  {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 16) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 12) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 8) = 99  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 4) = 98  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 0) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.94 = 2L {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
Copy tmp.99 = 2L {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 4) = 98 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 8) = 99 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 12) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 16) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.92 = Get Address int_arr.5 : {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.94 = 2L: {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, AddPtr tmp.96 = tmp.92 + 2L * 4: {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.97 = Get Address int_arr.5 : {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, Copy tmp.99 = 2L: {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, AddPtr tmp.101 = tmp.97 + 2L * 4: {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.102 = tmp.96 == tmp.101: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, tmp.102, index.22, flag.13, index.31, int_arr.5, flag.41}, JumpIfZero(tmp.102, tmp.103): {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.104, four.42}, tmp.105 = tmp.104 == 99: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.105, four.42}, JumpIfZero(tmp.105, tmp.103): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}, Jump(tmp.107): {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.106 = 0: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}, Return tmp.106: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {4}
--------------ADDRESS TAKEN ANALYSIS.------------------
{int_arr.5}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106]
NEW LIST [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(int_arr.5 + 0) = 0 
tmp.104 = Load tmp.101 
Copy tmp.106 = 1
Label(tmp.103)
Label(tmp.107)








ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), AddPtr tmp.96 = tmp.92 + 2L * 4: set(), tmp.97 = Get Address int_arr.5 : set(), AddPtr tmp.101 = tmp.97 + 2L * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), AddPtr tmp.96 = tmp.92 + 2L * 4: set(), tmp.97 = Get Address int_arr.5 : set(), AddPtr tmp.101 = tmp.97 + 2L * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), AddPtr tmp.96 = tmp.92 + 2L * 4: set(), tmp.97 = Get Address int_arr.5 : set(), AddPtr tmp.101 = tmp.97 + 2L * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), AddPtr tmp.96 = tmp.92 + 2L * 4: set(), tmp.97 = Get Address int_arr.5 : set(), AddPtr tmp.101 = tmp.97 + 2L * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): set()} ReachingCopies: set()
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
--------------IMAP for block 0-------------------
CopyToOffset(int_arr.5 + 0) = 0  set()
CopyToOffset(int_arr.5 + 4) = 98  set()
CopyToOffset(int_arr.5 + 8) = 99  set()
CopyToOffset(int_arr.5 + 12) = 0  set()
CopyToOffset(int_arr.5 + 16) = 0  set()
tmp.92 = Get Address int_arr.5  set()
AddPtr tmp.96 = tmp.92 + 2L * 4 set()
tmp.97 = Get Address int_arr.5  set()
AddPtr tmp.101 = tmp.97 + 2L * 4 set()
tmp.102 = tmp.96 == tmp.101 set()
JumpIfZero(tmp.102, tmp.103) set()
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.104 = Load tmp.101  set()
tmp.105 = tmp.104 == 99 set()
JumpIfZero(tmp.105, tmp.103) set()
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.106 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.107) {Copy tmp.106 = 1}
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1}
NEW ANNOT: {Copy tmp.106 = 1}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.103) set()
Copy tmp.106 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1}
NEW ANNOT: {Copy tmp.106 = 0}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.107) set()
Return tmp.106 set()
OLD ANNOT: {Copy tmp.106 = 0, Copy tmp.106 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : set(), CopyToOffset(int_arr.5 + 4) = 98 : set(), CopyToOffset(int_arr.5 + 8) = 99 : set(), CopyToOffset(int_arr.5 + 12) = 0 : set(), CopyToOffset(int_arr.5 + 16) = 0 : set(), tmp.92 = Get Address int_arr.5 : set(), AddPtr tmp.96 = tmp.92 + 2L * 4: set(), tmp.97 = Get Address int_arr.5 : set(), AddPtr tmp.101 = tmp.97 + 2L * 4: set(), tmp.102 = tmp.96 == tmp.101: set(), JumpIfZero(tmp.102, tmp.103): set()} ReachingCopies: set()
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : set(), tmp.105 = tmp.104 == 99: set(), JumpIfZero(tmp.105, tmp.103): set()} ReachingCopies: set()
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: set(), Jump(tmp.107): {Copy tmp.106 = 1}} ReachingCopies: {Copy tmp.106 = 1}
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): set(), Copy tmp.106 = 0: set()} ReachingCopies: {Copy tmp.106 = 0}
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): set(), Return tmp.106: set()} ReachingCopies: set()
EXIT Exit: EXIT {4}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 4-------------------
Return tmp.106 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.107) {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.106 = 0 {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
Label(tmp.103) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.107) {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
Copy tmp.106 = 1 {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.105, tmp.103) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.105 = tmp.104 == 99 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.105, four.42}
tmp.104 = Load tmp.101  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.104, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.102, tmp.103) {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.102 = tmp.96 == tmp.101 {arr.43, tmp.101, four.42, index.25, arr.18, index.45, tmp.102, index.22, flag.13, index.31, int_arr.5, flag.41}
AddPtr tmp.101 = tmp.97 + 2L * 4 {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.97 = Get Address int_arr.5  {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}
AddPtr tmp.96 = tmp.92 + 2L * 4 {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
tmp.92 = Get Address int_arr.5  {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 16) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 12) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 8) = 99  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 4) = 98  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
CopyToOffset(int_arr.5 + 0) = 0  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: {CopyToOffset(int_arr.5 + 0) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 4) = 98 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 8) = 99 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 12) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, CopyToOffset(int_arr.5 + 16) = 0 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.92 = Get Address int_arr.5 : {arr.43, four.42, index.25, arr.18, tmp.92, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, AddPtr tmp.96 = tmp.92 + 2L * 4: {arr.43, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.97 = Get Address int_arr.5 : {arr.43, four.42, index.25, tmp.96, arr.18, index.45, tmp.97, index.22, flag.13, index.31, int_arr.5, flag.41}, AddPtr tmp.101 = tmp.97 + 2L * 4: {arr.43, tmp.101, four.42, index.25, tmp.96, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}, tmp.102 = tmp.96 == tmp.101: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, tmp.102, index.22, flag.13, index.31, int_arr.5, flag.41}, JumpIfZero(tmp.102, tmp.103): {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
1 1: [tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103)] Pred: {0} Suc: {2, 3} iMap: {tmp.104 = Load tmp.101 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.104, four.42}, tmp.105 = tmp.104 == 99: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.105, four.42}, JumpIfZero(tmp.105, tmp.103): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, tmp.101, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, int_arr.5, flag.41}
2 2: [Copy tmp.106 = 1, Jump(tmp.107)] Pred: {1} Suc: {4} iMap: {Copy tmp.106 = 1: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}, Jump(tmp.107): {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.103), Copy tmp.106 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.103): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.106 = 0: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.107), Return tmp.106] Pred: {2, 3} Suc: {EXIT} iMap: {Label(tmp.107): {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}, Return tmp.106: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, tmp.106, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {4}
OPTIMIZING FUNCTION Function: test_add_different_index_types ([]) instructions:[IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, SignExtend tmp.115 = 5, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, CopyToOffset(ptr1.9 + 0) = tmp.117 , tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, CopyToOffset(ptr2.10 + 0) = tmp.121 , tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, CopyToOffset(ptr3.11 + 0) = tmp.126 , tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, CopyToOffset(ptr4.12 + 0) = tmp.131 , tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133), tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.8}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, SignExtend tmp.115 = 5, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, CopyToOffset(ptr1.9 + 0) = tmp.117 , tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, CopyToOffset(ptr2.10 + 0) = tmp.121 , tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, CopyToOffset(ptr3.11 + 0) = tmp.126 , tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, CopyToOffset(ptr4.12 + 0) = tmp.131 , tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133), tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144, Return 0]
NEW LIST [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, Copy ptr1.9 = tmp.117, tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, Copy ptr2.10 = tmp.121, tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, Copy ptr3.11 = tmp.126, tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, Copy ptr4.12 = tmp.131, tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133), tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144, Return 0]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_zeroExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.108 = 0
tmp.134 = ptr1.9 == ptr3.11
Copy tmp.135 = 1
Label(tmp.133)
Label(tmp.136)
tmp.138 = ptr1.9 == ptr4.12
Copy tmp.139 = 1
Label(tmp.137)
Label(tmp.140)
tmp.142 = Load ptr4.12 
Copy tmp.144 = 1
Label(tmp.141)
Label(tmp.145)
Return 0





















ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, Copy ptr1.9 = tmp.117, tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, Copy ptr2.10 = tmp.121, tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, Copy ptr3.11 = tmp.126, tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, Copy ptr4.12 = tmp.131, tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.114 = tmp.113: set(), Copy tmp.115 = 5L: set(), Copy tmp.116 = tmp.115: set(), AddPtr tmp.117 = tmp.114 + tmp.116 * 8: set(), Copy ptr1.9 = tmp.117: set(), tmp.118 = Get Address double_arr.8 : set(), Copy tmp.119 = tmp.118: set(), Copy tmp.120 = 5L: set(), AddPtr tmp.121 = tmp.119 + tmp.120 * 8: set(), Copy ptr2.10 = tmp.121: set(), tmp.122 = Get Address double_arr.8 : set(), Copy tmp.123 = tmp.122: set(), ZeroExtend tmp.124 = 5U: set(), Copy tmp.125 = tmp.124: set(), AddPtr tmp.126 = tmp.123 + tmp.125 * 8: set(), Copy ptr3.11 = tmp.126: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.128 = tmp.127: set(), Copy tmp.129 = 5UL: set(), Copy tmp.130 = tmp.129: set(), AddPtr tmp.131 = tmp.128 + tmp.130 * 8: set(), Copy ptr4.12 = tmp.131: set(), tmp.132 = ptr1.9 == ptr2.10: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = ptr1.9 == ptr3.11: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = ptr1.9 == ptr4.12: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load ptr4.12 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
13 13: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {12, 13}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, Copy ptr1.9 = tmp.117, tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, Copy ptr2.10 = tmp.121, tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, Copy ptr3.11 = tmp.126, tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, Copy ptr4.12 = tmp.131, tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.114 = tmp.113: set(), Copy tmp.115 = 5L: set(), Copy tmp.116 = tmp.115: set(), AddPtr tmp.117 = tmp.114 + tmp.116 * 8: set(), Copy ptr1.9 = tmp.117: set(), tmp.118 = Get Address double_arr.8 : set(), Copy tmp.119 = tmp.118: set(), Copy tmp.120 = 5L: set(), AddPtr tmp.121 = tmp.119 + tmp.120 * 8: set(), Copy ptr2.10 = tmp.121: set(), tmp.122 = Get Address double_arr.8 : set(), Copy tmp.123 = tmp.122: set(), ZeroExtend tmp.124 = 5U: set(), Copy tmp.125 = tmp.124: set(), AddPtr tmp.126 = tmp.123 + tmp.125 * 8: set(), Copy ptr3.11 = tmp.126: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.128 = tmp.127: set(), Copy tmp.129 = 5UL: set(), Copy tmp.130 = tmp.129: set(), AddPtr tmp.131 = tmp.128 + tmp.130 * 8: set(), Copy ptr4.12 = tmp.131: set(), tmp.132 = ptr1.9 == ptr2.10: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = ptr1.9 == ptr3.11: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = ptr1.9 == ptr4.12: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load ptr4.12 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, Copy ptr1.9 = tmp.117, tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, Copy ptr2.10 = tmp.121, tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, Copy ptr3.11 = tmp.126, tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, Copy ptr4.12 = tmp.131, tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.114 = tmp.113: set(), Copy tmp.115 = 5L: set(), Copy tmp.116 = tmp.115: set(), AddPtr tmp.117 = tmp.114 + tmp.116 * 8: set(), Copy ptr1.9 = tmp.117: set(), tmp.118 = Get Address double_arr.8 : set(), Copy tmp.119 = tmp.118: set(), Copy tmp.120 = 5L: set(), AddPtr tmp.121 = tmp.119 + tmp.120 * 8: set(), Copy ptr2.10 = tmp.121: set(), tmp.122 = Get Address double_arr.8 : set(), Copy tmp.123 = tmp.122: set(), ZeroExtend tmp.124 = 5U: set(), Copy tmp.125 = tmp.124: set(), AddPtr tmp.126 = tmp.123 + tmp.125 * 8: set(), Copy ptr3.11 = tmp.126: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.128 = tmp.127: set(), Copy tmp.129 = 5UL: set(), Copy tmp.130 = tmp.129: set(), AddPtr tmp.131 = tmp.128 + tmp.130 * 8: set(), Copy ptr4.12 = tmp.131: set(), tmp.132 = ptr1.9 == ptr2.10: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = ptr1.9 == ptr3.11: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = ptr1.9 == ptr4.12: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load ptr4.12 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy tmp.116 = tmp.115, AddPtr tmp.117 = tmp.114 + tmp.116 * 8, Copy ptr1.9 = tmp.117, tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.119 + tmp.120 * 8, Copy ptr2.10 = tmp.121, tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.123 + tmp.125 * 8, Copy ptr3.11 = tmp.126, tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.128 + tmp.130 * 8, Copy ptr4.12 = tmp.131, tmp.132 = ptr1.9 == ptr2.10, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.114 = tmp.113: set(), Copy tmp.115 = 5L: set(), Copy tmp.116 = tmp.115: set(), AddPtr tmp.117 = tmp.114 + tmp.116 * 8: set(), Copy ptr1.9 = tmp.117: set(), tmp.118 = Get Address double_arr.8 : set(), Copy tmp.119 = tmp.118: set(), Copy tmp.120 = 5L: set(), AddPtr tmp.121 = tmp.119 + tmp.120 * 8: set(), Copy ptr2.10 = tmp.121: set(), tmp.122 = Get Address double_arr.8 : set(), Copy tmp.123 = tmp.122: set(), ZeroExtend tmp.124 = 5U: set(), Copy tmp.125 = tmp.124: set(), AddPtr tmp.126 = tmp.123 + tmp.125 * 8: set(), Copy ptr3.11 = tmp.126: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.128 = tmp.127: set(), Copy tmp.129 = 5UL: set(), Copy tmp.130 = tmp.129: set(), AddPtr tmp.131 = tmp.128 + tmp.130 * 8: set(), Copy ptr4.12 = tmp.131: set(), tmp.132 = ptr1.9 == ptr2.10: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = ptr1.9 == ptr3.11, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = ptr1.9 == ptr3.11: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = ptr1.9 == ptr4.12, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = ptr1.9 == ptr4.12: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load ptr4.12 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load ptr4.12 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------IMAP for block 0-------------------
IntToDouble tmp.108 = 0 set()
CopyToOffset(double_arr.8 + 0) = tmp.108  set()
IntToDouble tmp.109 = 0 set()
CopyToOffset(double_arr.8 + 8) = tmp.109  set()
IntToDouble tmp.110 = 0 set()
CopyToOffset(double_arr.8 + 16) = tmp.110  set()
IntToDouble tmp.111 = 0 set()
CopyToOffset(double_arr.8 + 24) = tmp.111  set()
IntToDouble tmp.112 = 0 set()
CopyToOffset(double_arr.8 + 32) = tmp.112  set()
CopyToOffset(double_arr.8 + 40) = 6.0  set()
CopyToOffset(double_arr.8 + 48) = 0  set()
CopyToOffset(double_arr.8 + 56) = 0  set()
CopyToOffset(double_arr.8 + 64) = 0  set()
CopyToOffset(double_arr.8 + 72) = 0  set()
CopyToOffset(double_arr.8 + 80) = 0  set()
tmp.113 = Get Address double_arr.8  set()
Copy tmp.114 = tmp.113 set()
Copy tmp.115 = 5L {Copy tmp.114 = tmp.113}
<class 'parser.ConstLong'>
Copy tmp.116 = tmp.115 {Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
AddPtr tmp.117 = tmp.114 + tmp.116 * 8 {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
Copy ptr1.9 = tmp.117 {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.118 = Get Address double_arr.8  {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy ptr1.9 = tmp.117}
Copy tmp.119 = tmp.118 {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy ptr1.9 = tmp.117}
Copy tmp.120 = 5L {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
<class 'parser.ConstLong'>
AddPtr tmp.121 = tmp.119 + tmp.120 * 8 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
Copy ptr2.10 = tmp.121 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.122 = Get Address double_arr.8  {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
Copy tmp.123 = tmp.122 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}
ZeroExtend tmp.124 = 5U {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.115 = 5L}
Copy tmp.125 = tmp.124 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy ptr1.9 = tmp.117, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L}
AddPtr tmp.126 = tmp.123 + tmp.125 * 8 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.115 = 5L}
Copy ptr3.11 = tmp.126 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.115 = 5L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.127 = Get Address double_arr.8  {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.115 = 5L}
Copy tmp.128 = tmp.127 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.115 = 5L}
Copy tmp.129 = 5UL {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.115 = 5L}
<class 'parser.ConstULong'>
<class 'parser.ULongType'>
<class 'parser.LongType'>
Copy tmp.130 = tmp.129 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.115 = 5L}
AddPtr tmp.131 = tmp.128 + tmp.130 * 8 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
Copy ptr4.12 = tmp.131 {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.132 = ptr1.9 == ptr2.10 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
JumpIfZero(tmp.132, tmp.133) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.134 = ptr1.9 == ptr3.11 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
JumpIfZero(tmp.134, tmp.133) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.135 = 1 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
Jump(tmp.136) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.135 = 1, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.135 = 1, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.133) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
Copy tmp.135 = 0 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.135 = 0, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.136) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
JumpIfZero(tmp.135, tmp.137) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.138 = ptr1.9 == ptr4.12 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
JumpIfZero(tmp.138, tmp.137) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.139 = 1 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
Jump(tmp.140) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.139 = 1, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.139 = 1, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.137) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
Copy tmp.139 = 0 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.139 = 0, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.140) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
JumpIfZero(tmp.139, tmp.141) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.142 = Load ptr4.12  {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
tmp.143 = tmp.142 == 6.0 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
JumpIfZero(tmp.143, tmp.141) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.144 = 1 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
Jump(tmp.145) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy tmp.144 = 1, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy tmp.144 = 1, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.141) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
Copy tmp.144 = 0 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.144 = 0, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.145) {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
Return tmp.144 {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.139 = 0, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy ptr4.12 = tmp.131, Copy tmp.129 = 5UL, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.130 = tmp.129, Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L, Copy ptr3.11 = tmp.126, Copy tmp.114 = tmp.113, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy tmp.116 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, Copy ptr1.9 = tmp.117, tmp.118 = Get Address double_arr.8 , Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, AddPtr tmp.121 = tmp.118 + 5L * 8, Copy ptr2.10 = tmp.121, tmp.122 = Get Address double_arr.8 , Copy tmp.123 = tmp.122, ZeroExtend tmp.124 = 5U, Copy tmp.125 = tmp.124, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, Copy ptr3.11 = tmp.126, tmp.127 = Get Address double_arr.8 , Copy tmp.128 = tmp.127, Copy tmp.129 = 5UL, Copy tmp.130 = tmp.129, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, Copy ptr4.12 = tmp.131, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.114 = tmp.113: set(), Copy tmp.115 = 5L: {Copy tmp.114 = tmp.113}, Copy tmp.116 = tmp.115: {Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, AddPtr tmp.117 = tmp.114 + tmp.116 * 8: {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, Copy ptr1.9 = tmp.117: {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, tmp.118 = Get Address double_arr.8 : {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy ptr1.9 = tmp.117}, Copy tmp.119 = tmp.118: {Copy tmp.116 = tmp.115, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L, Copy ptr1.9 = tmp.117}, Copy tmp.120 = 5L: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, AddPtr tmp.121 = tmp.119 + tmp.120 * 8: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, Copy ptr2.10 = tmp.121: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, tmp.122 = Get Address double_arr.8 : {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, Copy tmp.123 = tmp.122: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.115 = 5L}, ZeroExtend tmp.124 = 5U: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.115 = 5L}, Copy tmp.125 = tmp.124: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy ptr1.9 = tmp.117, Copy tmp.123 = tmp.122, Copy tmp.115 = 5L}, AddPtr tmp.126 = tmp.123 + tmp.125 * 8: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.115 = 5L}, Copy ptr3.11 = tmp.126: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.115 = 5L}, tmp.127 = Get Address double_arr.8 : {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.115 = 5L}, Copy tmp.128 = tmp.127: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.115 = 5L}, Copy tmp.129 = 5UL: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.115 = 5L}, Copy tmp.130 = tmp.129: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.115 = 5L}, AddPtr tmp.131 = tmp.128 + tmp.130 * 8: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Copy ptr4.12 = tmp.131: {Copy tmp.116 = tmp.115, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, tmp.132 = ptr1.9 == ptr2.10: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, JumpIfZero(tmp.132, tmp.133): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = ptr1.9 == ptr3.11: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, JumpIfZero(tmp.134, tmp.133): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Jump(tmp.136): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.135 = 1, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.135 = 1, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Copy tmp.135 = 0: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.135 = 0, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, JumpIfZero(tmp.135, tmp.137): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = ptr1.9 == ptr4.12: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, JumpIfZero(tmp.138, tmp.137): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Jump(tmp.140): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.139 = 1, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.139 = 1, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Copy tmp.139 = 0: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.139 = 0, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, JumpIfZero(tmp.139, tmp.141): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load ptr4.12 : {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, tmp.143 = tmp.142 == 6.0: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, JumpIfZero(tmp.143, tmp.141): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Jump(tmp.145): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy tmp.144 = 1, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy tmp.144 = 1, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Copy tmp.144 = 0: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.144 = 0, Copy tmp.119 = tmp.118, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.125 = tmp.124, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.120 = 5L, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}, Return tmp.144: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.116 = tmp.115, Copy ptr4.12 = tmp.131, Copy tmp.119 = tmp.118, Copy tmp.120 = 5L, Copy ptr3.11 = tmp.126, Copy ptr2.10 = tmp.121, Copy tmp.114 = tmp.113, Copy tmp.123 = tmp.122, Copy ptr1.9 = tmp.117, Copy tmp.125 = tmp.124, Copy tmp.128 = tmp.127, Copy tmp.130 = tmp.129, Copy tmp.115 = 5L}
EXIT Exit: EXIT {12}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 12-------------------
Return tmp.144 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.145) {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Copy tmp.144 = 0 {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
Label(tmp.141) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 10-------------------
Jump(tmp.145) {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
Copy tmp.144 = 1 {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.143, tmp.141) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.143 = tmp.142 == 6.0 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.143, four.42}
tmp.142 = Load tmp.131  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.142, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.139, tmp.141) {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.140) {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Copy tmp.139 = 0 {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.137) {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 6-------------------
Jump(tmp.140) {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.139 = 1 {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.138, tmp.137) {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.138 = tmp.117 == tmp.131 {arr.43, four.42, index.25, arr.18, tmp.138, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.135, tmp.137) {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.136) {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.135 = 0 {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.133) {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.136) {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.135 = 1 {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.134, tmp.133) {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.134 = tmp.117 == tmp.126 {arr.43, tmp.117, four.42, tmp.134, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.132, tmp.133) {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.132 = tmp.117 == tmp.121 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, tmp.132, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy ptr4.12 = tmp.131 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
AddPtr tmp.131 = tmp.127 + tmp.129 * 8 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.130 = tmp.129 {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.129 = 5UL {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.128 = tmp.127 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
tmp.127 = Get Address double_arr.8  {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy ptr3.11 = tmp.126 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
AddPtr tmp.126 = tmp.122 + tmp.124 * 8 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.125 = tmp.124 {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
ZeroExtend tmp.124 = 5U {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
Copy tmp.123 = tmp.122 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
tmp.122 = Get Address double_arr.8  {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
Copy ptr2.10 = tmp.121 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
AddPtr tmp.121 = tmp.118 + 5L * 8 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.120 = 5L {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.119 = tmp.118 {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.118 = Get Address double_arr.8  {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy ptr1.9 = tmp.117 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
AddPtr tmp.117 = tmp.113 + tmp.115 * 8 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.116 = 5L {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, tmp.115, flag.41}
Copy tmp.115 = 5L {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, tmp.115, flag.41}
Copy tmp.114 = tmp.113 {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.113 = Get Address double_arr.8  {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 80) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 72) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 64) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 56) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 48) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 40) = 6.0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 32) = tmp.112  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.112 = 0 {arr.43, four.42, tmp.112, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 24) = tmp.111  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.111 = 0 {arr.43, four.42, index.25, arr.18, index.45, tmp.111, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 16) = tmp.110  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.110 = 0 {arr.43, four.42, index.25, arr.18, tmp.110, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 8) = tmp.109  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.109 = 0 {arr.43, four.42, index.25, arr.18, tmp.109, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 0) = tmp.108  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.108 = 0 {arr.43, four.42, index.25, arr.18, index.45, tmp.108, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.114 = tmp.113 {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.116 = 5L {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, tmp.115, flag.41} for node 0
Copy ptr1.9 = tmp.117 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.119 = tmp.118 {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.120 = 5L {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41} for node 0
Copy ptr2.10 = tmp.121 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.123 = tmp.122 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41} for node 0
Copy tmp.125 = tmp.124 {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41} for node 0
Copy ptr3.11 = tmp.126 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.128 = tmp.127 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.130 = tmp.129 {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41} for node 0
Copy ptr4.12 = tmp.131 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: {arr.43, four.42, index.25, arr.18, index.45, tmp.108, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 0) = tmp.108 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.109 = 0: {arr.43, four.42, index.25, arr.18, tmp.109, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 8) = tmp.109 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.110 = 0: {arr.43, four.42, index.25, arr.18, tmp.110, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 16) = tmp.110 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.111 = 0: {arr.43, four.42, index.25, arr.18, index.45, tmp.111, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 24) = tmp.111 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.112 = 0: {arr.43, four.42, tmp.112, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 32) = tmp.112 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 40) = 6.0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 48) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 56) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 64) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 72) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 80) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, tmp.113 = Get Address double_arr.8 : {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Copy tmp.114 = tmp.113: {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Copy tmp.115 = 5L: {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, tmp.115, flag.41}, Copy tmp.116 = 5L: {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, tmp.115, flag.41}, AddPtr tmp.117 = tmp.113 + tmp.115 * 8: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Copy ptr1.9 = tmp.117: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, tmp.118 = Get Address double_arr.8 : {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Copy tmp.119 = tmp.118: {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Copy tmp.120 = 5L: {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, AddPtr tmp.121 = tmp.118 + 5L * 8: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy ptr2.10 = tmp.121: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.122 = Get Address double_arr.8 : {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, Copy tmp.123 = tmp.122: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, ZeroExtend tmp.124 = 5U: {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, Copy tmp.125 = tmp.124: {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, AddPtr tmp.126 = tmp.122 + tmp.124 * 8: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy ptr3.11 = tmp.126: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.127 = Get Address double_arr.8 : {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy tmp.128 = tmp.127: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy tmp.129 = 5UL: {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy tmp.130 = tmp.129: {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, AddPtr tmp.131 = tmp.127 + tmp.129 * 8: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy ptr4.12 = tmp.131: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.132 = tmp.117 == tmp.121: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, tmp.132, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.132, tmp.133): {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: {arr.43, tmp.117, four.42, tmp.134, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.134, tmp.133): {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Jump(tmp.136): {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}, Copy tmp.135 = 0: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.135, tmp.137): {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: {arr.43, four.42, index.25, arr.18, tmp.138, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.138, tmp.137): {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Jump(tmp.140): {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}, Copy tmp.139 = 0: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.139, tmp.141): {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.142, flag.41}, tmp.143 = tmp.142 == 6.0: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.143, four.42}, JumpIfZero(tmp.143, tmp.141): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}, Jump(tmp.145): {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.144 = 0: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}, Return tmp.144: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {12}
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.8}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133), tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144]
NEW LIST [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133), tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_zeroExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.108 = 0
tmp.134 = tmp.117 == tmp.126
Copy tmp.135 = 1
Label(tmp.133)
Label(tmp.136)
tmp.138 = tmp.117 == tmp.131
Copy tmp.139 = 1
Label(tmp.137)
Label(tmp.140)
tmp.142 = Load tmp.131 
Copy tmp.144 = 1
Label(tmp.141)
Label(tmp.145)




















ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.115 = 5L: set(), AddPtr tmp.117 = tmp.113 + tmp.115 * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.115 = 5L: set(), AddPtr tmp.117 = tmp.113 + tmp.115 * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.115 = 5L: set(), AddPtr tmp.117 = tmp.113 + tmp.115 * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + tmp.115 * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.115 = 5L: set(), AddPtr tmp.117 = tmp.113 + tmp.115 * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------IMAP for block 0-------------------
IntToDouble tmp.108 = 0 set()
CopyToOffset(double_arr.8 + 0) = tmp.108  set()
IntToDouble tmp.109 = 0 set()
CopyToOffset(double_arr.8 + 8) = tmp.109  set()
IntToDouble tmp.110 = 0 set()
CopyToOffset(double_arr.8 + 16) = tmp.110  set()
IntToDouble tmp.111 = 0 set()
CopyToOffset(double_arr.8 + 24) = tmp.111  set()
IntToDouble tmp.112 = 0 set()
CopyToOffset(double_arr.8 + 32) = tmp.112  set()
CopyToOffset(double_arr.8 + 40) = 6.0  set()
CopyToOffset(double_arr.8 + 48) = 0  set()
CopyToOffset(double_arr.8 + 56) = 0  set()
CopyToOffset(double_arr.8 + 64) = 0  set()
CopyToOffset(double_arr.8 + 72) = 0  set()
CopyToOffset(double_arr.8 + 80) = 0  set()
tmp.113 = Get Address double_arr.8  set()
Copy tmp.115 = 5L set()
<class 'parser.ConstLong'>
AddPtr tmp.117 = tmp.113 + tmp.115 * 8 {Copy tmp.115 = 5L}
tmp.118 = Get Address double_arr.8  {Copy tmp.115 = 5L}
AddPtr tmp.121 = tmp.118 + 5L * 8 {Copy tmp.115 = 5L}
tmp.122 = Get Address double_arr.8  {Copy tmp.115 = 5L}
ZeroExtend tmp.124 = 5U {Copy tmp.115 = 5L}
AddPtr tmp.126 = tmp.122 + tmp.124 * 8 {Copy tmp.115 = 5L}
tmp.127 = Get Address double_arr.8  {Copy tmp.115 = 5L}
Copy tmp.129 = 5UL {Copy tmp.115 = 5L}
<class 'parser.ConstULong'>
<class 'parser.ULongType'>
<class 'parser.LongType'>
AddPtr tmp.131 = tmp.127 + tmp.129 * 8 {Copy tmp.115 = 5L}
tmp.132 = tmp.117 == tmp.121 {Copy tmp.115 = 5L}
JumpIfZero(tmp.132, tmp.133) {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.134 = tmp.117 == tmp.126 {Copy tmp.115 = 5L}
JumpIfZero(tmp.134, tmp.133) {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.135 = 1 {Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
Jump(tmp.136) {Copy tmp.135 = 1, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.135 = 1, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.133) {Copy tmp.115 = 5L}
Copy tmp.135 = 0 {Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.135 = 0, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.136) {Copy tmp.115 = 5L}
JumpIfZero(tmp.135, tmp.137) {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.138 = tmp.117 == tmp.131 {Copy tmp.115 = 5L}
JumpIfZero(tmp.138, tmp.137) {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.139 = 1 {Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
Jump(tmp.140) {Copy tmp.139 = 1, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.139 = 1, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.137) {Copy tmp.115 = 5L}
Copy tmp.139 = 0 {Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.139 = 0, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.140) {Copy tmp.115 = 5L}
JumpIfZero(tmp.139, tmp.141) {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.142 = Load tmp.131  {Copy tmp.115 = 5L}
tmp.143 = tmp.142 == 6.0 {Copy tmp.115 = 5L}
JumpIfZero(tmp.143, tmp.141) {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.144 = 1 {Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
Jump(tmp.145) {Copy tmp.144 = 1, Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.144 = 1, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.141) {Copy tmp.115 = 5L}
Copy tmp.144 = 0 {Copy tmp.115 = 5L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.144 = 0, Copy tmp.115 = 5L}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.145) {Copy tmp.115 = 5L}
Return tmp.144 {Copy tmp.115 = 5L}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1, Copy tmp.115 = 5L}
NEW ANNOT: {Copy tmp.115 = 5L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , Copy tmp.115 = 5L, AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), Copy tmp.115 = 5L: set(), AddPtr tmp.117 = tmp.113 + tmp.115 * 8: {Copy tmp.115 = 5L}, tmp.118 = Get Address double_arr.8 : {Copy tmp.115 = 5L}, AddPtr tmp.121 = tmp.118 + 5L * 8: {Copy tmp.115 = 5L}, tmp.122 = Get Address double_arr.8 : {Copy tmp.115 = 5L}, ZeroExtend tmp.124 = 5U: {Copy tmp.115 = 5L}, AddPtr tmp.126 = tmp.122 + tmp.124 * 8: {Copy tmp.115 = 5L}, tmp.127 = Get Address double_arr.8 : {Copy tmp.115 = 5L}, Copy tmp.129 = 5UL: {Copy tmp.115 = 5L}, AddPtr tmp.131 = tmp.127 + tmp.129 * 8: {Copy tmp.115 = 5L}, tmp.132 = tmp.117 == tmp.121: {Copy tmp.115 = 5L}, JumpIfZero(tmp.132, tmp.133): {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: {Copy tmp.115 = 5L}, JumpIfZero(tmp.134, tmp.133): {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: {Copy tmp.115 = 5L}, Jump(tmp.136): {Copy tmp.135 = 1, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.135 = 1, Copy tmp.115 = 5L}
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): {Copy tmp.115 = 5L}, Copy tmp.135 = 0: {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.135 = 0, Copy tmp.115 = 5L}
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): {Copy tmp.115 = 5L}, JumpIfZero(tmp.135, tmp.137): {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: {Copy tmp.115 = 5L}, JumpIfZero(tmp.138, tmp.137): {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: {Copy tmp.115 = 5L}, Jump(tmp.140): {Copy tmp.139 = 1, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.139 = 1, Copy tmp.115 = 5L}
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): {Copy tmp.115 = 5L}, Copy tmp.139 = 0: {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.139 = 0, Copy tmp.115 = 5L}
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): {Copy tmp.115 = 5L}, JumpIfZero(tmp.139, tmp.141): {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : {Copy tmp.115 = 5L}, tmp.143 = tmp.142 == 6.0: {Copy tmp.115 = 5L}, JumpIfZero(tmp.143, tmp.141): {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: {Copy tmp.115 = 5L}, Jump(tmp.145): {Copy tmp.144 = 1, Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.144 = 1, Copy tmp.115 = 5L}
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): {Copy tmp.115 = 5L}, Copy tmp.144 = 0: {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.144 = 0, Copy tmp.115 = 5L}
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): {Copy tmp.115 = 5L}, Return tmp.144: {Copy tmp.115 = 5L}} ReachingCopies: {Copy tmp.115 = 5L}
EXIT Exit: EXIT {12}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 12-------------------
Return tmp.144 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.145) {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Copy tmp.144 = 0 {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
Label(tmp.141) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 10-------------------
Jump(tmp.145) {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
Copy tmp.144 = 1 {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.143, tmp.141) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.143 = tmp.142 == 6.0 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.143, four.42}
tmp.142 = Load tmp.131  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.142, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.139, tmp.141) {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.140) {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Copy tmp.139 = 0 {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.137) {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 6-------------------
Jump(tmp.140) {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.139 = 1 {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.138, tmp.137) {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.138 = tmp.117 == tmp.131 {arr.43, four.42, index.25, arr.18, tmp.138, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.135, tmp.137) {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.136) {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.135 = 0 {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.133) {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.136) {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.135 = 1 {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.134, tmp.133) {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.134 = tmp.117 == tmp.126 {arr.43, tmp.117, four.42, tmp.134, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.132, tmp.133) {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.132 = tmp.117 == tmp.121 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, tmp.132, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
AddPtr tmp.131 = tmp.127 + tmp.129 * 8 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.129 = 5UL {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
tmp.127 = Get Address double_arr.8  {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
AddPtr tmp.126 = tmp.122 + tmp.124 * 8 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
ZeroExtend tmp.124 = 5U {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
tmp.122 = Get Address double_arr.8  {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
AddPtr tmp.121 = tmp.118 + 5L * 8 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
tmp.118 = Get Address double_arr.8  {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
AddPtr tmp.117 = tmp.113 + 5L * 8 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.115 = 5L {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.113 = Get Address double_arr.8  {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 80) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 72) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 64) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 56) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 48) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 40) = 6.0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 32) = tmp.112  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.112 = 0 {arr.43, four.42, tmp.112, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 24) = tmp.111  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.111 = 0 {arr.43, four.42, index.25, arr.18, index.45, tmp.111, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 16) = tmp.110  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.110 = 0 {arr.43, four.42, index.25, arr.18, tmp.110, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 8) = tmp.109  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.109 = 0 {arr.43, four.42, index.25, arr.18, tmp.109, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 0) = tmp.108  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.108 = 0 {arr.43, four.42, index.25, arr.18, index.45, tmp.108, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.115 = 5L {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: {arr.43, four.42, index.25, arr.18, index.45, tmp.108, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 0) = tmp.108 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.109 = 0: {arr.43, four.42, index.25, arr.18, tmp.109, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 8) = tmp.109 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.110 = 0: {arr.43, four.42, index.25, arr.18, tmp.110, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 16) = tmp.110 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.111 = 0: {arr.43, four.42, index.25, arr.18, index.45, tmp.111, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 24) = tmp.111 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.112 = 0: {arr.43, four.42, tmp.112, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 32) = tmp.112 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 40) = 6.0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 48) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 56) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 64) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 72) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 80) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, tmp.113 = Get Address double_arr.8 : {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Copy tmp.115 = 5L: {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, AddPtr tmp.117 = tmp.113 + 5L * 8: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, tmp.118 = Get Address double_arr.8 : {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, AddPtr tmp.121 = tmp.118 + 5L * 8: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.122 = Get Address double_arr.8 : {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, ZeroExtend tmp.124 = 5U: {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, AddPtr tmp.126 = tmp.122 + tmp.124 * 8: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.127 = Get Address double_arr.8 : {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy tmp.129 = 5UL: {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, AddPtr tmp.131 = tmp.127 + tmp.129 * 8: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.132 = tmp.117 == tmp.121: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, tmp.132, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.132, tmp.133): {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: {arr.43, tmp.117, four.42, tmp.134, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.134, tmp.133): {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Jump(tmp.136): {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}, Copy tmp.135 = 0: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.135, tmp.137): {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: {arr.43, four.42, index.25, arr.18, tmp.138, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.138, tmp.137): {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Jump(tmp.140): {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}, Copy tmp.139 = 0: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.139, tmp.141): {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.142, flag.41}, tmp.143 = tmp.142 == 6.0: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.143, four.42}, JumpIfZero(tmp.143, tmp.141): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}, Jump(tmp.145): {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.144 = 0: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}, Return tmp.144: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {12}
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.8}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133), tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144]
NEW LIST [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133), tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_zeroExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.108 = 0
tmp.134 = tmp.117 == tmp.126
Copy tmp.135 = 1
Label(tmp.133)
Label(tmp.136)
tmp.138 = tmp.117 == tmp.131
Copy tmp.139 = 1
Label(tmp.137)
Label(tmp.140)
tmp.142 = Load tmp.131 
Copy tmp.144 = 1
Label(tmp.141)
Label(tmp.145)




















ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), AddPtr tmp.117 = tmp.113 + 5L * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), AddPtr tmp.117 = tmp.113 + 5L * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), AddPtr tmp.117 = tmp.113 + 5L * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), AddPtr tmp.117 = tmp.113 + 5L * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): set()} ReachingCopies: set()
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): set()} ReachingCopies: set()
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): set()} ReachingCopies: set()
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------IMAP for block 0-------------------
IntToDouble tmp.108 = 0 set()
CopyToOffset(double_arr.8 + 0) = tmp.108  set()
IntToDouble tmp.109 = 0 set()
CopyToOffset(double_arr.8 + 8) = tmp.109  set()
IntToDouble tmp.110 = 0 set()
CopyToOffset(double_arr.8 + 16) = tmp.110  set()
IntToDouble tmp.111 = 0 set()
CopyToOffset(double_arr.8 + 24) = tmp.111  set()
IntToDouble tmp.112 = 0 set()
CopyToOffset(double_arr.8 + 32) = tmp.112  set()
CopyToOffset(double_arr.8 + 40) = 6.0  set()
CopyToOffset(double_arr.8 + 48) = 0  set()
CopyToOffset(double_arr.8 + 56) = 0  set()
CopyToOffset(double_arr.8 + 64) = 0  set()
CopyToOffset(double_arr.8 + 72) = 0  set()
CopyToOffset(double_arr.8 + 80) = 0  set()
tmp.113 = Get Address double_arr.8  set()
AddPtr tmp.117 = tmp.113 + 5L * 8 set()
tmp.118 = Get Address double_arr.8  set()
AddPtr tmp.121 = tmp.118 + 5L * 8 set()
tmp.122 = Get Address double_arr.8  set()
ZeroExtend tmp.124 = 5U set()
AddPtr tmp.126 = tmp.122 + tmp.124 * 8 set()
tmp.127 = Get Address double_arr.8  set()
Copy tmp.129 = 5UL set()
<class 'parser.ConstULong'>
<class 'parser.ULongType'>
<class 'parser.LongType'>
AddPtr tmp.131 = tmp.127 + tmp.129 * 8 set()
tmp.132 = tmp.117 == tmp.121 set()
JumpIfZero(tmp.132, tmp.133) set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.134 = tmp.117 == tmp.126 set()
JumpIfZero(tmp.134, tmp.133) set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.135 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.136) {Copy tmp.135 = 1}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.135 = 1}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.133) set()
Copy tmp.135 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.135 = 0}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.136) set()
JumpIfZero(tmp.135, tmp.137) set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.138 = tmp.117 == tmp.131 set()
JumpIfZero(tmp.138, tmp.137) set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.139 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.140) {Copy tmp.139 = 1}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.139 = 1}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.137) set()
Copy tmp.139 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.139 = 0}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.140) set()
JumpIfZero(tmp.139, tmp.141) set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.142 = Load tmp.131  set()
tmp.143 = tmp.142 == 6.0 set()
JumpIfZero(tmp.143, tmp.141) set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.144 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.145) {Copy tmp.144 = 1}
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.144 = 1}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.141) set()
Copy tmp.144 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: {Copy tmp.144 = 0}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.145) set()
Return tmp.144 set()
OLD ANNOT: {Copy tmp.139 = 1, Copy tmp.144 = 0, Copy tmp.135 = 0, Copy tmp.129 = 5UL, Copy tmp.139 = 0, Copy tmp.144 = 1, Copy tmp.135 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: set(), CopyToOffset(double_arr.8 + 0) = tmp.108 : set(), IntToDouble tmp.109 = 0: set(), CopyToOffset(double_arr.8 + 8) = tmp.109 : set(), IntToDouble tmp.110 = 0: set(), CopyToOffset(double_arr.8 + 16) = tmp.110 : set(), IntToDouble tmp.111 = 0: set(), CopyToOffset(double_arr.8 + 24) = tmp.111 : set(), IntToDouble tmp.112 = 0: set(), CopyToOffset(double_arr.8 + 32) = tmp.112 : set(), CopyToOffset(double_arr.8 + 40) = 6.0 : set(), CopyToOffset(double_arr.8 + 48) = 0 : set(), CopyToOffset(double_arr.8 + 56) = 0 : set(), CopyToOffset(double_arr.8 + 64) = 0 : set(), CopyToOffset(double_arr.8 + 72) = 0 : set(), CopyToOffset(double_arr.8 + 80) = 0 : set(), tmp.113 = Get Address double_arr.8 : set(), AddPtr tmp.117 = tmp.113 + 5L * 8: set(), tmp.118 = Get Address double_arr.8 : set(), AddPtr tmp.121 = tmp.118 + 5L * 8: set(), tmp.122 = Get Address double_arr.8 : set(), ZeroExtend tmp.124 = 5U: set(), AddPtr tmp.126 = tmp.122 + tmp.124 * 8: set(), tmp.127 = Get Address double_arr.8 : set(), Copy tmp.129 = 5UL: set(), AddPtr tmp.131 = tmp.127 + tmp.129 * 8: set(), tmp.132 = tmp.117 == tmp.121: set(), JumpIfZero(tmp.132, tmp.133): set()} ReachingCopies: set()
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: set(), JumpIfZero(tmp.134, tmp.133): set()} ReachingCopies: set()
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: set(), Jump(tmp.136): {Copy tmp.135 = 1}} ReachingCopies: {Copy tmp.135 = 1}
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): set(), Copy tmp.135 = 0: set()} ReachingCopies: {Copy tmp.135 = 0}
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): set(), JumpIfZero(tmp.135, tmp.137): set()} ReachingCopies: set()
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: set(), JumpIfZero(tmp.138, tmp.137): set()} ReachingCopies: set()
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: set(), Jump(tmp.140): {Copy tmp.139 = 1}} ReachingCopies: {Copy tmp.139 = 1}
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): set(), Copy tmp.139 = 0: set()} ReachingCopies: {Copy tmp.139 = 0}
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): set(), JumpIfZero(tmp.139, tmp.141): set()} ReachingCopies: set()
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : set(), tmp.143 = tmp.142 == 6.0: set(), JumpIfZero(tmp.143, tmp.141): set()} ReachingCopies: set()
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: set(), Jump(tmp.145): {Copy tmp.144 = 1}} ReachingCopies: {Copy tmp.144 = 1}
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): set(), Copy tmp.144 = 0: set()} ReachingCopies: {Copy tmp.144 = 0}
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): set(), Return tmp.144: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 12-------------------
Return tmp.144 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.145) {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Copy tmp.144 = 0 {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
Label(tmp.141) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 10-------------------
Jump(tmp.145) {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
Copy tmp.144 = 1 {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.143, tmp.141) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.143 = tmp.142 == 6.0 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.143, four.42}
tmp.142 = Load tmp.131  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.142, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.139, tmp.141) {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.140) {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Copy tmp.139 = 0 {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.137) {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 6-------------------
Jump(tmp.140) {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.139 = 1 {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.138, tmp.137) {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.138 = tmp.117 == tmp.131 {arr.43, four.42, index.25, arr.18, tmp.138, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.135, tmp.137) {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.136) {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.135 = 0 {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Label(tmp.133) {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.136) {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
Copy tmp.135 = 1 {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.134, tmp.133) {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.134 = tmp.117 == tmp.126 {arr.43, tmp.117, four.42, tmp.134, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.132, tmp.133) {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.132 = tmp.117 == tmp.121 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, tmp.132, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
AddPtr tmp.131 = tmp.127 + tmp.129 * 8 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
Copy tmp.129 = 5UL {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
tmp.127 = Get Address double_arr.8  {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
AddPtr tmp.126 = tmp.122 + tmp.124 * 8 {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
ZeroExtend tmp.124 = 5U {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
tmp.122 = Get Address double_arr.8  {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}
AddPtr tmp.121 = tmp.118 + 5L * 8 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}
tmp.118 = Get Address double_arr.8  {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
AddPtr tmp.117 = tmp.113 + 5L * 8 {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
tmp.113 = Get Address double_arr.8  {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 80) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 72) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 64) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 56) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 48) = 0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 40) = 6.0  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 32) = tmp.112  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.112 = 0 {arr.43, four.42, tmp.112, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 24) = tmp.111  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.111 = 0 {arr.43, four.42, index.25, arr.18, index.45, tmp.111, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 16) = tmp.110  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.110 = 0 {arr.43, four.42, index.25, arr.18, tmp.110, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 8) = tmp.109  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.109 = 0 {arr.43, four.42, index.25, arr.18, tmp.109, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.8 + 0) = tmp.108  {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.108 = 0 {arr.43, four.42, index.25, arr.18, index.45, tmp.108, double_arr.8, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.108 = 0: {arr.43, four.42, index.25, arr.18, index.45, tmp.108, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 0) = tmp.108 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.109 = 0: {arr.43, four.42, index.25, arr.18, tmp.109, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 8) = tmp.109 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.110 = 0: {arr.43, four.42, index.25, arr.18, tmp.110, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 16) = tmp.110 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.111 = 0: {arr.43, four.42, index.25, arr.18, index.45, tmp.111, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 24) = tmp.111 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.112 = 0: {arr.43, four.42, tmp.112, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 32) = tmp.112 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 40) = 6.0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 48) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 56) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 64) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 72) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.8 + 80) = 0 : {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, tmp.113 = Get Address double_arr.8 : {arr.43, tmp.113, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, AddPtr tmp.117 = tmp.113 + 5L * 8: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, tmp.118 = Get Address double_arr.8 : {arr.43, tmp.117, tmp.118, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, AddPtr tmp.121 = tmp.118 + 5L * 8: {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.122 = Get Address double_arr.8 : {arr.43, tmp.117, four.42, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, ZeroExtend tmp.124 = 5U: {arr.43, tmp.117, four.42, tmp.124, index.25, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, tmp.122, flag.41}, AddPtr tmp.126 = tmp.122 + tmp.124 * 8: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.127 = Get Address double_arr.8 : {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, Copy tmp.129 = 5UL: {arr.43, tmp.117, four.42, index.25, tmp.129, tmp.126, arr.18, tmp.127, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, AddPtr tmp.131 = tmp.127 + tmp.129 * 8: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, tmp.121, index.22, flag.13, index.31, flag.41}, tmp.132 = tmp.117 == tmp.121: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, tmp.132, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.132, tmp.133): {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
1 1: [tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133)] Pred: {0} Suc: {2, 3} iMap: {tmp.134 = tmp.117 == tmp.126: {arr.43, tmp.117, four.42, tmp.134, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.134, tmp.133): {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, four.42, index.25, tmp.126, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
2 2: [Copy tmp.135 = 1, Jump(tmp.136)] Pred: {1} Suc: {4} iMap: {Copy tmp.135 = 1: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Jump(tmp.136): {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.133), Copy tmp.135 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.133): {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}, Copy tmp.135 = 0: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.136), JumpIfZero(tmp.135, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.136): {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.135, tmp.137): {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, tmp.135, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
5 5: [tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137)] Pred: {4} Suc: {6, 7} iMap: {tmp.138 = tmp.117 == tmp.131: {arr.43, four.42, index.25, arr.18, tmp.138, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.138, tmp.137): {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.117, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
6 6: [Copy tmp.139 = 1, Jump(tmp.140)] Pred: {5} Suc: {8} iMap: {Copy tmp.139 = 1: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, Jump(tmp.140): {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.137), Copy tmp.139 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.137): {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}, Copy tmp.139 = 0: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, four.42}
8 8: [Label(tmp.140), JumpIfZero(tmp.139, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.140): {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.139, tmp.141): {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.139, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
9 9: [tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141)] Pred: {8} Suc: {10, 11} iMap: {tmp.142 = Load tmp.131 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.142, flag.41}, tmp.143 = tmp.142 == 6.0: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.143, four.42}, JumpIfZero(tmp.143, tmp.141): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, tmp.131, index.45, double_arr.8, index.22, flag.13, index.31, flag.41}
10 10: [Copy tmp.144 = 1, Jump(tmp.145)] Pred: {9} Suc: {12} iMap: {Copy tmp.144 = 1: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}, Jump(tmp.145): {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
11 11: [Label(tmp.141), Copy tmp.144 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.141): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.144 = 0: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
12 12: [Label(tmp.145), Return tmp.144] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.145): {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}, Return tmp.144: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, tmp.144, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {12}
OPTIMIZING FUNCTION Function: test_add_complex_expressions ([]) instructions:[tmp.146 = -2, CopyToOffset(i.14 + 0) = tmp.146 , tmp.147 = Get Address i.14 , CopyToOffset(small_int_ptr.15 + 0) = tmp.147 , Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149), tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159, Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, CopyToOffset(ptr.19 + 0) = tmp.166 , tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, SignExtend tmp.169 = 1, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag.13, arr.18, i.14}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.146 = -2, CopyToOffset(i.14 + 0) = tmp.146 , tmp.147 = Get Address i.14 , CopyToOffset(small_int_ptr.15 + 0) = tmp.147 , Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149), tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159, Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, CopyToOffset(ptr.19 + 0) = tmp.166 , tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, SignExtend tmp.169 = 1, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176, Return 0]
NEW LIST [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149), tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159, Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, Copy ptr.19 = tmp.166, tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176, Return 0]
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.146 = -2
tmp.150 = Get Address arr.18 
Label(tmp.149)
Label(tmp.155)
tmp.174 = Load ptr.19 
Copy tmp.176 = 1
Label(tmp.173)
Label(tmp.177)
Return 0













ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), Copy small_int_ptr.15 = tmp.147: set(), Copy tmp.148 = flag.13: set(), JumpIfZero(tmp.148, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), Copy tmp.151 = tmp.150: set(), tmp.152 = get_elem1_ptr([tmp.151]): set(), Copy tmp.153 = tmp.152: set(), Copy tmp.154 = tmp.153: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), Copy tmp.157 = tmp.156: set(), tmp.158 = get_elem2_ptr([tmp.157]): set(), Copy tmp.159 = tmp.158: set(), Copy tmp.154 = tmp.159: set()} ReachingCopies: set()
3 3: [Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, Copy ptr.19 = tmp.166, tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), Copy tmp.160 = tmp.154: set(), tmp.161 = return_one([]): set(), tmp.162 = Load small_int_ptr.15 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), Copy tmp.165 = tmp.164: set(), AddPtr tmp.166 = tmp.160 + tmp.165 * 4: set(), Copy ptr.19 = tmp.166: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.168 = tmp.167: set(), Copy tmp.169 = 1L: set(), Copy tmp.170 = tmp.169: set(), AddPtr tmp.171 = tmp.168 + tmp.170 * 4: set(), tmp.172 = ptr.19 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load ptr.19 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
8 8: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {8, 7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), Copy small_int_ptr.15 = tmp.147: set(), Copy tmp.148 = flag.13: set(), JumpIfZero(tmp.148, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), Copy tmp.151 = tmp.150: set(), tmp.152 = get_elem1_ptr([tmp.151]): set(), Copy tmp.153 = tmp.152: set(), Copy tmp.154 = tmp.153: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), Copy tmp.157 = tmp.156: set(), tmp.158 = get_elem2_ptr([tmp.157]): set(), Copy tmp.159 = tmp.158: set(), Copy tmp.154 = tmp.159: set()} ReachingCopies: set()
3 3: [Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, Copy ptr.19 = tmp.166, tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), Copy tmp.160 = tmp.154: set(), tmp.161 = return_one([]): set(), tmp.162 = Load small_int_ptr.15 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), Copy tmp.165 = tmp.164: set(), AddPtr tmp.166 = tmp.160 + tmp.165 * 4: set(), Copy ptr.19 = tmp.166: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.168 = tmp.167: set(), Copy tmp.169 = 1L: set(), Copy tmp.170 = tmp.169: set(), AddPtr tmp.171 = tmp.168 + tmp.170 * 4: set(), tmp.172 = ptr.19 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load ptr.19 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), Copy small_int_ptr.15 = tmp.147: set(), Copy tmp.148 = flag.13: set(), JumpIfZero(tmp.148, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), Copy tmp.151 = tmp.150: set(), tmp.152 = get_elem1_ptr([tmp.151]): set(), Copy tmp.153 = tmp.152: set(), Copy tmp.154 = tmp.153: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), Copy tmp.157 = tmp.156: set(), tmp.158 = get_elem2_ptr([tmp.157]): set(), Copy tmp.159 = tmp.158: set(), Copy tmp.154 = tmp.159: set()} ReachingCopies: set()
3 3: [Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, Copy ptr.19 = tmp.166, tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), Copy tmp.160 = tmp.154: set(), tmp.161 = return_one([]): set(), tmp.162 = Load small_int_ptr.15 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), Copy tmp.165 = tmp.164: set(), AddPtr tmp.166 = tmp.160 + tmp.165 * 4: set(), Copy ptr.19 = tmp.166: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.168 = tmp.167: set(), Copy tmp.169 = 1L: set(), Copy tmp.170 = tmp.169: set(), AddPtr tmp.171 = tmp.168 + tmp.170 * 4: set(), tmp.172 = ptr.19 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load ptr.19 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, JumpIfZero(tmp.148, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), Copy small_int_ptr.15 = tmp.147: set(), Copy tmp.148 = flag.13: set(), JumpIfZero(tmp.148, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.151]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.153, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), Copy tmp.151 = tmp.150: set(), tmp.152 = get_elem1_ptr([tmp.151]): set(), Copy tmp.153 = tmp.152: set(), Copy tmp.154 = tmp.153: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.157]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), Copy tmp.157 = tmp.156: set(), tmp.158 = get_elem2_ptr([tmp.157]): set(), Copy tmp.159 = tmp.158: set(), Copy tmp.154 = tmp.159: set()} ReachingCopies: set()
3 3: [Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load small_int_ptr.15 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.160 + tmp.165 * 4, Copy ptr.19 = tmp.166, tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy tmp.170 = tmp.169, AddPtr tmp.171 = tmp.168 + tmp.170 * 4, tmp.172 = ptr.19 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), Copy tmp.160 = tmp.154: set(), tmp.161 = return_one([]): set(), tmp.162 = Load small_int_ptr.15 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), Copy tmp.165 = tmp.164: set(), AddPtr tmp.166 = tmp.160 + tmp.165 * 4: set(), Copy ptr.19 = tmp.166: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.168 = tmp.167: set(), Copy tmp.169 = 1L: set(), Copy tmp.170 = tmp.169: set(), AddPtr tmp.171 = tmp.168 + tmp.170 * 4: set(), tmp.172 = ptr.19 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load ptr.19 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load ptr.19 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
--------------IMAP for block 0-------------------
tmp.146 = -2 set()
Copy i.14 = tmp.146 set()
tmp.147 = Get Address i.14  {Copy i.14 = tmp.146}
Copy small_int_ptr.15 = tmp.147 {Copy i.14 = tmp.146}
Copy tmp.148 = flag.13 {Copy small_int_ptr.15 = tmp.147, Copy i.14 = tmp.146}
JumpIfZero(tmp.148, tmp.149) {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.150 = Get Address arr.18  {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
Copy tmp.151 = tmp.150 {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
tmp.152 = get_elem1_ptr([tmp.151]) {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
Copy tmp.153 = tmp.152 {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150}
Copy tmp.154 = tmp.153 {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.153 = tmp.152}
Jump(tmp.155) {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.154 = tmp.153, Copy tmp.153 = tmp.152}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.154 = tmp.153, Copy tmp.153 = tmp.152}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.149) {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
tmp.156 = Get Address arr.18  {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
Copy tmp.157 = tmp.156 {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
tmp.158 = get_elem2_ptr([tmp.157]) {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146, Copy tmp.157 = tmp.156}
Copy tmp.159 = tmp.158 {Copy small_int_ptr.15 = tmp.147, Copy tmp.157 = tmp.156}
Copy tmp.154 = tmp.159 {Copy small_int_ptr.15 = tmp.147, Copy tmp.159 = tmp.158, Copy tmp.157 = tmp.156}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy small_int_ptr.15 = tmp.147, Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159, Copy tmp.157 = tmp.156}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.155) {Copy small_int_ptr.15 = tmp.147}
Copy tmp.160 = tmp.154 {Copy small_int_ptr.15 = tmp.147}
tmp.161 = return_one([]) {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}
tmp.162 = Load small_int_ptr.15  {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}
tmp.163 = tmp.161 + tmp.162 {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}
SignExtend tmp.164 = tmp.163 {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}
Copy tmp.165 = tmp.164 {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}
AddPtr tmp.166 = tmp.160 + tmp.165 * 4 {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154}
Copy ptr.19 = tmp.166 {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.167 = Get Address arr.18  {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
Copy tmp.168 = tmp.167 {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
Copy tmp.169 = 1L {Copy tmp.168 = tmp.167, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
<class 'parser.ConstLong'>
Copy tmp.170 = tmp.169 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
AddPtr tmp.171 = tmp.168 + tmp.170 * 4 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
tmp.172 = ptr.19 == tmp.171 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
JumpIfZero(tmp.172, tmp.173) {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
tmp.174 = Load ptr.19  {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
tmp.175 = tmp.174 == 2 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
JumpIfZero(tmp.175, tmp.173) {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Copy tmp.176 = 1 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
<class 'parser.ConstInt'>
Jump(tmp.177) {Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy ptr.19 = tmp.166, Copy tmp.170 = tmp.169}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy ptr.19 = tmp.166, Copy tmp.170 = tmp.169}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(tmp.173) {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
Copy tmp.176 = 0 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy ptr.19 = tmp.166, Copy tmp.170 = tmp.169, Copy tmp.176 = 0}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.177) {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
Return tmp.176 {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
OLD ANNOT: {Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy tmp.154 = tmp.153, Copy tmp.154 = tmp.159, Copy i.14 = tmp.146, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.157 = tmp.156, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.153 = tmp.152, Copy tmp.159 = tmp.158, Copy tmp.170 = tmp.169, Copy tmp.176 = 0, Copy ptr.19 = tmp.166}
NEW ANNOT: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : {Copy i.14 = tmp.146}, Copy small_int_ptr.15 = tmp.147: {Copy i.14 = tmp.146}, Copy tmp.148 = flag.13: {Copy small_int_ptr.15 = tmp.147, Copy i.14 = tmp.146}, JumpIfZero(tmp.148, tmp.149): {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}} ReachingCopies: {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}
1 1: [tmp.150 = Get Address arr.18 , Copy tmp.151 = tmp.150, tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.153 = tmp.152, Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}, Copy tmp.151 = tmp.150: {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}, tmp.152 = get_elem1_ptr([tmp.151]): {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}, Copy tmp.153 = tmp.152: {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150}, Copy tmp.154 = tmp.153: {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.153 = tmp.152}, Jump(tmp.155): {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.154 = tmp.153, Copy tmp.153 = tmp.152}} ReachingCopies: {Copy small_int_ptr.15 = tmp.147, Copy tmp.151 = tmp.150, Copy tmp.154 = tmp.153, Copy tmp.153 = tmp.152}
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , Copy tmp.157 = tmp.156, tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}, tmp.156 = Get Address arr.18 : {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}, Copy tmp.157 = tmp.156: {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146}, tmp.158 = get_elem2_ptr([tmp.157]): {Copy small_int_ptr.15 = tmp.147, Copy tmp.148 = flag.13, Copy i.14 = tmp.146, Copy tmp.157 = tmp.156}, Copy tmp.159 = tmp.158: {Copy small_int_ptr.15 = tmp.147, Copy tmp.157 = tmp.156}, Copy tmp.154 = tmp.159: {Copy small_int_ptr.15 = tmp.147, Copy tmp.159 = tmp.158, Copy tmp.157 = tmp.156}} ReachingCopies: {Copy small_int_ptr.15 = tmp.147, Copy tmp.159 = tmp.158, Copy tmp.154 = tmp.159, Copy tmp.157 = tmp.156}
3 3: [Label(tmp.155), Copy tmp.160 = tmp.154, tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, Copy tmp.165 = tmp.164, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, Copy ptr.19 = tmp.166, tmp.167 = Get Address arr.18 , Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy tmp.170 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): {Copy small_int_ptr.15 = tmp.147}, Copy tmp.160 = tmp.154: {Copy small_int_ptr.15 = tmp.147}, tmp.161 = return_one([]): {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}, tmp.162 = Load small_int_ptr.15 : {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}, tmp.163 = tmp.161 + tmp.162: {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}, SignExtend tmp.164 = tmp.163: {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}, Copy tmp.165 = tmp.164: {Copy small_int_ptr.15 = tmp.147, Copy tmp.160 = tmp.154}, AddPtr tmp.166 = tmp.160 + tmp.165 * 4: {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154}, Copy ptr.19 = tmp.166: {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154}, tmp.167 = Get Address arr.18 : {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, Copy tmp.168 = tmp.167: {Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, Copy tmp.169 = 1L: {Copy tmp.168 = tmp.167, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, Copy tmp.170 = tmp.169: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, AddPtr tmp.171 = tmp.168 + tmp.170 * 4: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, tmp.172 = ptr.19 == tmp.171: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, JumpIfZero(tmp.172, tmp.173): {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}} ReachingCopies: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load ptr.19 : {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, tmp.175 = tmp.174 == 2: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, JumpIfZero(tmp.175, tmp.173): {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}} ReachingCopies: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, Jump(tmp.177): {Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy ptr.19 = tmp.166, Copy tmp.170 = tmp.169}} ReachingCopies: {Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.176 = 1, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy ptr.19 = tmp.166, Copy tmp.170 = tmp.169}
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, Copy tmp.176 = 0: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}} ReachingCopies: {Copy tmp.165 = tmp.164, Copy tmp.160 = tmp.154, Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy ptr.19 = tmp.166, Copy tmp.170 = tmp.169, Copy tmp.176 = 0}
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}, Return tmp.176: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}} ReachingCopies: {Copy tmp.168 = tmp.167, Copy tmp.169 = 1L, Copy small_int_ptr.15 = tmp.147, Copy tmp.165 = tmp.164, Copy tmp.170 = tmp.169, Copy tmp.160 = tmp.154, Copy ptr.19 = tmp.166}
EXIT Exit: EXIT {7}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 7-------------------
Return tmp.176 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.177) {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 6-------------------
Copy tmp.176 = 0 {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.173) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
Jump(tmp.177) {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.176 = 1 {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.175, tmp.173) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.175 = tmp.174 == 2 {arr.43, index.25, arr.18, flag.41, tmp.175, index.45, index.22, flag.13, index.31, four.42}
tmp.174 = Load tmp.166  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.174, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
JumpIfZero(tmp.172, tmp.173) {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
tmp.172 = tmp.166 == tmp.171 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.172, tmp.166, index.22, flag.13, index.31, flag.41}
AddPtr tmp.171 = tmp.167 + tmp.169 * 4 {arr.43, four.42, index.25, i.14, tmp.171, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
Copy tmp.170 = 1L {arr.43, four.42, index.25, i.14, tmp.169, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
Copy tmp.169 = 1L {arr.43, four.42, index.25, i.14, tmp.169, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
Copy tmp.168 = tmp.167 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
tmp.167 = Get Address arr.18  {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
Copy ptr.19 = tmp.166 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
AddPtr tmp.166 = tmp.154 + tmp.164 * 4 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
Copy tmp.165 = tmp.164 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}
SignExtend tmp.164 = tmp.163 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}
tmp.163 = tmp.161 + tmp.162 {arr.43, four.42, tmp.163, index.25, i.14, arr.18, tmp.154, index.45, index.22, flag.13, index.31, flag.41}
tmp.162 = Load tmp.147  {arr.43, four.42, index.25, i.14, tmp.162, arr.18, tmp.154, index.45, tmp.161, index.22, flag.13, index.31, flag.41}
tmp.161 = return_one([]) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, tmp.161, index.22, flag.13, index.31, flag.41}
Copy tmp.160 = tmp.154 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.155) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 2-------------------
Copy tmp.154 = tmp.158 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.159 = tmp.158 {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}
tmp.158 = get_elem2_ptr([tmp.156]) {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.157 = tmp.156 {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}
tmp.156 = Get Address arr.18  {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}
Label(tmp.149) {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Jump(tmp.155) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.154 = tmp.152 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.153 = tmp.152 {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}
tmp.152 = get_elem1_ptr([tmp.150]) {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.151 = tmp.150 {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.150 = Get Address arr.18  {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(flag.13, tmp.149) {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.148 = flag.13 {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy small_int_ptr.15 = tmp.147 {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.147 = Get Address i.14  {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy i.14 = tmp.146 {arr.43, four.42, index.25, i.14, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.146 = -2 {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.146, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy small_int_ptr.15 = tmp.147 {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.148 = flag.13 {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.151 = tmp.150 {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41} for node 1
Copy tmp.153 = tmp.152 {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42} for node 1
Copy tmp.157 = tmp.156 {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41} for node 2
Copy tmp.159 = tmp.158 {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42} for node 2
Copy tmp.160 = tmp.154 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41} for node 3
Copy tmp.165 = tmp.164 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41} for node 3
Copy ptr.19 = tmp.166 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41} for node 3
Copy tmp.168 = tmp.167 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41} for node 3
Copy tmp.170 = 1L {arr.43, four.42, index.25, i.14, tmp.169, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41} for node 3
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.146, flag.41}, Copy i.14 = tmp.146: {arr.43, four.42, index.25, i.14, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.147 = Get Address i.14 : {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Copy small_int_ptr.15 = tmp.147: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.148 = flag.13: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(flag.13, tmp.149): {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.151 = tmp.150: {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.152 = get_elem1_ptr([tmp.150]): {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.153 = tmp.152: {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.154 = tmp.152: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.155): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.156 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}, Copy tmp.157 = tmp.156: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}, tmp.158 = get_elem2_ptr([tmp.156]): {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}, Copy tmp.159 = tmp.158: {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}, Copy tmp.154 = tmp.158: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.160 = tmp.154: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.161 = return_one([]): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, tmp.161, index.22, flag.13, index.31, flag.41}, tmp.162 = Load tmp.147 : {arr.43, four.42, index.25, i.14, tmp.162, arr.18, tmp.154, index.45, tmp.161, index.22, flag.13, index.31, flag.41}, tmp.163 = tmp.161 + tmp.162: {arr.43, four.42, tmp.163, index.25, i.14, arr.18, tmp.154, index.45, index.22, flag.13, index.31, flag.41}, SignExtend tmp.164 = tmp.163: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}, Copy tmp.165 = tmp.164: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}, AddPtr tmp.166 = tmp.154 + tmp.164 * 4: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, Copy ptr.19 = tmp.166: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, tmp.167 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, Copy tmp.168 = tmp.167: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, Copy tmp.169 = 1L: {arr.43, four.42, index.25, i.14, tmp.169, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, Copy tmp.170 = 1L: {arr.43, four.42, index.25, i.14, tmp.169, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, AddPtr tmp.171 = tmp.167 + tmp.169 * 4: {arr.43, four.42, index.25, i.14, tmp.171, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, tmp.172 = tmp.166 == tmp.171: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.172, tmp.166, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.172, tmp.173): {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.174, flag.41}, tmp.175 = tmp.174 == 2: {arr.43, index.25, arr.18, flag.41, tmp.175, index.45, index.22, flag.13, index.31, four.42}, JumpIfZero(tmp.175, tmp.173): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.177): {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.176 = 0: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.176: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {7}
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag.13, arr.18, i.14}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149), tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158, Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176]
NEW LIST [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149), tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158, Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176]
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.146 = -2
tmp.150 = Get Address arr.18 
Label(tmp.149)
Label(tmp.155)
tmp.174 = Load tmp.166 
Copy tmp.176 = 1
Label(tmp.173)
Label(tmp.177)












ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.169 = 1L: set(), AddPtr tmp.171 = tmp.167 + tmp.169 * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.169 = 1L: set(), AddPtr tmp.171 = tmp.167 + tmp.169 * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.169 = 1L: set(), AddPtr tmp.171 = tmp.167 + tmp.169 * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + tmp.169 * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.169 = 1L: set(), AddPtr tmp.171 = tmp.167 + tmp.169 * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
--------------IMAP for block 0-------------------
tmp.146 = -2 set()
Copy i.14 = tmp.146 set()
tmp.147 = Get Address i.14  {Copy i.14 = tmp.146}
JumpIfZero(flag.13, tmp.149) {Copy i.14 = tmp.146}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy i.14 = tmp.146}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.150 = Get Address arr.18  {Copy i.14 = tmp.146}
tmp.152 = get_elem1_ptr([tmp.150]) {Copy i.14 = tmp.146}
Copy tmp.154 = tmp.152 set()
Jump(tmp.155) {Copy tmp.154 = tmp.152}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.154 = tmp.152}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.149) {Copy i.14 = tmp.146}
tmp.156 = Get Address arr.18  {Copy i.14 = tmp.146}
tmp.158 = get_elem2_ptr([tmp.156]) {Copy i.14 = tmp.146}
Copy tmp.154 = tmp.158 set()
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.154 = tmp.158}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.155) set()
tmp.161 = return_one([]) set()
tmp.162 = Load tmp.147  set()
tmp.163 = tmp.161 + tmp.162 set()
SignExtend tmp.164 = tmp.163 set()
AddPtr tmp.166 = tmp.154 + tmp.164 * 4 set()
tmp.167 = Get Address arr.18  set()
Copy tmp.169 = 1L set()
<class 'parser.ConstLong'>
AddPtr tmp.171 = tmp.167 + tmp.169 * 4 {Copy tmp.169 = 1L}
tmp.172 = tmp.166 == tmp.171 {Copy tmp.169 = 1L}
JumpIfZero(tmp.172, tmp.173) {Copy tmp.169 = 1L}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.169 = 1L}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
tmp.174 = Load tmp.166  {Copy tmp.169 = 1L}
tmp.175 = tmp.174 == 2 {Copy tmp.169 = 1L}
JumpIfZero(tmp.175, tmp.173) {Copy tmp.169 = 1L}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.169 = 1L}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Copy tmp.176 = 1 {Copy tmp.169 = 1L}
<class 'parser.ConstInt'>
Jump(tmp.177) {Copy tmp.176 = 1, Copy tmp.169 = 1L}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.176 = 1, Copy tmp.169 = 1L}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(tmp.173) {Copy tmp.169 = 1L}
Copy tmp.176 = 0 {Copy tmp.169 = 1L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.176 = 0, Copy tmp.169 = 1L}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.177) {Copy tmp.169 = 1L}
Return tmp.176 {Copy tmp.169 = 1L}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.154 = tmp.158, Copy tmp.169 = 1L, Copy tmp.176 = 0}
NEW ANNOT: {Copy tmp.169 = 1L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : {Copy i.14 = tmp.146}, JumpIfZero(flag.13, tmp.149): {Copy i.14 = tmp.146}} ReachingCopies: {Copy i.14 = tmp.146}
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : {Copy i.14 = tmp.146}, tmp.152 = get_elem1_ptr([tmp.150]): {Copy i.14 = tmp.146}, Copy tmp.154 = tmp.152: set(), Jump(tmp.155): {Copy tmp.154 = tmp.152}} ReachingCopies: {Copy tmp.154 = tmp.152}
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): {Copy i.14 = tmp.146}, tmp.156 = Get Address arr.18 : {Copy i.14 = tmp.146}, tmp.158 = get_elem2_ptr([tmp.156]): {Copy i.14 = tmp.146}, Copy tmp.154 = tmp.158: set()} ReachingCopies: {Copy tmp.154 = tmp.158}
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , Copy tmp.169 = 1L, AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), Copy tmp.169 = 1L: set(), AddPtr tmp.171 = tmp.167 + tmp.169 * 4: {Copy tmp.169 = 1L}, tmp.172 = tmp.166 == tmp.171: {Copy tmp.169 = 1L}, JumpIfZero(tmp.172, tmp.173): {Copy tmp.169 = 1L}} ReachingCopies: {Copy tmp.169 = 1L}
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : {Copy tmp.169 = 1L}, tmp.175 = tmp.174 == 2: {Copy tmp.169 = 1L}, JumpIfZero(tmp.175, tmp.173): {Copy tmp.169 = 1L}} ReachingCopies: {Copy tmp.169 = 1L}
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: {Copy tmp.169 = 1L}, Jump(tmp.177): {Copy tmp.176 = 1, Copy tmp.169 = 1L}} ReachingCopies: {Copy tmp.176 = 1, Copy tmp.169 = 1L}
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): {Copy tmp.169 = 1L}, Copy tmp.176 = 0: {Copy tmp.169 = 1L}} ReachingCopies: {Copy tmp.176 = 0, Copy tmp.169 = 1L}
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): {Copy tmp.169 = 1L}, Return tmp.176: {Copy tmp.169 = 1L}} ReachingCopies: {Copy tmp.169 = 1L}
EXIT Exit: EXIT {7}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 7-------------------
Return tmp.176 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.177) {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 6-------------------
Copy tmp.176 = 0 {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.173) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
Jump(tmp.177) {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.176 = 1 {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.175, tmp.173) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.175 = tmp.174 == 2 {arr.43, index.25, arr.18, flag.41, tmp.175, index.45, index.22, flag.13, index.31, four.42}
tmp.174 = Load tmp.166  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.174, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
JumpIfZero(tmp.172, tmp.173) {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
tmp.172 = tmp.166 == tmp.171 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.172, tmp.166, index.22, flag.13, index.31, flag.41}
AddPtr tmp.171 = tmp.167 + 1L * 4 {arr.43, four.42, index.25, i.14, tmp.171, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
Copy tmp.169 = 1L {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
tmp.167 = Get Address arr.18  {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
AddPtr tmp.166 = tmp.154 + tmp.164 * 4 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
SignExtend tmp.164 = tmp.163 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}
tmp.163 = tmp.161 + tmp.162 {arr.43, four.42, tmp.163, index.25, i.14, arr.18, tmp.154, index.45, index.22, flag.13, index.31, flag.41}
tmp.162 = Load tmp.147  {arr.43, four.42, index.25, i.14, tmp.162, arr.18, tmp.154, index.45, tmp.161, index.22, flag.13, index.31, flag.41}
tmp.161 = return_one([]) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, tmp.161, index.22, flag.13, index.31, flag.41}
Label(tmp.155) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 2-------------------
Copy tmp.154 = tmp.158 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.158 = get_elem2_ptr([tmp.156]) {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}
<class 'tacGenerator.TAC_VariableValue'>
tmp.156 = Get Address arr.18  {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}
Label(tmp.149) {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Jump(tmp.155) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.154 = tmp.152 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.152 = get_elem1_ptr([tmp.150]) {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}
<class 'tacGenerator.TAC_VariableValue'>
tmp.150 = Get Address arr.18  {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(flag.13, tmp.149) {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.147 = Get Address i.14  {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy i.14 = tmp.146 {arr.43, four.42, index.25, i.14, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.146 = -2 {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.146, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.169 = 1L {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41} for node 3
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.146, flag.41}, Copy i.14 = tmp.146: {arr.43, four.42, index.25, i.14, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.147 = Get Address i.14 : {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(flag.13, tmp.149): {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.152 = get_elem1_ptr([tmp.150]): {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.154 = tmp.152: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.155): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.156 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}, tmp.158 = get_elem2_ptr([tmp.156]): {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}, Copy tmp.154 = tmp.158: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.161 = return_one([]): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, tmp.161, index.22, flag.13, index.31, flag.41}, tmp.162 = Load tmp.147 : {arr.43, four.42, index.25, i.14, tmp.162, arr.18, tmp.154, index.45, tmp.161, index.22, flag.13, index.31, flag.41}, tmp.163 = tmp.161 + tmp.162: {arr.43, four.42, tmp.163, index.25, i.14, arr.18, tmp.154, index.45, index.22, flag.13, index.31, flag.41}, SignExtend tmp.164 = tmp.163: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}, AddPtr tmp.166 = tmp.154 + tmp.164 * 4: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, tmp.167 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, Copy tmp.169 = 1L: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, AddPtr tmp.171 = tmp.167 + 1L * 4: {arr.43, four.42, index.25, i.14, tmp.171, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, tmp.172 = tmp.166 == tmp.171: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.172, tmp.166, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.172, tmp.173): {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.174, flag.41}, tmp.175 = tmp.174 == 2: {arr.43, index.25, arr.18, flag.41, tmp.175, index.45, index.22, flag.13, index.31, four.42}, JumpIfZero(tmp.175, tmp.173): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.177): {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.176 = 0: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.176: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {7}
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag.13, arr.18, i.14}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149), tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158, Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176]
NEW LIST [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149), tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158, Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176]
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.146 = -2
tmp.150 = Get Address arr.18 
Label(tmp.149)
Label(tmp.155)
tmp.174 = Load tmp.166 
Copy tmp.176 = 1
Label(tmp.173)
Label(tmp.177)












ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), AddPtr tmp.171 = tmp.167 + 1L * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), AddPtr tmp.171 = tmp.167 + 1L * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), AddPtr tmp.171 = tmp.167 + 1L * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : set(), JumpIfZero(flag.13, tmp.149): set()} ReachingCopies: set()
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : set(), tmp.152 = get_elem1_ptr([tmp.150]): set(), Copy tmp.154 = tmp.152: set(), Jump(tmp.155): set()} ReachingCopies: set()
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): set(), tmp.156 = Get Address arr.18 : set(), tmp.158 = get_elem2_ptr([tmp.156]): set(), Copy tmp.154 = tmp.158: set()} ReachingCopies: set()
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), AddPtr tmp.171 = tmp.167 + 1L * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): set()} ReachingCopies: set()
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: set()
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
--------------IMAP for block 0-------------------
tmp.146 = -2 set()
Copy i.14 = tmp.146 set()
tmp.147 = Get Address i.14  {Copy i.14 = tmp.146}
JumpIfZero(flag.13, tmp.149) {Copy i.14 = tmp.146}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: {Copy i.14 = tmp.146}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.150 = Get Address arr.18  {Copy i.14 = tmp.146}
tmp.152 = get_elem1_ptr([tmp.150]) {Copy i.14 = tmp.146}
Copy tmp.154 = tmp.152 set()
Jump(tmp.155) {Copy tmp.154 = tmp.152}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: {Copy tmp.154 = tmp.152}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.149) {Copy i.14 = tmp.146}
tmp.156 = Get Address arr.18  {Copy i.14 = tmp.146}
tmp.158 = get_elem2_ptr([tmp.156]) {Copy i.14 = tmp.146}
Copy tmp.154 = tmp.158 set()
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: {Copy tmp.154 = tmp.158}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.155) set()
tmp.161 = return_one([]) set()
tmp.162 = Load tmp.147  set()
tmp.163 = tmp.161 + tmp.162 set()
SignExtend tmp.164 = tmp.163 set()
AddPtr tmp.166 = tmp.154 + tmp.164 * 4 set()
tmp.167 = Get Address arr.18  set()
AddPtr tmp.171 = tmp.167 + 1L * 4 set()
tmp.172 = tmp.166 == tmp.171 set()
JumpIfZero(tmp.172, tmp.173) set()
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
tmp.174 = Load tmp.166  set()
tmp.175 = tmp.174 == 2 set()
JumpIfZero(tmp.175, tmp.173) set()
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Copy tmp.176 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.177) {Copy tmp.176 = 1}
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: {Copy tmp.176 = 1}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(tmp.173) set()
Copy tmp.176 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: {Copy tmp.176 = 0}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.177) set()
Return tmp.176 set()
OLD ANNOT: {Copy i.14 = tmp.146, Copy tmp.154 = tmp.152, Copy tmp.176 = 1, Copy tmp.176 = 0, Copy tmp.154 = tmp.158}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: set(), Copy i.14 = tmp.146: set(), tmp.147 = Get Address i.14 : {Copy i.14 = tmp.146}, JumpIfZero(flag.13, tmp.149): {Copy i.14 = tmp.146}} ReachingCopies: {Copy i.14 = tmp.146}
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : {Copy i.14 = tmp.146}, tmp.152 = get_elem1_ptr([tmp.150]): {Copy i.14 = tmp.146}, Copy tmp.154 = tmp.152: set(), Jump(tmp.155): {Copy tmp.154 = tmp.152}} ReachingCopies: {Copy tmp.154 = tmp.152}
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): {Copy i.14 = tmp.146}, tmp.156 = Get Address arr.18 : {Copy i.14 = tmp.146}, tmp.158 = get_elem2_ptr([tmp.156]): {Copy i.14 = tmp.146}, Copy tmp.154 = tmp.158: set()} ReachingCopies: {Copy tmp.154 = tmp.158}
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): set(), tmp.161 = return_one([]): set(), tmp.162 = Load tmp.147 : set(), tmp.163 = tmp.161 + tmp.162: set(), SignExtend tmp.164 = tmp.163: set(), AddPtr tmp.166 = tmp.154 + tmp.164 * 4: set(), tmp.167 = Get Address arr.18 : set(), AddPtr tmp.171 = tmp.167 + 1L * 4: set(), tmp.172 = tmp.166 == tmp.171: set(), JumpIfZero(tmp.172, tmp.173): set()} ReachingCopies: set()
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : set(), tmp.175 = tmp.174 == 2: set(), JumpIfZero(tmp.175, tmp.173): set()} ReachingCopies: set()
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: set(), Jump(tmp.177): {Copy tmp.176 = 1}} ReachingCopies: {Copy tmp.176 = 1}
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): set(), Copy tmp.176 = 0: set()} ReachingCopies: {Copy tmp.176 = 0}
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): set(), Return tmp.176: set()} ReachingCopies: set()
EXIT Exit: EXIT {7}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 7-------------------
Return tmp.176 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.177) {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 6-------------------
Copy tmp.176 = 0 {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.173) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
Jump(tmp.177) {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.176 = 1 {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.175, tmp.173) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.175 = tmp.174 == 2 {arr.43, index.25, arr.18, flag.41, tmp.175, index.45, index.22, flag.13, index.31, four.42}
tmp.174 = Load tmp.166  {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.174, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
JumpIfZero(tmp.172, tmp.173) {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
tmp.172 = tmp.166 == tmp.171 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.172, tmp.166, index.22, flag.13, index.31, flag.41}
AddPtr tmp.171 = tmp.167 + 1L * 4 {arr.43, four.42, index.25, i.14, tmp.171, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
tmp.167 = Get Address arr.18  {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}
AddPtr tmp.166 = tmp.154 + tmp.164 * 4 {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
SignExtend tmp.164 = tmp.163 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}
tmp.163 = tmp.161 + tmp.162 {arr.43, four.42, tmp.163, index.25, i.14, arr.18, tmp.154, index.45, index.22, flag.13, index.31, flag.41}
tmp.162 = Load tmp.147  {arr.43, four.42, index.25, i.14, tmp.162, arr.18, tmp.154, index.45, tmp.161, index.22, flag.13, index.31, flag.41}
tmp.161 = return_one([]) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, tmp.161, index.22, flag.13, index.31, flag.41}
Label(tmp.155) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 2-------------------
Copy tmp.154 = tmp.158 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.158 = get_elem2_ptr([tmp.156]) {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}
<class 'tacGenerator.TAC_VariableValue'>
tmp.156 = Get Address arr.18  {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}
Label(tmp.149) {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Jump(tmp.155) {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.154 = tmp.152 {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.152 = get_elem1_ptr([tmp.150]) {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}
<class 'tacGenerator.TAC_VariableValue'>
tmp.150 = Get Address arr.18  {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(flag.13, tmp.149) {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
tmp.147 = Get Address i.14  {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
Copy i.14 = tmp.146 {arr.43, four.42, index.25, i.14, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.146 = -2 {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.146, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.146 = -2: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.146, flag.41}, Copy i.14 = tmp.146: {arr.43, four.42, index.25, i.14, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.147 = Get Address i.14 : {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(flag.13, tmp.149): {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155)] Pred: {0} Suc: {3} iMap: {tmp.150 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, tmp.150, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.152 = get_elem1_ptr([tmp.150]): {arr.43, tmp.152, index.25, i.14, arr.18, flag.41, tmp.147, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.154 = tmp.152: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.155): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158] Pred: {0} Suc: {3} iMap: {Label(tmp.149): {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.156 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.31, index.45, index.22, tmp.156, flag.13, flag.41}, tmp.158 = get_elem2_ptr([tmp.156]): {arr.43, index.25, i.14, arr.18, flag.41, tmp.147, index.45, tmp.158, index.22, flag.13, index.31, four.42}, Copy tmp.154 = tmp.158: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: {Label(tmp.155): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}, tmp.161 = return_one([]): {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, tmp.161, index.22, flag.13, index.31, flag.41}, tmp.162 = Load tmp.147 : {arr.43, four.42, index.25, i.14, tmp.162, arr.18, tmp.154, index.45, tmp.161, index.22, flag.13, index.31, flag.41}, tmp.163 = tmp.161 + tmp.162: {arr.43, four.42, tmp.163, index.25, i.14, arr.18, tmp.154, index.45, index.22, flag.13, index.31, flag.41}, SignExtend tmp.164 = tmp.163: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, index.45, tmp.164, index.22, flag.13, index.31, flag.41}, AddPtr tmp.166 = tmp.154 + tmp.164 * 4: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, tmp.167 = Get Address arr.18 : {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.167, tmp.166, index.22, flag.13, index.31, flag.41}, AddPtr tmp.171 = tmp.167 + 1L * 4: {arr.43, four.42, index.25, i.14, tmp.171, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}, tmp.172 = tmp.166 == tmp.171: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.172, tmp.166, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.172, tmp.173): {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, tmp.154, tmp.147, index.45, index.22, flag.13, index.31, flag.41}
4 4: [tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173)] Pred: {3} Suc: {5, 6} iMap: {tmp.174 = Load tmp.166 : {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.174, flag.41}, tmp.175 = tmp.174 == 2: {arr.43, index.25, arr.18, flag.41, tmp.175, index.45, index.22, flag.13, index.31, four.42}, JumpIfZero(tmp.175, tmp.173): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, i.14, arr.18, index.45, tmp.166, index.22, flag.13, index.31, flag.41}
5 5: [Copy tmp.176 = 1, Jump(tmp.177)] Pred: {4} Suc: {7} iMap: {Copy tmp.176 = 1: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.177): {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
6 6: [Label(tmp.173), Copy tmp.176 = 0] Pred: {3, 4} Suc: {7} iMap: {Label(tmp.173): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.176 = 0: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.177), Return tmp.176] Pred: {5, 6} Suc: {EXIT} iMap: {Label(tmp.177): {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.176: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, tmp.176, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {7}
OPTIMIZING FUNCTION Function: return_one ([]) instructions:[Return 1, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Return 1, Return 0]
NEW LIST [Return 1, Return 0]
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Return 1
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Return 1 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return 1 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Return 1]
NEW LIST [Return 1]
<class 'tacGenerator.TAC_returnInstruction'>
Return 1


ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Return 1 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return 1 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Return 1] Pred: {ENTRY} Suc: {EXIT} iMap: {Return 1: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: get_elem1_ptr (['arr.20']) instructions:[Copy tmp.178 = arr.20, SignExtend tmp.179 = 1, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.178 = arr.20, SignExtend tmp.179 = 1, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181, Return 0]
NEW LIST [Copy tmp.178 = arr.20, Copy tmp.179 = 1L, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.178 = arr.20
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.178 = arr.20, Copy tmp.179 = 1L, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.178 = arr.20: set(), Copy tmp.179 = 1L: set(), Copy tmp.180 = tmp.179: set(), AddPtr tmp.181 = tmp.178 + tmp.180 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.178 = arr.20, Copy tmp.179 = 1L, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.178 = arr.20: set(), Copy tmp.179 = 1L: set(), Copy tmp.180 = tmp.179: set(), AddPtr tmp.181 = tmp.178 + tmp.180 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.178 = arr.20, Copy tmp.179 = 1L, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.178 = arr.20: set(), Copy tmp.179 = 1L: set(), Copy tmp.180 = tmp.179: set(), AddPtr tmp.181 = tmp.178 + tmp.180 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.178 = arr.20, Copy tmp.179 = 1L, Copy tmp.180 = tmp.179, AddPtr tmp.181 = tmp.178 + tmp.180 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.178 = arr.20: set(), Copy tmp.179 = 1L: set(), Copy tmp.180 = tmp.179: set(), AddPtr tmp.181 = tmp.178 + tmp.180 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.178 = arr.20 set()
Copy tmp.179 = 1L {Copy tmp.178 = arr.20}
<class 'parser.ConstLong'>
Copy tmp.180 = tmp.179 {Copy tmp.178 = arr.20, Copy tmp.179 = 1L}
AddPtr tmp.181 = tmp.178 + tmp.180 * 4 {Copy tmp.180 = tmp.179, Copy tmp.178 = arr.20, Copy tmp.179 = 1L}
Return tmp.181 {Copy tmp.178 = arr.20, Copy tmp.180 = tmp.179, Copy tmp.179 = 1L}
OLD ANNOT: {Copy tmp.178 = arr.20, Copy tmp.180 = tmp.179, Copy tmp.179 = 1L}
NEW ANNOT: {Copy tmp.178 = arr.20, Copy tmp.180 = tmp.179, Copy tmp.179 = 1L}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.178 = arr.20, Copy tmp.179 = 1L, Copy tmp.180 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.178 = arr.20: set(), Copy tmp.179 = 1L: {Copy tmp.178 = arr.20}, Copy tmp.180 = tmp.179: {Copy tmp.178 = arr.20, Copy tmp.179 = 1L}, AddPtr tmp.181 = tmp.178 + tmp.180 * 4: {Copy tmp.180 = tmp.179, Copy tmp.178 = arr.20, Copy tmp.179 = 1L}, Return tmp.181: {Copy tmp.178 = arr.20, Copy tmp.180 = tmp.179, Copy tmp.179 = 1L}} ReachingCopies: {Copy tmp.178 = arr.20, Copy tmp.180 = tmp.179, Copy tmp.179 = 1L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.181 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.181 = arr.20 + tmp.179 * 4 {four.42, arr.43, index.25, arr.18, tmp.181, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.180 = 1L {arr.43, tmp.179, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
Copy tmp.179 = 1L {arr.43, tmp.179, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
Copy tmp.178 = arr.20 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.178 = arr.20 {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42} for node 0
Copy tmp.180 = 1L {arr.43, tmp.179, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.178 = arr.20: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}, Copy tmp.179 = 1L: {arr.43, tmp.179, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}, Copy tmp.180 = 1L: {arr.43, tmp.179, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}, AddPtr tmp.181 = arr.20 + tmp.179 * 4: {four.42, arr.43, index.25, arr.18, tmp.181, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.181: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181]
NEW LIST [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.179 = 1L


ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.179 = 1L: set(), AddPtr tmp.181 = arr.20 + tmp.179 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.179 = 1L: set(), AddPtr tmp.181 = arr.20 + tmp.179 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.179 = 1L: set(), AddPtr tmp.181 = arr.20 + tmp.179 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + tmp.179 * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.179 = 1L: set(), AddPtr tmp.181 = arr.20 + tmp.179 * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.179 = 1L set()
<class 'parser.ConstLong'>
AddPtr tmp.181 = arr.20 + tmp.179 * 4 {Copy tmp.179 = 1L}
Return tmp.181 {Copy tmp.179 = 1L}
OLD ANNOT: {Copy tmp.179 = 1L}
NEW ANNOT: {Copy tmp.179 = 1L}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.179 = 1L, AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.179 = 1L: set(), AddPtr tmp.181 = arr.20 + tmp.179 * 4: {Copy tmp.179 = 1L}, Return tmp.181: {Copy tmp.179 = 1L}} ReachingCopies: {Copy tmp.179 = 1L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.181 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.181 = arr.20 + 1L * 4 {four.42, arr.43, index.25, arr.18, tmp.181, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.179 = 1L {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.179 = 1L {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.179 = 1L: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}, AddPtr tmp.181 = arr.20 + 1L * 4: {four.42, arr.43, index.25, arr.18, tmp.181, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.181: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181]
NEW LIST [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181]
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_returnInstruction'>
AddPtr tmp.181 = arr.20 + 1L * 4


ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.181 = arr.20 + 1L * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.181 = arr.20 + 1L * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.181 = arr.20 + 1L * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.181 = arr.20 + 1L * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
AddPtr tmp.181 = arr.20 + 1L * 4 set()
Return tmp.181 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.181 = arr.20 + 1L * 4: set(), Return tmp.181: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.181 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.181 = arr.20 + 1L * 4 {four.42, arr.43, index.25, arr.18, tmp.181, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.181 = arr.20 + 1L * 4: {four.42, arr.43, index.25, arr.18, tmp.181, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.181: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, arr.20, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: get_elem2_ptr (['arr.21']) instructions:[Copy tmp.182 = arr.21, SignExtend tmp.183 = 2, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.182 = arr.21, SignExtend tmp.183 = 2, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185, Return 0]
NEW LIST [Copy tmp.182 = arr.21, Copy tmp.183 = 2L, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.182 = arr.21
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.182 = arr.21, Copy tmp.183 = 2L, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.182 = arr.21: set(), Copy tmp.183 = 2L: set(), Copy tmp.184 = tmp.183: set(), AddPtr tmp.185 = tmp.182 + tmp.184 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.182 = arr.21, Copy tmp.183 = 2L, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.182 = arr.21: set(), Copy tmp.183 = 2L: set(), Copy tmp.184 = tmp.183: set(), AddPtr tmp.185 = tmp.182 + tmp.184 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.182 = arr.21, Copy tmp.183 = 2L, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.182 = arr.21: set(), Copy tmp.183 = 2L: set(), Copy tmp.184 = tmp.183: set(), AddPtr tmp.185 = tmp.182 + tmp.184 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.182 = arr.21, Copy tmp.183 = 2L, Copy tmp.184 = tmp.183, AddPtr tmp.185 = tmp.182 + tmp.184 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.182 = arr.21: set(), Copy tmp.183 = 2L: set(), Copy tmp.184 = tmp.183: set(), AddPtr tmp.185 = tmp.182 + tmp.184 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.182 = arr.21 set()
Copy tmp.183 = 2L {Copy tmp.182 = arr.21}
<class 'parser.ConstLong'>
Copy tmp.184 = tmp.183 {Copy tmp.183 = 2L, Copy tmp.182 = arr.21}
AddPtr tmp.185 = tmp.182 + tmp.184 * 4 {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}
Return tmp.185 {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}
OLD ANNOT: {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}
NEW ANNOT: {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.182 = arr.21, Copy tmp.183 = 2L, Copy tmp.184 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.182 = arr.21: set(), Copy tmp.183 = 2L: {Copy tmp.182 = arr.21}, Copy tmp.184 = tmp.183: {Copy tmp.183 = 2L, Copy tmp.182 = arr.21}, AddPtr tmp.185 = tmp.182 + tmp.184 * 4: {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}, Return tmp.185: {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}} ReachingCopies: {Copy tmp.184 = tmp.183, Copy tmp.183 = 2L, Copy tmp.182 = arr.21}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.185 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.185 = arr.21 + tmp.183 * 4 {four.42, arr.43, index.25, arr.18, index.45, tmp.185, index.22, flag.13, index.31, flag.41}
Copy tmp.184 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.183, arr.21, index.22, flag.13, index.31, four.42}
Copy tmp.183 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.183, arr.21, index.22, flag.13, index.31, four.42}
Copy tmp.182 = arr.21 {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.182 = arr.21 {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.184 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.183, arr.21, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.182 = arr.21: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}, Copy tmp.183 = 2L: {arr.43, index.25, arr.18, flag.41, index.45, tmp.183, arr.21, index.22, flag.13, index.31, four.42}, Copy tmp.184 = 2L: {arr.43, index.25, arr.18, flag.41, index.45, tmp.183, arr.21, index.22, flag.13, index.31, four.42}, AddPtr tmp.185 = arr.21 + tmp.183 * 4: {four.42, arr.43, index.25, arr.18, index.45, tmp.185, index.22, flag.13, index.31, flag.41}, Return tmp.185: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185]
NEW LIST [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.183 = 2L


ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.183 = 2L: set(), AddPtr tmp.185 = arr.21 + tmp.183 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.183 = 2L: set(), AddPtr tmp.185 = arr.21 + tmp.183 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.183 = 2L: set(), AddPtr tmp.185 = arr.21 + tmp.183 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + tmp.183 * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.183 = 2L: set(), AddPtr tmp.185 = arr.21 + tmp.183 * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.183 = 2L set()
<class 'parser.ConstLong'>
AddPtr tmp.185 = arr.21 + tmp.183 * 4 {Copy tmp.183 = 2L}
Return tmp.185 {Copy tmp.183 = 2L}
OLD ANNOT: {Copy tmp.183 = 2L}
NEW ANNOT: {Copy tmp.183 = 2L}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.183 = 2L, AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.183 = 2L: set(), AddPtr tmp.185 = arr.21 + tmp.183 * 4: {Copy tmp.183 = 2L}, Return tmp.185: {Copy tmp.183 = 2L}} ReachingCopies: {Copy tmp.183 = 2L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.185 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.185 = arr.21 + 2L * 4 {four.42, arr.43, index.25, arr.18, index.45, tmp.185, index.22, flag.13, index.31, flag.41}
Copy tmp.183 = 2L {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.183 = 2L {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.183 = 2L: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}, AddPtr tmp.185 = arr.21 + 2L * 4: {four.42, arr.43, index.25, arr.18, index.45, tmp.185, index.22, flag.13, index.31, flag.41}, Return tmp.185: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185]
NEW LIST [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185]
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_returnInstruction'>
AddPtr tmp.185 = arr.21 + 2L * 4


ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.185 = arr.21 + 2L * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.185 = arr.21 + 2L * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.185 = arr.21 + 2L * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.185 = arr.21 + 2L * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
AddPtr tmp.185 = arr.21 + 2L * 4 set()
Return tmp.185 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.185 = arr.21 + 2L * 4: set(), Return tmp.185: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.185 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.185 = arr.21 + 2L * 4 {four.42, arr.43, index.25, arr.18, index.45, tmp.185, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185] Pred: {ENTRY} Suc: {EXIT} iMap: {AddPtr tmp.185 = arr.21 + 2L * 4: {four.42, arr.43, index.25, arr.18, index.45, tmp.185, index.22, flag.13, index.31, flag.41}, Return tmp.185: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, arr.21, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_add_multi_dimensional ([]) instructions:[CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, CopyToOffset(row_pointer.24 + 0) = tmp.190 , tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.23, index.22}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, CopyToOffset(row_pointer.24 + 0) = tmp.190 , tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192, Return 0]
NEW LIST [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, Copy row_pointer.24 = tmp.190, tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192, Return 0]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.23 + 0) = 1 
Return 0



ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, Copy row_pointer.24 = tmp.190, tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), Copy tmp.187 = tmp.186: set(), SignExtend tmp.188 = index.22: set(), Copy tmp.189 = tmp.188: set(), AddPtr tmp.190 = tmp.187 + tmp.189 * 12: set(), Copy row_pointer.24 = tmp.190: set(), tmp.191 = Load row_pointer.24 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, Copy row_pointer.24 = tmp.190, tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), Copy tmp.187 = tmp.186: set(), SignExtend tmp.188 = index.22: set(), Copy tmp.189 = tmp.188: set(), AddPtr tmp.190 = tmp.187 + tmp.189 * 12: set(), Copy row_pointer.24 = tmp.190: set(), tmp.191 = Load row_pointer.24 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, Copy row_pointer.24 = tmp.190, tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), Copy tmp.187 = tmp.186: set(), SignExtend tmp.188 = index.22: set(), Copy tmp.189 = tmp.188: set(), AddPtr tmp.190 = tmp.187 + tmp.189 * 12: set(), Copy row_pointer.24 = tmp.190: set(), tmp.191 = Load row_pointer.24 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.187 + tmp.189 * 12, Copy row_pointer.24 = tmp.190, tmp.191 = Load row_pointer.24 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), Copy tmp.187 = tmp.186: set(), SignExtend tmp.188 = index.22: set(), Copy tmp.189 = tmp.188: set(), AddPtr tmp.190 = tmp.187 + tmp.189 * 12: set(), Copy row_pointer.24 = tmp.190: set(), tmp.191 = Load row_pointer.24 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.23 + 0) = 1  set()
CopyToOffset(nested_arr.23 + 4) = 2  set()
CopyToOffset(nested_arr.23 + 8) = 3  set()
CopyToOffset(nested_arr.23 + 12) = 4  set()
CopyToOffset(nested_arr.23 + 16) = 5  set()
CopyToOffset(nested_arr.23 + 20) = 6  set()
CopyToOffset(nested_arr.23 + 24) = 7  set()
CopyToOffset(nested_arr.23 + 28) = 8  set()
CopyToOffset(nested_arr.23 + 32) = 9  set()
tmp.186 = Get Address nested_arr.23  set()
Copy tmp.187 = tmp.186 set()
SignExtend tmp.188 = index.22 {Copy tmp.187 = tmp.186}
Copy tmp.189 = tmp.188 {Copy tmp.187 = tmp.186}
AddPtr tmp.190 = tmp.187 + tmp.189 * 12 {Copy tmp.187 = tmp.186, Copy tmp.189 = tmp.188}
Copy row_pointer.24 = tmp.190 {Copy tmp.187 = tmp.186, Copy tmp.189 = tmp.188}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.191 = Load row_pointer.24  {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}
tmp.192 = tmp.191 == 7 {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}
Return tmp.192 {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}
OLD ANNOT: {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}
NEW ANNOT: {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , Copy tmp.187 = tmp.186, SignExtend tmp.188 = index.22, Copy tmp.189 = tmp.188, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, Copy row_pointer.24 = tmp.190, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), Copy tmp.187 = tmp.186: set(), SignExtend tmp.188 = index.22: {Copy tmp.187 = tmp.186}, Copy tmp.189 = tmp.188: {Copy tmp.187 = tmp.186}, AddPtr tmp.190 = tmp.187 + tmp.189 * 12: {Copy tmp.187 = tmp.186, Copy tmp.189 = tmp.188}, Copy row_pointer.24 = tmp.190: {Copy tmp.187 = tmp.186, Copy tmp.189 = tmp.188}, tmp.191 = Load row_pointer.24 : {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}, tmp.192 = tmp.191 == 7: {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}, Return tmp.192: {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}} ReachingCopies: {Copy tmp.187 = tmp.186, Copy row_pointer.24 = tmp.190, Copy tmp.189 = tmp.188}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.192 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.192 = tmp.191 == 7 {four.42, arr.43, index.25, tmp.192, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.191 = Load tmp.190  {arr.43, index.25, arr.18, flag.41, index.45, tmp.191, index.22, flag.13, index.31, four.42}
Copy row_pointer.24 = tmp.190 {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.190 = tmp.186 + tmp.188 * 12 {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.189 = tmp.188 {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42}
SignExtend tmp.188 = index.22 {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42}
Copy tmp.187 = tmp.186 {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42}
tmp.186 = Get Address nested_arr.23  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 32) = 9  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 28) = 8  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 24) = 7  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 20) = 6  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 16) = 5  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 12) = 4  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 8) = 3  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 4) = 2  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 0) = 1  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.187 = tmp.186 {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.189 = tmp.188 {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42} for node 0
Copy row_pointer.24 = tmp.190 {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 4) = 2 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 8) = 3 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 12) = 4 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 16) = 5 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 20) = 6 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 24) = 7 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 28) = 8 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 32) = 9 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.186 = Get Address nested_arr.23 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42}, Copy tmp.187 = tmp.186: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42}, SignExtend tmp.188 = index.22: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42}, Copy tmp.189 = tmp.188: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42}, AddPtr tmp.190 = tmp.186 + tmp.188 * 12: {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy row_pointer.24 = tmp.190: {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.191 = Load tmp.190 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.191, index.22, flag.13, index.31, four.42}, tmp.192 = tmp.191 == 7: {four.42, arr.43, index.25, tmp.192, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.192: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.23, index.22}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192]
NEW LIST [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.23 + 0) = 1 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), SignExtend tmp.188 = index.22: set(), AddPtr tmp.190 = tmp.186 + tmp.188 * 12: set(), tmp.191 = Load tmp.190 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), SignExtend tmp.188 = index.22: set(), AddPtr tmp.190 = tmp.186 + tmp.188 * 12: set(), tmp.191 = Load tmp.190 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), SignExtend tmp.188 = index.22: set(), AddPtr tmp.190 = tmp.186 + tmp.188 * 12: set(), tmp.191 = Load tmp.190 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), SignExtend tmp.188 = index.22: set(), AddPtr tmp.190 = tmp.186 + tmp.188 * 12: set(), tmp.191 = Load tmp.190 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.23 + 0) = 1  set()
CopyToOffset(nested_arr.23 + 4) = 2  set()
CopyToOffset(nested_arr.23 + 8) = 3  set()
CopyToOffset(nested_arr.23 + 12) = 4  set()
CopyToOffset(nested_arr.23 + 16) = 5  set()
CopyToOffset(nested_arr.23 + 20) = 6  set()
CopyToOffset(nested_arr.23 + 24) = 7  set()
CopyToOffset(nested_arr.23 + 28) = 8  set()
CopyToOffset(nested_arr.23 + 32) = 9  set()
tmp.186 = Get Address nested_arr.23  set()
SignExtend tmp.188 = index.22 set()
AddPtr tmp.190 = tmp.186 + tmp.188 * 12 set()
tmp.191 = Load tmp.190  set()
tmp.192 = tmp.191 == 7 set()
Return tmp.192 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : set(), CopyToOffset(nested_arr.23 + 4) = 2 : set(), CopyToOffset(nested_arr.23 + 8) = 3 : set(), CopyToOffset(nested_arr.23 + 12) = 4 : set(), CopyToOffset(nested_arr.23 + 16) = 5 : set(), CopyToOffset(nested_arr.23 + 20) = 6 : set(), CopyToOffset(nested_arr.23 + 24) = 7 : set(), CopyToOffset(nested_arr.23 + 28) = 8 : set(), CopyToOffset(nested_arr.23 + 32) = 9 : set(), tmp.186 = Get Address nested_arr.23 : set(), SignExtend tmp.188 = index.22: set(), AddPtr tmp.190 = tmp.186 + tmp.188 * 12: set(), tmp.191 = Load tmp.190 : set(), tmp.192 = tmp.191 == 7: set(), Return tmp.192: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.192 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.192 = tmp.191 == 7 {four.42, arr.43, index.25, tmp.192, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.191 = Load tmp.190  {arr.43, index.25, arr.18, flag.41, index.45, tmp.191, index.22, flag.13, index.31, four.42}
AddPtr tmp.190 = tmp.186 + tmp.188 * 12 {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
SignExtend tmp.188 = index.22 {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42}
tmp.186 = Get Address nested_arr.23  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 32) = 9  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 28) = 8  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 24) = 7  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 20) = 6  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 16) = 5  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 12) = 4  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 8) = 3  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 4) = 2  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.23 + 0) = 1  {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.23 + 0) = 1 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 4) = 2 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 8) = 3 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 12) = 4 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 16) = 5 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 20) = 6 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 24) = 7 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 28) = 8 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.23 + 32) = 9 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.186 = Get Address nested_arr.23 : {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.186, index.22, flag.13, index.31, four.42}, SignExtend tmp.188 = index.22: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, tmp.188, tmp.186, index.22, flag.13, index.31, four.42}, AddPtr tmp.190 = tmp.186 + tmp.188 * 12: {arr.43, nested_arr.23, tmp.190, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.191 = Load tmp.190 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.191, index.22, flag.13, index.31, four.42}, tmp.192 = tmp.191 == 7: {four.42, arr.43, index.25, tmp.192, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.192: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, nested_arr.23, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_add_to_subarray_pointer ([]) instructions:[CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, SignExtend tmp.195 = 1, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, CopyToOffset(row1.27 + 0) = tmp.197 , Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, CopyToOffset(elem_ptr.28 + 0) = tmp.201 , tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.26, index.25}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, SignExtend tmp.195 = 1, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, CopyToOffset(row1.27 + 0) = tmp.197 , Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, CopyToOffset(elem_ptr.28 + 0) = tmp.201 , tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203, Return 0]
NEW LIST [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, Copy row1.27 = tmp.197, Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, Copy elem_ptr.28 = tmp.201, tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203, Return 0]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.26 + 0) = 1 
Return 0



ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, Copy row1.27 = tmp.197, Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, Copy elem_ptr.28 = tmp.201, tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.194 = tmp.193: set(), Copy tmp.195 = 1L: set(), Copy tmp.196 = tmp.195: set(), AddPtr tmp.197 = tmp.194 + tmp.196 * 12: set(), Copy row1.27 = tmp.197: set(), Copy tmp.198 = row1.27: set(), SignExtend tmp.199 = index.25: set(), Copy tmp.200 = tmp.199: set(), AddPtr tmp.201 = tmp.198 + tmp.200 * 4: set(), Copy elem_ptr.28 = tmp.201: set(), tmp.202 = Load elem_ptr.28 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, Copy row1.27 = tmp.197, Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, Copy elem_ptr.28 = tmp.201, tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.194 = tmp.193: set(), Copy tmp.195 = 1L: set(), Copy tmp.196 = tmp.195: set(), AddPtr tmp.197 = tmp.194 + tmp.196 * 12: set(), Copy row1.27 = tmp.197: set(), Copy tmp.198 = row1.27: set(), SignExtend tmp.199 = index.25: set(), Copy tmp.200 = tmp.199: set(), AddPtr tmp.201 = tmp.198 + tmp.200 * 4: set(), Copy elem_ptr.28 = tmp.201: set(), tmp.202 = Load elem_ptr.28 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, Copy row1.27 = tmp.197, Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, Copy elem_ptr.28 = tmp.201, tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.194 = tmp.193: set(), Copy tmp.195 = 1L: set(), Copy tmp.196 = tmp.195: set(), AddPtr tmp.197 = tmp.194 + tmp.196 * 12: set(), Copy row1.27 = tmp.197: set(), Copy tmp.198 = row1.27: set(), SignExtend tmp.199 = index.25: set(), Copy tmp.200 = tmp.199: set(), AddPtr tmp.201 = tmp.198 + tmp.200 * 4: set(), Copy elem_ptr.28 = tmp.201: set(), tmp.202 = Load elem_ptr.28 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, AddPtr tmp.197 = tmp.194 + tmp.196 * 12, Copy row1.27 = tmp.197, Copy tmp.198 = row1.27, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = tmp.198 + tmp.200 * 4, Copy elem_ptr.28 = tmp.201, tmp.202 = Load elem_ptr.28 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.194 = tmp.193: set(), Copy tmp.195 = 1L: set(), Copy tmp.196 = tmp.195: set(), AddPtr tmp.197 = tmp.194 + tmp.196 * 12: set(), Copy row1.27 = tmp.197: set(), Copy tmp.198 = row1.27: set(), SignExtend tmp.199 = index.25: set(), Copy tmp.200 = tmp.199: set(), AddPtr tmp.201 = tmp.198 + tmp.200 * 4: set(), Copy elem_ptr.28 = tmp.201: set(), tmp.202 = Load elem_ptr.28 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.26 + 0) = 1  set()
CopyToOffset(nested_arr.26 + 4) = 2  set()
CopyToOffset(nested_arr.26 + 8) = 3  set()
CopyToOffset(nested_arr.26 + 12) = 4  set()
CopyToOffset(nested_arr.26 + 16) = 5  set()
CopyToOffset(nested_arr.26 + 20) = 6  set()
CopyToOffset(nested_arr.26 + 24) = 7  set()
CopyToOffset(nested_arr.26 + 28) = 8  set()
CopyToOffset(nested_arr.26 + 32) = 9  set()
tmp.193 = Get Address nested_arr.26  set()
Copy tmp.194 = tmp.193 set()
Copy tmp.195 = 1L {Copy tmp.194 = tmp.193}
<class 'parser.ConstLong'>
Copy tmp.196 = tmp.195 {Copy tmp.194 = tmp.193, Copy tmp.195 = 1L}
AddPtr tmp.197 = tmp.194 + tmp.196 * 12 {Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195}
Copy row1.27 = tmp.197 {Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.198 = row1.27 {Copy tmp.194 = tmp.193, Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195}
SignExtend tmp.199 = index.25 {Copy row1.27 = tmp.197, Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, Copy tmp.198 = row1.27}
Copy tmp.200 = tmp.199 {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.198 = row1.27}
AddPtr tmp.201 = tmp.198 + tmp.200 * 4 {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy tmp.198 = row1.27}
Copy elem_ptr.28 = tmp.201 {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy tmp.198 = row1.27}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.202 = Load elem_ptr.28  {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27}
tmp.203 = tmp.202 == 6 {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy tmp.198 = row1.27, Copy elem_ptr.28 = tmp.201}
Return tmp.203 {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27}
OLD ANNOT: {Copy row1.27 = tmp.197, Copy tmp.196 = tmp.195, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27, Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.200 = tmp.199}
NEW ANNOT: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, Copy tmp.198 = tmp.197, SignExtend tmp.199 = index.25, Copy tmp.200 = tmp.199, AddPtr tmp.201 = row1.27 + tmp.199 * 4, Copy elem_ptr.28 = tmp.201, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.194 = tmp.193: set(), Copy tmp.195 = 1L: {Copy tmp.194 = tmp.193}, Copy tmp.196 = tmp.195: {Copy tmp.194 = tmp.193, Copy tmp.195 = 1L}, AddPtr tmp.197 = tmp.194 + tmp.196 * 12: {Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195}, Copy row1.27 = tmp.197: {Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195}, Copy tmp.198 = row1.27: {Copy tmp.194 = tmp.193, Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195}, SignExtend tmp.199 = index.25: {Copy row1.27 = tmp.197, Copy tmp.194 = tmp.193, Copy tmp.195 = 1L, Copy tmp.196 = tmp.195, Copy tmp.198 = row1.27}, Copy tmp.200 = tmp.199: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.198 = row1.27}, AddPtr tmp.201 = tmp.198 + tmp.200 * 4: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy tmp.198 = row1.27}, Copy elem_ptr.28 = tmp.201: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy tmp.198 = row1.27}, tmp.202 = Load elem_ptr.28 : {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27}, tmp.203 = tmp.202 == 6: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy tmp.198 = row1.27, Copy elem_ptr.28 = tmp.201}, Return tmp.203: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27}} ReachingCopies: {Copy row1.27 = tmp.197, Copy tmp.195 = 1L, Copy tmp.194 = tmp.193, Copy tmp.196 = tmp.195, Copy tmp.200 = tmp.199, Copy elem_ptr.28 = tmp.201, Copy tmp.198 = row1.27}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.203 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.203 = tmp.202 == 6 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.203, flag.41}
tmp.202 = Load tmp.201  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.202, four.42}
Copy elem_ptr.28 = tmp.201 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}
AddPtr tmp.201 = row1.27 + tmp.199 * 4 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}
Copy tmp.200 = tmp.199 {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, tmp.199, index.22, flag.13, index.31, four.42}
SignExtend tmp.199 = index.25 {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, tmp.199, index.22, flag.13, index.31, four.42}
Copy tmp.198 = tmp.197 {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, index.22, flag.13, index.31, four.42}
Copy row1.27 = tmp.197 {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, tmp.197, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.197 = tmp.193 + tmp.195 * 12 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.196 = 1L {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.195, tmp.193, four.42}
Copy tmp.195 = 1L {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.195, tmp.193, four.42}
Copy tmp.194 = tmp.193 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}
tmp.193 = Get Address nested_arr.26  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}
CopyToOffset(nested_arr.26 + 32) = 9  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 28) = 8  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 24) = 7  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 20) = 6  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 16) = 5  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 12) = 4  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 8) = 3  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 4) = 2  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 0) = 1  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.194 = tmp.193 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42} for node 0
Copy tmp.196 = 1L {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.195, tmp.193, four.42} for node 0
Copy tmp.198 = tmp.197 {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.200 = tmp.199 {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, tmp.199, index.22, flag.13, index.31, four.42} for node 0
Copy elem_ptr.28 = tmp.201 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 4) = 2 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 8) = 3 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 12) = 4 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 16) = 5 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 20) = 6 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 24) = 7 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 28) = 8 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 32) = 9 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.193 = Get Address nested_arr.26 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}, Copy tmp.194 = tmp.193: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}, Copy tmp.195 = 1L: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.195, tmp.193, four.42}, Copy tmp.196 = 1L: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.195, tmp.193, four.42}, AddPtr tmp.197 = tmp.193 + tmp.195 * 12: {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}, Copy row1.27 = tmp.197: {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, tmp.197, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.198 = tmp.197: {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.199 = index.25: {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, tmp.199, index.22, flag.13, index.31, four.42}, Copy tmp.200 = tmp.199: {nested_arr.26, arr.43, index.25, arr.18, flag.41, row1.27, index.45, tmp.199, index.22, flag.13, index.31, four.42}, AddPtr tmp.201 = row1.27 + tmp.199 * 4: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}, Copy elem_ptr.28 = tmp.201: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}, tmp.202 = Load tmp.201 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.202, four.42}, tmp.203 = tmp.202 == 6: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.203, flag.41}, Return tmp.203: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.26, index.25}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203]
NEW LIST [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.26 + 0) = 1 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.195 = 1L: set(), AddPtr tmp.197 = tmp.193 + tmp.195 * 12: set(), Copy row1.27 = tmp.197: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = row1.27 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.195 = 1L: set(), AddPtr tmp.197 = tmp.193 + tmp.195 * 12: set(), Copy row1.27 = tmp.197: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = row1.27 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.195 = 1L: set(), AddPtr tmp.197 = tmp.193 + tmp.195 * 12: set(), Copy row1.27 = tmp.197: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = row1.27 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + tmp.195 * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = row1.27 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.195 = 1L: set(), AddPtr tmp.197 = tmp.193 + tmp.195 * 12: set(), Copy row1.27 = tmp.197: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = row1.27 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.26 + 0) = 1  set()
CopyToOffset(nested_arr.26 + 4) = 2  set()
CopyToOffset(nested_arr.26 + 8) = 3  set()
CopyToOffset(nested_arr.26 + 12) = 4  set()
CopyToOffset(nested_arr.26 + 16) = 5  set()
CopyToOffset(nested_arr.26 + 20) = 6  set()
CopyToOffset(nested_arr.26 + 24) = 7  set()
CopyToOffset(nested_arr.26 + 28) = 8  set()
CopyToOffset(nested_arr.26 + 32) = 9  set()
tmp.193 = Get Address nested_arr.26  set()
Copy tmp.195 = 1L set()
<class 'parser.ConstLong'>
AddPtr tmp.197 = tmp.193 + tmp.195 * 12 {Copy tmp.195 = 1L}
Copy row1.27 = tmp.197 {Copy tmp.195 = 1L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
SignExtend tmp.199 = index.25 {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
AddPtr tmp.201 = row1.27 + tmp.199 * 4 {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
tmp.202 = Load tmp.201  {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
tmp.203 = tmp.202 == 6 {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
Return tmp.203 {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
OLD ANNOT: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
NEW ANNOT: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , Copy tmp.195 = 1L, AddPtr tmp.197 = tmp.193 + 1L * 12, Copy row1.27 = tmp.197, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), Copy tmp.195 = 1L: set(), AddPtr tmp.197 = tmp.193 + tmp.195 * 12: {Copy tmp.195 = 1L}, Copy row1.27 = tmp.197: {Copy tmp.195 = 1L}, SignExtend tmp.199 = index.25: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}, AddPtr tmp.201 = row1.27 + tmp.199 * 4: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}, tmp.202 = Load tmp.201 : {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}, tmp.203 = tmp.202 == 6: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}, Return tmp.203: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}} ReachingCopies: {Copy tmp.195 = 1L, Copy row1.27 = tmp.197}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.203 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.203 = tmp.202 == 6 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.203, flag.41}
tmp.202 = Load tmp.201  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.202, four.42}
AddPtr tmp.201 = tmp.197 + tmp.199 * 4 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}
SignExtend tmp.199 = index.25 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, tmp.199, index.22, flag.13, index.31, four.42}
Copy row1.27 = tmp.197 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.197 = tmp.193 + 1L * 12 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.195 = 1L {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}
tmp.193 = Get Address nested_arr.26  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}
CopyToOffset(nested_arr.26 + 32) = 9  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 28) = 8  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 24) = 7  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 20) = 6  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 16) = 5  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 12) = 4  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 8) = 3  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 4) = 2  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 0) = 1  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.195 = 1L {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42} for node 0
Copy row1.27 = tmp.197 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 4) = 2 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 8) = 3 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 12) = 4 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 16) = 5 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 20) = 6 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 24) = 7 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 28) = 8 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 32) = 9 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.193 = Get Address nested_arr.26 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}, Copy tmp.195 = 1L: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}, AddPtr tmp.197 = tmp.193 + 1L * 12: {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}, Copy row1.27 = tmp.197: {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.199 = index.25: {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, tmp.199, index.22, flag.13, index.31, four.42}, AddPtr tmp.201 = tmp.197 + tmp.199 * 4: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}, tmp.202 = Load tmp.201 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.202, four.42}, tmp.203 = tmp.202 == 6: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.203, flag.41}, Return tmp.203: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.26, index.25}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203]
NEW LIST [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.26 + 0) = 1 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), AddPtr tmp.197 = tmp.193 + 1L * 12: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = tmp.197 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), AddPtr tmp.197 = tmp.193 + 1L * 12: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = tmp.197 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), AddPtr tmp.197 = tmp.193 + 1L * 12: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = tmp.197 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), AddPtr tmp.197 = tmp.193 + 1L * 12: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = tmp.197 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.26 + 0) = 1  set()
CopyToOffset(nested_arr.26 + 4) = 2  set()
CopyToOffset(nested_arr.26 + 8) = 3  set()
CopyToOffset(nested_arr.26 + 12) = 4  set()
CopyToOffset(nested_arr.26 + 16) = 5  set()
CopyToOffset(nested_arr.26 + 20) = 6  set()
CopyToOffset(nested_arr.26 + 24) = 7  set()
CopyToOffset(nested_arr.26 + 28) = 8  set()
CopyToOffset(nested_arr.26 + 32) = 9  set()
tmp.193 = Get Address nested_arr.26  set()
AddPtr tmp.197 = tmp.193 + 1L * 12 set()
SignExtend tmp.199 = index.25 set()
AddPtr tmp.201 = tmp.197 + tmp.199 * 4 set()
tmp.202 = Load tmp.201  set()
tmp.203 = tmp.202 == 6 set()
Return tmp.203 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : set(), CopyToOffset(nested_arr.26 + 4) = 2 : set(), CopyToOffset(nested_arr.26 + 8) = 3 : set(), CopyToOffset(nested_arr.26 + 12) = 4 : set(), CopyToOffset(nested_arr.26 + 16) = 5 : set(), CopyToOffset(nested_arr.26 + 20) = 6 : set(), CopyToOffset(nested_arr.26 + 24) = 7 : set(), CopyToOffset(nested_arr.26 + 28) = 8 : set(), CopyToOffset(nested_arr.26 + 32) = 9 : set(), tmp.193 = Get Address nested_arr.26 : set(), AddPtr tmp.197 = tmp.193 + 1L * 12: set(), SignExtend tmp.199 = index.25: set(), AddPtr tmp.201 = tmp.197 + tmp.199 * 4: set(), tmp.202 = Load tmp.201 : set(), tmp.203 = tmp.202 == 6: set(), Return tmp.203: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.203 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.203 = tmp.202 == 6 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.203, flag.41}
tmp.202 = Load tmp.201  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.202, four.42}
AddPtr tmp.201 = tmp.197 + tmp.199 * 4 {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}
SignExtend tmp.199 = index.25 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, tmp.199, index.22, flag.13, index.31, four.42}
AddPtr tmp.197 = tmp.193 + 1L * 12 {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}
tmp.193 = Get Address nested_arr.26  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}
CopyToOffset(nested_arr.26 + 32) = 9  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 28) = 8  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 24) = 7  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 20) = 6  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 16) = 5  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 12) = 4  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 8) = 3  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 4) = 2  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(nested_arr.26 + 0) = 1  {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.26 + 0) = 1 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 4) = 2 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 8) = 3 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 12) = 4 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 16) = 5 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 20) = 6 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 24) = 7 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 28) = 8 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(nested_arr.26 + 32) = 9 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.193 = Get Address nested_arr.26 : {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.193, four.42}, AddPtr tmp.197 = tmp.193 + 1L * 12: {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.199 = index.25: {nested_arr.26, arr.43, index.25, arr.18, flag.41, tmp.197, index.45, tmp.199, index.22, flag.13, index.31, four.42}, AddPtr tmp.201 = tmp.197 + tmp.199 * 4: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, tmp.201, index.22, flag.13, index.31, four.42}, tmp.202 = Load tmp.201 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.202, four.42}, tmp.203 = tmp.202 == 6: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.203, flag.41}, Return tmp.203: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {nested_arr.26, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_subtract_from_pointer ([]) instructions:[SignExtend tmp.204 = 10, CopyToOffset(long_arr.29 + 0) = tmp.204 , SignExtend tmp.205 = 9, CopyToOffset(long_arr.29 + 8) = tmp.205 , SignExtend tmp.206 = 8, CopyToOffset(long_arr.29 + 16) = tmp.206 , SignExtend tmp.207 = 7, CopyToOffset(long_arr.29 + 24) = tmp.207 , SignExtend tmp.208 = 6, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, SignExtend tmp.211 = 5, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, CopyToOffset(one_past_the_end.30 + 0) = tmp.213 , Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, CopyToOffset(subtraction_result.32 + 0) = tmp.218 , tmp.219 = Load subtraction_result.32 , SignExtend tmp.220 = 8, tmp.221 = tmp.219 == tmp.220, Return tmp.221, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.31, long_arr.29}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [SignExtend tmp.204 = 10, CopyToOffset(long_arr.29 + 0) = tmp.204 , SignExtend tmp.205 = 9, CopyToOffset(long_arr.29 + 8) = tmp.205 , SignExtend tmp.206 = 8, CopyToOffset(long_arr.29 + 16) = tmp.206 , SignExtend tmp.207 = 7, CopyToOffset(long_arr.29 + 24) = tmp.207 , SignExtend tmp.208 = 6, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, SignExtend tmp.211 = 5, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, CopyToOffset(one_past_the_end.30 + 0) = tmp.213 , Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, CopyToOffset(subtraction_result.32 + 0) = tmp.218 , tmp.219 = Load subtraction_result.32 , SignExtend tmp.220 = 8, tmp.221 = tmp.219 == tmp.220, Return tmp.221, Return 0]
NEW LIST [Copy tmp.204 = 10L, CopyToOffset(long_arr.29 + 0) = tmp.204 , Copy tmp.205 = 9L, CopyToOffset(long_arr.29 + 8) = tmp.205 , Copy tmp.206 = 8L, CopyToOffset(long_arr.29 + 16) = tmp.206 , Copy tmp.207 = 7L, CopyToOffset(long_arr.29 + 24) = tmp.207 , Copy tmp.208 = 6L, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, Copy tmp.211 = 5L, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, Copy subtraction_result.32 = tmp.218, tmp.219 = Load subtraction_result.32 , Copy tmp.220 = 8L, tmp.221 = tmp.219 == tmp.220, Return tmp.221, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.204 = 10L
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.204 = 10L, CopyToOffset(long_arr.29 + 0) = tmp.204 , Copy tmp.205 = 9L, CopyToOffset(long_arr.29 + 8) = tmp.205 , Copy tmp.206 = 8L, CopyToOffset(long_arr.29 + 16) = tmp.206 , Copy tmp.207 = 7L, CopyToOffset(long_arr.29 + 24) = tmp.207 , Copy tmp.208 = 6L, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, Copy tmp.211 = 5L, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, Copy subtraction_result.32 = tmp.218, tmp.219 = Load subtraction_result.32 , Copy tmp.220 = 8L, tmp.221 = tmp.219 == tmp.220, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.204 = 10L: set(), CopyToOffset(long_arr.29 + 0) = tmp.204 : set(), Copy tmp.205 = 9L: set(), CopyToOffset(long_arr.29 + 8) = tmp.205 : set(), Copy tmp.206 = 8L: set(), CopyToOffset(long_arr.29 + 16) = tmp.206 : set(), Copy tmp.207 = 7L: set(), CopyToOffset(long_arr.29 + 24) = tmp.207 : set(), Copy tmp.208 = 6L: set(), CopyToOffset(long_arr.29 + 32) = tmp.208 : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.210 = tmp.209: set(), Copy tmp.211 = 5L: set(), Copy tmp.212 = tmp.211: set(), AddPtr tmp.213 = tmp.210 + tmp.212 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), Copy tmp.214 = one_past_the_end.30: set(), SignExtend tmp.215 = index.31: set(), Copy tmp.216 = tmp.215: set(), tmp.217 = -tmp.216: set(), AddPtr tmp.218 = tmp.214 + tmp.217 * 8: set(), Copy subtraction_result.32 = tmp.218: set(), tmp.219 = Load subtraction_result.32 : set(), Copy tmp.220 = 8L: set(), tmp.221 = tmp.219 == tmp.220: set(), Return tmp.221: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.204 = 10L, CopyToOffset(long_arr.29 + 0) = tmp.204 , Copy tmp.205 = 9L, CopyToOffset(long_arr.29 + 8) = tmp.205 , Copy tmp.206 = 8L, CopyToOffset(long_arr.29 + 16) = tmp.206 , Copy tmp.207 = 7L, CopyToOffset(long_arr.29 + 24) = tmp.207 , Copy tmp.208 = 6L, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, Copy tmp.211 = 5L, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, Copy subtraction_result.32 = tmp.218, tmp.219 = Load subtraction_result.32 , Copy tmp.220 = 8L, tmp.221 = tmp.219 == tmp.220, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.204 = 10L: set(), CopyToOffset(long_arr.29 + 0) = tmp.204 : set(), Copy tmp.205 = 9L: set(), CopyToOffset(long_arr.29 + 8) = tmp.205 : set(), Copy tmp.206 = 8L: set(), CopyToOffset(long_arr.29 + 16) = tmp.206 : set(), Copy tmp.207 = 7L: set(), CopyToOffset(long_arr.29 + 24) = tmp.207 : set(), Copy tmp.208 = 6L: set(), CopyToOffset(long_arr.29 + 32) = tmp.208 : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.210 = tmp.209: set(), Copy tmp.211 = 5L: set(), Copy tmp.212 = tmp.211: set(), AddPtr tmp.213 = tmp.210 + tmp.212 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), Copy tmp.214 = one_past_the_end.30: set(), SignExtend tmp.215 = index.31: set(), Copy tmp.216 = tmp.215: set(), tmp.217 = -tmp.216: set(), AddPtr tmp.218 = tmp.214 + tmp.217 * 8: set(), Copy subtraction_result.32 = tmp.218: set(), tmp.219 = Load subtraction_result.32 : set(), Copy tmp.220 = 8L: set(), tmp.221 = tmp.219 == tmp.220: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.204 = 10L, CopyToOffset(long_arr.29 + 0) = tmp.204 , Copy tmp.205 = 9L, CopyToOffset(long_arr.29 + 8) = tmp.205 , Copy tmp.206 = 8L, CopyToOffset(long_arr.29 + 16) = tmp.206 , Copy tmp.207 = 7L, CopyToOffset(long_arr.29 + 24) = tmp.207 , Copy tmp.208 = 6L, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, Copy tmp.211 = 5L, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, Copy subtraction_result.32 = tmp.218, tmp.219 = Load subtraction_result.32 , Copy tmp.220 = 8L, tmp.221 = tmp.219 == tmp.220, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.204 = 10L: set(), CopyToOffset(long_arr.29 + 0) = tmp.204 : set(), Copy tmp.205 = 9L: set(), CopyToOffset(long_arr.29 + 8) = tmp.205 : set(), Copy tmp.206 = 8L: set(), CopyToOffset(long_arr.29 + 16) = tmp.206 : set(), Copy tmp.207 = 7L: set(), CopyToOffset(long_arr.29 + 24) = tmp.207 : set(), Copy tmp.208 = 6L: set(), CopyToOffset(long_arr.29 + 32) = tmp.208 : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.210 = tmp.209: set(), Copy tmp.211 = 5L: set(), Copy tmp.212 = tmp.211: set(), AddPtr tmp.213 = tmp.210 + tmp.212 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), Copy tmp.214 = one_past_the_end.30: set(), SignExtend tmp.215 = index.31: set(), Copy tmp.216 = tmp.215: set(), tmp.217 = -tmp.216: set(), AddPtr tmp.218 = tmp.214 + tmp.217 * 8: set(), Copy subtraction_result.32 = tmp.218: set(), tmp.219 = Load subtraction_result.32 : set(), Copy tmp.220 = 8L: set(), tmp.221 = tmp.219 == tmp.220: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.204 = 10L, CopyToOffset(long_arr.29 + 0) = tmp.204 , Copy tmp.205 = 9L, CopyToOffset(long_arr.29 + 8) = tmp.205 , Copy tmp.206 = 8L, CopyToOffset(long_arr.29 + 16) = tmp.206 , Copy tmp.207 = 7L, CopyToOffset(long_arr.29 + 24) = tmp.207 , Copy tmp.208 = 6L, CopyToOffset(long_arr.29 + 32) = tmp.208 , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, Copy tmp.211 = 5L, Copy tmp.212 = tmp.211, AddPtr tmp.213 = tmp.210 + tmp.212 * 8, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.216, AddPtr tmp.218 = tmp.214 + tmp.217 * 8, Copy subtraction_result.32 = tmp.218, tmp.219 = Load subtraction_result.32 , Copy tmp.220 = 8L, tmp.221 = tmp.219 == tmp.220, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.204 = 10L: set(), CopyToOffset(long_arr.29 + 0) = tmp.204 : set(), Copy tmp.205 = 9L: set(), CopyToOffset(long_arr.29 + 8) = tmp.205 : set(), Copy tmp.206 = 8L: set(), CopyToOffset(long_arr.29 + 16) = tmp.206 : set(), Copy tmp.207 = 7L: set(), CopyToOffset(long_arr.29 + 24) = tmp.207 : set(), Copy tmp.208 = 6L: set(), CopyToOffset(long_arr.29 + 32) = tmp.208 : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.210 = tmp.209: set(), Copy tmp.211 = 5L: set(), Copy tmp.212 = tmp.211: set(), AddPtr tmp.213 = tmp.210 + tmp.212 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), Copy tmp.214 = one_past_the_end.30: set(), SignExtend tmp.215 = index.31: set(), Copy tmp.216 = tmp.215: set(), tmp.217 = -tmp.216: set(), AddPtr tmp.218 = tmp.214 + tmp.217 * 8: set(), Copy subtraction_result.32 = tmp.218: set(), tmp.219 = Load subtraction_result.32 : set(), Copy tmp.220 = 8L: set(), tmp.221 = tmp.219 == tmp.220: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.204 = 10L set()
<class 'parser.ConstLong'>
CopyToOffset(long_arr.29 + 0) = tmp.204  {Copy tmp.204 = 10L}
Copy tmp.205 = 9L {Copy tmp.204 = 10L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.29 + 8) = tmp.205  {Copy tmp.205 = 9L, Copy tmp.204 = 10L}
Copy tmp.206 = 8L {Copy tmp.205 = 9L, Copy tmp.204 = 10L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.29 + 16) = tmp.206  {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.204 = 10L}
Copy tmp.207 = 7L {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.204 = 10L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.29 + 24) = tmp.207  {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L}
Copy tmp.208 = 6L {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L}
<class 'parser.ConstLong'>
CopyToOffset(long_arr.29 + 32) = tmp.208  {Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}
tmp.209 = Get Address long_arr.29  {Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}
Copy tmp.210 = tmp.209 {Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}
Copy tmp.211 = 5L {Copy tmp.210 = tmp.209, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}
<class 'parser.ConstLong'>
Copy tmp.212 = tmp.211 {Copy tmp.210 = tmp.209, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L, Copy tmp.211 = 5L}
AddPtr tmp.213 = tmp.210 + tmp.212 * 8 {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
Copy one_past_the_end.30 = tmp.213 {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.214 = one_past_the_end.30 {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
SignExtend tmp.215 = index.31 {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
Copy tmp.216 = tmp.215 {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
tmp.217 = -tmp.216 {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
AddPtr tmp.218 = tmp.214 + tmp.217 * 8 {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
Copy subtraction_result.32 = tmp.218 {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.219 = Load subtraction_result.32  {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
Copy tmp.220 = 8L {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
<class 'parser.ConstLong'>
tmp.221 = tmp.219 == tmp.220 {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
Return tmp.221 {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
OLD ANNOT: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.204 = 10L, Copy tmp.207 = 7L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
NEW ANNOT: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.204 = 10L, CopyToOffset(long_arr.29 + 0) = 10L , Copy tmp.205 = 9L, CopyToOffset(long_arr.29 + 8) = 9L , Copy tmp.206 = 8L, CopyToOffset(long_arr.29 + 16) = 8L , Copy tmp.207 = 7L, CopyToOffset(long_arr.29 + 24) = 7L , Copy tmp.208 = 6L, CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.210 = tmp.209, Copy tmp.211 = 5L, Copy tmp.212 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = tmp.213, SignExtend tmp.215 = index.31, Copy tmp.216 = tmp.215, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, Copy subtraction_result.32 = tmp.218, tmp.219 = Load tmp.218 , Copy tmp.220 = 8L, tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.204 = 10L: set(), CopyToOffset(long_arr.29 + 0) = tmp.204 : {Copy tmp.204 = 10L}, Copy tmp.205 = 9L: {Copy tmp.204 = 10L}, CopyToOffset(long_arr.29 + 8) = tmp.205 : {Copy tmp.205 = 9L, Copy tmp.204 = 10L}, Copy tmp.206 = 8L: {Copy tmp.205 = 9L, Copy tmp.204 = 10L}, CopyToOffset(long_arr.29 + 16) = tmp.206 : {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.204 = 10L}, Copy tmp.207 = 7L: {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.204 = 10L}, CopyToOffset(long_arr.29 + 24) = tmp.207 : {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L}, Copy tmp.208 = 6L: {Copy tmp.206 = 8L, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L}, CopyToOffset(long_arr.29 + 32) = tmp.208 : {Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}, tmp.209 = Get Address long_arr.29 : {Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}, Copy tmp.210 = tmp.209: {Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}, Copy tmp.211 = 5L: {Copy tmp.210 = tmp.209, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L}, Copy tmp.212 = tmp.211: {Copy tmp.210 = tmp.209, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.206 = 8L, Copy tmp.208 = 6L, Copy tmp.211 = 5L}, AddPtr tmp.213 = tmp.210 + tmp.212 * 8: {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, Copy one_past_the_end.30 = tmp.213: {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, Copy tmp.214 = one_past_the_end.30: {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, SignExtend tmp.215 = index.31: {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, Copy tmp.216 = tmp.215: {Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, tmp.217 = -tmp.216: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, AddPtr tmp.218 = tmp.214 + tmp.217 * 8: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, Copy subtraction_result.32 = tmp.218: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, tmp.219 = Load subtraction_result.32 : {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, Copy tmp.220 = 8L: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, tmp.221 = tmp.219 == tmp.220: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}, Return tmp.221: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}} ReachingCopies: {Copy tmp.216 = tmp.215, Copy tmp.210 = tmp.209, Copy subtraction_result.32 = tmp.218, Copy tmp.206 = 8L, Copy one_past_the_end.30 = tmp.213, Copy tmp.214 = one_past_the_end.30, Copy tmp.212 = tmp.211, Copy tmp.205 = 9L, Copy tmp.207 = 7L, Copy tmp.204 = 10L, Copy tmp.220 = 8L, Copy tmp.211 = 5L, Copy tmp.208 = 6L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.221 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.221 = tmp.219 == 8L {four.42, arr.43, index.25, arr.18, index.45, tmp.221, index.22, flag.13, index.31, flag.41}
Copy tmp.220 = 8L {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}
tmp.219 = Load tmp.218  {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}
Copy subtraction_result.32 = tmp.218 {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8 {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.217 = -tmp.215 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, tmp.217, index.22, flag.13, index.31, four.42}
Copy tmp.216 = tmp.215 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, tmp.215, four.42}
SignExtend tmp.215 = index.31 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, tmp.215, four.42}
Copy tmp.214 = tmp.213 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, four.42}
Copy one_past_the_end.30 = tmp.213 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, four.42}
AddPtr tmp.213 = tmp.209 + tmp.211 * 8 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.212 = 5L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, tmp.211, index.22, tmp.209, flag.13, four.42}
Copy tmp.211 = 5L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, tmp.211, index.22, tmp.209, flag.13, four.42}
Copy tmp.210 = tmp.209 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}
tmp.209 = Get Address long_arr.29  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}
CopyToOffset(long_arr.29 + 32) = 6L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.208 = 6L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 24) = 7L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.207 = 7L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 16) = 8L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.206 = 8L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 8) = 9L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.205 = 9L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 0) = 10L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.204 = 10L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.204 = 10L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.205 = 9L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.206 = 8L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.207 = 7L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.208 = 6L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.210 = tmp.209 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42} for node 0
Copy tmp.212 = 5L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, tmp.211, index.22, tmp.209, flag.13, four.42} for node 0
Copy tmp.214 = tmp.213 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.216 = tmp.215 {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, tmp.215, four.42} for node 0
Copy subtraction_result.32 = tmp.218 {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.220 = 8L {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.204 = 10L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 0) = 10L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.205 = 9L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 8) = 9L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.206 = 8L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 16) = 8L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.207 = 7L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 24) = 7L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.208 = 6L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 32) = 6L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.209 = Get Address long_arr.29 : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}, Copy tmp.210 = tmp.209: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}, Copy tmp.211 = 5L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, tmp.211, index.22, tmp.209, flag.13, four.42}, Copy tmp.212 = 5L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, tmp.211, index.22, tmp.209, flag.13, four.42}, AddPtr tmp.213 = tmp.209 + tmp.211 * 8: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy one_past_the_end.30 = tmp.213: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, four.42}, Copy tmp.214 = tmp.213: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, four.42}, SignExtend tmp.215 = index.31: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, tmp.215, four.42}, Copy tmp.216 = tmp.215: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, index.22, flag.13, index.31, tmp.215, four.42}, tmp.217 = -tmp.215: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, one_past_the_end.30, tmp.217, index.22, flag.13, index.31, four.42}, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8: {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy subtraction_result.32 = tmp.218: {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.219 = Load tmp.218 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}, Copy tmp.220 = 8L: {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}, tmp.221 = tmp.219 == 8L: {four.42, arr.43, index.25, arr.18, index.45, tmp.221, index.22, flag.13, index.31, flag.41}, Return tmp.221: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.31, long_arr.29}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221]
NEW LIST [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(long_arr.29 + 0) = 10L 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.211 = 5L: set(), AddPtr tmp.213 = tmp.209 + tmp.211 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.211 = 5L: set(), AddPtr tmp.213 = tmp.209 + tmp.211 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.211 = 5L: set(), AddPtr tmp.213 = tmp.209 + tmp.211 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + tmp.211 * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.211 = 5L: set(), AddPtr tmp.213 = tmp.209 + tmp.211 * 8: set(), Copy one_past_the_end.30 = tmp.213: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(long_arr.29 + 0) = 10L  set()
CopyToOffset(long_arr.29 + 8) = 9L  set()
CopyToOffset(long_arr.29 + 16) = 8L  set()
CopyToOffset(long_arr.29 + 24) = 7L  set()
CopyToOffset(long_arr.29 + 32) = 6L  set()
tmp.209 = Get Address long_arr.29  set()
Copy tmp.211 = 5L set()
<class 'parser.ConstLong'>
AddPtr tmp.213 = tmp.209 + tmp.211 * 8 {Copy tmp.211 = 5L}
Copy one_past_the_end.30 = tmp.213 {Copy tmp.211 = 5L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
SignExtend tmp.215 = index.31 {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
tmp.217 = -tmp.215 {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8 {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
tmp.219 = Load tmp.218  {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
tmp.221 = tmp.219 == 8L {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
Return tmp.221 {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
OLD ANNOT: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
NEW ANNOT: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , Copy tmp.211 = 5L, AddPtr tmp.213 = tmp.209 + 5L * 8, Copy one_past_the_end.30 = tmp.213, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), Copy tmp.211 = 5L: set(), AddPtr tmp.213 = tmp.209 + tmp.211 * 8: {Copy tmp.211 = 5L}, Copy one_past_the_end.30 = tmp.213: {Copy tmp.211 = 5L}, SignExtend tmp.215 = index.31: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}, tmp.217 = -tmp.215: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}, AddPtr tmp.218 = one_past_the_end.30 + tmp.217 * 8: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}, tmp.219 = Load tmp.218 : {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}, tmp.221 = tmp.219 == 8L: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}, Return tmp.221: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}} ReachingCopies: {Copy tmp.211 = 5L, Copy one_past_the_end.30 = tmp.213}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.221 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.221 = tmp.219 == 8L {four.42, arr.43, index.25, arr.18, index.45, tmp.221, index.22, flag.13, index.31, flag.41}
tmp.219 = Load tmp.218  {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}
AddPtr tmp.218 = tmp.213 + tmp.217 * 8 {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.217 = -tmp.215 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, tmp.217, index.22, flag.13, index.31, four.42}
SignExtend tmp.215 = index.31 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, tmp.215, four.42}
Copy one_past_the_end.30 = tmp.213 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.213 = tmp.209 + 5L * 8 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.211 = 5L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}
tmp.209 = Get Address long_arr.29  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}
CopyToOffset(long_arr.29 + 32) = 6L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 24) = 7L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 16) = 8L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 8) = 9L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 0) = 10L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.211 = 5L {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42} for node 0
Copy one_past_the_end.30 = tmp.213 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 8) = 9L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 16) = 8L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 24) = 7L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 32) = 6L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.209 = Get Address long_arr.29 : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}, Copy tmp.211 = 5L: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}, AddPtr tmp.213 = tmp.209 + 5L * 8: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy one_past_the_end.30 = tmp.213: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.215 = index.31: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, tmp.215, four.42}, tmp.217 = -tmp.215: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, tmp.217, index.22, flag.13, index.31, four.42}, AddPtr tmp.218 = tmp.213 + tmp.217 * 8: {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.219 = Load tmp.218 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}, tmp.221 = tmp.219 == 8L: {four.42, arr.43, index.25, arr.18, index.45, tmp.221, index.22, flag.13, index.31, flag.41}, Return tmp.221: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.31, long_arr.29}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221]
NEW LIST [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(long_arr.29 + 0) = 10L 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), AddPtr tmp.213 = tmp.209 + 5L * 8: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = tmp.213 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), AddPtr tmp.213 = tmp.209 + 5L * 8: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = tmp.213 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), AddPtr tmp.213 = tmp.209 + 5L * 8: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = tmp.213 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), AddPtr tmp.213 = tmp.209 + 5L * 8: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = tmp.213 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(long_arr.29 + 0) = 10L  set()
CopyToOffset(long_arr.29 + 8) = 9L  set()
CopyToOffset(long_arr.29 + 16) = 8L  set()
CopyToOffset(long_arr.29 + 24) = 7L  set()
CopyToOffset(long_arr.29 + 32) = 6L  set()
tmp.209 = Get Address long_arr.29  set()
AddPtr tmp.213 = tmp.209 + 5L * 8 set()
SignExtend tmp.215 = index.31 set()
tmp.217 = -tmp.215 set()
AddPtr tmp.218 = tmp.213 + tmp.217 * 8 set()
tmp.219 = Load tmp.218  set()
tmp.221 = tmp.219 == 8L set()
Return tmp.221 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : set(), CopyToOffset(long_arr.29 + 8) = 9L : set(), CopyToOffset(long_arr.29 + 16) = 8L : set(), CopyToOffset(long_arr.29 + 24) = 7L : set(), CopyToOffset(long_arr.29 + 32) = 6L : set(), tmp.209 = Get Address long_arr.29 : set(), AddPtr tmp.213 = tmp.209 + 5L * 8: set(), SignExtend tmp.215 = index.31: set(), tmp.217 = -tmp.215: set(), AddPtr tmp.218 = tmp.213 + tmp.217 * 8: set(), tmp.219 = Load tmp.218 : set(), tmp.221 = tmp.219 == 8L: set(), Return tmp.221: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.221 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.221 = tmp.219 == 8L {four.42, arr.43, index.25, arr.18, index.45, tmp.221, index.22, flag.13, index.31, flag.41}
tmp.219 = Load tmp.218  {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}
AddPtr tmp.218 = tmp.213 + tmp.217 * 8 {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.217 = -tmp.215 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, tmp.217, index.22, flag.13, index.31, four.42}
SignExtend tmp.215 = index.31 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, tmp.215, four.42}
AddPtr tmp.213 = tmp.209 + 5L * 8 {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.209 = Get Address long_arr.29  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}
CopyToOffset(long_arr.29 + 32) = 6L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 24) = 7L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 16) = 8L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 8) = 9L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
CopyToOffset(long_arr.29 + 0) = 10L  {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(long_arr.29 + 0) = 10L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 8) = 9L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 16) = 8L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 24) = 7L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, CopyToOffset(long_arr.29 + 32) = 6L : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.209 = Get Address long_arr.29 : {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.31, index.22, tmp.209, flag.13, four.42}, AddPtr tmp.213 = tmp.209 + 5L * 8: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.215 = index.31: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, tmp.215, four.42}, tmp.217 = -tmp.215: {arr.43, tmp.213, index.25, arr.18, long_arr.29, flag.41, index.45, tmp.217, index.22, flag.13, index.31, four.42}, AddPtr tmp.218 = tmp.213 + tmp.217 * 8: {arr.43, index.25, arr.18, long_arr.29, tmp.218, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.219 = Load tmp.218 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.219, index.22, flag.13, index.31, four.42}, tmp.221 = tmp.219 == 8L: {four.42, arr.43, index.25, arr.18, index.45, tmp.221, index.22, flag.13, index.31, flag.41}, Return tmp.221: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, long_arr.29, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_subtract_negative_index ([]) instructions:[Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, CopyToOffset(ptr.34 + 0) = tmp.233 , tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{arr.33}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, CopyToOffset(ptr.34 + 0) = tmp.233 , tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236, Return 0]
NEW LIST [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, Copy ptr.34 = tmp.233, tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.222 = 100
Return 0



ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, Copy ptr.34 = tmp.233, tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), Copy tmp.228 = tmp.227: set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), Copy tmp.231 = tmp.230: set(), tmp.232 = -tmp.231: set(), AddPtr tmp.233 = tmp.228 + tmp.232 * 4: set(), Copy ptr.34 = tmp.233: set(), tmp.234 = Load ptr.34 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, Copy ptr.34 = tmp.233, tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), Copy tmp.228 = tmp.227: set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), Copy tmp.231 = tmp.230: set(), tmp.232 = -tmp.231: set(), AddPtr tmp.233 = tmp.228 + tmp.232 * 4: set(), Copy ptr.34 = tmp.233: set(), tmp.234 = Load ptr.34 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, Copy ptr.34 = tmp.233, tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), Copy tmp.228 = tmp.227: set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), Copy tmp.231 = tmp.230: set(), tmp.232 = -tmp.231: set(), AddPtr tmp.233 = tmp.228 + tmp.232 * 4: set(), Copy ptr.34 = tmp.233: set(), tmp.234 = Load ptr.34 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.231, AddPtr tmp.233 = tmp.228 + tmp.232 * 4, Copy ptr.34 = tmp.233, tmp.234 = Load ptr.34 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), Copy tmp.228 = tmp.227: set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), Copy tmp.231 = tmp.230: set(), tmp.232 = -tmp.231: set(), AddPtr tmp.233 = tmp.228 + tmp.232 * 4: set(), Copy ptr.34 = tmp.233: set(), tmp.234 = Load ptr.34 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.222 = 100 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 0) = tmp.222  set()
Copy tmp.223 = 101 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 4) = tmp.223  set()
Copy tmp.224 = 102 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 8) = tmp.224  set()
Copy tmp.225 = 103 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 12) = tmp.225  set()
Copy tmp.226 = 104 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 16) = tmp.226  set()
tmp.227 = Get Address arr.33  set()
Copy tmp.228 = tmp.227 set()
tmp.229 = -3 {Copy tmp.228 = tmp.227}
SignExtend tmp.230 = tmp.229 {Copy tmp.228 = tmp.227}
Copy tmp.231 = tmp.230 {Copy tmp.228 = tmp.227}
tmp.232 = -tmp.231 {Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
AddPtr tmp.233 = tmp.228 + tmp.232 * 4 {Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
Copy ptr.34 = tmp.233 {Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.234 = Load ptr.34  {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
Copy tmp.235 = 103 {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
tmp.236 = tmp.234 == tmp.235 {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
Return tmp.236 {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
OLD ANNOT: {Copy tmp.226 = 104, Copy tmp.224 = 102, Copy tmp.231 = tmp.230, Copy tmp.223 = 101, Copy ptr.34 = tmp.233, Copy tmp.222 = 100, Copy tmp.228 = tmp.227, Copy tmp.225 = 103, Copy tmp.235 = 103}
NEW ANNOT: {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , Copy tmp.228 = tmp.227, tmp.229 = -3, SignExtend tmp.230 = tmp.229, Copy tmp.231 = tmp.230, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, Copy ptr.34 = tmp.233, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), Copy tmp.228 = tmp.227: set(), tmp.229 = -3: {Copy tmp.228 = tmp.227}, SignExtend tmp.230 = tmp.229: {Copy tmp.228 = tmp.227}, Copy tmp.231 = tmp.230: {Copy tmp.228 = tmp.227}, tmp.232 = -tmp.231: {Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}, AddPtr tmp.233 = tmp.228 + tmp.232 * 4: {Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}, Copy ptr.34 = tmp.233: {Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}, tmp.234 = Load ptr.34 : {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}, Copy tmp.235 = 103: {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}, tmp.236 = tmp.234 == tmp.235: {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}, Return tmp.236: {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}} ReachingCopies: {Copy ptr.34 = tmp.233, Copy tmp.228 = tmp.227, Copy tmp.231 = tmp.230}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.236 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.236 = tmp.234 == tmp.235 {four.42, arr.43, index.25, tmp.236, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.235 = 103 {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.235, four.42}
tmp.234 = Load tmp.233  {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy ptr.34 = tmp.233 {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42}
AddPtr tmp.233 = tmp.227 + tmp.232 * 4 {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42}
tmp.232 = -tmp.230 {arr.43, tmp.232, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
Copy tmp.231 = tmp.230 {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
SignExtend tmp.230 = tmp.229 {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
tmp.229 = -3 {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, tmp.229, four.42}
Copy tmp.228 = tmp.227 {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
tmp.227 = Get Address arr.33  {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
CopyToOffset(arr.33 + 16) = tmp.226  {arr.43, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, four.42}
Copy tmp.226 = 104 {arr.43, four.42, index.25, arr.18, index.45, tmp.226, arr.33, index.22, flag.13, index.31, flag.41}
CopyToOffset(arr.33 + 12) = tmp.225  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.225 = 103 {arr.43, four.42, index.25, arr.18, index.45, tmp.225, arr.33, index.22, flag.13, index.31, flag.41}
CopyToOffset(arr.33 + 8) = tmp.224  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.224 = 102 {arr.43, four.42, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, tmp.224}
CopyToOffset(arr.33 + 4) = tmp.223  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.223 = 101 {arr.43, four.42, tmp.223, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
CopyToOffset(arr.33 + 0) = tmp.222  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.222 = 100 {arr.43, four.42, index.25, tmp.222, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.228 = tmp.227 {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42} for node 0
Copy tmp.231 = tmp.230 {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42} for node 0
Copy ptr.34 = tmp.233 {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: {arr.43, four.42, index.25, tmp.222, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 0) = tmp.222 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.223 = 101: {arr.43, four.42, tmp.223, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 4) = tmp.223 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.224 = 102: {arr.43, four.42, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, tmp.224}, CopyToOffset(arr.33 + 8) = tmp.224 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.225 = 103: {arr.43, four.42, index.25, arr.18, index.45, tmp.225, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 12) = tmp.225 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.226 = 104: {arr.43, four.42, index.25, arr.18, index.45, tmp.226, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 16) = tmp.226 : {arr.43, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, four.42}, tmp.227 = Get Address arr.33 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, Copy tmp.228 = tmp.227: {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, tmp.229 = -3: {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, tmp.229, four.42}, SignExtend tmp.230 = tmp.229: {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, Copy tmp.231 = tmp.230: {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, tmp.232 = -tmp.230: {arr.43, tmp.232, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, AddPtr tmp.233 = tmp.227 + tmp.232 * 4: {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42}, Copy ptr.34 = tmp.233: {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42}, tmp.234 = Load tmp.233 : {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.235 = 103: {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.235, four.42}, tmp.236 = tmp.234 == tmp.235: {four.42, arr.43, index.25, tmp.236, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.236: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{arr.33}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236]
NEW LIST [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.222 = 100


ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), tmp.232 = -tmp.230: set(), AddPtr tmp.233 = tmp.227 + tmp.232 * 4: set(), tmp.234 = Load tmp.233 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), tmp.232 = -tmp.230: set(), AddPtr tmp.233 = tmp.227 + tmp.232 * 4: set(), tmp.234 = Load tmp.233 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), tmp.232 = -tmp.230: set(), AddPtr tmp.233 = tmp.227 + tmp.232 * 4: set(), tmp.234 = Load tmp.233 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), tmp.232 = -tmp.230: set(), AddPtr tmp.233 = tmp.227 + tmp.232 * 4: set(), tmp.234 = Load tmp.233 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
Copy tmp.222 = 100 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 0) = tmp.222  set()
Copy tmp.223 = 101 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 4) = tmp.223  set()
Copy tmp.224 = 102 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 8) = tmp.224  set()
Copy tmp.225 = 103 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 12) = tmp.225  set()
Copy tmp.226 = 104 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
CopyToOffset(arr.33 + 16) = tmp.226  set()
tmp.227 = Get Address arr.33  set()
tmp.229 = -3 set()
SignExtend tmp.230 = tmp.229 set()
tmp.232 = -tmp.230 set()
AddPtr tmp.233 = tmp.227 + tmp.232 * 4 set()
tmp.234 = Load tmp.233  set()
Copy tmp.235 = 103 set()
<class 'parser.ConstInt'>
<class 'parser.IntType'>
<class 'parser.UIntType'>
tmp.236 = tmp.234 == tmp.235 set()
Return tmp.236 set()
OLD ANNOT: {Copy tmp.226 = 104, Copy tmp.224 = 102, Copy tmp.223 = 101, Copy tmp.222 = 100, Copy tmp.225 = 103, Copy tmp.235 = 103}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: set(), CopyToOffset(arr.33 + 0) = tmp.222 : set(), Copy tmp.223 = 101: set(), CopyToOffset(arr.33 + 4) = tmp.223 : set(), Copy tmp.224 = 102: set(), CopyToOffset(arr.33 + 8) = tmp.224 : set(), Copy tmp.225 = 103: set(), CopyToOffset(arr.33 + 12) = tmp.225 : set(), Copy tmp.226 = 104: set(), CopyToOffset(arr.33 + 16) = tmp.226 : set(), tmp.227 = Get Address arr.33 : set(), tmp.229 = -3: set(), SignExtend tmp.230 = tmp.229: set(), tmp.232 = -tmp.230: set(), AddPtr tmp.233 = tmp.227 + tmp.232 * 4: set(), tmp.234 = Load tmp.233 : set(), Copy tmp.235 = 103: set(), tmp.236 = tmp.234 == tmp.235: set(), Return tmp.236: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.236 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.236 = tmp.234 == tmp.235 {four.42, arr.43, index.25, tmp.236, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.235 = 103 {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.235, four.42}
tmp.234 = Load tmp.233  {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.233 = tmp.227 + tmp.232 * 4 {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42}
tmp.232 = -tmp.230 {arr.43, tmp.232, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
SignExtend tmp.230 = tmp.229 {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
tmp.229 = -3 {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, tmp.229, four.42}
tmp.227 = Get Address arr.33  {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}
CopyToOffset(arr.33 + 16) = tmp.226  {arr.43, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, four.42}
Copy tmp.226 = 104 {arr.43, four.42, index.25, arr.18, index.45, tmp.226, arr.33, index.22, flag.13, index.31, flag.41}
CopyToOffset(arr.33 + 12) = tmp.225  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.225 = 103 {arr.43, four.42, index.25, arr.18, index.45, tmp.225, arr.33, index.22, flag.13, index.31, flag.41}
CopyToOffset(arr.33 + 8) = tmp.224  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.224 = 102 {arr.43, four.42, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, tmp.224}
CopyToOffset(arr.33 + 4) = tmp.223  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.223 = 101 {arr.43, four.42, tmp.223, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
CopyToOffset(arr.33 + 0) = tmp.222  {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
Copy tmp.222 = 100 {arr.43, four.42, index.25, tmp.222, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236] Pred: {ENTRY} Suc: {EXIT} iMap: {Copy tmp.222 = 100: {arr.43, four.42, index.25, tmp.222, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 0) = tmp.222 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.223 = 101: {arr.43, four.42, tmp.223, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 4) = tmp.223 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.224 = 102: {arr.43, four.42, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, tmp.224}, CopyToOffset(arr.33 + 8) = tmp.224 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.225 = 103: {arr.43, four.42, index.25, arr.18, index.45, tmp.225, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 12) = tmp.225 : {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}, Copy tmp.226 = 104: {arr.43, four.42, index.25, arr.18, index.45, tmp.226, arr.33, index.22, flag.13, index.31, flag.41}, CopyToOffset(arr.33 + 16) = tmp.226 : {arr.43, index.25, arr.18, flag.41, index.45, arr.33, index.22, flag.13, index.31, four.42}, tmp.227 = Get Address arr.33 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, tmp.229 = -3: {arr.43, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, tmp.229, four.42}, SignExtend tmp.230 = tmp.229: {arr.43, index.25, arr.18, flag.41, tmp.230, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, tmp.232 = -tmp.230: {arr.43, tmp.232, index.25, arr.18, flag.41, index.45, tmp.227, arr.33, index.22, flag.13, index.31, four.42}, AddPtr tmp.233 = tmp.227 + tmp.232 * 4: {arr.43, index.25, arr.18, flag.41, index.45, tmp.233, arr.33, index.22, flag.13, index.31, four.42}, tmp.234 = Load tmp.233 : {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.235 = 103: {arr.43, tmp.234, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.235, four.42}, tmp.236 = tmp.234 == tmp.235: {four.42, arr.43, index.25, tmp.236, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.236: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, arr.33, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: test_subtract_different_index_types ([]) instructions:[IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, SignExtend tmp.245 = 11, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, CopyToOffset(end_ptr.36 + 0) = tmp.247 , Copy tmp.248 = end_ptr.36, SignExtend tmp.249 = 5, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, CopyToOffset(ptr1.37 + 0) = tmp.252 , Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, CopyToOffset(ptr2.38 + 0) = tmp.256 , Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, CopyToOffset(ptr3.39 + 0) = tmp.261 , Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, CopyToOffset(ptr4.40 + 0) = tmp.266 , tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268), tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.35}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, SignExtend tmp.245 = 11, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, CopyToOffset(end_ptr.36 + 0) = tmp.247 , Copy tmp.248 = end_ptr.36, SignExtend tmp.249 = 5, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, CopyToOffset(ptr1.37 + 0) = tmp.252 , Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, CopyToOffset(ptr2.38 + 0) = tmp.256 , Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, CopyToOffset(ptr3.39 + 0) = tmp.261 , Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, CopyToOffset(ptr4.40 + 0) = tmp.266 , tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268), tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279, Return 0]
NEW LIST [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, Copy tmp.245 = 11L, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.249 = 5L, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, Copy ptr1.37 = tmp.252, Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, Copy ptr2.38 = tmp.256, Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, Copy ptr3.39 = tmp.261, Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, Copy ptr4.40 = tmp.266, tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268), tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279, Return 0]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_zeroExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.237 = 0
tmp.269 = ptr1.37 == ptr3.39
Copy tmp.270 = 1
Label(tmp.268)
Label(tmp.271)
tmp.273 = ptr1.37 == ptr4.40
Copy tmp.274 = 1
Label(tmp.272)
Label(tmp.275)
tmp.277 = Load ptr4.40 
Copy tmp.279 = 1
Label(tmp.276)
Label(tmp.280)
Return 0





















ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, Copy tmp.245 = 11L, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.249 = 5L, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, Copy ptr1.37 = tmp.252, Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, Copy ptr2.38 = tmp.256, Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, Copy ptr3.39 = tmp.261, Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, Copy ptr4.40 = tmp.266, tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.244 = tmp.243: set(), Copy tmp.245 = 11L: set(), Copy tmp.246 = tmp.245: set(), AddPtr tmp.247 = tmp.244 + tmp.246 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.248 = end_ptr.36: set(), Copy tmp.249 = 5L: set(), Copy tmp.250 = tmp.249: set(), tmp.251 = -tmp.250: set(), AddPtr tmp.252 = tmp.248 + tmp.251 * 8: set(), Copy ptr1.37 = tmp.252: set(), Copy tmp.253 = end_ptr.36: set(), Copy tmp.254 = 5L: set(), tmp.255 = -tmp.254: set(), AddPtr tmp.256 = tmp.253 + tmp.255 * 8: set(), Copy ptr2.38 = tmp.256: set(), Copy tmp.257 = end_ptr.36: set(), ZeroExtend tmp.258 = 5U: set(), Copy tmp.259 = tmp.258: set(), tmp.260 = -tmp.259: set(), AddPtr tmp.261 = tmp.257 + tmp.260 * 8: set(), Copy ptr3.39 = tmp.261: set(), Copy tmp.262 = end_ptr.36: set(), Copy tmp.263 = 5UL: set(), Copy tmp.264 = tmp.263: set(), tmp.265 = -tmp.264: set(), AddPtr tmp.266 = tmp.262 + tmp.265 * 8: set(), Copy ptr4.40 = tmp.266: set(), tmp.267 = ptr1.37 == ptr2.38: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = ptr1.37 == ptr3.39: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = ptr1.37 == ptr4.40: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load ptr4.40 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
13 13: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {12, 13}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, Copy tmp.245 = 11L, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.249 = 5L, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, Copy ptr1.37 = tmp.252, Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, Copy ptr2.38 = tmp.256, Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, Copy ptr3.39 = tmp.261, Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, Copy ptr4.40 = tmp.266, tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.244 = tmp.243: set(), Copy tmp.245 = 11L: set(), Copy tmp.246 = tmp.245: set(), AddPtr tmp.247 = tmp.244 + tmp.246 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.248 = end_ptr.36: set(), Copy tmp.249 = 5L: set(), Copy tmp.250 = tmp.249: set(), tmp.251 = -tmp.250: set(), AddPtr tmp.252 = tmp.248 + tmp.251 * 8: set(), Copy ptr1.37 = tmp.252: set(), Copy tmp.253 = end_ptr.36: set(), Copy tmp.254 = 5L: set(), tmp.255 = -tmp.254: set(), AddPtr tmp.256 = tmp.253 + tmp.255 * 8: set(), Copy ptr2.38 = tmp.256: set(), Copy tmp.257 = end_ptr.36: set(), ZeroExtend tmp.258 = 5U: set(), Copy tmp.259 = tmp.258: set(), tmp.260 = -tmp.259: set(), AddPtr tmp.261 = tmp.257 + tmp.260 * 8: set(), Copy ptr3.39 = tmp.261: set(), Copy tmp.262 = end_ptr.36: set(), Copy tmp.263 = 5UL: set(), Copy tmp.264 = tmp.263: set(), tmp.265 = -tmp.264: set(), AddPtr tmp.266 = tmp.262 + tmp.265 * 8: set(), Copy ptr4.40 = tmp.266: set(), tmp.267 = ptr1.37 == ptr2.38: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = ptr1.37 == ptr3.39: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = ptr1.37 == ptr4.40: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load ptr4.40 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, Copy tmp.245 = 11L, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.249 = 5L, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, Copy ptr1.37 = tmp.252, Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, Copy ptr2.38 = tmp.256, Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, Copy ptr3.39 = tmp.261, Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, Copy ptr4.40 = tmp.266, tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.244 = tmp.243: set(), Copy tmp.245 = 11L: set(), Copy tmp.246 = tmp.245: set(), AddPtr tmp.247 = tmp.244 + tmp.246 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.248 = end_ptr.36: set(), Copy tmp.249 = 5L: set(), Copy tmp.250 = tmp.249: set(), tmp.251 = -tmp.250: set(), AddPtr tmp.252 = tmp.248 + tmp.251 * 8: set(), Copy ptr1.37 = tmp.252: set(), Copy tmp.253 = end_ptr.36: set(), Copy tmp.254 = 5L: set(), tmp.255 = -tmp.254: set(), AddPtr tmp.256 = tmp.253 + tmp.255 * 8: set(), Copy ptr2.38 = tmp.256: set(), Copy tmp.257 = end_ptr.36: set(), ZeroExtend tmp.258 = 5U: set(), Copy tmp.259 = tmp.258: set(), tmp.260 = -tmp.259: set(), AddPtr tmp.261 = tmp.257 + tmp.260 * 8: set(), Copy ptr3.39 = tmp.261: set(), Copy tmp.262 = end_ptr.36: set(), Copy tmp.263 = 5UL: set(), Copy tmp.264 = tmp.263: set(), tmp.265 = -tmp.264: set(), AddPtr tmp.266 = tmp.262 + tmp.265 * 8: set(), Copy ptr4.40 = tmp.266: set(), tmp.267 = ptr1.37 == ptr2.38: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = ptr1.37 == ptr3.39: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = ptr1.37 == ptr4.40: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load ptr4.40 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, Copy tmp.245 = 11L, Copy tmp.246 = tmp.245, AddPtr tmp.247 = tmp.244 + tmp.246 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.249 = 5L, Copy tmp.250 = tmp.249, tmp.251 = -tmp.250, AddPtr tmp.252 = tmp.248 + tmp.251 * 8, Copy ptr1.37 = tmp.252, Copy tmp.253 = end_ptr.36, Copy tmp.254 = 5L, tmp.255 = -tmp.254, AddPtr tmp.256 = tmp.253 + tmp.255 * 8, Copy ptr2.38 = tmp.256, Copy tmp.257 = end_ptr.36, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.259, AddPtr tmp.261 = tmp.257 + tmp.260 * 8, Copy ptr3.39 = tmp.261, Copy tmp.262 = end_ptr.36, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.264, AddPtr tmp.266 = tmp.262 + tmp.265 * 8, Copy ptr4.40 = tmp.266, tmp.267 = ptr1.37 == ptr2.38, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.244 = tmp.243: set(), Copy tmp.245 = 11L: set(), Copy tmp.246 = tmp.245: set(), AddPtr tmp.247 = tmp.244 + tmp.246 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.248 = end_ptr.36: set(), Copy tmp.249 = 5L: set(), Copy tmp.250 = tmp.249: set(), tmp.251 = -tmp.250: set(), AddPtr tmp.252 = tmp.248 + tmp.251 * 8: set(), Copy ptr1.37 = tmp.252: set(), Copy tmp.253 = end_ptr.36: set(), Copy tmp.254 = 5L: set(), tmp.255 = -tmp.254: set(), AddPtr tmp.256 = tmp.253 + tmp.255 * 8: set(), Copy ptr2.38 = tmp.256: set(), Copy tmp.257 = end_ptr.36: set(), ZeroExtend tmp.258 = 5U: set(), Copy tmp.259 = tmp.258: set(), tmp.260 = -tmp.259: set(), AddPtr tmp.261 = tmp.257 + tmp.260 * 8: set(), Copy ptr3.39 = tmp.261: set(), Copy tmp.262 = end_ptr.36: set(), Copy tmp.263 = 5UL: set(), Copy tmp.264 = tmp.263: set(), tmp.265 = -tmp.264: set(), AddPtr tmp.266 = tmp.262 + tmp.265 * 8: set(), Copy ptr4.40 = tmp.266: set(), tmp.267 = ptr1.37 == ptr2.38: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = ptr1.37 == ptr3.39, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = ptr1.37 == ptr3.39: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = ptr1.37 == ptr4.40, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = ptr1.37 == ptr4.40: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load ptr4.40 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load ptr4.40 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------IMAP for block 0-------------------
IntToDouble tmp.237 = 0 set()
CopyToOffset(double_arr.35 + 0) = tmp.237  set()
IntToDouble tmp.238 = 0 set()
CopyToOffset(double_arr.35 + 8) = tmp.238  set()
IntToDouble tmp.239 = 0 set()
CopyToOffset(double_arr.35 + 16) = tmp.239  set()
IntToDouble tmp.240 = 0 set()
CopyToOffset(double_arr.35 + 24) = tmp.240  set()
IntToDouble tmp.241 = 0 set()
CopyToOffset(double_arr.35 + 32) = tmp.241  set()
IntToDouble tmp.242 = 0 set()
CopyToOffset(double_arr.35 + 40) = tmp.242  set()
CopyToOffset(double_arr.35 + 48) = 6.0  set()
CopyToOffset(double_arr.35 + 56) = 0  set()
CopyToOffset(double_arr.35 + 64) = 0  set()
CopyToOffset(double_arr.35 + 72) = 0  set()
CopyToOffset(double_arr.35 + 80) = 0  set()
tmp.243 = Get Address double_arr.35  set()
Copy tmp.244 = tmp.243 set()
Copy tmp.245 = 11L {Copy tmp.244 = tmp.243}
<class 'parser.ConstLong'>
Copy tmp.246 = tmp.245 {Copy tmp.244 = tmp.243, Copy tmp.245 = 11L}
AddPtr tmp.247 = tmp.244 + tmp.246 * 8 {Copy tmp.244 = tmp.243, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
Copy end_ptr.36 = tmp.247 {Copy tmp.244 = tmp.243, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.248 = end_ptr.36 {Copy end_ptr.36 = tmp.247, Copy tmp.244 = tmp.243, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
Copy tmp.249 = 5L {Copy tmp.244 = tmp.243, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
<class 'parser.ConstLong'>
Copy tmp.250 = tmp.249 {Copy tmp.244 = tmp.243, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
tmp.251 = -tmp.250 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
AddPtr tmp.252 = tmp.248 + tmp.251 * 8 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
Copy ptr1.37 = tmp.252 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.253 = end_ptr.36 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.245 = 11L}
Copy tmp.254 = 5L {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstLong'>
tmp.255 = -tmp.254 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
AddPtr tmp.256 = tmp.253 + tmp.255 * 8 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
Copy ptr2.38 = tmp.256 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.257 = end_ptr.36 {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
ZeroExtend tmp.258 = 5U {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
Copy tmp.259 = tmp.258 {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
tmp.260 = -tmp.259 {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
AddPtr tmp.261 = tmp.257 + tmp.260 * 8 {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
Copy ptr3.39 = tmp.261 {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.262 = end_ptr.36 {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
Copy tmp.263 = 5UL {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstULong'>
<class 'parser.ULongType'>
<class 'parser.LongType'>
Copy tmp.264 = tmp.263 {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}
tmp.265 = -tmp.264 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
AddPtr tmp.266 = tmp.262 + tmp.265 * 8 {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
Copy ptr4.40 = tmp.266 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.267 = ptr1.37 == ptr2.38 {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
JumpIfZero(tmp.267, tmp.268) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.269 = ptr1.37 == ptr3.39 {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
JumpIfZero(tmp.269, tmp.268) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.270 = 1 {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
Jump(tmp.271) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.270 = 1, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.270 = 1, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.268) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
Copy tmp.270 = 0 {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.271) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
JumpIfZero(tmp.270, tmp.272) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.273 = ptr1.37 == ptr4.40 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
JumpIfZero(tmp.273, tmp.272) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.274 = 1 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
Jump(tmp.275) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.272) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
Copy tmp.274 = 0 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy tmp.274 = 0, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.275) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
JumpIfZero(tmp.274, tmp.276) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.277 = Load ptr4.40  {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
tmp.278 = tmp.277 == 6.0 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
JumpIfZero(tmp.278, tmp.276) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.279 = 1 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
Jump(tmp.280) {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.276) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
Copy tmp.279 = 0 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.279 = 0, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.280) {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
Return tmp.279 {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.270 = 1, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr4.40 = tmp.266, Copy tmp.279 = 0, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.263 = 5UL, Copy tmp.274 = 0, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.244 = tmp.243, Copy tmp.245 = 11L, Copy tmp.246 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.248 = tmp.247, Copy tmp.249 = 5L, Copy tmp.250 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, Copy ptr1.37 = tmp.252, Copy tmp.253 = tmp.247, Copy tmp.254 = 5L, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, Copy ptr2.38 = tmp.256, Copy tmp.257 = tmp.247, ZeroExtend tmp.258 = 5U, Copy tmp.259 = tmp.258, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy ptr3.39 = tmp.261, Copy tmp.262 = tmp.247, Copy tmp.263 = 5UL, Copy tmp.264 = tmp.263, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, Copy ptr4.40 = tmp.266, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.244 = tmp.243: set(), Copy tmp.245 = 11L: {Copy tmp.244 = tmp.243}, Copy tmp.246 = tmp.245: {Copy tmp.244 = tmp.243, Copy tmp.245 = 11L}, AddPtr tmp.247 = tmp.244 + tmp.246 * 8: {Copy tmp.244 = tmp.243, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, Copy end_ptr.36 = tmp.247: {Copy tmp.244 = tmp.243, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, Copy tmp.248 = end_ptr.36: {Copy end_ptr.36 = tmp.247, Copy tmp.244 = tmp.243, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, Copy tmp.249 = 5L: {Copy tmp.244 = tmp.243, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, Copy tmp.250 = tmp.249: {Copy tmp.244 = tmp.243, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, tmp.251 = -tmp.250: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, AddPtr tmp.252 = tmp.248 + tmp.251 * 8: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, Copy ptr1.37 = tmp.252: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.248 = end_ptr.36, Copy tmp.246 = tmp.245, Copy tmp.245 = 11L}, Copy tmp.253 = end_ptr.36: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.254 = 5L: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, tmp.255 = -tmp.254: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, AddPtr tmp.256 = tmp.253 + tmp.255 * 8: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy ptr2.38 = tmp.256: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.257 = end_ptr.36: {Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, ZeroExtend tmp.258 = 5U: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.259 = tmp.258: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, tmp.260 = -tmp.259: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, AddPtr tmp.261 = tmp.257 + tmp.260 * 8: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy ptr3.39 = tmp.261: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.262 = end_ptr.36: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.263 = 5UL: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.264 = tmp.263: {Copy tmp.257 = end_ptr.36, Copy tmp.244 = tmp.243, Copy tmp.250 = tmp.249, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy ptr2.38 = tmp.256, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy tmp.259 = tmp.258, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.245 = 11L}, tmp.265 = -tmp.264: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, AddPtr tmp.266 = tmp.262 + tmp.265 * 8: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Copy ptr4.40 = tmp.266: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, tmp.267 = ptr1.37 == ptr2.38: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, JumpIfZero(tmp.267, tmp.268): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = ptr1.37 == ptr3.39: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, JumpIfZero(tmp.269, tmp.268): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Jump(tmp.271): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.270 = 1, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.270 = 1, Copy tmp.245 = 11L}
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.270 = 0: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy tmp.270 = 0, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, JumpIfZero(tmp.270, tmp.272): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = ptr1.37 == ptr4.40: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, JumpIfZero(tmp.273, tmp.272): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Jump(tmp.275): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.274 = 1, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.274 = 0: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy tmp.274 = 0, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, JumpIfZero(tmp.274, tmp.276): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load ptr4.40 : {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, tmp.278 = tmp.277 == 6.0: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, JumpIfZero(tmp.278, tmp.276): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Jump(tmp.280): {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.279 = 1, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Copy tmp.279 = 0: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.254 = 5L, Copy tmp.249 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.279 = 0, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}, Return tmp.279: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.244 = tmp.243, Copy tmp.249 = 5L, Copy tmp.254 = 5L, Copy tmp.264 = tmp.263, Copy ptr2.38 = tmp.256, Copy ptr4.40 = tmp.266, Copy tmp.259 = tmp.258, Copy tmp.248 = end_ptr.36, Copy tmp.253 = end_ptr.36, Copy tmp.257 = end_ptr.36, Copy tmp.250 = tmp.249, Copy tmp.246 = tmp.245, Copy ptr1.37 = tmp.252, Copy ptr3.39 = tmp.261, Copy end_ptr.36 = tmp.247, Copy tmp.262 = end_ptr.36, Copy tmp.245 = 11L}
EXIT Exit: EXIT {12}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 12-------------------
Return tmp.279 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.280) {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Copy tmp.279 = 0 {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.276) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 10-------------------
Jump(tmp.280) {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.279 = 1 {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.278, tmp.276) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.278 = tmp.277 == 6.0 {arr.43, index.25, arr.18, flag.41, index.45, tmp.278, index.22, flag.13, index.31, four.42}
tmp.277 = Load tmp.266  {arr.43, four.42, index.25, arr.18, index.45, tmp.277, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.274, tmp.276) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.275) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Copy tmp.274 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
Label(tmp.272) {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 6-------------------
Jump(tmp.275) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
Copy tmp.274 = 1 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.273, tmp.272) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.273 = tmp.252 == tmp.266 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.273, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.270, tmp.272) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.271) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.270 = 0 {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.268) {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.271) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.270 = 1 {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.269, tmp.268) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.269 = tmp.252 == tmp.261 {arr.43, tmp.269, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.267, tmp.268) {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.267 = tmp.252 == tmp.256 {tmp.267, arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Copy ptr4.40 = tmp.266 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.265 = -tmp.263 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, tmp.265, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.264 = tmp.263 {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.263 = 5UL {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.262 = tmp.247 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy ptr3.39 = tmp.261 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
tmp.260 = -tmp.258 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, end_ptr.36, index.22, flag.13, index.31, tmp.260, flag.41}
Copy tmp.259 = tmp.258 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
ZeroExtend tmp.258 = 5U {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.257 = tmp.247 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy ptr2.38 = tmp.256 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
tmp.255 = -5L {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.255, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.254 = 5L {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.253 = tmp.247 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy ptr1.37 = tmp.252 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
tmp.251 = -tmp.249 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, tmp.251, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy tmp.250 = 5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, tmp.249, flag.41}
Copy tmp.249 = 5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, tmp.249, flag.41}
Copy tmp.248 = tmp.247 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
Copy end_ptr.36 = tmp.247 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}
AddPtr tmp.247 = tmp.243 + tmp.245 * 8 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.246 = 11L {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, tmp.245, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.245 = 11L {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, tmp.245, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.244 = tmp.243 {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
tmp.243 = Get Address double_arr.35  {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 80) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 72) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 64) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 56) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 48) = 6.0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 40) = tmp.242  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.242 = 0 {arr.43, tmp.242, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 32) = tmp.241  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.241 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.241, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 24) = tmp.240  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.240 = 0 {arr.43, four.42, index.25, arr.18, tmp.240, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 16) = tmp.239  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.239 = 0 {arr.43, four.42, index.25, arr.18, tmp.239, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 8) = tmp.238  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.238 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, tmp.238, flag.41}
CopyToOffset(double_arr.35 + 0) = tmp.237  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.237 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.237, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.244 = tmp.243 {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.246 = 11L {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, tmp.245, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.248 = tmp.247 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.250 = 5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, tmp.249, flag.41} for node 0
Copy ptr1.37 = tmp.252 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.253 = tmp.247 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.254 = 5L {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy ptr2.38 = tmp.256 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.257 = tmp.247 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.259 = tmp.258 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy ptr3.39 = tmp.261 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.262 = tmp.247 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy tmp.264 = tmp.263 {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41} for node 0
Copy ptr4.40 = tmp.266 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.237, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 0) = tmp.237 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.238 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, tmp.238, flag.41}, CopyToOffset(double_arr.35 + 8) = tmp.238 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.239 = 0: {arr.43, four.42, index.25, arr.18, tmp.239, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 16) = tmp.239 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.240 = 0: {arr.43, four.42, index.25, arr.18, tmp.240, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 24) = tmp.240 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.241 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.241, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 32) = tmp.241 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.242 = 0: {arr.43, tmp.242, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 40) = tmp.242 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 48) = 6.0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 56) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 64) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 72) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 80) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.243 = Get Address double_arr.35 : {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.244 = tmp.243: {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.245 = 11L: {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, tmp.245, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.246 = 11L: {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, tmp.245, index.45, index.22, flag.13, index.31, flag.41}, AddPtr tmp.247 = tmp.243 + tmp.245 * 8: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, Copy end_ptr.36 = tmp.247: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.248 = tmp.247: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.249 = 5L: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, tmp.249, flag.41}, Copy tmp.250 = 5L: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, tmp.249, flag.41}, tmp.251 = -tmp.249: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, tmp.251, index.22, flag.13, index.31, end_ptr.36, flag.41}, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy ptr1.37 = tmp.252: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.253 = tmp.247: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.254 = 5L: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, tmp.255 = -5L: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.255, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy ptr2.38 = tmp.256: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.257 = tmp.247: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, ZeroExtend tmp.258 = 5U: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.259 = tmp.258: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, tmp.260 = -tmp.258: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, end_ptr.36, index.22, flag.13, index.31, tmp.260, flag.41}, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy ptr3.39 = tmp.261: {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.262 = tmp.247: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.263 = 5UL: {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, Copy tmp.264 = tmp.263: {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, end_ptr.36, flag.41}, tmp.265 = -tmp.263: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, index.45, tmp.265, index.22, flag.13, index.31, end_ptr.36, flag.41}, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, Copy ptr4.40 = tmp.266: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, tmp.267 = tmp.252 == tmp.256: {tmp.267, arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.267, tmp.268): {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: {arr.43, tmp.269, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.269, tmp.268): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.271): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.270 = 0: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.270, tmp.272): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.273, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.273, tmp.272): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}, Jump(tmp.275): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.274 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.274, tmp.276): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : {arr.43, four.42, index.25, arr.18, index.45, tmp.277, index.22, flag.13, index.31, flag.41}, tmp.278 = tmp.277 == 6.0: {arr.43, index.25, arr.18, flag.41, index.45, tmp.278, index.22, flag.13, index.31, four.42}, JumpIfZero(tmp.278, tmp.276): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.280): {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.279 = 0: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.279: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {12}
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.35}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268), tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279]
NEW LIST [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268), tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_zeroExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.237 = 0
tmp.269 = tmp.252 == tmp.261
Copy tmp.270 = 1
Label(tmp.268)
Label(tmp.271)
tmp.273 = tmp.252 == tmp.266
Copy tmp.274 = 1
Label(tmp.272)
Label(tmp.275)
tmp.277 = Load tmp.266 
Copy tmp.279 = 1
Label(tmp.276)
Label(tmp.280)




















ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.245 = 11L: set(), AddPtr tmp.247 = tmp.243 + tmp.245 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.249 = 5L: set(), tmp.251 = -tmp.249: set(), AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.245 = 11L: set(), AddPtr tmp.247 = tmp.243 + tmp.245 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.249 = 5L: set(), tmp.251 = -tmp.249: set(), AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.245 = 11L: set(), AddPtr tmp.247 = tmp.243 + tmp.245 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.249 = 5L: set(), tmp.251 = -tmp.249: set(), AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + tmp.245 * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -tmp.249, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.245 = 11L: set(), AddPtr tmp.247 = tmp.243 + tmp.245 * 8: set(), Copy end_ptr.36 = tmp.247: set(), Copy tmp.249 = 5L: set(), tmp.251 = -tmp.249: set(), AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------IMAP for block 0-------------------
IntToDouble tmp.237 = 0 set()
CopyToOffset(double_arr.35 + 0) = tmp.237  set()
IntToDouble tmp.238 = 0 set()
CopyToOffset(double_arr.35 + 8) = tmp.238  set()
IntToDouble tmp.239 = 0 set()
CopyToOffset(double_arr.35 + 16) = tmp.239  set()
IntToDouble tmp.240 = 0 set()
CopyToOffset(double_arr.35 + 24) = tmp.240  set()
IntToDouble tmp.241 = 0 set()
CopyToOffset(double_arr.35 + 32) = tmp.241  set()
IntToDouble tmp.242 = 0 set()
CopyToOffset(double_arr.35 + 40) = tmp.242  set()
CopyToOffset(double_arr.35 + 48) = 6.0  set()
CopyToOffset(double_arr.35 + 56) = 0  set()
CopyToOffset(double_arr.35 + 64) = 0  set()
CopyToOffset(double_arr.35 + 72) = 0  set()
CopyToOffset(double_arr.35 + 80) = 0  set()
tmp.243 = Get Address double_arr.35  set()
Copy tmp.245 = 11L set()
<class 'parser.ConstLong'>
AddPtr tmp.247 = tmp.243 + tmp.245 * 8 {Copy tmp.245 = 11L}
Copy end_ptr.36 = tmp.247 {Copy tmp.245 = 11L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.249 = 5L {Copy end_ptr.36 = tmp.247, Copy tmp.245 = 11L}
<class 'parser.ConstLong'>
tmp.251 = -tmp.249 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
tmp.255 = -5L {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ZeroExtend tmp.258 = 5U {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
tmp.260 = -tmp.258 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
Copy tmp.263 = 5UL {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstULong'>
<class 'parser.ULongType'>
<class 'parser.LongType'>
tmp.265 = -tmp.263 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
tmp.267 = tmp.252 == tmp.256 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
JumpIfZero(tmp.267, tmp.268) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.269 = tmp.252 == tmp.261 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
JumpIfZero(tmp.269, tmp.268) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.270 = 1 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
Jump(tmp.271) {Copy tmp.270 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.270 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.268) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
Copy tmp.270 = 0 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.270 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.271) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
JumpIfZero(tmp.270, tmp.272) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.273 = tmp.252 == tmp.266 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
JumpIfZero(tmp.273, tmp.272) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.274 = 1 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
Jump(tmp.275) {Copy tmp.274 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.274 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.272) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
Copy tmp.274 = 0 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.275) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
JumpIfZero(tmp.274, tmp.276) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.277 = Load tmp.266  {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
tmp.278 = tmp.277 == 6.0 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
JumpIfZero(tmp.278, tmp.276) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.279 = 1 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
Jump(tmp.280) {Copy tmp.279 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.279 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.276) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
Copy tmp.279 = 0 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy tmp.279 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.280) {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
Return tmp.279 {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
OLD ANNOT: {Copy tmp.249 = 5L, Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1, Copy tmp.245 = 11L}
NEW ANNOT: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , Copy tmp.245 = 11L, AddPtr tmp.247 = tmp.243 + 11L * 8, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), Copy tmp.245 = 11L: set(), AddPtr tmp.247 = tmp.243 + tmp.245 * 8: {Copy tmp.245 = 11L}, Copy end_ptr.36 = tmp.247: {Copy tmp.245 = 11L}, Copy tmp.249 = 5L: {Copy end_ptr.36 = tmp.247, Copy tmp.245 = 11L}, tmp.251 = -tmp.249: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, AddPtr tmp.252 = end_ptr.36 + tmp.251 * 8: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, tmp.255 = -5L: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, AddPtr tmp.256 = end_ptr.36 + tmp.255 * 8: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, ZeroExtend tmp.258 = 5U: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, tmp.260 = -tmp.258: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, AddPtr tmp.261 = end_ptr.36 + tmp.260 * 8: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Copy tmp.263 = 5UL: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, tmp.265 = -tmp.263: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, AddPtr tmp.266 = end_ptr.36 + tmp.265 * 8: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, tmp.267 = tmp.252 == tmp.256: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, JumpIfZero(tmp.267, tmp.268): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, JumpIfZero(tmp.269, tmp.268): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Jump(tmp.271): {Copy tmp.270 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.270 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Copy tmp.270 = 0: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.270 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, JumpIfZero(tmp.270, tmp.272): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, JumpIfZero(tmp.273, tmp.272): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Jump(tmp.275): {Copy tmp.274 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.274 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Copy tmp.274 = 0: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.274 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, JumpIfZero(tmp.274, tmp.276): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, tmp.278 = tmp.277 == 6.0: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, JumpIfZero(tmp.278, tmp.276): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Jump(tmp.280): {Copy tmp.279 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.279 = 1, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Copy tmp.279 = 0: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy tmp.279 = 0, Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}, Return tmp.279: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}} ReachingCopies: {Copy end_ptr.36 = tmp.247, Copy tmp.249 = 5L, Copy tmp.245 = 11L}
EXIT Exit: EXIT {12}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 12-------------------
Return tmp.279 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.280) {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Copy tmp.279 = 0 {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.276) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 10-------------------
Jump(tmp.280) {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.279 = 1 {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.278, tmp.276) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.278 = tmp.277 == 6.0 {arr.43, index.25, arr.18, flag.41, index.45, tmp.278, index.22, flag.13, index.31, four.42}
tmp.277 = Load tmp.266  {arr.43, four.42, index.25, arr.18, index.45, tmp.277, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.274, tmp.276) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.275) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Copy tmp.274 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
Label(tmp.272) {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 6-------------------
Jump(tmp.275) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
Copy tmp.274 = 1 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.273, tmp.272) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.273 = tmp.252 == tmp.266 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.273, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.270, tmp.272) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.271) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.270 = 0 {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.268) {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.271) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.270 = 1 {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.269, tmp.268) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.269 = tmp.252 == tmp.261 {arr.43, tmp.269, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.267, tmp.268) {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.267 = tmp.252 == tmp.256 {tmp.267, arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.266 = tmp.247 + tmp.265 * 8 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.265 = -tmp.263 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, tmp.265, index.22, flag.13, index.31, flag.41}
Copy tmp.263 = 5UL {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.261 = tmp.247 + tmp.260 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}
tmp.260 = -tmp.258 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, tmp.260, flag.41}
ZeroExtend tmp.258 = 5U {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.256 = tmp.247 + tmp.255 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}
tmp.255 = -5L {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.255, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.252 = tmp.247 + tmp.251 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
tmp.251 = -5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, tmp.251, index.22, flag.13, index.31, flag.41}
Copy tmp.249 = 5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
Copy end_ptr.36 = tmp.247 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.247 = tmp.243 + 11L * 8 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.245 = 11L {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
tmp.243 = Get Address double_arr.35  {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 80) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 72) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 64) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 56) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 48) = 6.0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 40) = tmp.242  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.242 = 0 {arr.43, tmp.242, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 32) = tmp.241  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.241 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.241, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 24) = tmp.240  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.240 = 0 {arr.43, four.42, index.25, arr.18, tmp.240, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 16) = tmp.239  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.239 = 0 {arr.43, four.42, index.25, arr.18, tmp.239, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 8) = tmp.238  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.238 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, tmp.238, flag.41}
CopyToOffset(double_arr.35 + 0) = tmp.237  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.237 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.237, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.245 = 11L {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy end_ptr.36 = tmp.247 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.249 = 5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.237, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 0) = tmp.237 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.238 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, tmp.238, flag.41}, CopyToOffset(double_arr.35 + 8) = tmp.238 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.239 = 0: {arr.43, four.42, index.25, arr.18, tmp.239, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 16) = tmp.239 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.240 = 0: {arr.43, four.42, index.25, arr.18, tmp.240, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 24) = tmp.240 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.241 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.241, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 32) = tmp.241 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.242 = 0: {arr.43, tmp.242, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 40) = tmp.242 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 48) = 6.0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 56) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 64) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 72) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 80) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.243 = Get Address double_arr.35 : {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.245 = 11L: {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, AddPtr tmp.247 = tmp.243 + 11L * 8: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, Copy end_ptr.36 = tmp.247: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.249 = 5L: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.251 = -5L: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, tmp.251, index.22, flag.13, index.31, flag.41}, AddPtr tmp.252 = tmp.247 + tmp.251 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.255 = -5L: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.255, index.45, index.22, flag.13, index.31, flag.41}, AddPtr tmp.256 = tmp.247 + tmp.255 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}, ZeroExtend tmp.258 = 5U: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, flag.41}, tmp.260 = -tmp.258: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, tmp.260, flag.41}, AddPtr tmp.261 = tmp.247 + tmp.260 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.263 = 5UL: {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}, tmp.265 = -tmp.263: {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, tmp.265, index.22, flag.13, index.31, flag.41}, AddPtr tmp.266 = tmp.247 + tmp.265 * 8: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, tmp.267 = tmp.252 == tmp.256: {tmp.267, arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.267, tmp.268): {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: {arr.43, tmp.269, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.269, tmp.268): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.271): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.270 = 0: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.270, tmp.272): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.273, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.273, tmp.272): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}, Jump(tmp.275): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.274 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.274, tmp.276): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : {arr.43, four.42, index.25, arr.18, index.45, tmp.277, index.22, flag.13, index.31, flag.41}, tmp.278 = tmp.277 == 6.0: {arr.43, index.25, arr.18, flag.41, index.45, tmp.278, index.22, flag.13, index.31, four.42}, JumpIfZero(tmp.278, tmp.276): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.280): {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.279 = 0: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.279: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {12}
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.35}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268), tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279]
NEW LIST [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268), tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279]
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_zeroExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
IntToDouble tmp.237 = 0
tmp.269 = tmp.252 == tmp.261
Copy tmp.270 = 1
Label(tmp.268)
Label(tmp.271)
tmp.273 = tmp.252 == tmp.266
Copy tmp.274 = 1
Label(tmp.272)
Label(tmp.275)
tmp.277 = Load tmp.266 
Copy tmp.279 = 1
Label(tmp.276)
Label(tmp.280)




















ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), AddPtr tmp.247 = tmp.243 + 11L * 8: set(), tmp.251 = -5L: set(), AddPtr tmp.252 = tmp.247 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = tmp.247 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = tmp.247 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = tmp.247 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), AddPtr tmp.247 = tmp.243 + 11L * 8: set(), tmp.251 = -5L: set(), AddPtr tmp.252 = tmp.247 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = tmp.247 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = tmp.247 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = tmp.247 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), AddPtr tmp.247 = tmp.243 + 11L * 8: set(), tmp.251 = -5L: set(), AddPtr tmp.252 = tmp.247 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = tmp.247 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = tmp.247 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = tmp.247 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), AddPtr tmp.247 = tmp.243 + 11L * 8: set(), tmp.251 = -5L: set(), AddPtr tmp.252 = tmp.247 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = tmp.247 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = tmp.247 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = tmp.247 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): set()} ReachingCopies: set()
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): set()} ReachingCopies: set()
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): set()} ReachingCopies: set()
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------IMAP for block 0-------------------
IntToDouble tmp.237 = 0 set()
CopyToOffset(double_arr.35 + 0) = tmp.237  set()
IntToDouble tmp.238 = 0 set()
CopyToOffset(double_arr.35 + 8) = tmp.238  set()
IntToDouble tmp.239 = 0 set()
CopyToOffset(double_arr.35 + 16) = tmp.239  set()
IntToDouble tmp.240 = 0 set()
CopyToOffset(double_arr.35 + 24) = tmp.240  set()
IntToDouble tmp.241 = 0 set()
CopyToOffset(double_arr.35 + 32) = tmp.241  set()
IntToDouble tmp.242 = 0 set()
CopyToOffset(double_arr.35 + 40) = tmp.242  set()
CopyToOffset(double_arr.35 + 48) = 6.0  set()
CopyToOffset(double_arr.35 + 56) = 0  set()
CopyToOffset(double_arr.35 + 64) = 0  set()
CopyToOffset(double_arr.35 + 72) = 0  set()
CopyToOffset(double_arr.35 + 80) = 0  set()
tmp.243 = Get Address double_arr.35  set()
AddPtr tmp.247 = tmp.243 + 11L * 8 set()
tmp.251 = -5L set()
AddPtr tmp.252 = tmp.247 + tmp.251 * 8 set()
tmp.255 = -5L set()
AddPtr tmp.256 = tmp.247 + tmp.255 * 8 set()
ZeroExtend tmp.258 = 5U set()
tmp.260 = -tmp.258 set()
AddPtr tmp.261 = tmp.247 + tmp.260 * 8 set()
Copy tmp.263 = 5UL set()
<class 'parser.ConstULong'>
<class 'parser.ULongType'>
<class 'parser.LongType'>
tmp.265 = -tmp.263 set()
AddPtr tmp.266 = tmp.247 + tmp.265 * 8 set()
tmp.267 = tmp.252 == tmp.256 set()
JumpIfZero(tmp.267, tmp.268) set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.269 = tmp.252 == tmp.261 set()
JumpIfZero(tmp.269, tmp.268) set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.270 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.271) {Copy tmp.270 = 1}
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: {Copy tmp.270 = 1}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.268) set()
Copy tmp.270 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: {Copy tmp.270 = 0}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.271) set()
JumpIfZero(tmp.270, tmp.272) set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.273 = tmp.252 == tmp.266 set()
JumpIfZero(tmp.273, tmp.272) set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.274 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.275) {Copy tmp.274 = 1}
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: {Copy tmp.274 = 1}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.272) set()
Copy tmp.274 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: {Copy tmp.274 = 0}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.275) set()
JumpIfZero(tmp.274, tmp.276) set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.277 = Load tmp.266  set()
tmp.278 = tmp.277 == 6.0 set()
JumpIfZero(tmp.278, tmp.276) set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.279 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.280) {Copy tmp.279 = 1}
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: {Copy tmp.279 = 1}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.276) set()
Copy tmp.279 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: {Copy tmp.279 = 0}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.280) set()
Return tmp.279 set()
OLD ANNOT: {Copy tmp.263 = 5UL, Copy tmp.279 = 1, Copy tmp.270 = 0, Copy tmp.274 = 0, Copy tmp.274 = 1, Copy tmp.279 = 0, Copy tmp.270 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: set(), CopyToOffset(double_arr.35 + 0) = tmp.237 : set(), IntToDouble tmp.238 = 0: set(), CopyToOffset(double_arr.35 + 8) = tmp.238 : set(), IntToDouble tmp.239 = 0: set(), CopyToOffset(double_arr.35 + 16) = tmp.239 : set(), IntToDouble tmp.240 = 0: set(), CopyToOffset(double_arr.35 + 24) = tmp.240 : set(), IntToDouble tmp.241 = 0: set(), CopyToOffset(double_arr.35 + 32) = tmp.241 : set(), IntToDouble tmp.242 = 0: set(), CopyToOffset(double_arr.35 + 40) = tmp.242 : set(), CopyToOffset(double_arr.35 + 48) = 6.0 : set(), CopyToOffset(double_arr.35 + 56) = 0 : set(), CopyToOffset(double_arr.35 + 64) = 0 : set(), CopyToOffset(double_arr.35 + 72) = 0 : set(), CopyToOffset(double_arr.35 + 80) = 0 : set(), tmp.243 = Get Address double_arr.35 : set(), AddPtr tmp.247 = tmp.243 + 11L * 8: set(), tmp.251 = -5L: set(), AddPtr tmp.252 = tmp.247 + tmp.251 * 8: set(), tmp.255 = -5L: set(), AddPtr tmp.256 = tmp.247 + tmp.255 * 8: set(), ZeroExtend tmp.258 = 5U: set(), tmp.260 = -tmp.258: set(), AddPtr tmp.261 = tmp.247 + tmp.260 * 8: set(), Copy tmp.263 = 5UL: set(), tmp.265 = -tmp.263: set(), AddPtr tmp.266 = tmp.247 + tmp.265 * 8: set(), tmp.267 = tmp.252 == tmp.256: set(), JumpIfZero(tmp.267, tmp.268): set()} ReachingCopies: set()
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: set(), JumpIfZero(tmp.269, tmp.268): set()} ReachingCopies: set()
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: set(), Jump(tmp.271): {Copy tmp.270 = 1}} ReachingCopies: {Copy tmp.270 = 1}
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): set(), Copy tmp.270 = 0: set()} ReachingCopies: {Copy tmp.270 = 0}
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): set(), JumpIfZero(tmp.270, tmp.272): set()} ReachingCopies: set()
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: set(), JumpIfZero(tmp.273, tmp.272): set()} ReachingCopies: set()
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: set(), Jump(tmp.275): {Copy tmp.274 = 1}} ReachingCopies: {Copy tmp.274 = 1}
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): set(), Copy tmp.274 = 0: set()} ReachingCopies: {Copy tmp.274 = 0}
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): set(), JumpIfZero(tmp.274, tmp.276): set()} ReachingCopies: set()
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : set(), tmp.278 = tmp.277 == 6.0: set(), JumpIfZero(tmp.278, tmp.276): set()} ReachingCopies: set()
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: set(), Jump(tmp.280): {Copy tmp.279 = 1}} ReachingCopies: {Copy tmp.279 = 1}
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): set(), Copy tmp.279 = 0: set()} ReachingCopies: {Copy tmp.279 = 0}
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): set(), Return tmp.279: set()} ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 12-------------------
Return tmp.279 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.280) {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Copy tmp.279 = 0 {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.276) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 10-------------------
Jump(tmp.280) {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.279 = 1 {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.278, tmp.276) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.278 = tmp.277 == 6.0 {arr.43, index.25, arr.18, flag.41, index.45, tmp.278, index.22, flag.13, index.31, four.42}
tmp.277 = Load tmp.266  {arr.43, four.42, index.25, arr.18, index.45, tmp.277, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.274, tmp.276) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.275) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Copy tmp.274 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
Label(tmp.272) {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 6-------------------
Jump(tmp.275) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
Copy tmp.274 = 1 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.273, tmp.272) {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.273 = tmp.252 == tmp.266 {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.273, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.270, tmp.272) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.271) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Copy tmp.270 = 0 {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.268) {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Jump(tmp.271) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.270 = 1 {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.269, tmp.268) {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.269 = tmp.252 == tmp.261 {arr.43, tmp.269, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.267, tmp.268) {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.267 = tmp.252 == tmp.256 {tmp.267, arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.266 = tmp.247 + tmp.265 * 8 {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
tmp.265 = -tmp.263 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, tmp.265, index.22, flag.13, index.31, flag.41}
Copy tmp.263 = 5UL {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.261 = tmp.247 + tmp.260 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}
tmp.260 = -tmp.258 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, tmp.260, flag.41}
ZeroExtend tmp.258 = 5U {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.256 = tmp.247 + tmp.255 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}
tmp.255 = -5L {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.255, index.45, index.22, flag.13, index.31, flag.41}
AddPtr tmp.252 = tmp.247 + tmp.251 * 8 {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
tmp.251 = -5L {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, tmp.251, index.22, flag.13, index.31, flag.41}
AddPtr tmp.247 = tmp.243 + 11L * 8 {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
tmp.243 = Get Address double_arr.35  {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 80) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 72) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 64) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 56) = 0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 48) = 6.0  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 40) = tmp.242  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.242 = 0 {arr.43, tmp.242, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 32) = tmp.241  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.241 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.241, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 24) = tmp.240  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.240 = 0 {arr.43, four.42, index.25, arr.18, tmp.240, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 16) = tmp.239  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.239 = 0 {arr.43, four.42, index.25, arr.18, tmp.239, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
CopyToOffset(double_arr.35 + 8) = tmp.238  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.238 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, tmp.238, flag.41}
CopyToOffset(double_arr.35 + 0) = tmp.237  {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
IntToDouble tmp.237 = 0 {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.237, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: {IntToDouble tmp.237 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.237, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 0) = tmp.237 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.238 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, tmp.238, flag.41}, CopyToOffset(double_arr.35 + 8) = tmp.238 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.239 = 0: {arr.43, four.42, index.25, arr.18, tmp.239, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 16) = tmp.239 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.240 = 0: {arr.43, four.42, index.25, arr.18, tmp.240, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 24) = tmp.240 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.241 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, tmp.241, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 32) = tmp.241 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, IntToDouble tmp.242 = 0: {arr.43, tmp.242, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 40) = tmp.242 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 48) = 6.0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 56) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 64) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 72) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, CopyToOffset(double_arr.35 + 80) = 0 : {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.243 = Get Address double_arr.35 : {tmp.243, arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, AddPtr tmp.247 = tmp.243 + 11L * 8: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.251 = -5L: {arr.43, four.42, index.25, tmp.247, arr.18, double_arr.35, index.45, tmp.251, index.22, flag.13, index.31, flag.41}, AddPtr tmp.252 = tmp.247 + tmp.251 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}, tmp.255 = -5L: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.255, index.45, index.22, flag.13, index.31, flag.41}, AddPtr tmp.256 = tmp.247 + tmp.255 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}, ZeroExtend tmp.258 = 5U: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, tmp.258, index.45, index.22, flag.13, index.31, flag.41}, tmp.260 = -tmp.258: {arr.43, four.42, tmp.252, index.25, tmp.247, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, tmp.260, flag.41}, AddPtr tmp.261 = tmp.247 + tmp.260 * 8: {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.263 = 5UL: {arr.43, tmp.263, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, index.22, flag.13, index.31, flag.41}, tmp.265 = -tmp.263: {arr.43, four.42, tmp.252, index.25, tmp.247, tmp.261, arr.18, double_arr.35, tmp.256, index.45, tmp.265, index.22, flag.13, index.31, flag.41}, AddPtr tmp.266 = tmp.247 + tmp.265 * 8: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.256, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, tmp.267 = tmp.252 == tmp.256: {tmp.267, arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.267, tmp.268): {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268)] Pred: {0} Suc: {2, 3} iMap: {tmp.269 = tmp.252 == tmp.261: {arr.43, tmp.269, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.269, tmp.268): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, tmp.261, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Copy tmp.270 = 1, Jump(tmp.271)] Pred: {1} Suc: {4} iMap: {Copy tmp.270 = 1: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.271): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
3 3: [Label(tmp.268), Copy tmp.270 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.268): {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.270 = 0: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, tmp.252, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
4 4: [Label(tmp.271), JumpIfZero(tmp.270, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.271): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.270, tmp.272): {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, tmp.270, index.45, index.22, flag.13, index.31, flag.41}
5 5: [tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272)] Pred: {4} Suc: {6, 7} iMap: {tmp.273 = tmp.252 == tmp.266: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.273, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.273, tmp.272): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, tmp.252, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
6 6: [Copy tmp.274 = 1, Jump(tmp.275)] Pred: {5} Suc: {8} iMap: {Copy tmp.274 = 1: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}, Jump(tmp.275): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
7 7: [Label(tmp.272), Copy tmp.274 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.272): {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.274 = 0: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, four.42}
8 8: [Label(tmp.275), JumpIfZero(tmp.274, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.275): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.274, tmp.276): {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, tmp.274, index.22, flag.13, index.31, flag.41}
9 9: [tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276)] Pred: {8} Suc: {10, 11} iMap: {tmp.277 = Load tmp.266 : {arr.43, four.42, index.25, arr.18, index.45, tmp.277, index.22, flag.13, index.31, flag.41}, tmp.278 = tmp.277 == 6.0: {arr.43, index.25, arr.18, flag.41, index.45, tmp.278, index.22, flag.13, index.31, four.42}, JumpIfZero(tmp.278, tmp.276): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, double_arr.35, tmp.266, index.45, index.22, flag.13, index.31, flag.41}
10 10: [Copy tmp.279 = 1, Jump(tmp.280)] Pred: {9} Suc: {12} iMap: {Copy tmp.279 = 1: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}, Jump(tmp.280): {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
11 11: [Label(tmp.276), Copy tmp.279 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.276): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.279 = 0: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
12 12: [Label(tmp.280), Return tmp.279] Pred: {10, 11} Suc: {EXIT} iMap: {Label(tmp.280): {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.279: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, tmp.279, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {12}
OPTIMIZING FUNCTION Function: test_subtract_complex_expressions ([]) instructions:[Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282), tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292, Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, CopyToOffset(ptr.44 + 0) = tmp.299 , tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{arr.43, four.42, flag.41}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282), tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292, Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, CopyToOffset(ptr.44 + 0) = tmp.299 , tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301, Return 0]
NEW LIST [Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282), tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292, Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, Copy ptr.44 = tmp.299, tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301, Return 0]
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
Copy tmp.281 = flag.41
tmp.283 = Get Address arr.43 
Label(tmp.282)
Label(tmp.288)
Return 0







ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy tmp.281 = flag.41: set(), JumpIfZero(tmp.281, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), Copy tmp.284 = tmp.283: set(), tmp.285 = get_elem1_ptr([tmp.284]): set(), Copy tmp.286 = tmp.285: set(), Copy tmp.287 = tmp.286: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), Copy tmp.290 = tmp.289: set(), tmp.291 = get_elem2_ptr([tmp.290]): set(), Copy tmp.292 = tmp.291: set(), Copy tmp.287 = tmp.292: set()} ReachingCopies: set()
3 3: [Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, Copy ptr.44 = tmp.299, tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), Copy tmp.293 = tmp.287: set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), Copy tmp.297 = tmp.296: set(), tmp.298 = -tmp.297: set(), AddPtr tmp.299 = tmp.293 + tmp.298 * 4: set(), Copy ptr.44 = tmp.299: set(), tmp.300 = Load ptr.44 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
4 4: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {3, 4}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy tmp.281 = flag.41: set(), JumpIfZero(tmp.281, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), Copy tmp.284 = tmp.283: set(), tmp.285 = get_elem1_ptr([tmp.284]): set(), Copy tmp.286 = tmp.285: set(), Copy tmp.287 = tmp.286: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), Copy tmp.290 = tmp.289: set(), tmp.291 = get_elem2_ptr([tmp.290]): set(), Copy tmp.292 = tmp.291: set(), Copy tmp.287 = tmp.292: set()} ReachingCopies: set()
3 3: [Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, Copy ptr.44 = tmp.299, tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), Copy tmp.293 = tmp.287: set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), Copy tmp.297 = tmp.296: set(), tmp.298 = -tmp.297: set(), AddPtr tmp.299 = tmp.293 + tmp.298 * 4: set(), Copy ptr.44 = tmp.299: set(), tmp.300 = Load ptr.44 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy tmp.281 = flag.41: set(), JumpIfZero(tmp.281, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), Copy tmp.284 = tmp.283: set(), tmp.285 = get_elem1_ptr([tmp.284]): set(), Copy tmp.286 = tmp.285: set(), Copy tmp.287 = tmp.286: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), Copy tmp.290 = tmp.289: set(), tmp.291 = get_elem2_ptr([tmp.290]): set(), Copy tmp.292 = tmp.291: set(), Copy tmp.287 = tmp.292: set()} ReachingCopies: set()
3 3: [Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, Copy ptr.44 = tmp.299, tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), Copy tmp.293 = tmp.287: set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), Copy tmp.297 = tmp.296: set(), tmp.298 = -tmp.297: set(), AddPtr tmp.299 = tmp.293 + tmp.298 * 4: set(), Copy ptr.44 = tmp.299: set(), tmp.300 = Load ptr.44 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.281 = flag.41, JumpIfZero(tmp.281, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy tmp.281 = flag.41: set(), JumpIfZero(tmp.281, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.284]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), Copy tmp.284 = tmp.283: set(), tmp.285 = get_elem1_ptr([tmp.284]): set(), Copy tmp.286 = tmp.285: set(), Copy tmp.287 = tmp.286: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.290]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), Copy tmp.290 = tmp.289: set(), tmp.291 = get_elem2_ptr([tmp.290]): set(), Copy tmp.292 = tmp.291: set(), Copy tmp.287 = tmp.292: set()} ReachingCopies: set()
3 3: [Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.297, AddPtr tmp.299 = tmp.293 + tmp.298 * 4, Copy ptr.44 = tmp.299, tmp.300 = Load ptr.44 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), Copy tmp.293 = tmp.287: set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), Copy tmp.297 = tmp.296: set(), tmp.298 = -tmp.297: set(), AddPtr tmp.299 = tmp.293 + tmp.298 * 4: set(), Copy ptr.44 = tmp.299: set(), tmp.300 = Load ptr.44 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
--------------IMAP for block 0-------------------
Copy tmp.281 = flag.41 set()
JumpIfZero(tmp.281, tmp.282) {Copy tmp.281 = flag.41}
OLD ANNOT: {Copy tmp.293 = tmp.287, Copy tmp.286 = tmp.285, Copy tmp.297 = tmp.296, Copy ptr.44 = tmp.299, Copy tmp.281 = flag.41, Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.286, Copy tmp.287 = tmp.292, Copy tmp.284 = tmp.283}
NEW ANNOT: {Copy tmp.281 = flag.41}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.283 = Get Address arr.43  {Copy tmp.281 = flag.41}
Copy tmp.284 = tmp.283 {Copy tmp.281 = flag.41}
tmp.285 = get_elem1_ptr([tmp.284]) {Copy tmp.284 = tmp.283, Copy tmp.281 = flag.41}
Copy tmp.286 = tmp.285 {Copy tmp.284 = tmp.283}
Copy tmp.287 = tmp.286 {Copy tmp.284 = tmp.283, Copy tmp.286 = tmp.285}
Jump(tmp.288) {Copy tmp.284 = tmp.283, Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286}
OLD ANNOT: {Copy tmp.293 = tmp.287, Copy tmp.286 = tmp.285, Copy tmp.297 = tmp.296, Copy ptr.44 = tmp.299, Copy tmp.281 = flag.41, Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.286, Copy tmp.287 = tmp.292, Copy tmp.284 = tmp.283}
NEW ANNOT: {Copy tmp.284 = tmp.283, Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.282) {Copy tmp.281 = flag.41}
tmp.289 = Get Address arr.43  {Copy tmp.281 = flag.41}
Copy tmp.290 = tmp.289 {Copy tmp.281 = flag.41}
tmp.291 = get_elem2_ptr([tmp.290]) {Copy tmp.290 = tmp.289, Copy tmp.281 = flag.41}
Copy tmp.292 = tmp.291 {Copy tmp.290 = tmp.289}
Copy tmp.287 = tmp.292 {Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291}
OLD ANNOT: {Copy tmp.293 = tmp.287, Copy tmp.286 = tmp.285, Copy tmp.297 = tmp.296, Copy ptr.44 = tmp.299, Copy tmp.281 = flag.41, Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.286, Copy tmp.287 = tmp.292, Copy tmp.284 = tmp.283}
NEW ANNOT: {Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.288) set()
Copy tmp.293 = tmp.287 set()
tmp.294 = -2 {Copy tmp.293 = tmp.287}
tmp.295 = four.42 / tmp.294 {Copy tmp.293 = tmp.287}
SignExtend tmp.296 = tmp.295 {Copy tmp.293 = tmp.287}
Copy tmp.297 = tmp.296 {Copy tmp.293 = tmp.287}
tmp.298 = -tmp.297 {Copy tmp.293 = tmp.287, Copy tmp.297 = tmp.296}
AddPtr tmp.299 = tmp.293 + tmp.298 * 4 {Copy tmp.293 = tmp.287, Copy tmp.297 = tmp.296}
Copy ptr.44 = tmp.299 {Copy tmp.293 = tmp.287, Copy tmp.297 = tmp.296}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.300 = Load ptr.44  {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}
tmp.301 = tmp.300 == 4 {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}
Return tmp.301 {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}
OLD ANNOT: {Copy tmp.293 = tmp.287, Copy tmp.286 = tmp.285, Copy tmp.297 = tmp.296, Copy ptr.44 = tmp.299, Copy tmp.281 = flag.41, Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.286, Copy tmp.287 = tmp.292, Copy tmp.284 = tmp.283}
NEW ANNOT: {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [Copy tmp.281 = flag.41, JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy tmp.281 = flag.41: set(), JumpIfZero(tmp.281, tmp.282): {Copy tmp.281 = flag.41}} ReachingCopies: {Copy tmp.281 = flag.41}
1 1: [tmp.283 = Get Address arr.43 , Copy tmp.284 = tmp.283, tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : {Copy tmp.281 = flag.41}, Copy tmp.284 = tmp.283: {Copy tmp.281 = flag.41}, tmp.285 = get_elem1_ptr([tmp.284]): {Copy tmp.284 = tmp.283, Copy tmp.281 = flag.41}, Copy tmp.286 = tmp.285: {Copy tmp.284 = tmp.283}, Copy tmp.287 = tmp.286: {Copy tmp.284 = tmp.283, Copy tmp.286 = tmp.285}, Jump(tmp.288): {Copy tmp.284 = tmp.283, Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286}} ReachingCopies: {Copy tmp.284 = tmp.283, Copy tmp.286 = tmp.285, Copy tmp.287 = tmp.286}
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , Copy tmp.290 = tmp.289, tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): {Copy tmp.281 = flag.41}, tmp.289 = Get Address arr.43 : {Copy tmp.281 = flag.41}, Copy tmp.290 = tmp.289: {Copy tmp.281 = flag.41}, tmp.291 = get_elem2_ptr([tmp.290]): {Copy tmp.290 = tmp.289, Copy tmp.281 = flag.41}, Copy tmp.292 = tmp.291: {Copy tmp.290 = tmp.289}, Copy tmp.287 = tmp.292: {Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291}} ReachingCopies: {Copy tmp.290 = tmp.289, Copy tmp.292 = tmp.291, Copy tmp.287 = tmp.292}
3 3: [Label(tmp.288), Copy tmp.293 = tmp.287, tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, Copy tmp.297 = tmp.296, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, Copy ptr.44 = tmp.299, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), Copy tmp.293 = tmp.287: set(), tmp.294 = -2: {Copy tmp.293 = tmp.287}, tmp.295 = four.42 / tmp.294: {Copy tmp.293 = tmp.287}, SignExtend tmp.296 = tmp.295: {Copy tmp.293 = tmp.287}, Copy tmp.297 = tmp.296: {Copy tmp.293 = tmp.287}, tmp.298 = -tmp.297: {Copy tmp.293 = tmp.287, Copy tmp.297 = tmp.296}, AddPtr tmp.299 = tmp.293 + tmp.298 * 4: {Copy tmp.293 = tmp.287, Copy tmp.297 = tmp.296}, Copy ptr.44 = tmp.299: {Copy tmp.293 = tmp.287, Copy tmp.297 = tmp.296}, tmp.300 = Load ptr.44 : {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}, tmp.301 = tmp.300 == 4: {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}, Return tmp.301: {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}} ReachingCopies: {Copy tmp.293 = tmp.287, Copy ptr.44 = tmp.299, Copy tmp.297 = tmp.296}
EXIT Exit: EXIT {3}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 3-------------------
Return tmp.301 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.301 = tmp.300 == 4 {four.42, arr.43, index.25, arr.18, index.45, tmp.301, index.22, flag.13, index.31, flag.41}
tmp.300 = Load tmp.299  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.300, four.42}
Copy ptr.44 = tmp.299 {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42}
AddPtr tmp.299 = tmp.287 + tmp.298 * 4 {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42}
tmp.298 = -tmp.296 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.298, four.42}
Copy tmp.297 = tmp.296 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42}
SignExtend tmp.296 = tmp.295 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42}
tmp.295 = four.42 / tmp.294 {tmp.287, arr.43, tmp.295, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.294 = -2 {tmp.287, arr.43, index.25, arr.18, tmp.294, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.293 = tmp.287 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.288) {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Copy tmp.287 = tmp.291 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.292 = tmp.291 {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.291 = get_elem2_ptr([tmp.289]) {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41}
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.290 = tmp.289 {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41}
tmp.289 = Get Address arr.43  {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41}
Label(tmp.282) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Jump(tmp.288) {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.287 = tmp.285 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.286 = tmp.285 {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.285 = get_elem1_ptr([tmp.283]) {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41}
<class 'tacGenerator.TAC_VariableValue'>
Copy tmp.284 = tmp.283 {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.283 = Get Address arr.43  {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(flag.41, tmp.282) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.281 = flag.41 {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.281 = flag.41 {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.284 = tmp.283 {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 1
Copy tmp.286 = tmp.285 {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 1
Copy tmp.290 = tmp.289 {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41} for node 2
Copy tmp.292 = tmp.291 {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 2
Copy tmp.293 = tmp.287 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42} for node 3
Copy tmp.297 = tmp.296 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42} for node 3
Copy ptr.44 = tmp.299 {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42} for node 3
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {Copy tmp.281 = flag.41: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(flag.41, tmp.282): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.284 = tmp.283: {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.285 = get_elem1_ptr([tmp.283]): {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.286 = tmp.285: {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.287 = tmp.285: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Jump(tmp.288): {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.289 = Get Address arr.43 : {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41}, Copy tmp.290 = tmp.289: {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41}, tmp.291 = get_elem2_ptr([tmp.289]): {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.292 = tmp.291: {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.287 = tmp.291: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Copy tmp.293 = tmp.287: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.294 = -2: {tmp.287, arr.43, index.25, arr.18, tmp.294, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.295 = four.42 / tmp.294: {tmp.287, arr.43, tmp.295, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.296 = tmp.295: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42}, Copy tmp.297 = tmp.296: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42}, tmp.298 = -tmp.296: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.298, four.42}, AddPtr tmp.299 = tmp.287 + tmp.298 * 4: {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42}, Copy ptr.44 = tmp.299: {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42}, tmp.300 = Load tmp.299 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.300, four.42}, tmp.301 = tmp.300 == 4: {four.42, arr.43, index.25, arr.18, index.45, tmp.301, index.22, flag.13, index.31, flag.41}, Return tmp.301: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {3}
--------------ADDRESS TAKEN ANALYSIS.------------------
{arr.43, four.42, flag.41}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [JumpIfZero(flag.41, tmp.282), tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291, Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301]
NEW LIST [JumpIfZero(flag.41, tmp.282), tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291, Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301]
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
JumpIfZero(flag.41, tmp.282)
tmp.283 = Get Address arr.43 
Label(tmp.282)
Label(tmp.288)






ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {JumpIfZero(flag.41, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), tmp.285 = get_elem1_ptr([tmp.283]): set(), Copy tmp.287 = tmp.285: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), tmp.291 = get_elem2_ptr([tmp.289]): set(), Copy tmp.287 = tmp.291: set()} ReachingCopies: set()
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), tmp.298 = -tmp.296: set(), AddPtr tmp.299 = tmp.287 + tmp.298 * 4: set(), tmp.300 = Load tmp.299 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {JumpIfZero(flag.41, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), tmp.285 = get_elem1_ptr([tmp.283]): set(), Copy tmp.287 = tmp.285: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), tmp.291 = get_elem2_ptr([tmp.289]): set(), Copy tmp.287 = tmp.291: set()} ReachingCopies: set()
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), tmp.298 = -tmp.296: set(), AddPtr tmp.299 = tmp.287 + tmp.298 * 4: set(), tmp.300 = Load tmp.299 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {JumpIfZero(flag.41, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), tmp.285 = get_elem1_ptr([tmp.283]): set(), Copy tmp.287 = tmp.285: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), tmp.291 = get_elem2_ptr([tmp.289]): set(), Copy tmp.287 = tmp.291: set()} ReachingCopies: set()
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), tmp.298 = -tmp.296: set(), AddPtr tmp.299 = tmp.287 + tmp.298 * 4: set(), tmp.300 = Load tmp.299 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {JumpIfZero(flag.41, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), tmp.285 = get_elem1_ptr([tmp.283]): set(), Copy tmp.287 = tmp.285: set(), Jump(tmp.288): set()} ReachingCopies: set()
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), tmp.291 = get_elem2_ptr([tmp.289]): set(), Copy tmp.287 = tmp.291: set()} ReachingCopies: set()
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), tmp.298 = -tmp.296: set(), AddPtr tmp.299 = tmp.287 + tmp.298 * 4: set(), tmp.300 = Load tmp.299 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
--------------IMAP for block 0-------------------
JumpIfZero(flag.41, tmp.282) set()
OLD ANNOT: {Copy tmp.287 = tmp.285, Copy tmp.287 = tmp.291}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.283 = Get Address arr.43  set()
tmp.285 = get_elem1_ptr([tmp.283]) set()
Copy tmp.287 = tmp.285 set()
Jump(tmp.288) {Copy tmp.287 = tmp.285}
OLD ANNOT: {Copy tmp.287 = tmp.285, Copy tmp.287 = tmp.291}
NEW ANNOT: {Copy tmp.287 = tmp.285}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.282) set()
tmp.289 = Get Address arr.43  set()
tmp.291 = get_elem2_ptr([tmp.289]) set()
Copy tmp.287 = tmp.291 set()
OLD ANNOT: {Copy tmp.287 = tmp.285, Copy tmp.287 = tmp.291}
NEW ANNOT: {Copy tmp.287 = tmp.291}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.288) set()
tmp.294 = -2 set()
tmp.295 = four.42 / tmp.294 set()
SignExtend tmp.296 = tmp.295 set()
tmp.298 = -tmp.296 set()
AddPtr tmp.299 = tmp.287 + tmp.298 * 4 set()
tmp.300 = Load tmp.299  set()
tmp.301 = tmp.300 == 4 set()
Return tmp.301 set()
OLD ANNOT: {Copy tmp.287 = tmp.285, Copy tmp.287 = tmp.291}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {JumpIfZero(flag.41, tmp.282): set()} ReachingCopies: set()
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : set(), tmp.285 = get_elem1_ptr([tmp.283]): set(), Copy tmp.287 = tmp.285: set(), Jump(tmp.288): {Copy tmp.287 = tmp.285}} ReachingCopies: {Copy tmp.287 = tmp.285}
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): set(), tmp.289 = Get Address arr.43 : set(), tmp.291 = get_elem2_ptr([tmp.289]): set(), Copy tmp.287 = tmp.291: set()} ReachingCopies: {Copy tmp.287 = tmp.291}
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): set(), tmp.294 = -2: set(), tmp.295 = four.42 / tmp.294: set(), SignExtend tmp.296 = tmp.295: set(), tmp.298 = -tmp.296: set(), AddPtr tmp.299 = tmp.287 + tmp.298 * 4: set(), tmp.300 = Load tmp.299 : set(), tmp.301 = tmp.300 == 4: set(), Return tmp.301: set()} ReachingCopies: set()
EXIT Exit: EXIT {3}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 3-------------------
Return tmp.301 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.301 = tmp.300 == 4 {four.42, arr.43, index.25, arr.18, index.45, tmp.301, index.22, flag.13, index.31, flag.41}
tmp.300 = Load tmp.299  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.300, four.42}
AddPtr tmp.299 = tmp.287 + tmp.298 * 4 {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42}
tmp.298 = -tmp.296 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.298, four.42}
SignExtend tmp.296 = tmp.295 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42}
tmp.295 = four.42 / tmp.294 {tmp.287, arr.43, tmp.295, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.294 = -2 {tmp.287, arr.43, index.25, arr.18, tmp.294, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.288) {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
--------------LIVE for block 2-------------------
Copy tmp.287 = tmp.291 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.291 = get_elem2_ptr([tmp.289]) {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41}
<class 'tacGenerator.TAC_VariableValue'>
tmp.289 = Get Address arr.43  {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41}
Label(tmp.282) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Jump(tmp.288) {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Copy tmp.287 = tmp.285 {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
tmp.285 = get_elem1_ptr([tmp.283]) {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41}
<class 'tacGenerator.TAC_VariableValue'>
tmp.283 = Get Address arr.43  {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(flag.41, tmp.282) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [JumpIfZero(flag.41, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: {JumpIfZero(flag.41, tmp.282): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288)] Pred: {0} Suc: {3} iMap: {tmp.283 = Get Address arr.43 : {arr.43, tmp.283, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.285 = get_elem1_ptr([tmp.283]): {arr.43, four.42, index.25, tmp.285, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.287 = tmp.285: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, Jump(tmp.288): {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291] Pred: {0} Suc: {3} iMap: {Label(tmp.282): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.289 = Get Address arr.43 : {arr.43, four.42, index.25, arr.18, index.31, index.45, index.22, tmp.289, flag.13, flag.41}, tmp.291 = get_elem2_ptr([tmp.289]): {arr.43, four.42, index.25, tmp.291, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.287 = tmp.291: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301] Pred: {1, 2} Suc: {EXIT} iMap: {Label(tmp.288): {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.294 = -2: {tmp.287, arr.43, index.25, arr.18, tmp.294, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.295 = four.42 / tmp.294: {tmp.287, arr.43, tmp.295, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, SignExtend tmp.296 = tmp.295: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, tmp.296, index.22, flag.13, index.31, four.42}, tmp.298 = -tmp.296: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.298, four.42}, AddPtr tmp.299 = tmp.287 + tmp.298 * 4: {arr.43, index.25, arr.18, flag.41, tmp.299, index.45, index.22, flag.13, index.31, four.42}, tmp.300 = Load tmp.299 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.300, four.42}, tmp.301 = tmp.300 == 4: {four.42, arr.43, index.25, arr.18, index.45, tmp.301, index.22, flag.13, index.31, flag.41}, Return tmp.301: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {tmp.287, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
EXIT Exit: EXIT {3}
OPTIMIZING FUNCTION Function: test_subtract_multi_dimensional ([]) instructions:[CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, SignExtend tmp.304 = 2, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, CopyToOffset(last_row_pointer.47 + 0) = tmp.306 , Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, CopyToOffset(row_pointer.48 + 0) = tmp.311 , tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.45, nested_arr.46}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, SignExtend tmp.304 = 2, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, CopyToOffset(last_row_pointer.47 + 0) = tmp.306 , Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, CopyToOffset(row_pointer.48 + 0) = tmp.311 , tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313, Return 0]
NEW LIST [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, Copy tmp.304 = 2L, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, Copy row_pointer.48 = tmp.311, tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313, Return 0]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.46 + 0) = 1 
Return 0



ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, Copy tmp.304 = 2L, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, Copy row_pointer.48 = tmp.311, tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.303 = tmp.302: set(), Copy tmp.304 = 2L: set(), Copy tmp.305 = tmp.304: set(), AddPtr tmp.306 = tmp.303 + tmp.305 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), Copy tmp.307 = last_row_pointer.47: set(), SignExtend tmp.308 = index.45: set(), Copy tmp.309 = tmp.308: set(), tmp.310 = -tmp.309: set(), AddPtr tmp.311 = tmp.307 + tmp.310 * 12: set(), Copy row_pointer.48 = tmp.311: set(), tmp.312 = Load row_pointer.48 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
1 1: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {0, 1}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, Copy tmp.304 = 2L, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, Copy row_pointer.48 = tmp.311, tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.303 = tmp.302: set(), Copy tmp.304 = 2L: set(), Copy tmp.305 = tmp.304: set(), AddPtr tmp.306 = tmp.303 + tmp.305 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), Copy tmp.307 = last_row_pointer.47: set(), SignExtend tmp.308 = index.45: set(), Copy tmp.309 = tmp.308: set(), tmp.310 = -tmp.309: set(), AddPtr tmp.311 = tmp.307 + tmp.310 * 12: set(), Copy row_pointer.48 = tmp.311: set(), tmp.312 = Load row_pointer.48 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, Copy tmp.304 = 2L, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, Copy row_pointer.48 = tmp.311, tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.303 = tmp.302: set(), Copy tmp.304 = 2L: set(), Copy tmp.305 = tmp.304: set(), AddPtr tmp.306 = tmp.303 + tmp.305 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), Copy tmp.307 = last_row_pointer.47: set(), SignExtend tmp.308 = index.45: set(), Copy tmp.309 = tmp.308: set(), tmp.310 = -tmp.309: set(), AddPtr tmp.311 = tmp.307 + tmp.310 * 12: set(), Copy row_pointer.48 = tmp.311: set(), tmp.312 = Load row_pointer.48 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, Copy tmp.304 = 2L, Copy tmp.305 = tmp.304, AddPtr tmp.306 = tmp.303 + tmp.305 * 12, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = last_row_pointer.47, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.309, AddPtr tmp.311 = tmp.307 + tmp.310 * 12, Copy row_pointer.48 = tmp.311, tmp.312 = Load row_pointer.48 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.303 = tmp.302: set(), Copy tmp.304 = 2L: set(), Copy tmp.305 = tmp.304: set(), AddPtr tmp.306 = tmp.303 + tmp.305 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), Copy tmp.307 = last_row_pointer.47: set(), SignExtend tmp.308 = index.45: set(), Copy tmp.309 = tmp.308: set(), tmp.310 = -tmp.309: set(), AddPtr tmp.311 = tmp.307 + tmp.310 * 12: set(), Copy row_pointer.48 = tmp.311: set(), tmp.312 = Load row_pointer.48 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.46 + 0) = 1  set()
CopyToOffset(nested_arr.46 + 4) = 2  set()
CopyToOffset(nested_arr.46 + 8) = 3  set()
CopyToOffset(nested_arr.46 + 12) = 4  set()
CopyToOffset(nested_arr.46 + 16) = 5  set()
CopyToOffset(nested_arr.46 + 20) = 6  set()
CopyToOffset(nested_arr.46 + 24) = 7  set()
CopyToOffset(nested_arr.46 + 28) = 8  set()
CopyToOffset(nested_arr.46 + 32) = 9  set()
tmp.302 = Get Address nested_arr.46  set()
Copy tmp.303 = tmp.302 set()
Copy tmp.304 = 2L {Copy tmp.303 = tmp.302}
<class 'parser.ConstLong'>
Copy tmp.305 = tmp.304 {Copy tmp.303 = tmp.302, Copy tmp.304 = 2L}
AddPtr tmp.306 = tmp.303 + tmp.305 * 12 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy tmp.304 = 2L}
Copy last_row_pointer.47 = tmp.306 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy tmp.304 = 2L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
Copy tmp.307 = last_row_pointer.47 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
SignExtend tmp.308 = index.45 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}
Copy tmp.309 = tmp.308 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}
tmp.310 = -tmp.309 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}
AddPtr tmp.311 = tmp.307 + tmp.310 * 12 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}
Copy row_pointer.48 = tmp.311 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
tmp.312 = Load row_pointer.48  {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}
tmp.313 = tmp.312 == 4 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}
Return tmp.313 {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}
OLD ANNOT: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = last_row_pointer.47, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy row_pointer.48 = tmp.311}
NEW ANNOT: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.303 = tmp.302, Copy tmp.304 = 2L, Copy tmp.305 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, Copy tmp.307 = tmp.306, SignExtend tmp.308 = index.45, Copy tmp.309 = tmp.308, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, Copy row_pointer.48 = tmp.311, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.303 = tmp.302: set(), Copy tmp.304 = 2L: {Copy tmp.303 = tmp.302}, Copy tmp.305 = tmp.304: {Copy tmp.303 = tmp.302, Copy tmp.304 = 2L}, AddPtr tmp.306 = tmp.303 + tmp.305 * 12: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy tmp.304 = 2L}, Copy last_row_pointer.47 = tmp.306: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy tmp.304 = 2L}, Copy tmp.307 = last_row_pointer.47: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}, SignExtend tmp.308 = index.45: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}, Copy tmp.309 = tmp.308: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}, tmp.310 = -tmp.309: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}, AddPtr tmp.311 = tmp.307 + tmp.310 * 12: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}, Copy row_pointer.48 = tmp.311: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47}, tmp.312 = Load row_pointer.48 : {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}, tmp.313 = tmp.312 == 4: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}, Return tmp.313: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}} ReachingCopies: {Copy tmp.303 = tmp.302, Copy tmp.305 = tmp.304, Copy last_row_pointer.47 = tmp.306, Copy tmp.309 = tmp.308, Copy tmp.304 = 2L, Copy tmp.307 = last_row_pointer.47, Copy row_pointer.48 = tmp.311}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.313 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.313 = tmp.312 == 4 {four.42, arr.43, index.25, arr.18, tmp.313, index.45, index.22, flag.13, index.31, flag.41}
tmp.312 = Load tmp.311  {arr.43, index.25, arr.18, flag.41, index.45, tmp.312, index.22, flag.13, index.31, four.42}
Copy row_pointer.48 = tmp.311 {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12 {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
tmp.310 = -tmp.308 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, last_row_pointer.47, tmp.310, four.42}
Copy tmp.309 = tmp.308 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.308, flag.13, last_row_pointer.47, four.42}
SignExtend tmp.308 = index.45 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.308, flag.13, last_row_pointer.47, four.42}
Copy tmp.307 = tmp.306 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, last_row_pointer.47, four.42}
Copy last_row_pointer.47 = tmp.306 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, last_row_pointer.47, four.42}
AddPtr tmp.306 = tmp.302 + tmp.304 * 12 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}
Copy tmp.305 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, tmp.304, four.42}
Copy tmp.304 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, tmp.304, four.42}
Copy tmp.303 = tmp.302 {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}
tmp.302 = Get Address nested_arr.46  {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 32) = 9  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 28) = 8  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 24) = 7  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 20) = 6  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 16) = 5  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 12) = 4  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 8) = 3  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 4) = 2  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 0) = 1  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.303 = tmp.302 {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42} for node 0
Copy tmp.305 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, tmp.304, four.42} for node 0
Copy tmp.307 = tmp.306 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, last_row_pointer.47, four.42} for node 0
Copy tmp.309 = tmp.308 {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.308, flag.13, last_row_pointer.47, four.42} for node 0
Copy row_pointer.48 = tmp.311 {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 4) = 2 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 8) = 3 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 12) = 4 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 16) = 5 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 20) = 6 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 24) = 7 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 28) = 8 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 32) = 9 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, tmp.302 = Get Address nested_arr.46 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}, Copy tmp.303 = tmp.302: {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}, Copy tmp.304 = 2L: {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, tmp.304, four.42}, Copy tmp.305 = 2L: {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, tmp.304, four.42}, AddPtr tmp.306 = tmp.302 + tmp.304 * 12: {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}, Copy last_row_pointer.47 = tmp.306: {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, last_row_pointer.47, four.42}, Copy tmp.307 = tmp.306: {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, last_row_pointer.47, four.42}, SignExtend tmp.308 = index.45: {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.308, flag.13, last_row_pointer.47, four.42}, Copy tmp.309 = tmp.308: {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.308, flag.13, last_row_pointer.47, four.42}, tmp.310 = -tmp.308: {arr.43, nested_arr.46, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, last_row_pointer.47, tmp.310, four.42}, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12: {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, Copy row_pointer.48 = tmp.311: {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, tmp.312 = Load tmp.311 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.312, index.22, flag.13, index.31, four.42}, tmp.313 = tmp.312 == 4: {four.42, arr.43, index.25, arr.18, tmp.313, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.313: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.45, nested_arr.46}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313]
NEW LIST [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.46 + 0) = 1 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.304 = 2L: set(), AddPtr tmp.306 = tmp.302 + tmp.304 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.304 = 2L: set(), AddPtr tmp.306 = tmp.302 + tmp.304 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.304 = 2L: set(), AddPtr tmp.306 = tmp.302 + tmp.304 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + tmp.304 * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.304 = 2L: set(), AddPtr tmp.306 = tmp.302 + tmp.304 * 12: set(), Copy last_row_pointer.47 = tmp.306: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.46 + 0) = 1  set()
CopyToOffset(nested_arr.46 + 4) = 2  set()
CopyToOffset(nested_arr.46 + 8) = 3  set()
CopyToOffset(nested_arr.46 + 12) = 4  set()
CopyToOffset(nested_arr.46 + 16) = 5  set()
CopyToOffset(nested_arr.46 + 20) = 6  set()
CopyToOffset(nested_arr.46 + 24) = 7  set()
CopyToOffset(nested_arr.46 + 28) = 8  set()
CopyToOffset(nested_arr.46 + 32) = 9  set()
tmp.302 = Get Address nested_arr.46  set()
Copy tmp.304 = 2L set()
<class 'parser.ConstLong'>
AddPtr tmp.306 = tmp.302 + tmp.304 * 12 {Copy tmp.304 = 2L}
Copy last_row_pointer.47 = tmp.306 {Copy tmp.304 = 2L}
<class 'parser.ULongType'>
<class 'parser.PointerType'>
SignExtend tmp.308 = index.45 {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
tmp.310 = -tmp.308 {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12 {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
tmp.312 = Load tmp.311  {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
tmp.313 = tmp.312 == 4 {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
Return tmp.313 {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
OLD ANNOT: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
NEW ANNOT: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , Copy tmp.304 = 2L, AddPtr tmp.306 = tmp.302 + 2L * 12, Copy last_row_pointer.47 = tmp.306, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), Copy tmp.304 = 2L: set(), AddPtr tmp.306 = tmp.302 + tmp.304 * 12: {Copy tmp.304 = 2L}, Copy last_row_pointer.47 = tmp.306: {Copy tmp.304 = 2L}, SignExtend tmp.308 = index.45: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}, tmp.310 = -tmp.308: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}, AddPtr tmp.311 = last_row_pointer.47 + tmp.310 * 12: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}, tmp.312 = Load tmp.311 : {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}, tmp.313 = tmp.312 == 4: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}, Return tmp.313: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}} ReachingCopies: {Copy last_row_pointer.47 = tmp.306, Copy tmp.304 = 2L}
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.313 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.313 = tmp.312 == 4 {four.42, arr.43, index.25, arr.18, tmp.313, index.45, index.22, flag.13, index.31, flag.41}
tmp.312 = Load tmp.311  {arr.43, index.25, arr.18, flag.41, index.45, tmp.312, index.22, flag.13, index.31, four.42}
AddPtr tmp.311 = tmp.306 + tmp.310 * 12 {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
tmp.310 = -tmp.308 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, tmp.310, four.42}
SignExtend tmp.308 = index.45 {arr.43, index.25, arr.18, flag.41, tmp.306, index.45, index.31, index.22, tmp.308, flag.13, nested_arr.46, four.42}
Copy last_row_pointer.47 = tmp.306 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}
AddPtr tmp.306 = tmp.302 + 2L * 12 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}
Copy tmp.304 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}
tmp.302 = Get Address nested_arr.46  {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 32) = 9  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 28) = 8  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 24) = 7  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 20) = 6  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 16) = 5  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 12) = 4  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 8) = 3  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 4) = 2  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 0) = 1  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.304 = 2L {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42} for node 0
Copy last_row_pointer.47 = tmp.306 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42} for node 0
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 4) = 2 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 8) = 3 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 12) = 4 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 16) = 5 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 20) = 6 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 24) = 7 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 28) = 8 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 32) = 9 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, tmp.302 = Get Address nested_arr.46 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}, Copy tmp.304 = 2L: {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}, AddPtr tmp.306 = tmp.302 + 2L * 12: {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}, Copy last_row_pointer.47 = tmp.306: {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}, SignExtend tmp.308 = index.45: {arr.43, index.25, arr.18, flag.41, tmp.306, index.45, index.31, index.22, tmp.308, flag.13, nested_arr.46, four.42}, tmp.310 = -tmp.308: {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, tmp.310, four.42}, AddPtr tmp.311 = tmp.306 + tmp.310 * 12: {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, tmp.312 = Load tmp.311 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.312, index.22, flag.13, index.31, four.42}, tmp.313 = tmp.312 == 4: {four.42, arr.43, index.25, arr.18, tmp.313, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.313: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
EXIT Exit: EXIT {0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.45, nested_arr.46}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313]
NEW LIST [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313]
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_copyToOffset'>
<class 'tacGenerator.TAC_GetAddress'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_signExtendInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_addPtr'>
<class 'tacGenerator.TAC_Load'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
CopyToOffset(nested_arr.46 + 0) = 1 


ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), AddPtr tmp.306 = tmp.302 + 2L * 12: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = tmp.306 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), AddPtr tmp.306 = tmp.302 + 2L * 12: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = tmp.306 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), AddPtr tmp.306 = tmp.302 + 2L * 12: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = tmp.306 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), AddPtr tmp.306 = tmp.302 + 2L * 12: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = tmp.306 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------IMAP for block 0-------------------
CopyToOffset(nested_arr.46 + 0) = 1  set()
CopyToOffset(nested_arr.46 + 4) = 2  set()
CopyToOffset(nested_arr.46 + 8) = 3  set()
CopyToOffset(nested_arr.46 + 12) = 4  set()
CopyToOffset(nested_arr.46 + 16) = 5  set()
CopyToOffset(nested_arr.46 + 20) = 6  set()
CopyToOffset(nested_arr.46 + 24) = 7  set()
CopyToOffset(nested_arr.46 + 28) = 8  set()
CopyToOffset(nested_arr.46 + 32) = 9  set()
tmp.302 = Get Address nested_arr.46  set()
AddPtr tmp.306 = tmp.302 + 2L * 12 set()
SignExtend tmp.308 = index.45 set()
tmp.310 = -tmp.308 set()
AddPtr tmp.311 = tmp.306 + tmp.310 * 12 set()
tmp.312 = Load tmp.311  set()
tmp.313 = tmp.312 == 4 set()
Return tmp.313 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : set(), CopyToOffset(nested_arr.46 + 4) = 2 : set(), CopyToOffset(nested_arr.46 + 8) = 3 : set(), CopyToOffset(nested_arr.46 + 12) = 4 : set(), CopyToOffset(nested_arr.46 + 16) = 5 : set(), CopyToOffset(nested_arr.46 + 20) = 6 : set(), CopyToOffset(nested_arr.46 + 24) = 7 : set(), CopyToOffset(nested_arr.46 + 28) = 8 : set(), CopyToOffset(nested_arr.46 + 32) = 9 : set(), tmp.302 = Get Address nested_arr.46 : set(), AddPtr tmp.306 = tmp.302 + 2L * 12: set(), SignExtend tmp.308 = index.45: set(), tmp.310 = -tmp.308: set(), AddPtr tmp.311 = tmp.306 + tmp.310 * 12: set(), tmp.312 = Load tmp.311 : set(), tmp.313 = tmp.312 == 4: set(), Return tmp.313: set()} ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 0-------------------
Return tmp.313 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.313 = tmp.312 == 4 {four.42, arr.43, index.25, arr.18, tmp.313, index.45, index.22, flag.13, index.31, flag.41}
tmp.312 = Load tmp.311  {arr.43, index.25, arr.18, flag.41, index.45, tmp.312, index.22, flag.13, index.31, four.42}
AddPtr tmp.311 = tmp.306 + tmp.310 * 12 {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
tmp.310 = -tmp.308 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, tmp.310, four.42}
SignExtend tmp.308 = index.45 {arr.43, index.25, arr.18, flag.41, tmp.306, index.45, index.31, index.22, tmp.308, flag.13, nested_arr.46, four.42}
AddPtr tmp.306 = tmp.302 + 2L * 12 {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}
tmp.302 = Get Address nested_arr.46  {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 32) = 9  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 28) = 8  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 24) = 7  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 20) = 6  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 16) = 5  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 12) = 4  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 8) = 3  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 4) = 2  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
CopyToOffset(nested_arr.46 + 0) = 1  {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313] Pred: {ENTRY} Suc: {EXIT} iMap: {CopyToOffset(nested_arr.46 + 0) = 1 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 4) = 2 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 8) = 3 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 12) = 4 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 16) = 5 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 20) = 6 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 24) = 7 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 28) = 8 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, CopyToOffset(nested_arr.46 + 32) = 9 : {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, tmp.302 = Get Address nested_arr.46 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.302, index.22, flag.13, index.31, nested_arr.46, four.42}, AddPtr tmp.306 = tmp.302 + 2L * 12: {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, four.42}, SignExtend tmp.308 = index.45: {arr.43, index.25, arr.18, flag.41, tmp.306, index.45, index.31, index.22, tmp.308, flag.13, nested_arr.46, four.42}, tmp.310 = -tmp.308: {arr.43, index.25, arr.18, flag.41, index.45, index.31, index.22, tmp.306, flag.13, nested_arr.46, tmp.310, four.42}, AddPtr tmp.311 = tmp.306 + tmp.310 * 12: {arr.43, index.25, arr.18, tmp.311, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}, tmp.312 = Load tmp.311 : {arr.43, index.25, arr.18, flag.41, index.45, tmp.312, index.22, flag.13, index.31, four.42}, tmp.313 = tmp.312 == 4: {four.42, arr.43, index.25, arr.18, tmp.313, index.45, index.22, flag.13, index.31, flag.41}, Return tmp.313: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, nested_arr.46, four.42}
EXIT Exit: EXIT {0}
OPTIMIZING FUNCTION Function: main ([]) instructions:[tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357), Return 11, Label(tmp.357), Return 0, Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357), Return 11, Label(tmp.357), Return 0, Return 0]
NEW LIST [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357), Return 11, Label(tmp.357), Return 0, Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.314 = test_add_constant_to_pointer([])
Return 1
Label(tmp.317)
Return 2
Label(tmp.321)
Return 3
Label(tmp.325)
Return 4
Label(tmp.329)
Return 5
Label(tmp.333)
Return 6
Label(tmp.337)
Return 7
Label(tmp.341)
Return 8
Label(tmp.345)
Return 9
Label(tmp.349)
Return 10
Label(tmp.353)
Return 11
Label(tmp.357)
Return 0




































ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), Copy tmp.316 = tmp.315: set(), JumpIfZero(tmp.316, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), Copy tmp.320 = tmp.319: set(), JumpIfZero(tmp.320, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), Copy tmp.324 = tmp.323: set(), JumpIfZero(tmp.324, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), Copy tmp.328 = tmp.327: set(), JumpIfZero(tmp.328, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), Copy tmp.332 = tmp.331: set(), JumpIfZero(tmp.332, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), Copy tmp.336 = tmp.335: set(), JumpIfZero(tmp.336, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), Copy tmp.340 = tmp.339: set(), JumpIfZero(tmp.340, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), Copy tmp.344 = tmp.343: set(), JumpIfZero(tmp.344, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), Copy tmp.348 = tmp.347: set(), JumpIfZero(tmp.348, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), Copy tmp.352 = tmp.351: set(), JumpIfZero(tmp.352, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), Copy tmp.356 = tmp.355: set(), JumpIfZero(tmp.356, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
23 23: [Return 0] Pred: set() Suc: {EXIT} iMap: {Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22, 23}
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), Copy tmp.316 = tmp.315: set(), JumpIfZero(tmp.316, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), Copy tmp.320 = tmp.319: set(), JumpIfZero(tmp.320, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), Copy tmp.324 = tmp.323: set(), JumpIfZero(tmp.324, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), Copy tmp.328 = tmp.327: set(), JumpIfZero(tmp.328, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), Copy tmp.332 = tmp.331: set(), JumpIfZero(tmp.332, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), Copy tmp.336 = tmp.335: set(), JumpIfZero(tmp.336, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), Copy tmp.340 = tmp.339: set(), JumpIfZero(tmp.340, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), Copy tmp.344 = tmp.343: set(), JumpIfZero(tmp.344, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), Copy tmp.348 = tmp.347: set(), JumpIfZero(tmp.348, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), Copy tmp.352 = tmp.351: set(), JumpIfZero(tmp.352, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), Copy tmp.356 = tmp.355: set(), JumpIfZero(tmp.356, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), Copy tmp.316 = tmp.315: set(), JumpIfZero(tmp.316, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), Copy tmp.320 = tmp.319: set(), JumpIfZero(tmp.320, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), Copy tmp.324 = tmp.323: set(), JumpIfZero(tmp.324, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), Copy tmp.328 = tmp.327: set(), JumpIfZero(tmp.328, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), Copy tmp.332 = tmp.331: set(), JumpIfZero(tmp.332, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), Copy tmp.336 = tmp.335: set(), JumpIfZero(tmp.336, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), Copy tmp.340 = tmp.339: set(), JumpIfZero(tmp.340, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), Copy tmp.344 = tmp.343: set(), JumpIfZero(tmp.344, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), Copy tmp.348 = tmp.347: set(), JumpIfZero(tmp.348, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), Copy tmp.352 = tmp.351: set(), JumpIfZero(tmp.352, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), Copy tmp.356 = tmp.355: set(), JumpIfZero(tmp.356, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.316, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), Copy tmp.316 = tmp.315: set(), JumpIfZero(tmp.316, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.320, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), Copy tmp.320 = tmp.319: set(), JumpIfZero(tmp.320, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.324, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), Copy tmp.324 = tmp.323: set(), JumpIfZero(tmp.324, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.328, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), Copy tmp.328 = tmp.327: set(), JumpIfZero(tmp.328, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.332, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), Copy tmp.332 = tmp.331: set(), JumpIfZero(tmp.332, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.336, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), Copy tmp.336 = tmp.335: set(), JumpIfZero(tmp.336, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.340, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), Copy tmp.340 = tmp.339: set(), JumpIfZero(tmp.340, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.344, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), Copy tmp.344 = tmp.343: set(), JumpIfZero(tmp.344, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.348, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), Copy tmp.348 = tmp.347: set(), JumpIfZero(tmp.348, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.352, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), Copy tmp.352 = tmp.351: set(), JumpIfZero(tmp.352, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.356, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), Copy tmp.356 = tmp.355: set(), JumpIfZero(tmp.356, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------IMAP for block 0-------------------
tmp.314 = test_add_constant_to_pointer([]) set()
tmp.315 = !tmp.314 set()
Copy tmp.316 = tmp.315 set()
JumpIfZero(tmp.316, tmp.317) {Copy tmp.316 = tmp.315}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
Return 1 {Copy tmp.316 = tmp.315}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Label(tmp.317) {Copy tmp.316 = tmp.315}
tmp.318 = test_add_negative_index([]) {Copy tmp.316 = tmp.315}
tmp.319 = !tmp.318 {Copy tmp.316 = tmp.315}
Copy tmp.320 = tmp.319 {Copy tmp.316 = tmp.315}
JumpIfZero(tmp.320, tmp.321) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Return 2 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.321) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
tmp.322 = test_add_pointer_to_int([]) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
tmp.323 = !tmp.322 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
Copy tmp.324 = tmp.323 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
JumpIfZero(tmp.324, tmp.325) {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
Return 3 {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Label(tmp.325) {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
tmp.326 = test_add_different_index_types([]) {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
tmp.327 = !tmp.326 {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
Copy tmp.328 = tmp.327 {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
JumpIfZero(tmp.328, tmp.329) {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Return 4 {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.329) {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
tmp.330 = test_add_complex_expressions([]) {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
tmp.331 = !tmp.330 {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
Copy tmp.332 = tmp.331 {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
JumpIfZero(tmp.332, tmp.333) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
Return 5 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Label(tmp.333) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
tmp.334 = test_add_multi_dimensional([]) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
tmp.335 = !tmp.334 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
Copy tmp.336 = tmp.335 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
JumpIfZero(tmp.336, tmp.337) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Return 6 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.337) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
tmp.338 = test_add_to_subarray_pointer([]) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
tmp.339 = !tmp.338 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
Copy tmp.340 = tmp.339 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
JumpIfZero(tmp.340, tmp.341) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
ADD SUCCESSORS.
--------------IMAP for block 13-------------------
Return 7 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}
ADD SUCCESSORS.
--------------IMAP for block 14-------------------
Label(tmp.341) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}
tmp.342 = test_subtract_from_pointer([]) {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}
tmp.343 = !tmp.342 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
Copy tmp.344 = tmp.343 {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}
JumpIfZero(tmp.344, tmp.345) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343}
ADD SUCCESSORS.
--------------IMAP for block 15-------------------
Return 8 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}
ADD SUCCESSORS.
--------------IMAP for block 16-------------------
Label(tmp.345) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}
tmp.346 = test_subtract_negative_index([]) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}
tmp.347 = !tmp.346 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343}
Copy tmp.348 = tmp.347 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}
JumpIfZero(tmp.348, tmp.349) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
ADD SUCCESSORS.
--------------IMAP for block 17-------------------
Return 9 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
ADD SUCCESSORS.
--------------IMAP for block 18-------------------
Label(tmp.349) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
tmp.350 = test_subtract_different_index_types([]) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
tmp.351 = !tmp.350 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
Copy tmp.352 = tmp.351 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
JumpIfZero(tmp.352, tmp.353) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
ADD SUCCESSORS.
--------------IMAP for block 19-------------------
Return 10 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
ADD SUCCESSORS.
--------------IMAP for block 20-------------------
Label(tmp.353) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
tmp.354 = test_subtract_complex_expressions([]) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
tmp.355 = !tmp.354 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
Copy tmp.356 = tmp.355 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
JumpIfZero(tmp.356, tmp.357) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.356 = tmp.355, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.356 = tmp.355, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
--------------IMAP for block 21-------------------
Return 11 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
--------------IMAP for block 22-------------------
Label(tmp.357) {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
Return 0 {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
OLD ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
NEW ANNOT: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, Copy tmp.316 = tmp.315, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), Copy tmp.316 = tmp.315: set(), JumpIfZero(tmp.316, tmp.317): {Copy tmp.316 = tmp.315}} ReachingCopies: {Copy tmp.316 = tmp.315}
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: {Copy tmp.316 = tmp.315}} ReachingCopies: {Copy tmp.316 = tmp.315}
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, Copy tmp.320 = tmp.319, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): {Copy tmp.316 = tmp.315}, tmp.318 = test_add_negative_index([]): {Copy tmp.316 = tmp.315}, tmp.319 = !tmp.318: {Copy tmp.316 = tmp.315}, Copy tmp.320 = tmp.319: {Copy tmp.316 = tmp.315}, JumpIfZero(tmp.320, tmp.321): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, Copy tmp.324 = tmp.323, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}, tmp.322 = test_add_pointer_to_int([]): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}, tmp.323 = !tmp.322: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}, Copy tmp.324 = tmp.323: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319}, JumpIfZero(tmp.324, tmp.325): {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, Copy tmp.328 = tmp.327, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}, tmp.326 = test_add_different_index_types([]): {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}, tmp.327 = !tmp.326: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}, Copy tmp.328 = tmp.327: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319}, JumpIfZero(tmp.328, tmp.329): {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, Copy tmp.332 = tmp.331, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}, tmp.330 = test_add_complex_expressions([]): {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}, tmp.331 = !tmp.330: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}, Copy tmp.332 = tmp.331: {Copy tmp.316 = tmp.315, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327}, JumpIfZero(tmp.332, tmp.333): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, Copy tmp.336 = tmp.335, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, tmp.334 = test_add_multi_dimensional([]): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, tmp.335 = !tmp.334: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, Copy tmp.336 = tmp.335: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, JumpIfZero(tmp.336, tmp.337): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, Copy tmp.340 = tmp.339, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, tmp.338 = test_add_to_subarray_pointer([]): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, tmp.339 = !tmp.338: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, Copy tmp.340 = tmp.339: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, JumpIfZero(tmp.340, tmp.341): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, Copy tmp.344 = tmp.343, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}, tmp.342 = test_subtract_from_pointer([]): {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}, tmp.343 = !tmp.342: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.324 = tmp.323}, Copy tmp.344 = tmp.343: {Copy tmp.316 = tmp.315, Copy tmp.320 = tmp.319, Copy tmp.328 = tmp.327, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323}, JumpIfZero(tmp.344, tmp.345): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343}
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, Copy tmp.348 = tmp.347, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}, tmp.346 = test_subtract_negative_index([]): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}, tmp.347 = !tmp.346: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343}, Copy tmp.348 = tmp.347: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343}, JumpIfZero(tmp.348, tmp.349): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, Copy tmp.352 = tmp.351, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, tmp.350 = test_subtract_different_index_types([]): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, tmp.351 = !tmp.350: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, Copy tmp.352 = tmp.351: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, JumpIfZero(tmp.352, tmp.353): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, Copy tmp.356 = tmp.355, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, tmp.354 = test_subtract_complex_expressions([]): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, tmp.355 = !tmp.354: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, Copy tmp.356 = tmp.355: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}, JumpIfZero(tmp.356, tmp.357): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.356 = tmp.355, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.332 = tmp.331, Copy tmp.352 = tmp.351, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.324 = tmp.323, Copy tmp.356 = tmp.355, Copy tmp.344 = tmp.343, Copy tmp.348 = tmp.347}
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}, Return 0: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}} ReachingCopies: {Copy tmp.316 = tmp.315, Copy tmp.328 = tmp.327, Copy tmp.340 = tmp.339, Copy tmp.324 = tmp.323, Copy tmp.352 = tmp.351, Copy tmp.348 = tmp.347, Copy tmp.320 = tmp.319, Copy tmp.336 = tmp.335, Copy tmp.332 = tmp.331, Copy tmp.344 = tmp.343, Copy tmp.356 = tmp.355}
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 22-------------------
Return 0 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.357) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 21-------------------
Return 11 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 20-------------------
JumpIfZero(tmp.355, tmp.357) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.356 = tmp.355 {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.355 = !tmp.354 {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.354 = test_subtract_complex_expressions([]) {arr.43, tmp.354, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.353) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 19-------------------
Return 10 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 18-------------------
JumpIfZero(tmp.351, tmp.353) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.352 = tmp.351 {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.351 = !tmp.350 {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.350 = test_subtract_different_index_types([]) {tmp.350, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.349) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 17-------------------
Return 9 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 16-------------------
JumpIfZero(tmp.347, tmp.349) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.348 = tmp.347 {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.347 = !tmp.346 {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.346 = test_subtract_negative_index([]) {arr.43, index.25, arr.18, flag.41, tmp.346, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.345) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 15-------------------
Return 8 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 14-------------------
JumpIfZero(tmp.343, tmp.345) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.344 = tmp.343 {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.343 = !tmp.342 {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.342 = test_subtract_from_pointer([]) {arr.43, index.25, tmp.342, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.341) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 13-------------------
Return 7 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 12-------------------
JumpIfZero(tmp.339, tmp.341) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.340 = tmp.339 {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.339 = !tmp.338 {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.338 = test_add_to_subarray_pointer([]) {arr.43, index.25, arr.18, flag.41, index.45, tmp.338, index.22, flag.13, index.31, four.42}
Label(tmp.337) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Return 6 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 10-------------------
JumpIfZero(tmp.335, tmp.337) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.336 = tmp.335 {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.335 = !tmp.334 {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.334 = test_add_multi_dimensional([]) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.334, four.42}
Label(tmp.333) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 9-------------------
Return 5 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.331, tmp.333) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.332 = tmp.331 {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.331 = !tmp.330 {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.330 = test_add_complex_expressions([]) {arr.43, index.25, arr.18, flag.41, tmp.330, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.329) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Return 4 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 6-------------------
JumpIfZero(tmp.327, tmp.329) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.328 = tmp.327 {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.327 = !tmp.326 {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.326 = test_add_different_index_types([]) {arr.43, index.25, arr.18, flag.41, tmp.326, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.325) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 5-------------------
Return 3 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.323, tmp.325) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.324 = tmp.323 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41}
tmp.323 = !tmp.322 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41}
tmp.322 = test_add_pointer_to_int([]) {arr.43, tmp.322, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.321) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Return 2 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.319, tmp.321) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.320 = tmp.319 {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41}
tmp.319 = !tmp.318 {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41}
tmp.318 = test_add_negative_index([]) {arr.43, index.25, arr.18, flag.41, index.45, tmp.318, index.22, flag.13, index.31, four.42}
Label(tmp.317) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Return 1 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.315, tmp.317) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Copy tmp.316 = tmp.315 {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41}
tmp.315 = !tmp.314 {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41}
tmp.314 = test_add_constant_to_pointer([]) {arr.43, index.25, arr.18, flag.41, tmp.314, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy tmp.316 = tmp.315 {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41} for node 0
Copy tmp.320 = tmp.319 {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41} for node 2
Copy tmp.324 = tmp.323 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41} for node 4
Copy tmp.328 = tmp.327 {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 6
Copy tmp.332 = tmp.331 {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 8
Copy tmp.336 = tmp.335 {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 10
Copy tmp.340 = tmp.339 {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 12
Copy tmp.344 = tmp.343 {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 14
Copy tmp.348 = tmp.347 {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 16
Copy tmp.352 = tmp.351 {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 18
Copy tmp.356 = tmp.355 {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41} for node 20
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): {arr.43, index.25, arr.18, flag.41, tmp.314, index.45, index.22, flag.13, index.31, four.42}, tmp.315 = !tmp.314: {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.316 = tmp.315: {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.315, tmp.317): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.318 = test_add_negative_index([]): {arr.43, index.25, arr.18, flag.41, index.45, tmp.318, index.22, flag.13, index.31, four.42}, tmp.319 = !tmp.318: {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.320 = tmp.319: {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.319, tmp.321): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.322 = test_add_pointer_to_int([]): {arr.43, tmp.322, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.323 = !tmp.322: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41}, Copy tmp.324 = tmp.323: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41}, JumpIfZero(tmp.323, tmp.325): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.326 = test_add_different_index_types([]): {arr.43, index.25, arr.18, flag.41, tmp.326, index.45, index.22, flag.13, index.31, four.42}, tmp.327 = !tmp.326: {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.328 = tmp.327: {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.327, tmp.329): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.330 = test_add_complex_expressions([]): {arr.43, index.25, arr.18, flag.41, tmp.330, index.45, index.22, flag.13, index.31, four.42}, tmp.331 = !tmp.330: {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.332 = tmp.331: {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.331, tmp.333): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.334 = test_add_multi_dimensional([]): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.334, four.42}, tmp.335 = !tmp.334: {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.336 = tmp.335: {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.335, tmp.337): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.338 = test_add_to_subarray_pointer([]): {arr.43, index.25, arr.18, flag.41, index.45, tmp.338, index.22, flag.13, index.31, four.42}, tmp.339 = !tmp.338: {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.340 = tmp.339: {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.339, tmp.341): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.342 = test_subtract_from_pointer([]): {arr.43, index.25, tmp.342, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.343 = !tmp.342: {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.344 = tmp.343: {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.343, tmp.345): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.346 = test_subtract_negative_index([]): {arr.43, index.25, arr.18, flag.41, tmp.346, index.45, index.22, flag.13, index.31, four.42}, tmp.347 = !tmp.346: {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.348 = tmp.347: {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.347, tmp.349): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.350 = test_subtract_different_index_types([]): {tmp.350, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.351 = !tmp.350: {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.352 = tmp.351: {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.351, tmp.353): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.354 = test_subtract_complex_expressions([]): {arr.43, tmp.354, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.355 = !tmp.354: {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Copy tmp.356 = tmp.355: {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.355, tmp.357): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return 0: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357), Return 11, Label(tmp.357), Return 0]
NEW LIST [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357), Return 11, Label(tmp.357), Return 0]
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_FunCallInstruction'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.314 = test_add_constant_to_pointer([])
Return 1
Label(tmp.317)
Return 2
Label(tmp.321)
Return 3
Label(tmp.325)
Return 4
Label(tmp.329)
Return 5
Label(tmp.333)
Return 6
Label(tmp.337)
Return 7
Label(tmp.341)
Return 8
Label(tmp.345)
Return 9
Label(tmp.349)
Return 10
Label(tmp.353)
Return 11
Label(tmp.357)



































ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), JumpIfZero(tmp.315, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), JumpIfZero(tmp.319, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), JumpIfZero(tmp.323, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), JumpIfZero(tmp.327, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), JumpIfZero(tmp.331, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), JumpIfZero(tmp.335, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), JumpIfZero(tmp.339, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), JumpIfZero(tmp.343, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), JumpIfZero(tmp.347, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), JumpIfZero(tmp.351, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), JumpIfZero(tmp.355, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), JumpIfZero(tmp.315, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), JumpIfZero(tmp.319, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), JumpIfZero(tmp.323, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), JumpIfZero(tmp.327, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), JumpIfZero(tmp.331, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), JumpIfZero(tmp.335, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), JumpIfZero(tmp.339, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), JumpIfZero(tmp.343, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), JumpIfZero(tmp.347, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), JumpIfZero(tmp.351, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), JumpIfZero(tmp.355, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), JumpIfZero(tmp.315, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), JumpIfZero(tmp.319, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), JumpIfZero(tmp.323, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), JumpIfZero(tmp.327, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), JumpIfZero(tmp.331, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), JumpIfZero(tmp.335, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), JumpIfZero(tmp.339, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), JumpIfZero(tmp.343, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), JumpIfZero(tmp.347, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), JumpIfZero(tmp.351, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), JumpIfZero(tmp.355, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), JumpIfZero(tmp.315, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), JumpIfZero(tmp.319, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), JumpIfZero(tmp.323, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), JumpIfZero(tmp.327, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), JumpIfZero(tmp.331, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), JumpIfZero(tmp.335, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), JumpIfZero(tmp.339, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), JumpIfZero(tmp.343, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), JumpIfZero(tmp.347, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), JumpIfZero(tmp.351, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), JumpIfZero(tmp.355, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------IMAP for block 0-------------------
tmp.314 = test_add_constant_to_pointer([]) set()
tmp.315 = !tmp.314 set()
JumpIfZero(tmp.315, tmp.317) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 1-------------------
Return 1 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 2-------------------
Label(tmp.317) set()
tmp.318 = test_add_negative_index([]) set()
tmp.319 = !tmp.318 set()
JumpIfZero(tmp.319, tmp.321) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 3-------------------
Return 2 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 4-------------------
Label(tmp.321) set()
tmp.322 = test_add_pointer_to_int([]) set()
tmp.323 = !tmp.322 set()
JumpIfZero(tmp.323, tmp.325) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 5-------------------
Return 3 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 6-------------------
Label(tmp.325) set()
tmp.326 = test_add_different_index_types([]) set()
tmp.327 = !tmp.326 set()
JumpIfZero(tmp.327, tmp.329) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 7-------------------
Return 4 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 8-------------------
Label(tmp.329) set()
tmp.330 = test_add_complex_expressions([]) set()
tmp.331 = !tmp.330 set()
JumpIfZero(tmp.331, tmp.333) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 9-------------------
Return 5 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 10-------------------
Label(tmp.333) set()
tmp.334 = test_add_multi_dimensional([]) set()
tmp.335 = !tmp.334 set()
JumpIfZero(tmp.335, tmp.337) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 11-------------------
Return 6 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 12-------------------
Label(tmp.337) set()
tmp.338 = test_add_to_subarray_pointer([]) set()
tmp.339 = !tmp.338 set()
JumpIfZero(tmp.339, tmp.341) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 13-------------------
Return 7 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 14-------------------
Label(tmp.341) set()
tmp.342 = test_subtract_from_pointer([]) set()
tmp.343 = !tmp.342 set()
JumpIfZero(tmp.343, tmp.345) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 15-------------------
Return 8 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 16-------------------
Label(tmp.345) set()
tmp.346 = test_subtract_negative_index([]) set()
tmp.347 = !tmp.346 set()
JumpIfZero(tmp.347, tmp.349) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 17-------------------
Return 9 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 18-------------------
Label(tmp.349) set()
tmp.350 = test_subtract_different_index_types([]) set()
tmp.351 = !tmp.350 set()
JumpIfZero(tmp.351, tmp.353) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 19-------------------
Return 10 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 20-------------------
Label(tmp.353) set()
tmp.354 = test_subtract_complex_expressions([]) set()
tmp.355 = !tmp.354 set()
JumpIfZero(tmp.355, tmp.357) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 21-------------------
Return 11 set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------IMAP for block 22-------------------
Label(tmp.357) set()
Return 0 set()
OLD ANNOT: set()
NEW ANNOT: set()
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): set(), tmp.315 = !tmp.314: set(), JumpIfZero(tmp.315, tmp.317): set()} ReachingCopies: set()
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: set()} ReachingCopies: set()
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): set(), tmp.318 = test_add_negative_index([]): set(), tmp.319 = !tmp.318: set(), JumpIfZero(tmp.319, tmp.321): set()} ReachingCopies: set()
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: set()} ReachingCopies: set()
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): set(), tmp.322 = test_add_pointer_to_int([]): set(), tmp.323 = !tmp.322: set(), JumpIfZero(tmp.323, tmp.325): set()} ReachingCopies: set()
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: set()} ReachingCopies: set()
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): set(), tmp.326 = test_add_different_index_types([]): set(), tmp.327 = !tmp.326: set(), JumpIfZero(tmp.327, tmp.329): set()} ReachingCopies: set()
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: set()} ReachingCopies: set()
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): set(), tmp.330 = test_add_complex_expressions([]): set(), tmp.331 = !tmp.330: set(), JumpIfZero(tmp.331, tmp.333): set()} ReachingCopies: set()
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: set()} ReachingCopies: set()
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): set(), tmp.334 = test_add_multi_dimensional([]): set(), tmp.335 = !tmp.334: set(), JumpIfZero(tmp.335, tmp.337): set()} ReachingCopies: set()
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: set()} ReachingCopies: set()
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): set(), tmp.338 = test_add_to_subarray_pointer([]): set(), tmp.339 = !tmp.338: set(), JumpIfZero(tmp.339, tmp.341): set()} ReachingCopies: set()
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: set()} ReachingCopies: set()
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): set(), tmp.342 = test_subtract_from_pointer([]): set(), tmp.343 = !tmp.342: set(), JumpIfZero(tmp.343, tmp.345): set()} ReachingCopies: set()
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: set()} ReachingCopies: set()
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): set(), tmp.346 = test_subtract_negative_index([]): set(), tmp.347 = !tmp.346: set(), JumpIfZero(tmp.347, tmp.349): set()} ReachingCopies: set()
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: set()} ReachingCopies: set()
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): set(), tmp.350 = test_subtract_different_index_types([]): set(), tmp.351 = !tmp.350: set(), JumpIfZero(tmp.351, tmp.353): set()} ReachingCopies: set()
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: set()} ReachingCopies: set()
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): set(), tmp.354 = test_subtract_complex_expressions([]): set(), tmp.355 = !tmp.354: set(), JumpIfZero(tmp.355, tmp.357): set()} ReachingCopies: set()
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: set()} ReachingCopies: set()
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------ADDING ALL STATIC VARIABLES.------------------
test_add_constant_to_pointer test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.0 long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>
ptr.1 ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>
test_add_negative_index test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
unsigned_arr.2 unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>
end_ptr.3 end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>
ptr.4 ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>
test_add_pointer_to_int test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True
int_arr.5 int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>
ptr1.6 ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>
ptr2.7 ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>
test_add_different_index_types test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.8 double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>
ptr1.9 ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>
ptr2.10 ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>
ptr3.11 ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>
ptr4.12 ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>
test_add_complex_expressions test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.13 flag.13 int InitialVal: InitialList: [c_int(0)] Global: False
i.14 i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>
small_int_ptr.15 small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>
return_one return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True
get_elem1_ptr get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
get_elem2_ptr get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True
arr.18 arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.19 ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>
arr.20 arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>
arr.21 arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>
test_add_multi_dimensional test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.22 index.22 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.23 nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>
row_pointer.24 row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>
test_add_to_subarray_pointer test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.25 index.25 int InitialVal: InitialList: [c_int(2)] Global: False
nested_arr.26 nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>
row1.27 row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>
elem_ptr.28 elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>
test_subtract_from_pointer test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True
long_arr.29 long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>
one_past_the_end.30 one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>
index.31 index.31 int InitialVal: InitialList: [c_int(3)] Global: False
subtraction_result.32 subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>
test_subtract_negative_index test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True
arr.33 arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>
ptr.34 ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>
test_subtract_different_index_types test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True
double_arr.35 double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>
end_ptr.36 end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>
ptr1.37 ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>
ptr2.38 ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>
ptr3.39 ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>
ptr4.40 ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>
test_subtract_complex_expressions test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True
flag.41 flag.41 int InitialVal: InitialList: [c_int(1)] Global: False
four.42 four.42 int InitialVal: InitialList: [c_int(4)] Global: False
arr.43 arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False
ptr.44 ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>
test_subtract_multi_dimensional test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True
index.45 index.45 int InitialVal: InitialList: [c_int(1)] Global: False
nested_arr.46 nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>
last_row_pointer.47 last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>
row_pointer.48 row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>
main main FunType: ParamTypes: [] Return Type: int Defined: True Global: True
tmp.49 tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>
tmp.50 tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>
tmp.51 tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>
tmp.52 tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>
tmp.53 tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>
tmp.54 tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>
tmp.55 tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>
tmp.56 tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>
tmp.57 tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>
tmp.58 tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>
tmp.59 tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>
tmp.60 tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>
tmp.61 tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>
tmp.62 tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>
tmp.63 tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>
tmp.64 tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>
tmp.65 tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>
tmp.66 tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>
tmp.67 tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>
tmp.68 tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>
tmp.69 tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>
tmp.70 tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>
tmp.71 tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>
tmp.72 tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>
tmp.73 tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>
tmp.74 tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>
tmp.75 tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>
tmp.76 tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>
tmp.77 tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>
tmp.78 tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>
tmp.79 tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>
tmp.80 tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>
tmp.81 tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>
tmp.82 tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>
tmp.83 tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>
tmp.84 tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>
tmp.86 tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>
tmp.87 tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>
tmp.88 tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>
tmp.89 tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>
tmp.90 tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>
tmp.91 tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>
tmp.92 tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>
tmp.93 tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>
tmp.94 tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>
tmp.95 tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>
tmp.96 tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>
tmp.97 tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>
tmp.98 tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>
tmp.99 tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>
tmp.100 tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>
tmp.101 tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>
tmp.102 tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>
tmp.104 tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>
tmp.105 tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>
tmp.106 tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>
tmp.108 tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>
tmp.109 tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>
tmp.110 tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>
tmp.111 tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>
tmp.112 tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>
tmp.113 tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>
tmp.114 tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>
tmp.115 tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>
tmp.116 tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>
tmp.117 tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>
tmp.118 tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>
tmp.119 tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>
tmp.120 tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>
tmp.121 tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>
tmp.122 tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>
tmp.123 tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>
tmp.124 tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>
tmp.125 tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>
tmp.126 tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>
tmp.127 tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>
tmp.128 tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>
tmp.129 tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>
tmp.130 tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>
tmp.131 tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>
tmp.132 tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>
tmp.134 tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>
tmp.135 tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>
tmp.138 tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>
tmp.139 tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>
tmp.142 tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>
tmp.143 tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>
tmp.144 tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>
tmp.146 tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>
tmp.147 tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>
tmp.148 tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>
tmp.150 tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>
tmp.151 tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>
tmp.152 tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>
tmp.153 tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>
tmp.154 tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>
tmp.156 tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>
tmp.157 tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>
tmp.158 tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>
tmp.159 tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>
tmp.160 tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>
tmp.161 tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>
tmp.162 tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>
tmp.163 tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>
tmp.164 tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>
tmp.165 tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>
tmp.166 tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>
tmp.167 tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>
tmp.168 tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>
tmp.169 tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>
tmp.170 tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>
tmp.171 tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>
tmp.172 tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>
tmp.174 tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>
tmp.175 tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>
tmp.176 tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>
tmp.178 tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>
tmp.179 tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>
tmp.180 tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>
tmp.181 tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>
tmp.182 tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>
tmp.183 tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>
tmp.184 tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>
tmp.185 tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>
tmp.186 tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>
tmp.187 tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>
tmp.188 tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>
tmp.189 tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>
tmp.190 tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>
tmp.191 tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>
tmp.192 tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>
tmp.193 tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>
tmp.194 tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>
tmp.195 tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>
tmp.196 tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>
tmp.197 tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>
tmp.198 tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>
tmp.199 tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>
tmp.200 tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>
tmp.201 tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>
tmp.202 tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>
tmp.203 tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>
tmp.204 tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>
tmp.205 tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>
tmp.206 tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>
tmp.207 tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>
tmp.208 tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>
tmp.209 tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>
tmp.210 tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>
tmp.211 tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>
tmp.212 tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>
tmp.213 tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>
tmp.214 tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>
tmp.215 tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>
tmp.216 tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>
tmp.217 tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>
tmp.218 tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>
tmp.219 tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>
tmp.220 tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>
tmp.221 tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>
tmp.222 tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>
tmp.223 tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>
tmp.224 tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>
tmp.225 tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>
tmp.226 tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>
tmp.227 tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>
tmp.228 tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>
tmp.229 tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>
tmp.230 tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>
tmp.231 tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>
tmp.232 tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>
tmp.233 tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>
tmp.234 tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>
tmp.235 tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>
tmp.236 tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>
tmp.237 tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>
tmp.238 tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>
tmp.239 tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>
tmp.240 tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>
tmp.241 tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>
tmp.242 tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>
tmp.243 tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>
tmp.244 tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>
tmp.245 tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>
tmp.246 tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>
tmp.247 tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>
tmp.248 tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>
tmp.249 tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>
tmp.250 tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>
tmp.251 tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>
tmp.252 tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>
tmp.253 tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>
tmp.254 tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>
tmp.255 tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>
tmp.256 tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>
tmp.257 tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>
tmp.258 tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>
tmp.259 tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>
tmp.260 tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>
tmp.261 tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>
tmp.262 tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>
tmp.263 tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>
tmp.264 tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>
tmp.265 tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>
tmp.266 tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>
tmp.267 tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>
tmp.269 tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>
tmp.270 tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>
tmp.273 tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>
tmp.274 tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>
tmp.277 tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>
tmp.278 tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>
tmp.279 tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>
tmp.281 tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>
tmp.283 tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>
tmp.284 tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>
tmp.285 tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>
tmp.286 tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>
tmp.287 tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>
tmp.289 tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>
tmp.290 tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>
tmp.291 tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>
tmp.292 tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>
tmp.293 tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>
tmp.294 tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>
tmp.295 tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>
tmp.296 tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>
tmp.297 tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>
tmp.298 tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>
tmp.299 tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>
tmp.300 tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>
tmp.301 tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>
tmp.302 tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>
tmp.303 tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>
tmp.304 tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>
tmp.305 tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>
tmp.306 tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>
tmp.307 tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>
tmp.308 tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>
tmp.309 tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>
tmp.310 tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>
tmp.311 tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>
tmp.312 tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>
tmp.313 tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>
tmp.314 tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>
tmp.315 tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>
tmp.316 tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>
tmp.318 tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>
tmp.319 tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>
tmp.320 tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>
tmp.322 tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>
tmp.323 tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>
tmp.324 tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>
tmp.326 tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>
tmp.327 tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>
tmp.328 tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>
tmp.330 tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>
tmp.331 tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>
tmp.332 tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>
tmp.334 tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>
tmp.335 tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>
tmp.336 tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>
tmp.338 tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>
tmp.339 tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>
tmp.340 tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>
tmp.342 tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>
tmp.343 tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>
tmp.344 tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>
tmp.346 tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>
tmp.347 tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>
tmp.348 tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>
tmp.350 tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>
tmp.351 tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>
tmp.352 tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>
tmp.354 tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>
tmp.355 tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>
tmp.356 tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>
--------------LIVE for block 22-------------------
Return 0 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
Label(tmp.357) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 21-------------------
Return 11 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 20-------------------
JumpIfZero(tmp.355, tmp.357) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.355 = !tmp.354 {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.354 = test_subtract_complex_expressions([]) {arr.43, tmp.354, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.353) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 19-------------------
Return 10 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 18-------------------
JumpIfZero(tmp.351, tmp.353) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.351 = !tmp.350 {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.350 = test_subtract_different_index_types([]) {tmp.350, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.349) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 17-------------------
Return 9 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 16-------------------
JumpIfZero(tmp.347, tmp.349) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.347 = !tmp.346 {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.346 = test_subtract_negative_index([]) {arr.43, index.25, arr.18, flag.41, tmp.346, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.345) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 15-------------------
Return 8 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 14-------------------
JumpIfZero(tmp.343, tmp.345) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.343 = !tmp.342 {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.342 = test_subtract_from_pointer([]) {arr.43, index.25, tmp.342, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.341) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 13-------------------
Return 7 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 12-------------------
JumpIfZero(tmp.339, tmp.341) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.339 = !tmp.338 {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.338 = test_add_to_subarray_pointer([]) {arr.43, index.25, arr.18, flag.41, index.45, tmp.338, index.22, flag.13, index.31, four.42}
Label(tmp.337) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 11-------------------
Return 6 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 10-------------------
JumpIfZero(tmp.335, tmp.337) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.335 = !tmp.334 {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.334 = test_add_multi_dimensional([]) {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.334, four.42}
Label(tmp.333) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 9-------------------
Return 5 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.331, tmp.333) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.331 = !tmp.330 {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.330 = test_add_complex_expressions([]) {arr.43, index.25, arr.18, flag.41, tmp.330, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.329) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 7-------------------
Return 4 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 6-------------------
JumpIfZero(tmp.327, tmp.329) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.327 = !tmp.326 {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.326 = test_add_different_index_types([]) {arr.43, index.25, arr.18, flag.41, tmp.326, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.325) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 5-------------------
Return 3 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.323, tmp.325) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.323 = !tmp.322 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41}
tmp.322 = test_add_pointer_to_int([]) {arr.43, tmp.322, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}
Label(tmp.321) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 3-------------------
Return 2 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 2-------------------
JumpIfZero(tmp.319, tmp.321) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.319 = !tmp.318 {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41}
tmp.318 = test_add_negative_index([]) {arr.43, index.25, arr.18, flag.41, index.45, tmp.318, index.22, flag.13, index.31, four.42}
Label(tmp.317) {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 1-------------------
Return 1 {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
OLD ANNOT: set()
NEW ANNOT: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.315, tmp.317) {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
tmp.315 = !tmp.314 {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41}
tmp.314 = test_add_constant_to_pointer([]) {arr.43, index.25, arr.18, flag.41, tmp.314, index.45, index.22, flag.13, index.31, four.42}
OLD ANNOT: set()
NEW ANNOT: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: {tmp.314 = test_add_constant_to_pointer([]): {arr.43, index.25, arr.18, flag.41, tmp.314, index.45, index.22, flag.13, index.31, four.42}, tmp.315 = !tmp.314: {four.42, arr.43, index.25, arr.18, tmp.315, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.315, tmp.317): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
1 1: [Return 1] Pred: {0} Suc: {EXIT} iMap: {Return 1: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
2 2: [Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321)] Pred: {0} Suc: {3, 4} iMap: {Label(tmp.317): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.318 = test_add_negative_index([]): {arr.43, index.25, arr.18, flag.41, index.45, tmp.318, index.22, flag.13, index.31, four.42}, tmp.319 = !tmp.318: {four.42, arr.43, index.25, arr.18, tmp.319, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.319, tmp.321): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
3 3: [Return 2] Pred: {2} Suc: {EXIT} iMap: {Return 2: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
4 4: [Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325)] Pred: {2} Suc: {5, 6} iMap: {Label(tmp.321): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.322 = test_add_pointer_to_int([]): {arr.43, tmp.322, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.323 = !tmp.322: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, tmp.323, flag.41}, JumpIfZero(tmp.323, tmp.325): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
5 5: [Return 3] Pred: {4} Suc: {EXIT} iMap: {Return 3: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
6 6: [Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329)] Pred: {4} Suc: {8, 7} iMap: {Label(tmp.325): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.326 = test_add_different_index_types([]): {arr.43, index.25, arr.18, flag.41, tmp.326, index.45, index.22, flag.13, index.31, four.42}, tmp.327 = !tmp.326: {arr.43, four.42, tmp.327, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.327, tmp.329): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
7 7: [Return 4] Pred: {6} Suc: {EXIT} iMap: {Return 4: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
8 8: [Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333)] Pred: {6} Suc: {9, 10} iMap: {Label(tmp.329): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.330 = test_add_complex_expressions([]): {arr.43, index.25, arr.18, flag.41, tmp.330, index.45, index.22, flag.13, index.31, four.42}, tmp.331 = !tmp.330: {four.42, arr.43, tmp.331, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.331, tmp.333): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
9 9: [Return 5] Pred: {8} Suc: {EXIT} iMap: {Return 5: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
10 10: [Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337)] Pred: {8} Suc: {11, 12} iMap: {Label(tmp.333): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.334 = test_add_multi_dimensional([]): {arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, tmp.334, four.42}, tmp.335 = !tmp.334: {four.42, arr.43, tmp.335, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.335, tmp.337): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
11 11: [Return 6] Pred: {10} Suc: {EXIT} iMap: {Return 6: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
12 12: [Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341)] Pred: {10} Suc: {13, 14} iMap: {Label(tmp.337): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.338 = test_add_to_subarray_pointer([]): {arr.43, index.25, arr.18, flag.41, index.45, tmp.338, index.22, flag.13, index.31, four.42}, tmp.339 = !tmp.338: {four.42, arr.43, index.25, tmp.339, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.339, tmp.341): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
13 13: [Return 7] Pred: {12} Suc: {EXIT} iMap: {Return 7: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
14 14: [Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345)] Pred: {12} Suc: {16, 15} iMap: {Label(tmp.341): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.342 = test_subtract_from_pointer([]): {arr.43, index.25, tmp.342, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.343 = !tmp.342: {arr.43, four.42, tmp.343, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.343, tmp.345): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
15 15: [Return 8] Pred: {14} Suc: {EXIT} iMap: {Return 8: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
16 16: [Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349)] Pred: {14} Suc: {17, 18} iMap: {Label(tmp.345): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.346 = test_subtract_negative_index([]): {arr.43, index.25, arr.18, flag.41, tmp.346, index.45, index.22, flag.13, index.31, four.42}, tmp.347 = !tmp.346: {four.42, arr.43, tmp.347, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.347, tmp.349): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
17 17: [Return 9] Pred: {16} Suc: {EXIT} iMap: {Return 9: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
18 18: [Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353)] Pred: {16} Suc: {19, 20} iMap: {Label(tmp.349): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.350 = test_subtract_different_index_types([]): {tmp.350, arr.43, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.351 = !tmp.350: {four.42, arr.43, index.25, tmp.351, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.351, tmp.353): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
19 19: [Return 10] Pred: {18} Suc: {EXIT} iMap: {Return 10: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
20 20: [Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357)] Pred: {18} Suc: {21, 22} iMap: {Label(tmp.353): {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, tmp.354 = test_subtract_complex_expressions([]): {arr.43, tmp.354, index.25, arr.18, flag.41, index.45, index.22, flag.13, index.31, four.42}, tmp.355 = !tmp.354: {four.42, arr.43, index.25, tmp.355, arr.18, index.45, index.22, flag.13, index.31, flag.41}, JumpIfZero(tmp.355, tmp.357): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {arr.43, four.42, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
21 21: [Return 11] Pred: {20} Suc: {EXIT} iMap: {Return 11: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
22 22: [Label(tmp.357), Return 0] Pred: {20} Suc: {EXIT} iMap: {Label(tmp.357): {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}, Return 0: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}} ReachingCopies: {four.42, arr.43, index.25, arr.18, index.45, index.22, flag.13, index.31, flag.41}
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------ADDRESS TAKEN ANALYSIS.------------------
{long_arr.0}
--------------ADDRESS TAKEN ANALYSIS.------------------
{unsigned_arr.2}
--------------ADDRESS TAKEN ANALYSIS.------------------
{int_arr.5}
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.8}
--------------ADDRESS TAKEN ANALYSIS.------------------
{flag.13, arr.18, i.14}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.23, index.22}
--------------ADDRESS TAKEN ANALYSIS.------------------
{nested_arr.26, index.25}
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.31, long_arr.29}
--------------ADDRESS TAKEN ANALYSIS.------------------
{arr.33}
--------------ADDRESS TAKEN ANALYSIS.------------------
{double_arr.35}
--------------ADDRESS TAKEN ANALYSIS.------------------
{arr.43, four.42, flag.41}
--------------ADDRESS TAKEN ANALYSIS.------------------
{index.45, nested_arr.46}
--------------ADDRESS TAKEN ANALYSIS.------------------
set()
TAC Program:[Function: test_add_constant_to_pointer ([]) instructions:[CopyToOffset(long_arr.0 + 0) = 0L , CopyToOffset(long_arr.0 + 8) = 0L , CopyToOffset(long_arr.0 + 16) = 3L , CopyToOffset(long_arr.0 + 24) = 0L , CopyToOffset(long_arr.0 + 32) = 0L , CopyToOffset(long_arr.0 + 40) = 0L , CopyToOffset(long_arr.0 + 48) = 0L , CopyToOffset(long_arr.0 + 56) = 0L , CopyToOffset(long_arr.0 + 64) = 0L , CopyToOffset(long_arr.0 + 72) = 0L , CopyToOffset(long_arr.0 + 80) = 13L , CopyToOffset(long_arr.0 + 88) = 0L , tmp.60 = Get Address long_arr.0 , AddPtr tmp.64 = tmp.60 + 10L * 8, tmp.65 = Load tmp.64 , tmp.67 = tmp.65 == 13L, Return tmp.67], Function: test_add_negative_index ([]) instructions:[Copy tmp.68 = 0, CopyToOffset(unsigned_arr.2 + 0) = tmp.68 , Copy tmp.69 = 0, CopyToOffset(unsigned_arr.2 + 4) = tmp.69 , Copy tmp.70 = 2, CopyToOffset(unsigned_arr.2 + 8) = tmp.70 , Copy tmp.71 = 0, CopyToOffset(unsigned_arr.2 + 12) = tmp.71 , Copy tmp.72 = 0, CopyToOffset(unsigned_arr.2 + 16) = tmp.72 , Copy tmp.73 = 0, CopyToOffset(unsigned_arr.2 + 20) = tmp.73 , Copy tmp.74 = 0, CopyToOffset(unsigned_arr.2 + 24) = tmp.74 , Copy tmp.75 = 0, CopyToOffset(unsigned_arr.2 + 28) = tmp.75 , Copy tmp.76 = 0, CopyToOffset(unsigned_arr.2 + 32) = tmp.76 , Copy tmp.77 = 0, CopyToOffset(unsigned_arr.2 + 36) = tmp.77 , Copy tmp.78 = 42, CopyToOffset(unsigned_arr.2 + 40) = tmp.78 , CopyToOffset(unsigned_arr.2 + 44) = 0U , tmp.79 = Get Address unsigned_arr.2 , AddPtr tmp.83 = tmp.79 + 12L * 4, tmp.85 = -10, SignExtend tmp.86 = tmp.85, AddPtr tmp.88 = tmp.83 + tmp.86 * 4, tmp.89 = Load tmp.88 , Copy tmp.90 = 2, tmp.91 = tmp.89 == tmp.90, Return tmp.91], Function: test_add_pointer_to_int ([]) instructions:[CopyToOffset(int_arr.5 + 0) = 0 , CopyToOffset(int_arr.5 + 4) = 98 , CopyToOffset(int_arr.5 + 8) = 99 , CopyToOffset(int_arr.5 + 12) = 0 , CopyToOffset(int_arr.5 + 16) = 0 , tmp.92 = Get Address int_arr.5 , AddPtr tmp.96 = tmp.92 + 2L * 4, tmp.97 = Get Address int_arr.5 , AddPtr tmp.101 = tmp.97 + 2L * 4, tmp.102 = tmp.96 == tmp.101, JumpIfZero(tmp.102, tmp.103), tmp.104 = Load tmp.101 , tmp.105 = tmp.104 == 99, JumpIfZero(tmp.105, tmp.103), Copy tmp.106 = 1, Jump(tmp.107), Label(tmp.103), Copy tmp.106 = 0, Label(tmp.107), Return tmp.106], Function: test_add_different_index_types ([]) instructions:[IntToDouble tmp.108 = 0, CopyToOffset(double_arr.8 + 0) = tmp.108 , IntToDouble tmp.109 = 0, CopyToOffset(double_arr.8 + 8) = tmp.109 , IntToDouble tmp.110 = 0, CopyToOffset(double_arr.8 + 16) = tmp.110 , IntToDouble tmp.111 = 0, CopyToOffset(double_arr.8 + 24) = tmp.111 , IntToDouble tmp.112 = 0, CopyToOffset(double_arr.8 + 32) = tmp.112 , CopyToOffset(double_arr.8 + 40) = 6.0 , CopyToOffset(double_arr.8 + 48) = 0 , CopyToOffset(double_arr.8 + 56) = 0 , CopyToOffset(double_arr.8 + 64) = 0 , CopyToOffset(double_arr.8 + 72) = 0 , CopyToOffset(double_arr.8 + 80) = 0 , tmp.113 = Get Address double_arr.8 , AddPtr tmp.117 = tmp.113 + 5L * 8, tmp.118 = Get Address double_arr.8 , AddPtr tmp.121 = tmp.118 + 5L * 8, tmp.122 = Get Address double_arr.8 , ZeroExtend tmp.124 = 5U, AddPtr tmp.126 = tmp.122 + tmp.124 * 8, tmp.127 = Get Address double_arr.8 , Copy tmp.129 = 5UL, AddPtr tmp.131 = tmp.127 + tmp.129 * 8, tmp.132 = tmp.117 == tmp.121, JumpIfZero(tmp.132, tmp.133), tmp.134 = tmp.117 == tmp.126, JumpIfZero(tmp.134, tmp.133), Copy tmp.135 = 1, Jump(tmp.136), Label(tmp.133), Copy tmp.135 = 0, Label(tmp.136), JumpIfZero(tmp.135, tmp.137), tmp.138 = tmp.117 == tmp.131, JumpIfZero(tmp.138, tmp.137), Copy tmp.139 = 1, Jump(tmp.140), Label(tmp.137), Copy tmp.139 = 0, Label(tmp.140), JumpIfZero(tmp.139, tmp.141), tmp.142 = Load tmp.131 , tmp.143 = tmp.142 == 6.0, JumpIfZero(tmp.143, tmp.141), Copy tmp.144 = 1, Jump(tmp.145), Label(tmp.141), Copy tmp.144 = 0, Label(tmp.145), Return tmp.144], Function: test_add_complex_expressions ([]) instructions:[tmp.146 = -2, Copy i.14 = tmp.146, tmp.147 = Get Address i.14 , JumpIfZero(flag.13, tmp.149), tmp.150 = Get Address arr.18 , tmp.152 = get_elem1_ptr([tmp.150]), Copy tmp.154 = tmp.152, Jump(tmp.155), Label(tmp.149), tmp.156 = Get Address arr.18 , tmp.158 = get_elem2_ptr([tmp.156]), Copy tmp.154 = tmp.158, Label(tmp.155), tmp.161 = return_one([]), tmp.162 = Load tmp.147 , tmp.163 = tmp.161 + tmp.162, SignExtend tmp.164 = tmp.163, AddPtr tmp.166 = tmp.154 + tmp.164 * 4, tmp.167 = Get Address arr.18 , AddPtr tmp.171 = tmp.167 + 1L * 4, tmp.172 = tmp.166 == tmp.171, JumpIfZero(tmp.172, tmp.173), tmp.174 = Load tmp.166 , tmp.175 = tmp.174 == 2, JumpIfZero(tmp.175, tmp.173), Copy tmp.176 = 1, Jump(tmp.177), Label(tmp.173), Copy tmp.176 = 0, Label(tmp.177), Return tmp.176], Function: return_one ([]) instructions:[Return 1], Function: get_elem1_ptr (['arr.20']) instructions:[AddPtr tmp.181 = arr.20 + 1L * 4, Return tmp.181], Function: get_elem2_ptr (['arr.21']) instructions:[AddPtr tmp.185 = arr.21 + 2L * 4, Return tmp.185], Function: test_add_multi_dimensional ([]) instructions:[CopyToOffset(nested_arr.23 + 0) = 1 , CopyToOffset(nested_arr.23 + 4) = 2 , CopyToOffset(nested_arr.23 + 8) = 3 , CopyToOffset(nested_arr.23 + 12) = 4 , CopyToOffset(nested_arr.23 + 16) = 5 , CopyToOffset(nested_arr.23 + 20) = 6 , CopyToOffset(nested_arr.23 + 24) = 7 , CopyToOffset(nested_arr.23 + 28) = 8 , CopyToOffset(nested_arr.23 + 32) = 9 , tmp.186 = Get Address nested_arr.23 , SignExtend tmp.188 = index.22, AddPtr tmp.190 = tmp.186 + tmp.188 * 12, tmp.191 = Load tmp.190 , tmp.192 = tmp.191 == 7, Return tmp.192], Function: test_add_to_subarray_pointer ([]) instructions:[CopyToOffset(nested_arr.26 + 0) = 1 , CopyToOffset(nested_arr.26 + 4) = 2 , CopyToOffset(nested_arr.26 + 8) = 3 , CopyToOffset(nested_arr.26 + 12) = 4 , CopyToOffset(nested_arr.26 + 16) = 5 , CopyToOffset(nested_arr.26 + 20) = 6 , CopyToOffset(nested_arr.26 + 24) = 7 , CopyToOffset(nested_arr.26 + 28) = 8 , CopyToOffset(nested_arr.26 + 32) = 9 , tmp.193 = Get Address nested_arr.26 , AddPtr tmp.197 = tmp.193 + 1L * 12, SignExtend tmp.199 = index.25, AddPtr tmp.201 = tmp.197 + tmp.199 * 4, tmp.202 = Load tmp.201 , tmp.203 = tmp.202 == 6, Return tmp.203], Function: test_subtract_from_pointer ([]) instructions:[CopyToOffset(long_arr.29 + 0) = 10L , CopyToOffset(long_arr.29 + 8) = 9L , CopyToOffset(long_arr.29 + 16) = 8L , CopyToOffset(long_arr.29 + 24) = 7L , CopyToOffset(long_arr.29 + 32) = 6L , tmp.209 = Get Address long_arr.29 , AddPtr tmp.213 = tmp.209 + 5L * 8, SignExtend tmp.215 = index.31, tmp.217 = -tmp.215, AddPtr tmp.218 = tmp.213 + tmp.217 * 8, tmp.219 = Load tmp.218 , tmp.221 = tmp.219 == 8L, Return tmp.221], Function: test_subtract_negative_index ([]) instructions:[Copy tmp.222 = 100, CopyToOffset(arr.33 + 0) = tmp.222 , Copy tmp.223 = 101, CopyToOffset(arr.33 + 4) = tmp.223 , Copy tmp.224 = 102, CopyToOffset(arr.33 + 8) = tmp.224 , Copy tmp.225 = 103, CopyToOffset(arr.33 + 12) = tmp.225 , Copy tmp.226 = 104, CopyToOffset(arr.33 + 16) = tmp.226 , tmp.227 = Get Address arr.33 , tmp.229 = -3, SignExtend tmp.230 = tmp.229, tmp.232 = -tmp.230, AddPtr tmp.233 = tmp.227 + tmp.232 * 4, tmp.234 = Load tmp.233 , Copy tmp.235 = 103, tmp.236 = tmp.234 == tmp.235, Return tmp.236], Function: test_subtract_different_index_types ([]) instructions:[IntToDouble tmp.237 = 0, CopyToOffset(double_arr.35 + 0) = tmp.237 , IntToDouble tmp.238 = 0, CopyToOffset(double_arr.35 + 8) = tmp.238 , IntToDouble tmp.239 = 0, CopyToOffset(double_arr.35 + 16) = tmp.239 , IntToDouble tmp.240 = 0, CopyToOffset(double_arr.35 + 24) = tmp.240 , IntToDouble tmp.241 = 0, CopyToOffset(double_arr.35 + 32) = tmp.241 , IntToDouble tmp.242 = 0, CopyToOffset(double_arr.35 + 40) = tmp.242 , CopyToOffset(double_arr.35 + 48) = 6.0 , CopyToOffset(double_arr.35 + 56) = 0 , CopyToOffset(double_arr.35 + 64) = 0 , CopyToOffset(double_arr.35 + 72) = 0 , CopyToOffset(double_arr.35 + 80) = 0 , tmp.243 = Get Address double_arr.35 , AddPtr tmp.247 = tmp.243 + 11L * 8, tmp.251 = -5L, AddPtr tmp.252 = tmp.247 + tmp.251 * 8, tmp.255 = -5L, AddPtr tmp.256 = tmp.247 + tmp.255 * 8, ZeroExtend tmp.258 = 5U, tmp.260 = -tmp.258, AddPtr tmp.261 = tmp.247 + tmp.260 * 8, Copy tmp.263 = 5UL, tmp.265 = -tmp.263, AddPtr tmp.266 = tmp.247 + tmp.265 * 8, tmp.267 = tmp.252 == tmp.256, JumpIfZero(tmp.267, tmp.268), tmp.269 = tmp.252 == tmp.261, JumpIfZero(tmp.269, tmp.268), Copy tmp.270 = 1, Jump(tmp.271), Label(tmp.268), Copy tmp.270 = 0, Label(tmp.271), JumpIfZero(tmp.270, tmp.272), tmp.273 = tmp.252 == tmp.266, JumpIfZero(tmp.273, tmp.272), Copy tmp.274 = 1, Jump(tmp.275), Label(tmp.272), Copy tmp.274 = 0, Label(tmp.275), JumpIfZero(tmp.274, tmp.276), tmp.277 = Load tmp.266 , tmp.278 = tmp.277 == 6.0, JumpIfZero(tmp.278, tmp.276), Copy tmp.279 = 1, Jump(tmp.280), Label(tmp.276), Copy tmp.279 = 0, Label(tmp.280), Return tmp.279], Function: test_subtract_complex_expressions ([]) instructions:[JumpIfZero(flag.41, tmp.282), tmp.283 = Get Address arr.43 , tmp.285 = get_elem1_ptr([tmp.283]), Copy tmp.287 = tmp.285, Jump(tmp.288), Label(tmp.282), tmp.289 = Get Address arr.43 , tmp.291 = get_elem2_ptr([tmp.289]), Copy tmp.287 = tmp.291, Label(tmp.288), tmp.294 = -2, tmp.295 = four.42 / tmp.294, SignExtend tmp.296 = tmp.295, tmp.298 = -tmp.296, AddPtr tmp.299 = tmp.287 + tmp.298 * 4, tmp.300 = Load tmp.299 , tmp.301 = tmp.300 == 4, Return tmp.301], Function: test_subtract_multi_dimensional ([]) instructions:[CopyToOffset(nested_arr.46 + 0) = 1 , CopyToOffset(nested_arr.46 + 4) = 2 , CopyToOffset(nested_arr.46 + 8) = 3 , CopyToOffset(nested_arr.46 + 12) = 4 , CopyToOffset(nested_arr.46 + 16) = 5 , CopyToOffset(nested_arr.46 + 20) = 6 , CopyToOffset(nested_arr.46 + 24) = 7 , CopyToOffset(nested_arr.46 + 28) = 8 , CopyToOffset(nested_arr.46 + 32) = 9 , tmp.302 = Get Address nested_arr.46 , AddPtr tmp.306 = tmp.302 + 2L * 12, SignExtend tmp.308 = index.45, tmp.310 = -tmp.308, AddPtr tmp.311 = tmp.306 + tmp.310 * 12, tmp.312 = Load tmp.311 , tmp.313 = tmp.312 == 4, Return tmp.313], Function: main ([]) instructions:[tmp.314 = test_add_constant_to_pointer([]), tmp.315 = !tmp.314, JumpIfZero(tmp.315, tmp.317), Return 1, Label(tmp.317), tmp.318 = test_add_negative_index([]), tmp.319 = !tmp.318, JumpIfZero(tmp.319, tmp.321), Return 2, Label(tmp.321), tmp.322 = test_add_pointer_to_int([]), tmp.323 = !tmp.322, JumpIfZero(tmp.323, tmp.325), Return 3, Label(tmp.325), tmp.326 = test_add_different_index_types([]), tmp.327 = !tmp.326, JumpIfZero(tmp.327, tmp.329), Return 4, Label(tmp.329), tmp.330 = test_add_complex_expressions([]), tmp.331 = !tmp.330, JumpIfZero(tmp.331, tmp.333), Return 5, Label(tmp.333), tmp.334 = test_add_multi_dimensional([]), tmp.335 = !tmp.334, JumpIfZero(tmp.335, tmp.337), Return 6, Label(tmp.337), tmp.338 = test_add_to_subarray_pointer([]), tmp.339 = !tmp.338, JumpIfZero(tmp.339, tmp.341), Return 7, Label(tmp.341), tmp.342 = test_subtract_from_pointer([]), tmp.343 = !tmp.342, JumpIfZero(tmp.343, tmp.345), Return 8, Label(tmp.345), tmp.346 = test_subtract_negative_index([]), tmp.347 = !tmp.346, JumpIfZero(tmp.347, tmp.349), Return 9, Label(tmp.349), tmp.350 = test_subtract_different_index_types([]), tmp.351 = !tmp.350, JumpIfZero(tmp.351, tmp.353), Return 10, Label(tmp.353), tmp.354 = test_subtract_complex_expressions([]), tmp.355 = !tmp.354, JumpIfZero(tmp.355, tmp.357), Return 11, Label(tmp.357), Return 0], Global: False flag.13 = [c_int(0)], Global: False arr.18 = [c_int(1), c_int(2), c_int(3), c_int(4)], Global: False index.22 = [c_int(2)], Global: False index.25 = [c_int(2)], Global: False index.31 = [c_int(3)], Global: False flag.41 = [c_int(1)], Global: False four.42 = [c_int(4)], Global: False arr.43 = [c_int(1), c_int(2), c_int(3), c_int(4)], Global: False index.45 = [c_int(1)]]
Type Table:
 {}
Symbol Table:
 {'test_add_constant_to_pointer': test_add_constant_to_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'long_arr.0': long_arr.0 ArrayType: long Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8628a4b0>, 'ptr.1': ptr.1 Plong <typeChecker.LocalAttributes object at 0x7f8f8629b2f0>, 'test_add_negative_index': test_add_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'unsigned_arr.2': unsigned_arr.2 ArrayType: uint Size: 12 <typeChecker.LocalAttributes object at 0x7f8f8629b950>, 'end_ptr.3': end_ptr.3 Puint <typeChecker.LocalAttributes object at 0x7f8f862a83b0>, 'ptr.4': ptr.4 Puint <typeChecker.LocalAttributes object at 0x7f8f862a86e0>, 'test_add_pointer_to_int': test_add_pointer_to_int FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'int_arr.5': int_arr.5 ArrayType: int Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862a8dd0>, 'ptr1.6': ptr1.6 Pint <typeChecker.LocalAttributes object at 0x7f8f862a91f0>, 'ptr2.7': ptr2.7 Pint <typeChecker.LocalAttributes object at 0x7f8f862a9520>, 'test_add_different_index_types': test_add_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'double_arr.8': double_arr.8 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862a9d60>, 'ptr1.9': ptr1.9 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa6c0>, 'ptr2.10': ptr2.10 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aa9f0>, 'ptr3.11': ptr3.11 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aac90>, 'ptr4.12': ptr4.12 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862aafc0>, 'test_add_complex_expressions': test_add_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'flag.13': flag.13 int InitialVal: InitialList: [c_int(0)] Global: False, 'i.14': i.14 int <typeChecker.LocalAttributes object at 0x7f8f862abc50>, 'small_int_ptr.15': small_int_ptr.15 Pint <typeChecker.LocalAttributes object at 0x7f8f862abe60>, 'return_one': return_one FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'get_elem1_ptr': get_elem1_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True, 'get_elem2_ptr': get_elem2_ptr FunType: ParamTypes: [Pint] Return Type: Pint Defined: True Global: True, 'arr.18': arr.18 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False, 'ptr.19': ptr.19 Pint <typeChecker.LocalAttributes object at 0x7f8f8628b050>, 'arr.20': arr.20 Pint <typeChecker.LocalAttributes object at 0x7f8f862ad8e0>, 'arr.21': arr.21 Pint <typeChecker.LocalAttributes object at 0x7f8f862adbe0>, 'test_add_multi_dimensional': test_add_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.22': index.22 int InitialVal: InitialList: [c_int(2)] Global: False, 'nested_arr.23': nested_arr.23 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae0c0>, 'row_pointer.24': row_pointer.24 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862ae7e0>, 'test_add_to_subarray_pointer': test_add_to_subarray_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.25': index.25 int InitialVal: InitialList: [c_int(2)] Global: False, 'nested_arr.26': nested_arr.26 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862af110>, 'row1.27': row1.27 Pint <typeChecker.LocalAttributes object at 0x7f8f862af830>, 'elem_ptr.28': elem_ptr.28 Pint <typeChecker.LocalAttributes object at 0x7f8f862afc20>, 'test_subtract_from_pointer': test_subtract_from_pointer FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'long_arr.29': long_arr.29 ArrayType: long Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b82c0>, 'one_past_the_end.30': one_past_the_end.30 Plong <typeChecker.LocalAttributes object at 0x7f8f862b88f0>, 'index.31': index.31 int InitialVal: InitialList: [c_int(3)] Global: False, 'subtraction_result.32': subtraction_result.32 Plong <typeChecker.LocalAttributes object at 0x7f8f862b8e60>, 'test_subtract_negative_index': test_subtract_negative_index FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'arr.33': arr.33 ArrayType: uint Size: 5 <typeChecker.LocalAttributes object at 0x7f8f862b9550>, 'ptr.34': ptr.34 Puint <typeChecker.LocalAttributes object at 0x7f8f862b9b80>, 'test_subtract_different_index_types': test_subtract_different_index_types FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'double_arr.35': double_arr.35 ArrayType: double Size: 11 <typeChecker.LocalAttributes object at 0x7f8f862ba360>, 'end_ptr.36': end_ptr.36 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bad50>, 'ptr1.37': ptr1.37 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb0e0>, 'ptr2.38': ptr2.38 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb3e0>, 'ptr3.39': ptr3.39 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb650>, 'ptr4.40': ptr4.40 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862bb950>, 'test_subtract_complex_expressions': test_subtract_complex_expressions FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'flag.41': flag.41 int InitialVal: InitialList: [c_int(1)] Global: False, 'four.42': four.42 int InitialVal: InitialList: [c_int(4)] Global: False, 'arr.43': arr.43 ArrayType: int Size: 4 InitialVal: InitialList: [c_int(1), c_int(2), c_int(3), c_int(4)] Global: False, 'ptr.44': ptr.44 Pint <typeChecker.LocalAttributes object at 0x7f8f86298410>, 'test_subtract_multi_dimensional': test_subtract_multi_dimensional FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'index.45': index.45 int InitialVal: InitialList: [c_int(1)] Global: False, 'nested_arr.46': nested_arr.46 ArrayType: ArrayType: int Size: 3 Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1850>, 'last_row_pointer.47': last_row_pointer.47 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c1f70>, 'row_pointer.48': row_pointer.48 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862c22d0>, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'tmp.49': tmp.49 long <typeChecker.LocalAttributes object at 0x7f8f862cdc40>, 'tmp.50': tmp.50 long <typeChecker.LocalAttributes object at 0x7f8f862cddf0>, 'tmp.51': tmp.51 long <typeChecker.LocalAttributes object at 0x7f8f862cdee0>, 'tmp.52': tmp.52 long <typeChecker.LocalAttributes object at 0x7f8f862ce030>, 'tmp.53': tmp.53 long <typeChecker.LocalAttributes object at 0x7f8f862ce1b0>, 'tmp.54': tmp.54 long <typeChecker.LocalAttributes object at 0x7f8f862ce330>, 'tmp.55': tmp.55 long <typeChecker.LocalAttributes object at 0x7f8f862ce4b0>, 'tmp.56': tmp.56 long <typeChecker.LocalAttributes object at 0x7f8f862ce630>, 'tmp.57': tmp.57 long <typeChecker.LocalAttributes object at 0x7f8f862ce7b0>, 'tmp.58': tmp.58 long <typeChecker.LocalAttributes object at 0x7f8f862ce930>, 'tmp.59': tmp.59 long <typeChecker.LocalAttributes object at 0x7f8f862ceab0>, 'tmp.60': tmp.60 Plong <typeChecker.LocalAttributes object at 0x7f8f862ced50>, 'tmp.61': tmp.61 Plong <typeChecker.LocalAttributes object at 0x7f8f862c5a90>, 'tmp.62': tmp.62 long <typeChecker.LocalAttributes object at 0x7f8f862ceff0>, 'tmp.63': tmp.63 long <typeChecker.LocalAttributes object at 0x7f8f862cee10>, 'tmp.64': tmp.64 ulong <typeChecker.LocalAttributes object at 0x7f8f862cedb0>, 'tmp.65': tmp.65 long <typeChecker.LocalAttributes object at 0x7f8f862cf1d0>, 'tmp.66': tmp.66 long <typeChecker.LocalAttributes object at 0x7f8f862cf410>, 'tmp.67': tmp.67 int <typeChecker.LocalAttributes object at 0x7f8f862cf260>, 'tmp.68': tmp.68 uint <typeChecker.LocalAttributes object at 0x7f8f862cf650>, 'tmp.69': tmp.69 uint <typeChecker.LocalAttributes object at 0x7f8f862cf7a0>, 'tmp.70': tmp.70 uint <typeChecker.LocalAttributes object at 0x7f8f862cf920>, 'tmp.71': tmp.71 uint <typeChecker.LocalAttributes object at 0x7f8f862cfaa0>, 'tmp.72': tmp.72 uint <typeChecker.LocalAttributes object at 0x7f8f862cfc50>, 'tmp.73': tmp.73 uint <typeChecker.LocalAttributes object at 0x7f8f862cfe00>, 'tmp.74': tmp.74 uint <typeChecker.LocalAttributes object at 0x7f8f862cff80>, 'tmp.75': tmp.75 uint <typeChecker.LocalAttributes object at 0x7f8f862d41a0>, 'tmp.76': tmp.76 uint <typeChecker.LocalAttributes object at 0x7f8f862d42c0>, 'tmp.77': tmp.77 uint <typeChecker.LocalAttributes object at 0x7f8f862d4440>, 'tmp.78': tmp.78 uint <typeChecker.LocalAttributes object at 0x7f8f862d45f0>, 'tmp.79': tmp.79 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4920>, 'tmp.80': tmp.80 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4800>, 'tmp.81': tmp.81 long <typeChecker.LocalAttributes object at 0x7f8f862d4bc0>, 'tmp.82': tmp.82 long <typeChecker.LocalAttributes object at 0x7f8f862d4a70>, 'tmp.83': tmp.83 ulong <typeChecker.LocalAttributes object at 0x7f8f862d4aa0>, 'tmp.84': tmp.84 Puint <typeChecker.LocalAttributes object at 0x7f8f862d4e90>, 'tmp.85': tmp.85 int <typeChecker.LocalAttributes object at 0x7f8f862d5280>, 'tmp.86': tmp.86 long <typeChecker.LocalAttributes object at 0x7f8f862c4b90>, 'tmp.87': tmp.87 long <typeChecker.LocalAttributes object at 0x7f8f862d4fe0>, 'tmp.88': tmp.88 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5070>, 'tmp.89': tmp.89 uint <typeChecker.LocalAttributes object at 0x7f8f862d5490>, 'tmp.90': tmp.90 uint <typeChecker.LocalAttributes object at 0x7f8f862d5760>, 'tmp.91': tmp.91 int <typeChecker.LocalAttributes object at 0x7f8f862d5550>, 'tmp.92': tmp.92 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5d90>, 'tmp.93': tmp.93 Pint <typeChecker.LocalAttributes object at 0x7f8f862d5c70>, 'tmp.94': tmp.94 long <typeChecker.LocalAttributes object at 0x7f8f862d6030>, 'tmp.95': tmp.95 long <typeChecker.LocalAttributes object at 0x7f8f862d5ee0>, 'tmp.96': tmp.96 ulong <typeChecker.LocalAttributes object at 0x7f8f862d5f10>, 'tmp.97': tmp.97 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6420>, 'tmp.98': tmp.98 Pint <typeChecker.LocalAttributes object at 0x7f8f862d6300>, 'tmp.99': tmp.99 long <typeChecker.LocalAttributes object at 0x7f8f862d66c0>, 'tmp.100': tmp.100 long <typeChecker.LocalAttributes object at 0x7f8f862d6570>, 'tmp.101': tmp.101 ulong <typeChecker.LocalAttributes object at 0x7f8f862d65a0>, 'tmp.102': tmp.102 int <typeChecker.LocalAttributes object at 0x7f8f862d69f0>, 'tmp.104': tmp.104 int <typeChecker.LocalAttributes object at 0x7f8f862d6cc0>, 'tmp.105': tmp.105 int <typeChecker.LocalAttributes object at 0x7f8f862d6d80>, 'tmp.106': tmp.106 int <typeChecker.LocalAttributes object at 0x7f8f862d6900>, 'tmp.108': tmp.108 double <typeChecker.LocalAttributes object at 0x7f8f862d7260>, 'tmp.109': tmp.109 double <typeChecker.LocalAttributes object at 0x7f8f862d73e0>, 'tmp.110': tmp.110 double <typeChecker.LocalAttributes object at 0x7f8f862d7590>, 'tmp.111': tmp.111 double <typeChecker.LocalAttributes object at 0x7f8f862d7740>, 'tmp.112': tmp.112 double <typeChecker.LocalAttributes object at 0x7f8f862d78f0>, 'tmp.113': tmp.113 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7ef0>, 'tmp.114': tmp.114 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d7dd0>, 'tmp.115': tmp.115 long <typeChecker.LocalAttributes object at 0x7f8f862d8200>, 'tmp.116': tmp.116 long <typeChecker.LocalAttributes object at 0x7f8f862d7fb0>, 'tmp.117': tmp.117 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8290>, 'tmp.118': tmp.118 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8620>, 'tmp.119': tmp.119 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8500>, 'tmp.120': tmp.120 long <typeChecker.LocalAttributes object at 0x7f8f862d8770>, 'tmp.121': tmp.121 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8800>, 'tmp.122': tmp.122 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8b90>, 'tmp.123': tmp.123 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d8a70>, 'tmp.124': tmp.124 long <typeChecker.LocalAttributes object at 0x7f8f862d8e30>, 'tmp.125': tmp.125 long <typeChecker.LocalAttributes object at 0x7f8f862d8ce0>, 'tmp.126': tmp.126 ulong <typeChecker.LocalAttributes object at 0x7f8f862d8d10>, 'tmp.127': tmp.127 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9220>, 'tmp.128': tmp.128 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862d9100>, 'tmp.129': tmp.129 long <typeChecker.LocalAttributes object at 0x7f8f862d94c0>, 'tmp.130': tmp.130 long <typeChecker.LocalAttributes object at 0x7f8f862d9370>, 'tmp.131': tmp.131 ulong <typeChecker.LocalAttributes object at 0x7f8f862d93a0>, 'tmp.132': tmp.132 int <typeChecker.LocalAttributes object at 0x7f8f862d9a90>, 'tmp.134': tmp.134 int <typeChecker.LocalAttributes object at 0x7f8f862d9ca0>, 'tmp.135': tmp.135 int <typeChecker.LocalAttributes object at 0x7f8f862d99a0>, 'tmp.138': tmp.138 int <typeChecker.LocalAttributes object at 0x7f8f862da060>, 'tmp.139': tmp.139 int <typeChecker.LocalAttributes object at 0x7f8f862d9850>, 'tmp.142': tmp.142 double <typeChecker.LocalAttributes object at 0x7f8f862da4e0>, 'tmp.143': tmp.143 int <typeChecker.LocalAttributes object at 0x7f8f862da5a0>, 'tmp.144': tmp.144 int <typeChecker.LocalAttributes object at 0x7f8f862d9700>, 'tmp.146': tmp.146 int <typeChecker.LocalAttributes object at 0x7f8f862daa80>, 'tmp.147': tmp.147 Pint <typeChecker.LocalAttributes object at 0x7f8f862dac30>, 'tmp.148': tmp.148 int <typeChecker.LocalAttributes object at 0x7f8f862daf60>, 'tmp.150': tmp.150 Pint <typeChecker.LocalAttributes object at 0x7f8f862db3b0>, 'tmp.151': tmp.151 Pint <typeChecker.LocalAttributes object at 0x7f8f862db290>, 'tmp.152': tmp.152 Pint <typeChecker.LocalAttributes object at 0x7f8f862db1d0>, 'tmp.153': tmp.153 Pint <typeChecker.LocalAttributes object at 0x7f8f862db110>, 'tmp.154': tmp.154 Pint <typeChecker.LocalAttributes object at 0x7f8f862daff0>, 'tmp.156': tmp.156 Pint <typeChecker.LocalAttributes object at 0x7f8f862db9e0>, 'tmp.157': tmp.157 Pint <typeChecker.LocalAttributes object at 0x7f8f862db8c0>, 'tmp.158': tmp.158 Pint <typeChecker.LocalAttributes object at 0x7f8f862db800>, 'tmp.159': tmp.159 Pint <typeChecker.LocalAttributes object at 0x7f8f862db740>, 'tmp.160': tmp.160 Pint <typeChecker.LocalAttributes object at 0x7f8f862dae10>, 'tmp.161': tmp.161 int <typeChecker.LocalAttributes object at 0x7f8f862dbf20>, 'tmp.162': tmp.162 int <typeChecker.LocalAttributes object at 0x7f8f862dbdd0>, 'tmp.163': tmp.163 int <typeChecker.LocalAttributes object at 0x7f8f862e01d0>, 'tmp.164': tmp.164 long <typeChecker.LocalAttributes object at 0x7f8f862dbd40>, 'tmp.165': tmp.165 long <typeChecker.LocalAttributes object at 0x7f8f862dbc20>, 'tmp.166': tmp.166 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0080>, 'tmp.167': tmp.167 Pint <typeChecker.LocalAttributes object at 0x7f8f862e0800>, 'tmp.168': tmp.168 Pint <typeChecker.LocalAttributes object at 0x7f8f862e06e0>, 'tmp.169': tmp.169 long <typeChecker.LocalAttributes object at 0x7f8f862e0aa0>, 'tmp.170': tmp.170 long <typeChecker.LocalAttributes object at 0x7f8f862e0950>, 'tmp.171': tmp.171 ulong <typeChecker.LocalAttributes object at 0x7f8f862e0980>, 'tmp.172': tmp.172 int <typeChecker.LocalAttributes object at 0x7f8f862e0470>, 'tmp.174': tmp.174 int <typeChecker.LocalAttributes object at 0x7f8f862e0d40>, 'tmp.175': tmp.175 int <typeChecker.LocalAttributes object at 0x7f8f862e0e00>, 'tmp.176': tmp.176 int <typeChecker.LocalAttributes object at 0x7f8f862e0380>, 'tmp.178': tmp.178 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1400>, 'tmp.179': tmp.179 long <typeChecker.LocalAttributes object at 0x7f8f862e16a0>, 'tmp.180': tmp.180 long <typeChecker.LocalAttributes object at 0x7f8f862e1550>, 'tmp.181': tmp.181 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1580>, 'tmp.182': tmp.182 Pint <typeChecker.LocalAttributes object at 0x7f8f862e1a00>, 'tmp.183': tmp.183 long <typeChecker.LocalAttributes object at 0x7f8f862e1ca0>, 'tmp.184': tmp.184 long <typeChecker.LocalAttributes object at 0x7f8f862e1b50>, 'tmp.185': tmp.185 ulong <typeChecker.LocalAttributes object at 0x7f8f862e1b80>, 'tmp.186': tmp.186 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2630>, 'tmp.187': tmp.187 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e2510>, 'tmp.188': tmp.188 long <typeChecker.LocalAttributes object at 0x7f8f862e28d0>, 'tmp.189': tmp.189 long <typeChecker.LocalAttributes object at 0x7f8f862e2780>, 'tmp.190': tmp.190 ulong <typeChecker.LocalAttributes object at 0x7f8f862e27b0>, 'tmp.191': tmp.191 int <typeChecker.LocalAttributes object at 0x7f8f862e2b70>, 'tmp.192': tmp.192 int <typeChecker.LocalAttributes object at 0x7f8f862e2c60>, 'tmp.193': tmp.193 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3830>, 'tmp.194': tmp.194 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862e3710>, 'tmp.195': tmp.195 long <typeChecker.LocalAttributes object at 0x7f8f862e3ad0>, 'tmp.196': tmp.196 long <typeChecker.LocalAttributes object at 0x7f8f862e3980>, 'tmp.197': tmp.197 ulong <typeChecker.LocalAttributes object at 0x7f8f862e39b0>, 'tmp.198': tmp.198 Pint <typeChecker.LocalAttributes object at 0x7f8f862e35c0>, 'tmp.199': tmp.199 long <typeChecker.LocalAttributes object at 0x7f8f862e3da0>, 'tmp.200': tmp.200 long <typeChecker.LocalAttributes object at 0x7f8f862e3c50>, 'tmp.201': tmp.201 ulong <typeChecker.LocalAttributes object at 0x7f8f862e3e30>, 'tmp.202': tmp.202 int <typeChecker.LocalAttributes object at 0x7f8f862e3fb0>, 'tmp.203': tmp.203 int <typeChecker.LocalAttributes object at 0x7f8f862e4170>, 'tmp.204': tmp.204 long <typeChecker.LocalAttributes object at 0x7f8f862e44d0>, 'tmp.205': tmp.205 long <typeChecker.LocalAttributes object at 0x7f8f862e46b0>, 'tmp.206': tmp.206 long <typeChecker.LocalAttributes object at 0x7f8f862e4860>, 'tmp.207': tmp.207 long <typeChecker.LocalAttributes object at 0x7f8f862e4a10>, 'tmp.208': tmp.208 long <typeChecker.LocalAttributes object at 0x7f8f862e4bc0>, 'tmp.209': tmp.209 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4e60>, 'tmp.210': tmp.210 Plong <typeChecker.LocalAttributes object at 0x7f8f862e4d40>, 'tmp.211': tmp.211 long <typeChecker.LocalAttributes object at 0x7f8f862e5100>, 'tmp.212': tmp.212 long <typeChecker.LocalAttributes object at 0x7f8f862e4fb0>, 'tmp.213': tmp.213 ulong <typeChecker.LocalAttributes object at 0x7f8f862e4fe0>, 'tmp.214': tmp.214 Plong <typeChecker.LocalAttributes object at 0x7f8f862e53d0>, 'tmp.215': tmp.215 long <typeChecker.LocalAttributes object at 0x7f8f862e5670>, 'tmp.216': tmp.216 long <typeChecker.LocalAttributes object at 0x7f8f862e5520>, 'tmp.217': tmp.217 Plong <typeChecker.LocalAttributes object at 0x7f8f862e52e0>, 'tmp.218': tmp.218 ulong <typeChecker.LocalAttributes object at 0x7f8f862e5820>, 'tmp.219': tmp.219 long <typeChecker.LocalAttributes object at 0x7f8f862e5a60>, 'tmp.220': tmp.220 long <typeChecker.LocalAttributes object at 0x7f8f862e5d30>, 'tmp.221': tmp.221 int <typeChecker.LocalAttributes object at 0x7f8f862e5b20>, 'tmp.222': tmp.222 uint <typeChecker.LocalAttributes object at 0x7f8f862e5fa0>, 'tmp.223': tmp.223 uint <typeChecker.LocalAttributes object at 0x7f8f862e6150>, 'tmp.224': tmp.224 uint <typeChecker.LocalAttributes object at 0x7f8f862e6300>, 'tmp.225': tmp.225 uint <typeChecker.LocalAttributes object at 0x7f8f862e64b0>, 'tmp.226': tmp.226 uint <typeChecker.LocalAttributes object at 0x7f8f862e6660>, 'tmp.227': tmp.227 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6900>, 'tmp.228': tmp.228 Puint <typeChecker.LocalAttributes object at 0x7f8f862e67e0>, 'tmp.229': tmp.229 int <typeChecker.LocalAttributes object at 0x7f8f862e6cf0>, 'tmp.230': tmp.230 long <typeChecker.LocalAttributes object at 0x7f8f862e6ba0>, 'tmp.231': tmp.231 long <typeChecker.LocalAttributes object at 0x7f8f862e6a50>, 'tmp.232': tmp.232 Puint <typeChecker.LocalAttributes object at 0x7f8f862e6720>, 'tmp.233': tmp.233 ulong <typeChecker.LocalAttributes object at 0x7f8f862e6ea0>, 'tmp.234': tmp.234 uint <typeChecker.LocalAttributes object at 0x7f8f862e70e0>, 'tmp.235': tmp.235 uint <typeChecker.LocalAttributes object at 0x7f8f862e73b0>, 'tmp.236': tmp.236 int <typeChecker.LocalAttributes object at 0x7f8f862e71a0>, 'tmp.237': tmp.237 double <typeChecker.LocalAttributes object at 0x7f8f862e7620>, 'tmp.238': tmp.238 double <typeChecker.LocalAttributes object at 0x7f8f862e77d0>, 'tmp.239': tmp.239 double <typeChecker.LocalAttributes object at 0x7f8f862e7980>, 'tmp.240': tmp.240 double <typeChecker.LocalAttributes object at 0x7f8f862e7b30>, 'tmp.241': tmp.241 double <typeChecker.LocalAttributes object at 0x7f8f862e7ce0>, 'tmp.242': tmp.242 double <typeChecker.LocalAttributes object at 0x7f8f862e7e90>, 'tmp.243': tmp.243 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec440>, 'tmp.244': tmp.244 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec320>, 'tmp.245': tmp.245 long <typeChecker.LocalAttributes object at 0x7f8f862ec6e0>, 'tmp.246': tmp.246 long <typeChecker.LocalAttributes object at 0x7f8f862ec590>, 'tmp.247': tmp.247 ulong <typeChecker.LocalAttributes object at 0x7f8f862ec5c0>, 'tmp.248': tmp.248 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec9b0>, 'tmp.249': tmp.249 long <typeChecker.LocalAttributes object at 0x7f8f862ecc50>, 'tmp.250': tmp.250 long <typeChecker.LocalAttributes object at 0x7f8f862ecb00>, 'tmp.251': tmp.251 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ec8c0>, 'tmp.252': tmp.252 ulong <typeChecker.LocalAttributes object at 0x7f8f862ece00>, 'tmp.253': tmp.253 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed070>, 'tmp.254': tmp.254 long <typeChecker.LocalAttributes object at 0x7f8f862ed1c0>, 'tmp.255': tmp.255 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ecf80>, 'tmp.256': tmp.256 ulong <typeChecker.LocalAttributes object at 0x7f8f862ed3a0>, 'tmp.257': tmp.257 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed610>, 'tmp.258': tmp.258 long <typeChecker.LocalAttributes object at 0x7f8f862ed8b0>, 'tmp.259': tmp.259 long <typeChecker.LocalAttributes object at 0x7f8f862ed760>, 'tmp.260': tmp.260 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862ed520>, 'tmp.261': tmp.261 ulong <typeChecker.LocalAttributes object at 0x7f8f862eda90>, 'tmp.262': tmp.262 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edd00>, 'tmp.263': tmp.263 long <typeChecker.LocalAttributes object at 0x7f8f862edfa0>, 'tmp.264': tmp.264 long <typeChecker.LocalAttributes object at 0x7f8f862ede50>, 'tmp.265': tmp.265 Pdouble <typeChecker.LocalAttributes object at 0x7f8f862edc10>, 'tmp.266': tmp.266 ulong <typeChecker.LocalAttributes object at 0x7f8f862ee180>, 'tmp.267': tmp.267 int <typeChecker.LocalAttributes object at 0x7f8f862ee6f0>, 'tmp.269': tmp.269 int <typeChecker.LocalAttributes object at 0x7f8f862ee900>, 'tmp.270': tmp.270 int <typeChecker.LocalAttributes object at 0x7f8f862ee600>, 'tmp.273': tmp.273 int <typeChecker.LocalAttributes object at 0x7f8f862eecc0>, 'tmp.274': tmp.274 int <typeChecker.LocalAttributes object at 0x7f8f862ee4b0>, 'tmp.277': tmp.277 double <typeChecker.LocalAttributes object at 0x7f8f862ef140>, 'tmp.278': tmp.278 int <typeChecker.LocalAttributes object at 0x7f8f862ef200>, 'tmp.279': tmp.279 int <typeChecker.LocalAttributes object at 0x7f8f862ee360>, 'tmp.281': tmp.281 int <typeChecker.LocalAttributes object at 0x7f8f862ef890>, 'tmp.283': tmp.283 Pint <typeChecker.LocalAttributes object at 0x7f8f862efce0>, 'tmp.284': tmp.284 Pint <typeChecker.LocalAttributes object at 0x7f8f862efbc0>, 'tmp.285': tmp.285 Pint <typeChecker.LocalAttributes object at 0x7f8f862efb00>, 'tmp.286': tmp.286 Pint <typeChecker.LocalAttributes object at 0x7f8f862efa40>, 'tmp.287': tmp.287 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef920>, 'tmp.289': tmp.289 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0380>, 'tmp.290': tmp.290 Pint <typeChecker.LocalAttributes object at 0x7f8f862f0260>, 'tmp.291': tmp.291 Pint <typeChecker.LocalAttributes object at 0x7f8f862f01a0>, 'tmp.292': tmp.292 Pint <typeChecker.LocalAttributes object at 0x7f8f862effb0>, 'tmp.293': tmp.293 Pint <typeChecker.LocalAttributes object at 0x7f8f862ef710>, 'tmp.294': tmp.294 int <typeChecker.LocalAttributes object at 0x7f8f862f09e0>, 'tmp.295': tmp.295 int <typeChecker.LocalAttributes object at 0x7f8f862f0770>, 'tmp.296': tmp.296 long <typeChecker.LocalAttributes object at 0x7f8f862f0710>, 'tmp.297': tmp.297 long <typeChecker.LocalAttributes object at 0x7f8f862f0650>, 'tmp.298': tmp.298 Pint <typeChecker.LocalAttributes object at 0x7f8f862f04d0>, 'tmp.299': tmp.299 ulong <typeChecker.LocalAttributes object at 0x7f8f862f0b90>, 'tmp.300': tmp.300 int <typeChecker.LocalAttributes object at 0x7f8f862f0e00>, 'tmp.301': tmp.301 int <typeChecker.LocalAttributes object at 0x7f8f862f0ec0>, 'tmp.302': tmp.302 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1820>, 'tmp.303': tmp.303 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1700>, 'tmp.304': tmp.304 long <typeChecker.LocalAttributes object at 0x7f8f862f1ac0>, 'tmp.305': tmp.305 long <typeChecker.LocalAttributes object at 0x7f8f862f1970>, 'tmp.306': tmp.306 ulong <typeChecker.LocalAttributes object at 0x7f8f862f19a0>, 'tmp.307': tmp.307 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1dc0>, 'tmp.308': tmp.308 long <typeChecker.LocalAttributes object at 0x7f8f862f2060>, 'tmp.309': tmp.309 long <typeChecker.LocalAttributes object at 0x7f8f862f1f10>, 'tmp.310': tmp.310 PArrayType: int Size: 3 <typeChecker.LocalAttributes object at 0x7f8f862f1cd0>, 'tmp.311': tmp.311 ulong <typeChecker.LocalAttributes object at 0x7f8f862f2210>, 'tmp.312': tmp.312 int <typeChecker.LocalAttributes object at 0x7f8f862f2480>, 'tmp.313': tmp.313 int <typeChecker.LocalAttributes object at 0x7f8f862f2570>, 'tmp.314': tmp.314 int <typeChecker.LocalAttributes object at 0x7f8f862f27b0>, 'tmp.315': tmp.315 int <typeChecker.LocalAttributes object at 0x7f8f862f2810>, 'tmp.316': tmp.316 int <typeChecker.LocalAttributes object at 0x7f8f862f26c0>, 'tmp.318': tmp.318 int <typeChecker.LocalAttributes object at 0x7f8f862f2d50>, 'tmp.319': tmp.319 int <typeChecker.LocalAttributes object at 0x7f8f862f2cf0>, 'tmp.320': tmp.320 int <typeChecker.LocalAttributes object at 0x7f8f862f2a20>, 'tmp.322': tmp.322 int <typeChecker.LocalAttributes object at 0x7f8f862f31d0>, 'tmp.323': tmp.323 int <typeChecker.LocalAttributes object at 0x7f8f862f3170>, 'tmp.324': tmp.324 int <typeChecker.LocalAttributes object at 0x7f8f862f2ea0>, 'tmp.326': tmp.326 int <typeChecker.LocalAttributes object at 0x7f8f862f3650>, 'tmp.327': tmp.327 int <typeChecker.LocalAttributes object at 0x7f8f862f35f0>, 'tmp.328': tmp.328 int <typeChecker.LocalAttributes object at 0x7f8f862f3320>, 'tmp.330': tmp.330 int <typeChecker.LocalAttributes object at 0x7f8f862f3ad0>, 'tmp.331': tmp.331 int <typeChecker.LocalAttributes object at 0x7f8f862f3a70>, 'tmp.332': tmp.332 int <typeChecker.LocalAttributes object at 0x7f8f862f37a0>, 'tmp.334': tmp.334 int <typeChecker.LocalAttributes object at 0x7f8f862f3f80>, 'tmp.335': tmp.335 int <typeChecker.LocalAttributes object at 0x7f8f862f3ef0>, 'tmp.336': tmp.336 int <typeChecker.LocalAttributes object at 0x7f8f862f3c20>, 'tmp.338': tmp.338 int <typeChecker.LocalAttributes object at 0x7f8f862f4470>, 'tmp.339': tmp.339 int <typeChecker.LocalAttributes object at 0x7f8f862f4410>, 'tmp.340': tmp.340 int <typeChecker.LocalAttributes object at 0x7f8f862f42c0>, 'tmp.342': tmp.342 int <typeChecker.LocalAttributes object at 0x7f8f862f4920>, 'tmp.343': tmp.343 int <typeChecker.LocalAttributes object at 0x7f8f862f48c0>, 'tmp.344': tmp.344 int <typeChecker.LocalAttributes object at 0x7f8f862f45f0>, 'tmp.346': tmp.346 int <typeChecker.LocalAttributes object at 0x7f8f862f4dd0>, 'tmp.347': tmp.347 int <typeChecker.LocalAttributes object at 0x7f8f862f4d70>, 'tmp.348': tmp.348 int <typeChecker.LocalAttributes object at 0x7f8f862f4aa0>, 'tmp.350': tmp.350 int <typeChecker.LocalAttributes object at 0x7f8f862f5250>, 'tmp.351': tmp.351 int <typeChecker.LocalAttributes object at 0x7f8f862f51f0>, 'tmp.352': tmp.352 int <typeChecker.LocalAttributes object at 0x7f8f862f4f20>, 'tmp.354': tmp.354 int <typeChecker.LocalAttributes object at 0x7f8f862f56d0>, 'tmp.355': tmp.355 int <typeChecker.LocalAttributes object at 0x7f8f862f5670>, 'tmp.356': tmp.356 int <typeChecker.LocalAttributes object at 0x7f8f862f53a0>}
All Aliased Vars:
 {nested_arr.26, arr.43, nested_arr.23, index.25, long_arr.0, i.14, arr.18, double_arr.35, index.22, flag.13, index.31, nested_arr.46, flag.41, unsigned_arr.2, long_arr.29, index.45, double_arr.8, arr.33, int_arr.5, four.42}
IntParams: []
96
<class 'parser.LongType'>
IntParams: []
48
<class 'parser.UIntType'>
IntParams: []
20
20
<class 'parser.ULongType'>
<class 'parser.IntType'>
IntParams: []
88
88
88
88
<class 'parser.ULongType'>
<class 'parser.ULongType'>
<class 'parser.ULongType'>
<class 'parser.DoubleType'>
IntParams: []
16
IntDests: [(Quadword, Pseudo(tmp.152))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.150)
IntArgs: [(Quadword, Pseudo(tmp.150))]
DoubleArgs: []
StackArgs: []
16
IntDests: [(Quadword, Pseudo(tmp.158))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.156)
IntArgs: [(Quadword, Pseudo(tmp.156))]
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.161))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
16
<class 'parser.ULongType'>
<class 'parser.IntType'>
IntParams: []
Operand: Pseudo(arr.20)
IntParams: [(Quadword, Pseudo(arr.20))]
Operand: Pseudo(arr.21)
IntParams: [(Quadword, Pseudo(arr.21))]
IntParams: []
36
<class 'parser.IntType'>
IntParams: []
36
<class 'parser.IntType'>
IntParams: []
40
<class 'parser.LongType'>
IntParams: []
20
<class 'parser.UIntType'>
IntParams: []
88
<class 'parser.ULongType'>
<class 'parser.ULongType'>
<class 'parser.ULongType'>
<class 'parser.DoubleType'>
IntParams: []
16
IntDests: [(Quadword, Pseudo(tmp.285))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.283)
IntArgs: [(Quadword, Pseudo(tmp.283))]
DoubleArgs: []
StackArgs: []
16
IntDests: [(Quadword, Pseudo(tmp.291))]
DoubleDests: []
ReturnInMemory: False
Operand: Pseudo(tmp.289)
IntArgs: [(Quadword, Pseudo(tmp.289))]
DoubleArgs: []
StackArgs: []
<class 'parser.IntType'>
IntParams: []
36
<class 'parser.IntType'>
IntParams: []
IntDests: [(Longword, Pseudo(tmp.314))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.318))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.322))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.326))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.330))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.334))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.338))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.342))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.346))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.350))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
IntDests: [(Longword, Pseudo(tmp.354))]
DoubleDests: []
ReturnInMemory: False
IntArgs: []
DoubleArgs: []
StackArgs: []
16
16
96
48
20
88
16
36
36
40
20
88
16
36
ASM Program: [Function test_add_constant_to_pointer stackOffset: None global: True instructions:[AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)), AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)), AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)), Lea(PseudoMem(long_arr.0, 0), Pseudo(tmp.60)), AssType: Quadword Mov(Pseudo(tmp.60), Reg(AX)), Lea(Memory(AX, 80), Pseudo(tmp.64)), AssType: Quadword Mov(Pseudo(tmp.64), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.65)), AssType: Quadword Cmp(Imm(13), Pseudo(tmp.65)), AssType: Longword Mov(Imm(0), Pseudo(tmp.67)), SetCC(ConcCodeType.E, Pseudo(tmp.67)), AssType: Longword Mov(Pseudo(tmp.67), Reg(AX)), ret], Function test_add_negative_index stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(0), Pseudo(tmp.68)), AssType: Longword Mov(Pseudo(tmp.68), PseudoMem(unsigned_arr.2, 0)), AssType: Longword Mov(Imm(0), Pseudo(tmp.69)), AssType: Longword Mov(Pseudo(tmp.69), PseudoMem(unsigned_arr.2, 4)), AssType: Longword Mov(Imm(2), Pseudo(tmp.70)), AssType: Longword Mov(Pseudo(tmp.70), PseudoMem(unsigned_arr.2, 8)), AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), AssType: Longword Mov(Pseudo(tmp.71), PseudoMem(unsigned_arr.2, 12)), AssType: Longword Mov(Imm(0), Pseudo(tmp.72)), AssType: Longword Mov(Pseudo(tmp.72), PseudoMem(unsigned_arr.2, 16)), AssType: Longword Mov(Imm(0), Pseudo(tmp.73)), AssType: Longword Mov(Pseudo(tmp.73), PseudoMem(unsigned_arr.2, 20)), AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), AssType: Longword Mov(Pseudo(tmp.74), PseudoMem(unsigned_arr.2, 24)), AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), AssType: Longword Mov(Pseudo(tmp.75), PseudoMem(unsigned_arr.2, 28)), AssType: Longword Mov(Imm(0), Pseudo(tmp.76)), AssType: Longword Mov(Pseudo(tmp.76), PseudoMem(unsigned_arr.2, 32)), AssType: Longword Mov(Imm(0), Pseudo(tmp.77)), AssType: Longword Mov(Pseudo(tmp.77), PseudoMem(unsigned_arr.2, 36)), AssType: Longword Mov(Imm(42), Pseudo(tmp.78)), AssType: Longword Mov(Pseudo(tmp.78), PseudoMem(unsigned_arr.2, 40)), AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)), Lea(PseudoMem(unsigned_arr.2, 0), Pseudo(tmp.79)), AssType: Quadword Mov(Pseudo(tmp.79), Reg(AX)), Lea(Memory(AX, 48), Pseudo(tmp.83)), AssType: Longword Mov(Imm(10), Pseudo(tmp.85)), AssType: Longword Unary(Neg, Pseudo(tmp.85)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.85), Pseudo(tmp.86)), AssType: Quadword Mov(Pseudo(tmp.83), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.86), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.88)), AssType: Quadword Mov(Pseudo(tmp.88), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.89)), AssType: Longword Mov(Imm(2), Pseudo(tmp.90)), AssType: Longword Cmp(Pseudo(tmp.90), Pseudo(tmp.89)), AssType: Longword Mov(Imm(0), Pseudo(tmp.91)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.91)), AssType: Longword Mov(Pseudo(tmp.91), Reg(AX)), ret], Function test_add_pointer_to_int stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)), AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)), AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)), AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)), AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)), Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.92)), AssType: Quadword Mov(Pseudo(tmp.92), Reg(AX)), Lea(Memory(AX, 8), Pseudo(tmp.96)), Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.97)), AssType: Quadword Mov(Pseudo(tmp.97), Reg(AX)), Lea(Memory(AX, 8), Pseudo(tmp.101)), AssType: Quadword Cmp(Pseudo(tmp.101), Pseudo(tmp.96)), AssType: Longword Mov(Imm(0), Pseudo(tmp.102)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.102)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.102)), JmpCC(ConcCodeType.E, tmp.103), AssType: Quadword Mov(Pseudo(tmp.101), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.104)), AssType: Longword Cmp(Imm(99), Pseudo(tmp.104)), AssType: Longword Mov(Imm(0), Pseudo(tmp.105)), SetCC(ConcCodeType.E, Pseudo(tmp.105)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.105)), JmpCC(ConcCodeType.E, tmp.103), AssType: Longword Mov(Imm(1), Pseudo(tmp.106)), Jmp(tmp.107), Label(tmp.103), AssType: Longword Mov(Imm(0), Pseudo(tmp.106)), Label(tmp.107), AssType: Longword Mov(Pseudo(tmp.106), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.358 = c_double(6.0), Static Constant: Alignment = 8 : tmp.359 = c_double(0.0), Static Constant: Alignment = 8 : tmp.360 = c_double(0.0), Static Constant: Alignment = 8 : tmp.361 = c_double(0.0), Static Constant: Alignment = 8 : tmp.362 = c_double(0.0), Static Constant: Alignment = 8 : tmp.363 = c_double(0.0), Static Constant: Alignment = 8 : tmp.364 = c_double(6.0), Function test_add_different_index_types stackOffset: None global: True instructions:[AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)), AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)), AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)), AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)), AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)), AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)), AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)), AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.113)), AssType: Quadword Mov(Pseudo(tmp.113), Reg(AX)), Lea(Memory(AX, 40), Pseudo(tmp.117)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.118)), AssType: Quadword Mov(Pseudo(tmp.118), Reg(AX)), Lea(Memory(AX, 40), Pseudo(tmp.121)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.122)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.124)), AssType: Quadword Mov(Pseudo(tmp.122), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.124), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.126)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.127)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.129)), AssType: Quadword Mov(Pseudo(tmp.127), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.129), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.131)), AssType: Quadword Cmp(Pseudo(tmp.121), Pseudo(tmp.117)), AssType: Longword Mov(Imm(0), Pseudo(tmp.132)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.132)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.132)), JmpCC(ConcCodeType.E, tmp.133), AssType: Quadword Cmp(Pseudo(tmp.126), Pseudo(tmp.117)), AssType: Longword Mov(Imm(0), Pseudo(tmp.134)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.134)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.134)), JmpCC(ConcCodeType.E, tmp.133), AssType: Longword Mov(Imm(1), Pseudo(tmp.135)), Jmp(tmp.136), Label(tmp.133), AssType: Longword Mov(Imm(0), Pseudo(tmp.135)), Label(tmp.136), AssType: Longword Cmp(Imm(0), Pseudo(tmp.135)), JmpCC(ConcCodeType.E, tmp.137), AssType: Quadword Cmp(Pseudo(tmp.131), Pseudo(tmp.117)), AssType: Longword Mov(Imm(0), Pseudo(tmp.138)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.138)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.138)), JmpCC(ConcCodeType.E, tmp.137), AssType: Longword Mov(Imm(1), Pseudo(tmp.139)), Jmp(tmp.140), Label(tmp.137), AssType: Longword Mov(Imm(0), Pseudo(tmp.139)), Label(tmp.140), AssType: Longword Cmp(Imm(0), Pseudo(tmp.139)), JmpCC(ConcCodeType.E, tmp.141), AssType: Quadword Mov(Pseudo(tmp.131), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)), AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)), AssType: Longword Mov(Imm(0), Pseudo(tmp.143)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.143)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.143)), JmpCC(ConcCodeType.E, tmp.141), AssType: Longword Mov(Imm(1), Pseudo(tmp.144)), Jmp(tmp.145), Label(tmp.141), AssType: Longword Mov(Imm(0), Pseudo(tmp.144)), Label(tmp.145), AssType: Longword Mov(Pseudo(tmp.144), Reg(AX)), ret], Function test_add_complex_expressions stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(2), Pseudo(tmp.146)), AssType: Longword Unary(Neg, Pseudo(tmp.146)), AssType: Longword Mov(Pseudo(tmp.146), Pseudo(i.14)), Lea(Pseudo(i.14), Pseudo(tmp.147)), AssType: Longword Cmp(Imm(0), Pseudo(flag.13)), JmpCC(ConcCodeType.E, tmp.149), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.150)), AssType: Quadword Mov(Pseudo(tmp.150), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.152)), AssType: Quadword Mov(Pseudo(tmp.152), Pseudo(tmp.154)), Jmp(tmp.155), Label(tmp.149), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156)), AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158)), AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154)), Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Pseudo(tmp.161)), AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162)), AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163)), AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164)), AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.166)), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167)), AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX)), Lea(Memory(AX, 4), Pseudo(tmp.171)), AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166)), AssType: Longword Mov(Imm(0), Pseudo(tmp.172)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.172)), JmpCC(ConcCodeType.E, tmp.173), AssType: Quadword Mov(Pseudo(tmp.166), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.174)), AssType: Longword Cmp(Imm(2), Pseudo(tmp.174)), AssType: Longword Mov(Imm(0), Pseudo(tmp.175)), SetCC(ConcCodeType.E, Pseudo(tmp.175)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.175)), JmpCC(ConcCodeType.E, tmp.173), AssType: Longword Mov(Imm(1), Pseudo(tmp.176)), Jmp(tmp.177), Label(tmp.173), AssType: Longword Mov(Imm(0), Pseudo(tmp.176)), Label(tmp.177), AssType: Longword Mov(Pseudo(tmp.176), Reg(AX)), ret], Function return_one stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(1), Reg(AX)), ret], Function get_elem1_ptr stackOffset: None global: True instructions:[AssType: Quadword Mov(Reg(DI), Pseudo(arr.20)), AssType: Quadword Mov(Pseudo(arr.20), Reg(AX)), Lea(Memory(AX, 4), Pseudo(tmp.181)), AssType: Quadword Mov(Pseudo(tmp.181), Reg(AX)), ret], Function get_elem2_ptr stackOffset: None global: True instructions:[AssType: Quadword Mov(Reg(DI), Pseudo(arr.21)), AssType: Quadword Mov(Pseudo(arr.21), Reg(AX)), Lea(Memory(AX, 8), Pseudo(tmp.185)), AssType: Quadword Mov(Pseudo(tmp.185), Reg(AX)), ret], Function test_add_multi_dimensional stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)), Lea(PseudoMem(nested_arr.23, 0), Pseudo(tmp.186)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Pseudo(tmp.188)), AssType: Quadword Mov(Pseudo(tmp.186), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.188), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Pseudo(tmp.190)), AssType: Quadword Mov(Pseudo(tmp.190), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.191)), AssType: Longword Cmp(Imm(7), Pseudo(tmp.191)), AssType: Longword Mov(Imm(0), Pseudo(tmp.192)), SetCC(ConcCodeType.E, Pseudo(tmp.192)), AssType: Longword Mov(Pseudo(tmp.192), Reg(AX)), ret], Function test_add_to_subarray_pointer stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)), Lea(PseudoMem(nested_arr.26, 0), Pseudo(tmp.193)), AssType: Quadword Mov(Pseudo(tmp.193), Reg(AX)), Lea(Memory(AX, 12), Pseudo(tmp.197)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Pseudo(tmp.199)), AssType: Quadword Mov(Pseudo(tmp.197), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.199), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.201)), AssType: Quadword Mov(Pseudo(tmp.201), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.202)), AssType: Longword Cmp(Imm(6), Pseudo(tmp.202)), AssType: Longword Mov(Imm(0), Pseudo(tmp.203)), SetCC(ConcCodeType.E, Pseudo(tmp.203)), AssType: Longword Mov(Pseudo(tmp.203), Reg(AX)), ret], Function test_subtract_from_pointer stackOffset: None global: True instructions:[AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)), AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)), AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)), AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)), AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)), Lea(PseudoMem(long_arr.29, 0), Pseudo(tmp.209)), AssType: Quadword Mov(Pseudo(tmp.209), Reg(AX)), Lea(Memory(AX, 40), Pseudo(tmp.213)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Pseudo(tmp.215)), AssType: Quadword Mov(Pseudo(tmp.215), Pseudo(tmp.217)), AssType: Quadword Unary(Neg, Pseudo(tmp.217)), AssType: Quadword Mov(Pseudo(tmp.213), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.217), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.218)), AssType: Quadword Mov(Pseudo(tmp.218), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.219)), AssType: Quadword Cmp(Imm(8), Pseudo(tmp.219)), AssType: Longword Mov(Imm(0), Pseudo(tmp.221)), SetCC(ConcCodeType.E, Pseudo(tmp.221)), AssType: Longword Mov(Pseudo(tmp.221), Reg(AX)), ret], Function test_subtract_negative_index stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(100), Pseudo(tmp.222)), AssType: Longword Mov(Pseudo(tmp.222), PseudoMem(arr.33, 0)), AssType: Longword Mov(Imm(101), Pseudo(tmp.223)), AssType: Longword Mov(Pseudo(tmp.223), PseudoMem(arr.33, 4)), AssType: Longword Mov(Imm(102), Pseudo(tmp.224)), AssType: Longword Mov(Pseudo(tmp.224), PseudoMem(arr.33, 8)), AssType: Longword Mov(Imm(103), Pseudo(tmp.225)), AssType: Longword Mov(Pseudo(tmp.225), PseudoMem(arr.33, 12)), AssType: Longword Mov(Imm(104), Pseudo(tmp.226)), AssType: Longword Mov(Pseudo(tmp.226), PseudoMem(arr.33, 16)), Lea(PseudoMem(arr.33, 0), Pseudo(tmp.227)), AssType: Longword Mov(Imm(3), Pseudo(tmp.229)), AssType: Longword Unary(Neg, Pseudo(tmp.229)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.229), Pseudo(tmp.230)), AssType: Quadword Mov(Pseudo(tmp.230), Pseudo(tmp.232)), AssType: Quadword Unary(Neg, Pseudo(tmp.232)), AssType: Quadword Mov(Pseudo(tmp.227), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.232), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.233)), AssType: Quadword Mov(Pseudo(tmp.233), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.234)), AssType: Longword Mov(Imm(103), Pseudo(tmp.235)), AssType: Longword Cmp(Pseudo(tmp.235), Pseudo(tmp.234)), AssType: Longword Mov(Imm(0), Pseudo(tmp.236)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.236)), AssType: Longword Mov(Pseudo(tmp.236), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.365 = c_double(6.0), Static Constant: Alignment = 8 : tmp.366 = c_double(0.0), Static Constant: Alignment = 8 : tmp.367 = c_double(0.0), Static Constant: Alignment = 8 : tmp.368 = c_double(0.0), Static Constant: Alignment = 8 : tmp.369 = c_double(0.0), Static Constant: Alignment = 8 : tmp.370 = c_double(6.0), Function test_subtract_different_index_types stackOffset: None global: True instructions:[AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)), AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)), AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)), AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)), AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)), AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)), AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)), AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)), AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)), AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)), AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)), AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)), Lea(PseudoMem(double_arr.35, 0), Pseudo(tmp.243)), AssType: Quadword Mov(Pseudo(tmp.243), Reg(AX)), Lea(Memory(AX, 88), Pseudo(tmp.247)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.251)), AssType: Quadword Unary(Neg, Pseudo(tmp.251)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.251), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.252)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.255)), AssType: Quadword Unary(Neg, Pseudo(tmp.255)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.255), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.256)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.258)), AssType: Quadword Mov(Pseudo(tmp.258), Pseudo(tmp.260)), AssType: Quadword Unary(Neg, Pseudo(tmp.260)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.260), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.261)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.263)), AssType: Quadword Mov(Pseudo(tmp.263), Pseudo(tmp.265)), AssType: Quadword Unary(Neg, Pseudo(tmp.265)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.265), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.266)), AssType: Quadword Cmp(Pseudo(tmp.256), Pseudo(tmp.252)), AssType: Longword Mov(Imm(0), Pseudo(tmp.267)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.267)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.267)), JmpCC(ConcCodeType.E, tmp.268), AssType: Quadword Cmp(Pseudo(tmp.261), Pseudo(tmp.252)), AssType: Longword Mov(Imm(0), Pseudo(tmp.269)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.269)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.269)), JmpCC(ConcCodeType.E, tmp.268), AssType: Longword Mov(Imm(1), Pseudo(tmp.270)), Jmp(tmp.271), Label(tmp.268), AssType: Longword Mov(Imm(0), Pseudo(tmp.270)), Label(tmp.271), AssType: Longword Cmp(Imm(0), Pseudo(tmp.270)), JmpCC(ConcCodeType.E, tmp.272), AssType: Quadword Cmp(Pseudo(tmp.266), Pseudo(tmp.252)), AssType: Longword Mov(Imm(0), Pseudo(tmp.273)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.273)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.273)), JmpCC(ConcCodeType.E, tmp.272), AssType: Longword Mov(Imm(1), Pseudo(tmp.274)), Jmp(tmp.275), Label(tmp.272), AssType: Longword Mov(Imm(0), Pseudo(tmp.274)), Label(tmp.275), AssType: Longword Cmp(Imm(0), Pseudo(tmp.274)), JmpCC(ConcCodeType.E, tmp.276), AssType: Quadword Mov(Pseudo(tmp.266), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)), AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)), AssType: Longword Mov(Imm(0), Pseudo(tmp.278)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.278)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.278)), JmpCC(ConcCodeType.E, tmp.276), AssType: Longword Mov(Imm(1), Pseudo(tmp.279)), Jmp(tmp.280), Label(tmp.276), AssType: Longword Mov(Imm(0), Pseudo(tmp.279)), Label(tmp.280), AssType: Longword Mov(Pseudo(tmp.279), Reg(AX)), ret], Function test_subtract_complex_expressions stackOffset: None global: True instructions:[AssType: Longword Cmp(Imm(0), Pseudo(flag.41)), JmpCC(ConcCodeType.E, tmp.282), Lea(PseudoMem(arr.43, 0), Pseudo(tmp.283)), AssType: Quadword Mov(Pseudo(tmp.283), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.285)), AssType: Quadword Mov(Pseudo(tmp.285), Pseudo(tmp.287)), Jmp(tmp.288), Label(tmp.282), Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289)), AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291)), AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287)), Label(tmp.288), AssType: Longword Mov(Imm(2), Pseudo(tmp.294)), AssType: Longword Unary(Neg, Pseudo(tmp.294)), AssType: Longword Mov(Pseudo(four.42), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Pseudo(tmp.294)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.295)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296)), AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298)), AssType: Quadword Unary(Neg, Pseudo(tmp.298)), AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.299)), AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300)), AssType: Longword Cmp(Imm(4), Pseudo(tmp.300)), AssType: Longword Mov(Imm(0), Pseudo(tmp.301)), SetCC(ConcCodeType.E, Pseudo(tmp.301)), AssType: Longword Mov(Pseudo(tmp.301), Reg(AX)), ret], Function test_subtract_multi_dimensional stackOffset: None global: True instructions:[AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)), Lea(PseudoMem(nested_arr.46, 0), Pseudo(tmp.302)), AssType: Quadword Mov(Pseudo(tmp.302), Reg(AX)), Lea(Memory(AX, 24), Pseudo(tmp.306)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Pseudo(tmp.308)), AssType: Quadword Mov(Pseudo(tmp.308), Pseudo(tmp.310)), AssType: Quadword Unary(Neg, Pseudo(tmp.310)), AssType: Quadword Mov(Pseudo(tmp.306), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.310), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Pseudo(tmp.311)), AssType: Quadword Mov(Pseudo(tmp.311), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.312)), AssType: Longword Cmp(Imm(4), Pseudo(tmp.312)), AssType: Longword Mov(Imm(0), Pseudo(tmp.313)), SetCC(ConcCodeType.E, Pseudo(tmp.313)), AssType: Longword Mov(Pseudo(tmp.313), Reg(AX)), ret], Function main stackOffset: None global: True instructions:[Call(test_add_constant_to_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.314)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.314)), AssType: Longword Mov(Imm(0), Pseudo(tmp.315)), SetCC(ConcCodeType.E, Pseudo(tmp.315)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.315)), JmpCC(ConcCodeType.E, tmp.317), AssType: Longword Mov(Imm(1), Reg(AX)), ret, Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Pseudo(tmp.318)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.318)), AssType: Longword Mov(Imm(0), Pseudo(tmp.319)), SetCC(ConcCodeType.E, Pseudo(tmp.319)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.319)), JmpCC(ConcCodeType.E, tmp.321), AssType: Longword Mov(Imm(2), Reg(AX)), ret, Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.322)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.322)), AssType: Longword Mov(Imm(0), Pseudo(tmp.323)), SetCC(ConcCodeType.E, Pseudo(tmp.323)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.323)), JmpCC(ConcCodeType.E, tmp.325), AssType: Longword Mov(Imm(3), Reg(AX)), ret, Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Pseudo(tmp.326)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.326)), AssType: Longword Mov(Imm(0), Pseudo(tmp.327)), SetCC(ConcCodeType.E, Pseudo(tmp.327)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.327)), JmpCC(ConcCodeType.E, tmp.329), AssType: Longword Mov(Imm(4), Reg(AX)), ret, Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Pseudo(tmp.330)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.330)), AssType: Longword Mov(Imm(0), Pseudo(tmp.331)), SetCC(ConcCodeType.E, Pseudo(tmp.331)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.331)), JmpCC(ConcCodeType.E, tmp.333), AssType: Longword Mov(Imm(5), Reg(AX)), ret, Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Pseudo(tmp.334)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.334)), AssType: Longword Mov(Imm(0), Pseudo(tmp.335)), SetCC(ConcCodeType.E, Pseudo(tmp.335)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.335)), JmpCC(ConcCodeType.E, tmp.337), AssType: Longword Mov(Imm(6), Reg(AX)), ret, Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.338)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.338)), AssType: Longword Mov(Imm(0), Pseudo(tmp.339)), SetCC(ConcCodeType.E, Pseudo(tmp.339)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.339)), JmpCC(ConcCodeType.E, tmp.341), AssType: Longword Mov(Imm(7), Reg(AX)), ret, Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.342)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.342)), AssType: Longword Mov(Imm(0), Pseudo(tmp.343)), SetCC(ConcCodeType.E, Pseudo(tmp.343)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.343)), JmpCC(ConcCodeType.E, tmp.345), AssType: Longword Mov(Imm(8), Reg(AX)), ret, Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Pseudo(tmp.346)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.346)), AssType: Longword Mov(Imm(0), Pseudo(tmp.347)), SetCC(ConcCodeType.E, Pseudo(tmp.347)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.347)), JmpCC(ConcCodeType.E, tmp.349), AssType: Longword Mov(Imm(9), Reg(AX)), ret, Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Pseudo(tmp.350)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.350)), AssType: Longword Mov(Imm(0), Pseudo(tmp.351)), SetCC(ConcCodeType.E, Pseudo(tmp.351)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.351)), JmpCC(ConcCodeType.E, tmp.353), AssType: Longword Mov(Imm(10), Reg(AX)), ret, Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Pseudo(tmp.354)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.354)), AssType: Longword Mov(Imm(0), Pseudo(tmp.355)), SetCC(ConcCodeType.E, Pseudo(tmp.355)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.355)), JmpCC(ConcCodeType.E, tmp.357), AssType: Longword Mov(Imm(11), Reg(AX)), ret, Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = False Alignment = 4 : flag.13 = [c_int(0)], Static Variable: Global = False Alignment = 16 : arr.18 = [c_int(1), c_int(2), c_int(3), c_int(4)], Static Variable: Global = False Alignment = 4 : index.22 = [c_int(2)], Static Variable: Global = False Alignment = 4 : index.25 = [c_int(2)], Static Variable: Global = False Alignment = 4 : index.31 = [c_int(3)], Static Variable: Global = False Alignment = 4 : flag.41 = [c_int(1)], Static Variable: Global = False Alignment = 4 : four.42 = [c_int(4)], Static Variable: Global = False Alignment = 16 : arr.43 = [c_int(1), c_int(2), c_int(3), c_int(4)], Static Variable: Global = False Alignment = 4 : index.45 = [c_int(1)]]
Type Table:
 {}
Backend Symbol Table:
 {'tmp.358': AssType: Double IsStatic: True IsConstant: True, 'tmp.359': AssType: Double IsStatic: True IsConstant: True, 'tmp.360': AssType: Double IsStatic: True IsConstant: True, 'tmp.361': AssType: Double IsStatic: True IsConstant: True, 'tmp.362': AssType: Double IsStatic: True IsConstant: True, 'tmp.363': AssType: Double IsStatic: True IsConstant: True, 'tmp.364': AssType: Double IsStatic: True IsConstant: True, 'tmp.365': AssType: Double IsStatic: True IsConstant: True, 'tmp.366': AssType: Double IsStatic: True IsConstant: True, 'tmp.367': AssType: Double IsStatic: True IsConstant: True, 'tmp.368': AssType: Double IsStatic: True IsConstant: True, 'tmp.369': AssType: Double IsStatic: True IsConstant: True, 'tmp.370': AssType: Double IsStatic: True IsConstant: True, 'test_add_constant_to_pointer': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'long_arr.0': AssType: ByteArray(Size = 96, Alignment = 16) IsStatic: False IsConstant: False, 'ptr.1': AssType: Quadword IsStatic: False IsConstant: False, 'test_add_negative_index': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'unsigned_arr.2': AssType: ByteArray(Size = 48, Alignment = 16) IsStatic: False IsConstant: False, 'end_ptr.3': AssType: Quadword IsStatic: False IsConstant: False, 'ptr.4': AssType: Quadword IsStatic: False IsConstant: False, 'test_add_pointer_to_int': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'int_arr.5': AssType: ByteArray(Size = 20, Alignment = 16) IsStatic: False IsConstant: False, 'ptr1.6': AssType: Quadword IsStatic: False IsConstant: False, 'ptr2.7': AssType: Quadword IsStatic: False IsConstant: False, 'test_add_different_index_types': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'double_arr.8': AssType: ByteArray(Size = 88, Alignment = 16) IsStatic: False IsConstant: False, 'ptr1.9': AssType: Quadword IsStatic: False IsConstant: False, 'ptr2.10': AssType: Quadword IsStatic: False IsConstant: False, 'ptr3.11': AssType: Quadword IsStatic: False IsConstant: False, 'ptr4.12': AssType: Quadword IsStatic: False IsConstant: False, 'test_add_complex_expressions': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'flag.13': AssType: Longword IsStatic: True IsConstant: False, 'i.14': AssType: Longword IsStatic: False IsConstant: False, 'small_int_ptr.15': AssType: Quadword IsStatic: False IsConstant: False, 'return_one': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'get_elem1_ptr': Defined: True ReturnOnStack: False IntParams: OrderedSet([Reg(DI)]) DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'get_elem2_ptr': Defined: True ReturnOnStack: False IntParams: OrderedSet([Reg(DI)]) DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'arr.18': AssType: ByteArray(Size = 16, Alignment = 16) IsStatic: True IsConstant: False, 'ptr.19': AssType: Quadword IsStatic: False IsConstant: False, 'arr.20': AssType: Quadword IsStatic: False IsConstant: False, 'arr.21': AssType: Quadword IsStatic: False IsConstant: False, 'test_add_multi_dimensional': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'index.22': AssType: Longword IsStatic: True IsConstant: False, 'nested_arr.23': AssType: ByteArray(Size = 36, Alignment = 16) IsStatic: False IsConstant: False, 'row_pointer.24': AssType: Quadword IsStatic: False IsConstant: False, 'test_add_to_subarray_pointer': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'index.25': AssType: Longword IsStatic: True IsConstant: False, 'nested_arr.26': AssType: ByteArray(Size = 36, Alignment = 16) IsStatic: False IsConstant: False, 'row1.27': AssType: Quadword IsStatic: False IsConstant: False, 'elem_ptr.28': AssType: Quadword IsStatic: False IsConstant: False, 'test_subtract_from_pointer': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'long_arr.29': AssType: ByteArray(Size = 40, Alignment = 16) IsStatic: False IsConstant: False, 'one_past_the_end.30': AssType: Quadword IsStatic: False IsConstant: False, 'index.31': AssType: Longword IsStatic: True IsConstant: False, 'subtraction_result.32': AssType: Quadword IsStatic: False IsConstant: False, 'test_subtract_negative_index': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'arr.33': AssType: ByteArray(Size = 20, Alignment = 16) IsStatic: False IsConstant: False, 'ptr.34': AssType: Quadword IsStatic: False IsConstant: False, 'test_subtract_different_index_types': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'double_arr.35': AssType: ByteArray(Size = 88, Alignment = 16) IsStatic: False IsConstant: False, 'end_ptr.36': AssType: Quadword IsStatic: False IsConstant: False, 'ptr1.37': AssType: Quadword IsStatic: False IsConstant: False, 'ptr2.38': AssType: Quadword IsStatic: False IsConstant: False, 'ptr3.39': AssType: Quadword IsStatic: False IsConstant: False, 'ptr4.40': AssType: Quadword IsStatic: False IsConstant: False, 'test_subtract_complex_expressions': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'flag.41': AssType: Longword IsStatic: True IsConstant: False, 'four.42': AssType: Longword IsStatic: True IsConstant: False, 'arr.43': AssType: ByteArray(Size = 16, Alignment = 16) IsStatic: True IsConstant: False, 'ptr.44': AssType: Quadword IsStatic: False IsConstant: False, 'test_subtract_multi_dimensional': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'index.45': AssType: Longword IsStatic: True IsConstant: False, 'nested_arr.46': AssType: ByteArray(Size = 36, Alignment = 16) IsStatic: False IsConstant: False, 'last_row_pointer.47': AssType: Quadword IsStatic: False IsConstant: False, 'row_pointer.48': AssType: Quadword IsStatic: False IsConstant: False, 'main': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet([Reg(AX)]) ReturnDouble: OrderedSet() CalleeSavedRegs: set(), 'tmp.49': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.50': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.51': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.52': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.53': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.54': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.55': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.56': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.57': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.58': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.59': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.60': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.61': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.62': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.63': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.64': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.65': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.66': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.67': AssType: Longword IsStatic: False IsConstant: False, 'tmp.68': AssType: Longword IsStatic: False IsConstant: False, 'tmp.69': AssType: Longword IsStatic: False IsConstant: False, 'tmp.70': AssType: Longword IsStatic: False IsConstant: False, 'tmp.71': AssType: Longword IsStatic: False IsConstant: False, 'tmp.72': AssType: Longword IsStatic: False IsConstant: False, 'tmp.73': AssType: Longword IsStatic: False IsConstant: False, 'tmp.74': AssType: Longword IsStatic: False IsConstant: False, 'tmp.75': AssType: Longword IsStatic: False IsConstant: False, 'tmp.76': AssType: Longword IsStatic: False IsConstant: False, 'tmp.77': AssType: Longword IsStatic: False IsConstant: False, 'tmp.78': AssType: Longword IsStatic: False IsConstant: False, 'tmp.79': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.80': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.81': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.82': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.83': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.84': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.85': AssType: Longword IsStatic: False IsConstant: False, 'tmp.86': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.87': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.88': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.89': AssType: Longword IsStatic: False IsConstant: False, 'tmp.90': AssType: Longword IsStatic: False IsConstant: False, 'tmp.91': AssType: Longword IsStatic: False IsConstant: False, 'tmp.92': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.93': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.94': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.95': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.96': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.97': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.98': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.99': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.100': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.101': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.102': AssType: Longword IsStatic: False IsConstant: False, 'tmp.104': AssType: Longword IsStatic: False IsConstant: False, 'tmp.105': AssType: Longword IsStatic: False IsConstant: False, 'tmp.106': AssType: Longword IsStatic: False IsConstant: False, 'tmp.108': AssType: Double IsStatic: False IsConstant: False, 'tmp.109': AssType: Double IsStatic: False IsConstant: False, 'tmp.110': AssType: Double IsStatic: False IsConstant: False, 'tmp.111': AssType: Double IsStatic: False IsConstant: False, 'tmp.112': AssType: Double IsStatic: False IsConstant: False, 'tmp.113': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.114': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.115': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.116': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.117': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.118': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.119': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.120': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.121': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.122': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.123': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.124': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.125': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.126': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.127': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.128': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.129': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.130': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.131': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.132': AssType: Longword IsStatic: False IsConstant: False, 'tmp.134': AssType: Longword IsStatic: False IsConstant: False, 'tmp.135': AssType: Longword IsStatic: False IsConstant: False, 'tmp.138': AssType: Longword IsStatic: False IsConstant: False, 'tmp.139': AssType: Longword IsStatic: False IsConstant: False, 'tmp.142': AssType: Double IsStatic: False IsConstant: False, 'tmp.143': AssType: Longword IsStatic: False IsConstant: False, 'tmp.144': AssType: Longword IsStatic: False IsConstant: False, 'tmp.146': AssType: Longword IsStatic: False IsConstant: False, 'tmp.147': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.148': AssType: Longword IsStatic: False IsConstant: False, 'tmp.150': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.151': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.152': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.153': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.154': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.156': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.157': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.158': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.159': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.160': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.161': AssType: Longword IsStatic: False IsConstant: False, 'tmp.162': AssType: Longword IsStatic: False IsConstant: False, 'tmp.163': AssType: Longword IsStatic: False IsConstant: False, 'tmp.164': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.165': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.166': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.167': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.168': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.169': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.170': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.171': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.172': AssType: Longword IsStatic: False IsConstant: False, 'tmp.174': AssType: Longword IsStatic: False IsConstant: False, 'tmp.175': AssType: Longword IsStatic: False IsConstant: False, 'tmp.176': AssType: Longword IsStatic: False IsConstant: False, 'tmp.178': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.179': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.180': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.181': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.182': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.183': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.184': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.185': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.186': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.187': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.188': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.189': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.190': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.191': AssType: Longword IsStatic: False IsConstant: False, 'tmp.192': AssType: Longword IsStatic: False IsConstant: False, 'tmp.193': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.194': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.195': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.196': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.197': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.198': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.199': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.200': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.201': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.202': AssType: Longword IsStatic: False IsConstant: False, 'tmp.203': AssType: Longword IsStatic: False IsConstant: False, 'tmp.204': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.205': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.206': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.207': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.208': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.209': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.210': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.211': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.212': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.213': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.214': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.215': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.216': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.217': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.218': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.219': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.220': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.221': AssType: Longword IsStatic: False IsConstant: False, 'tmp.222': AssType: Longword IsStatic: False IsConstant: False, 'tmp.223': AssType: Longword IsStatic: False IsConstant: False, 'tmp.224': AssType: Longword IsStatic: False IsConstant: False, 'tmp.225': AssType: Longword IsStatic: False IsConstant: False, 'tmp.226': AssType: Longword IsStatic: False IsConstant: False, 'tmp.227': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.228': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.229': AssType: Longword IsStatic: False IsConstant: False, 'tmp.230': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.231': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.232': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.233': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.234': AssType: Longword IsStatic: False IsConstant: False, 'tmp.235': AssType: Longword IsStatic: False IsConstant: False, 'tmp.236': AssType: Longword IsStatic: False IsConstant: False, 'tmp.237': AssType: Double IsStatic: False IsConstant: False, 'tmp.238': AssType: Double IsStatic: False IsConstant: False, 'tmp.239': AssType: Double IsStatic: False IsConstant: False, 'tmp.240': AssType: Double IsStatic: False IsConstant: False, 'tmp.241': AssType: Double IsStatic: False IsConstant: False, 'tmp.242': AssType: Double IsStatic: False IsConstant: False, 'tmp.243': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.244': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.245': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.246': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.247': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.248': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.249': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.250': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.251': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.252': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.253': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.254': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.255': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.256': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.257': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.258': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.259': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.260': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.261': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.262': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.263': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.264': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.265': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.266': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.267': AssType: Longword IsStatic: False IsConstant: False, 'tmp.269': AssType: Longword IsStatic: False IsConstant: False, 'tmp.270': AssType: Longword IsStatic: False IsConstant: False, 'tmp.273': AssType: Longword IsStatic: False IsConstant: False, 'tmp.274': AssType: Longword IsStatic: False IsConstant: False, 'tmp.277': AssType: Double IsStatic: False IsConstant: False, 'tmp.278': AssType: Longword IsStatic: False IsConstant: False, 'tmp.279': AssType: Longword IsStatic: False IsConstant: False, 'tmp.281': AssType: Longword IsStatic: False IsConstant: False, 'tmp.283': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.284': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.285': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.286': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.287': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.289': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.290': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.291': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.292': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.293': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.294': AssType: Longword IsStatic: False IsConstant: False, 'tmp.295': AssType: Longword IsStatic: False IsConstant: False, 'tmp.296': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.297': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.298': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.299': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.300': AssType: Longword IsStatic: False IsConstant: False, 'tmp.301': AssType: Longword IsStatic: False IsConstant: False, 'tmp.302': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.303': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.304': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.305': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.306': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.307': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.308': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.309': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.310': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.311': AssType: Quadword IsStatic: False IsConstant: False, 'tmp.312': AssType: Longword IsStatic: False IsConstant: False, 'tmp.313': AssType: Longword IsStatic: False IsConstant: False, 'tmp.314': AssType: Longword IsStatic: False IsConstant: False, 'tmp.315': AssType: Longword IsStatic: False IsConstant: False, 'tmp.316': AssType: Longword IsStatic: False IsConstant: False, 'tmp.318': AssType: Longword IsStatic: False IsConstant: False, 'tmp.319': AssType: Longword IsStatic: False IsConstant: False, 'tmp.320': AssType: Longword IsStatic: False IsConstant: False, 'tmp.322': AssType: Longword IsStatic: False IsConstant: False, 'tmp.323': AssType: Longword IsStatic: False IsConstant: False, 'tmp.324': AssType: Longword IsStatic: False IsConstant: False, 'tmp.326': AssType: Longword IsStatic: False IsConstant: False, 'tmp.327': AssType: Longword IsStatic: False IsConstant: False, 'tmp.328': AssType: Longword IsStatic: False IsConstant: False, 'tmp.330': AssType: Longword IsStatic: False IsConstant: False, 'tmp.331': AssType: Longword IsStatic: False IsConstant: False, 'tmp.332': AssType: Longword IsStatic: False IsConstant: False, 'tmp.334': AssType: Longword IsStatic: False IsConstant: False, 'tmp.335': AssType: Longword IsStatic: False IsConstant: False, 'tmp.336': AssType: Longword IsStatic: False IsConstant: False, 'tmp.338': AssType: Longword IsStatic: False IsConstant: False, 'tmp.339': AssType: Longword IsStatic: False IsConstant: False, 'tmp.340': AssType: Longword IsStatic: False IsConstant: False, 'tmp.342': AssType: Longword IsStatic: False IsConstant: False, 'tmp.343': AssType: Longword IsStatic: False IsConstant: False, 'tmp.344': AssType: Longword IsStatic: False IsConstant: False, 'tmp.346': AssType: Longword IsStatic: False IsConstant: False, 'tmp.347': AssType: Longword IsStatic: False IsConstant: False, 'tmp.348': AssType: Longword IsStatic: False IsConstant: False, 'tmp.350': AssType: Longword IsStatic: False IsConstant: False, 'tmp.351': AssType: Longword IsStatic: False IsConstant: False, 'tmp.352': AssType: Longword IsStatic: False IsConstant: False, 'tmp.354': AssType: Longword IsStatic: False IsConstant: False, 'tmp.355': AssType: Longword IsStatic: False IsConstant: False, 'tmp.356': AssType: Longword IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION test_add_constant_to_pointer
-----------Building INTEGER interference graph.------------------
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)), AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)), AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)), Lea(PseudoMem(long_arr.0, 0), Pseudo(tmp.60)), AssType: Quadword Mov(Pseudo(tmp.60), Reg(AX)), Lea(Memory(AX, 80), Pseudo(tmp.64)), AssType: Quadword Mov(Pseudo(tmp.64), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.65)), AssType: Quadword Cmp(Imm(13), Pseudo(tmp.65)), AssType: Longword Mov(Imm(0), Pseudo(tmp.67)), SetCC(ConcCodeType.E, Pseudo(tmp.67)), AssType: Longword Mov(Pseudo(tmp.67), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)), set()), (AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)), set()), (AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)), set()), (Lea(PseudoMem(long_arr.0, 0), Pseudo(tmp.60)), set()), (AssType: Quadword Mov(Pseudo(tmp.60), Reg(AX)), set()), (Lea(Memory(AX, 80), Pseudo(tmp.64)), set()), (AssType: Quadword Mov(Pseudo(tmp.64), Reg(AX)), set()), (AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.65)), set()), (AssType: Quadword Cmp(Imm(13), Pseudo(tmp.65)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.67)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.67)), set()), (AssType: Longword Mov(Pseudo(tmp.67), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.67), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Pseudo(tmp.67)) {Pseudo(tmp.67)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.67)) set()
AssType: Quadword Cmp(Imm(13), Pseudo(tmp.65)) set()
AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.65)) {Pseudo(tmp.65)}
AssType: Quadword Mov(Pseudo(tmp.64), Reg(AX)) {Reg(AX)}
Lea(Memory(AX, 80), Pseudo(tmp.64)) {Pseudo(tmp.64)}
AssType: Quadword Mov(Pseudo(tmp.60), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(long_arr.0, 0), Pseudo(tmp.60)) {Pseudo(tmp.60)}
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)) set()
AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)) set()
AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)) set()
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.60)
    Pseudo(tmp.60) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.64)
    Pseudo(tmp.64) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.65)
    Pseudo(tmp.65) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.67)
    Pseudo(tmp.67) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.60) Pseudo(tmp.60) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.64) Pseudo(tmp.64) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.65) Pseudo(tmp.65) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.67) Pseudo(tmp.67) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ed9d0>, <RegisterAllocation.Node object at 0x7f8f862e0590>, <RegisterAllocation.Node object at 0x7f8f8631b710>, <RegisterAllocation.Node object at 0x7f8f8631bda0>, <RegisterAllocation.Node object at 0x7f8f8631b650>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e0590>, <RegisterAllocation.Node object at 0x7f8f8631b710>, <RegisterAllocation.Node object at 0x7f8f8631bda0>, <RegisterAllocation.Node object at 0x7f8f8631b650>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631b710>, <RegisterAllocation.Node object at 0x7f8f8631bda0>, <RegisterAllocation.Node object at 0x7f8f8631b650>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bda0>, <RegisterAllocation.Node object at 0x7f8f8631b650>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631b650>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d8c20>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862dbad0>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630e630>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e01a0>, <RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f7620>, <RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631eed0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.60) Pseudo(tmp.60) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.64) Pseudo(tmp.64) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.65) Pseudo(tmp.65) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.67) Pseudo(tmp.67) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_constant_to_pointer: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.60): Reg(R9d), Pseudo(tmp.64): Reg(R9d), Pseudo(tmp.65): Reg(R9d), Pseudo(tmp.67): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0))                AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8))                AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8))
AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16))               AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72))
AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80))              AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88))
Lea(PseudoMem(long_arr.0, 0), Reg(R9d))                                Lea(PseudoMem(long_arr.0, 0), Pseudo(tmp.60))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.60), Reg(AX))
Lea(Memory(AX, 80), Reg(R9d))                                          Lea(Memory(AX, 80), Pseudo(tmp.64))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.64), Reg(AX))
AssType: Quadword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.65))
AssType: Quadword Cmp(Imm(13), Reg(R9d))                               AssType: Quadword Cmp(Imm(13), Pseudo(tmp.65))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.67))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.67))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Pseudo(tmp.67), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)), AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)), AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)), AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)), Lea(PseudoMem(long_arr.0, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 80), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), AssType: Quadword Cmp(Imm(13), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)), set()), (AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)), set()), (AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)), set()), (AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)), set()), (Lea(PseudoMem(long_arr.0, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 80), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Quadword Cmp(Imm(13), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Quadword Cmp(Imm(13), Reg(R9d)) set()
AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Memory(AX, 80), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(long_arr.0, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88)) set()
AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24)) set()
AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8)) set()
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0)) set()
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86325d30>, <RegisterAllocation.Node object at 0x7f8f86324ef0>, <RegisterAllocation.Node object at 0x7f8f86324080>, <RegisterAllocation.Node object at 0x7f8f863008c0>, <RegisterAllocation.Node object at 0x7f8f863037a0>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324ef0>, <RegisterAllocation.Node object at 0x7f8f86324080>, <RegisterAllocation.Node object at 0x7f8f863008c0>, <RegisterAllocation.Node object at 0x7f8f863037a0>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324080>, <RegisterAllocation.Node object at 0x7f8f863008c0>, <RegisterAllocation.Node object at 0x7f8f863037a0>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863008c0>, <RegisterAllocation.Node object at 0x7f8f863037a0>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863037a0>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86328dd0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ce6c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_constant_to_pointer: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0))                AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 0))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8))                AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 8))
AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16))               AssType: Quadword Mov(Imm(3), PseudoMem(long_arr.0, 16))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 24))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 32))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 40))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 48))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 56))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 64))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 72))
AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80))              AssType: Quadword Mov(Imm(13), PseudoMem(long_arr.0, 80))
AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88))               AssType: Quadword Mov(Imm(0), PseudoMem(long_arr.0, 88))
Lea(PseudoMem(long_arr.0, 0), Reg(R9d))                                Lea(PseudoMem(long_arr.0, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 80), Reg(R9d))                                          Lea(Memory(AX, 80), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Quadword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Memory(AX, 0), Reg(R9d))
AssType: Quadword Cmp(Imm(13), Reg(R9d))                               AssType: Quadword Cmp(Imm(13), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_add_negative_index
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.68))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), Pseudo(tmp.68)), AssType: Longword Mov(Pseudo(tmp.68), PseudoMem(unsigned_arr.2, 0)), AssType: Longword Mov(Imm(0), Pseudo(tmp.69)), AssType: Longword Mov(Pseudo(tmp.69), PseudoMem(unsigned_arr.2, 4)), AssType: Longword Mov(Imm(2), Pseudo(tmp.70)), AssType: Longword Mov(Pseudo(tmp.70), PseudoMem(unsigned_arr.2, 8)), AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), AssType: Longword Mov(Pseudo(tmp.71), PseudoMem(unsigned_arr.2, 12)), AssType: Longword Mov(Imm(0), Pseudo(tmp.72)), AssType: Longword Mov(Pseudo(tmp.72), PseudoMem(unsigned_arr.2, 16)), AssType: Longword Mov(Imm(0), Pseudo(tmp.73)), AssType: Longword Mov(Pseudo(tmp.73), PseudoMem(unsigned_arr.2, 20)), AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), AssType: Longword Mov(Pseudo(tmp.74), PseudoMem(unsigned_arr.2, 24)), AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), AssType: Longword Mov(Pseudo(tmp.75), PseudoMem(unsigned_arr.2, 28)), AssType: Longword Mov(Imm(0), Pseudo(tmp.76)), AssType: Longword Mov(Pseudo(tmp.76), PseudoMem(unsigned_arr.2, 32)), AssType: Longword Mov(Imm(0), Pseudo(tmp.77)), AssType: Longword Mov(Pseudo(tmp.77), PseudoMem(unsigned_arr.2, 36)), AssType: Longword Mov(Imm(42), Pseudo(tmp.78)), AssType: Longword Mov(Pseudo(tmp.78), PseudoMem(unsigned_arr.2, 40)), AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)), Lea(PseudoMem(unsigned_arr.2, 0), Pseudo(tmp.79)), AssType: Quadword Mov(Pseudo(tmp.79), Reg(AX)), Lea(Memory(AX, 48), Pseudo(tmp.83)), AssType: Longword Mov(Imm(10), Pseudo(tmp.85)), AssType: Longword Unary(Neg, Pseudo(tmp.85)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.85), Pseudo(tmp.86)), AssType: Quadword Mov(Pseudo(tmp.83), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.86), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.88)), AssType: Quadword Mov(Pseudo(tmp.88), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.89)), AssType: Longword Mov(Imm(2), Pseudo(tmp.90)), AssType: Longword Cmp(Pseudo(tmp.90), Pseudo(tmp.89)), AssType: Longword Mov(Imm(0), Pseudo(tmp.91)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.91)), AssType: Longword Mov(Pseudo(tmp.91), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(0), Pseudo(tmp.68)), set()), (AssType: Longword Mov(Pseudo(tmp.68), PseudoMem(unsigned_arr.2, 0)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.69)), set()), (AssType: Longword Mov(Pseudo(tmp.69), PseudoMem(unsigned_arr.2, 4)), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.70)), set()), (AssType: Longword Mov(Pseudo(tmp.70), PseudoMem(unsigned_arr.2, 8)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), set()), (AssType: Longword Mov(Pseudo(tmp.71), PseudoMem(unsigned_arr.2, 12)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.72)), set()), (AssType: Longword Mov(Pseudo(tmp.72), PseudoMem(unsigned_arr.2, 16)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.73)), set()), (AssType: Longword Mov(Pseudo(tmp.73), PseudoMem(unsigned_arr.2, 20)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), set()), (AssType: Longword Mov(Pseudo(tmp.74), PseudoMem(unsigned_arr.2, 24)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), set()), (AssType: Longword Mov(Pseudo(tmp.75), PseudoMem(unsigned_arr.2, 28)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.76)), set()), (AssType: Longword Mov(Pseudo(tmp.76), PseudoMem(unsigned_arr.2, 32)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.77)), set()), (AssType: Longword Mov(Pseudo(tmp.77), PseudoMem(unsigned_arr.2, 36)), set()), (AssType: Longword Mov(Imm(42), Pseudo(tmp.78)), set()), (AssType: Longword Mov(Pseudo(tmp.78), PseudoMem(unsigned_arr.2, 40)), set()), (AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)), set()), (Lea(PseudoMem(unsigned_arr.2, 0), Pseudo(tmp.79)), set()), (AssType: Quadword Mov(Pseudo(tmp.79), Reg(AX)), set()), (Lea(Memory(AX, 48), Pseudo(tmp.83)), set()), (AssType: Longword Mov(Imm(10), Pseudo(tmp.85)), set()), (AssType: Longword Unary(Neg, Pseudo(tmp.85)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.85), Pseudo(tmp.86)), set()), (AssType: Quadword Mov(Pseudo(tmp.83), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.86), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.88)), set()), (AssType: Quadword Mov(Pseudo(tmp.88), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.89)), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.90)), set()), (AssType: Longword Cmp(Pseudo(tmp.90), Pseudo(tmp.89)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.91)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.91)), set()), (AssType: Longword Mov(Pseudo(tmp.91), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.91), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.91)) {Pseudo(tmp.91)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.91)) set()
AssType: Longword Cmp(Pseudo(tmp.90), Pseudo(tmp.89)) set()
AssType: Longword Mov(Imm(2), Pseudo(tmp.90)) {Pseudo(tmp.89), Pseudo(tmp.90)}
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.89)) {Pseudo(tmp.89)}
AssType: Quadword Mov(Pseudo(tmp.88), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Pseudo(tmp.88)) {Pseudo(tmp.88)}
AssType: Quadword Mov(Pseudo(tmp.86), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.83), Reg(AX)) {Pseudo(tmp.86), Reg(AX)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.85), Pseudo(tmp.86)) {Pseudo(tmp.86), Pseudo(tmp.83)}
AssType: Longword Unary(Neg, Pseudo(tmp.85)) {Pseudo(tmp.83), Pseudo(tmp.85)}
AssType: Longword Mov(Imm(10), Pseudo(tmp.85)) {Pseudo(tmp.83), Pseudo(tmp.85)}
Lea(Memory(AX, 48), Pseudo(tmp.83)) {Pseudo(tmp.83)}
AssType: Quadword Mov(Pseudo(tmp.79), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(unsigned_arr.2, 0), Pseudo(tmp.79)) {Pseudo(tmp.79)}
AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)) set()
AssType: Longword Mov(Pseudo(tmp.78), PseudoMem(unsigned_arr.2, 40)) set()
AssType: Longword Mov(Imm(42), Pseudo(tmp.78)) {Pseudo(tmp.78)}
AssType: Longword Mov(Pseudo(tmp.77), PseudoMem(unsigned_arr.2, 36)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.77)) {Pseudo(tmp.77)}
AssType: Longword Mov(Pseudo(tmp.76), PseudoMem(unsigned_arr.2, 32)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.76)) {Pseudo(tmp.76)}
AssType: Longword Mov(Pseudo(tmp.75), PseudoMem(unsigned_arr.2, 28)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.75)}
AssType: Longword Mov(Pseudo(tmp.74), PseudoMem(unsigned_arr.2, 24)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.74)}
AssType: Longword Mov(Pseudo(tmp.73), PseudoMem(unsigned_arr.2, 20)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.73)) {Pseudo(tmp.73)}
AssType: Longword Mov(Pseudo(tmp.72), PseudoMem(unsigned_arr.2, 16)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.72)) {Pseudo(tmp.72)}
AssType: Longword Mov(Pseudo(tmp.71), PseudoMem(unsigned_arr.2, 12)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.71)}
AssType: Longword Mov(Pseudo(tmp.70), PseudoMem(unsigned_arr.2, 8)) set()
AssType: Longword Mov(Imm(2), Pseudo(tmp.70)) {Pseudo(tmp.70)}
AssType: Longword Mov(Pseudo(tmp.69), PseudoMem(unsigned_arr.2, 4)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.69)) {Pseudo(tmp.69)}
AssType: Longword Mov(Pseudo(tmp.68), PseudoMem(unsigned_arr.2, 0)) set()
AssType: Longword Mov(Imm(0), Pseudo(tmp.68)) {Pseudo(tmp.68)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Pseudo(tmp.86)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.68)
    Pseudo(tmp.68) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.69)
    Pseudo(tmp.69) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.70)
    Pseudo(tmp.70) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.71)
    Pseudo(tmp.71) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.72)
    Pseudo(tmp.72) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.73)
    Pseudo(tmp.73) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.74)
    Pseudo(tmp.74) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.75)
    Pseudo(tmp.75) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.76)
    Pseudo(tmp.76) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.77)
    Pseudo(tmp.77) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.78)
    Pseudo(tmp.78) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.79)
    Pseudo(tmp.79) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.83)
    Pseudo(tmp.83) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.86)
        Pseudo(tmp.85)
Pseudo(tmp.85)
    Pseudo(tmp.85) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.83)
Pseudo(tmp.86)
    Pseudo(tmp.86) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.83)
        Reg(AX)
Pseudo(tmp.88)
    Pseudo(tmp.88) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.89)
    Pseudo(tmp.89) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.90)
Pseudo(tmp.90)
    Pseudo(tmp.90) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.89)
Pseudo(tmp.91)
    Pseudo(tmp.91) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.68) Pseudo(tmp.68) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.69) Pseudo(tmp.69) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.70) Pseudo(tmp.70) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.71) Pseudo(tmp.71) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.72) Pseudo(tmp.72) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.73) Pseudo(tmp.73) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.74) Pseudo(tmp.74) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.75) Pseudo(tmp.75) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.76) Pseudo(tmp.76) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.77) Pseudo(tmp.77) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.78) Pseudo(tmp.78) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.79) Pseudo(tmp.79) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.83) Pseudo(tmp.83) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.85) Pseudo(tmp.85) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.86) Pseudo(tmp.86) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.88) Pseudo(tmp.88) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.89) Pseudo(tmp.89) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.90) Pseudo(tmp.90) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.91) Pseudo(tmp.91) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f86324ef0>, <RegisterAllocation.Node object at 0x7f8f86325d30>, <RegisterAllocation.Node object at 0x7f8f86326390>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f86324ef0>, <RegisterAllocation.Node object at 0x7f8f86325d30>, <RegisterAllocation.Node object at 0x7f8f86326390>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324ef0>, <RegisterAllocation.Node object at 0x7f8f86325d30>, <RegisterAllocation.Node object at 0x7f8f86326390>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86325d30>, <RegisterAllocation.Node object at 0x7f8f86326390>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86326390>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86325d60>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631f290>, <RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631e0f0>, <RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631ddf0>, <RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631eb70>, <RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188620>, <RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861882f0>, <RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861881a0>, <RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188650>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188140>, <RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189bb0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189fa0>, <RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188230>, <RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188320>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863098e0>, <RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fc590>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631ede0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86335190>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.68) Pseudo(tmp.68) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.69) Pseudo(tmp.69) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.70) Pseudo(tmp.70) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.71) Pseudo(tmp.71) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.72) Pseudo(tmp.72) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.73) Pseudo(tmp.73) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.74) Pseudo(tmp.74) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.75) Pseudo(tmp.75) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.76) Pseudo(tmp.76) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.77) Pseudo(tmp.77) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.78) Pseudo(tmp.78) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.79) Pseudo(tmp.79) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.83) Pseudo(tmp.83) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.85) Pseudo(tmp.85) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.86) Pseudo(tmp.86) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.88) Pseudo(tmp.88) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.89) Pseudo(tmp.89) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.90) Pseudo(tmp.90) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.91) Pseudo(tmp.91) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_negative_index: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.68): Reg(R9d), Pseudo(tmp.69): Reg(R9d), Pseudo(tmp.70): Reg(R9d), Pseudo(tmp.71): Reg(R9d), Pseudo(tmp.72): Reg(R9d), Pseudo(tmp.73): Reg(R9d), Pseudo(tmp.74): Reg(R9d), Pseudo(tmp.75): Reg(R9d), Pseudo(tmp.76): Reg(R9d), Pseudo(tmp.77): Reg(R9d), Pseudo(tmp.78): Reg(R9d), Pseudo(tmp.79): Reg(R9d), Pseudo(tmp.83): Reg(R8d), Pseudo(tmp.85): Reg(R9d), Pseudo(tmp.86): Reg(R9d), Pseudo(tmp.88): Reg(R9d), Pseudo(tmp.89): Reg(R8d), Pseudo(tmp.90): Reg(R9d), Pseudo(tmp.91): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.68))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 0))          AssType: Longword Mov(Pseudo(tmp.68), PseudoMem(unsigned_arr.2, 0))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.69))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 4))          AssType: Longword Mov(Pseudo(tmp.69), PseudoMem(unsigned_arr.2, 4))
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Pseudo(tmp.70))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 8))          AssType: Longword Mov(Pseudo(tmp.70), PseudoMem(unsigned_arr.2, 8))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.71))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 12))         AssType: Longword Mov(Pseudo(tmp.71), PseudoMem(unsigned_arr.2, 12))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.72))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 16))         AssType: Longword Mov(Pseudo(tmp.72), PseudoMem(unsigned_arr.2, 16))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.73))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 20))         AssType: Longword Mov(Pseudo(tmp.73), PseudoMem(unsigned_arr.2, 20))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.74))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 24))         AssType: Longword Mov(Pseudo(tmp.74), PseudoMem(unsigned_arr.2, 24))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.75))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 28))         AssType: Longword Mov(Pseudo(tmp.75), PseudoMem(unsigned_arr.2, 28))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.76))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 32))         AssType: Longword Mov(Pseudo(tmp.76), PseudoMem(unsigned_arr.2, 32))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.77))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 36))         AssType: Longword Mov(Pseudo(tmp.77), PseudoMem(unsigned_arr.2, 36))
AssType: Longword Mov(Imm(42), Reg(R9d))                               AssType: Longword Mov(Imm(42), Pseudo(tmp.78))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 40))         AssType: Longword Mov(Pseudo(tmp.78), PseudoMem(unsigned_arr.2, 40))
AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44))           AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44))
Lea(PseudoMem(unsigned_arr.2, 0), Reg(R9d))                            Lea(PseudoMem(unsigned_arr.2, 0), Pseudo(tmp.79))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.79), Reg(AX))
Lea(Memory(AX, 48), Reg(R8d))                                          Lea(Memory(AX, 48), Pseudo(tmp.83))
AssType: Longword Mov(Imm(10), Reg(R9d))                               AssType: Longword Mov(Imm(10), Pseudo(tmp.85))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Pseudo(tmp.85))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.85), Pseudo(tmp.86))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.83), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.86), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Pseudo(tmp.88))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.88), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R8d))                         AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.89))
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Pseudo(tmp.90))
AssType: Longword Cmp(Reg(R9d), Reg(R8d))                              AssType: Longword Cmp(Pseudo(tmp.90), Pseudo(tmp.89))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.91))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.91))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Pseudo(tmp.91), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(0), Reg(R9d))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 0)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 4)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 8)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 12)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 16)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 20)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 24)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 28)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 32)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 36)), AssType: Longword Mov(Imm(42), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 40)), AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)), Lea(PseudoMem(unsigned_arr.2, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 48), Reg(R8d)), AssType: Longword Mov(Imm(10), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Cmp(Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 0)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 4)), set()), (AssType: Longword Mov(Imm(2), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 8)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 12)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 16)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 20)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 24)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 28)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 32)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 36)), set()), (AssType: Longword Mov(Imm(42), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 40)), set()), (AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)), set()), (Lea(PseudoMem(unsigned_arr.2, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 48), Reg(R8d)), set()), (AssType: Longword Mov(Imm(10), Reg(R9d)), set()), (AssType: Longword Unary(Neg, Reg(R9d)), set()), (SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), set()), (AssType: Longword Mov(Imm(2), Reg(R9d)), set()), (AssType: Longword Cmp(Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Reg(R9d), Reg(R8d)) set()
AssType: Longword Mov(Imm(2), Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Memory(AX, 0), Reg(R8d)) {Reg(R8d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Imm(10), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Lea(Memory(AX, 48), Reg(R8d)) {Reg(R8d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(unsigned_arr.2, 0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44)) set()
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 40)) set()
AssType: Longword Mov(Imm(42), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 36)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 32)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 28)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 24)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 20)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 16)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 12)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 8)) set()
AssType: Longword Mov(Imm(2), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 4)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 0)) set()
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e5d60>, <RegisterAllocation.Node object at 0x7f8f8631eea0>, <RegisterAllocation.Node object at 0x7f8f863447a0>, <RegisterAllocation.Node object at 0x7f8f863442c0>, <RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f8635ffe0>, <RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631eea0>, <RegisterAllocation.Node object at 0x7f8f863447a0>, <RegisterAllocation.Node object at 0x7f8f863442c0>, <RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f8635ffe0>, <RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863447a0>, <RegisterAllocation.Node object at 0x7f8f863442c0>, <RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f8635ffe0>, <RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863442c0>, <RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f8635ffe0>, <RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f8635ffe0>, <RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ffe0>, <RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329220>, <RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b350>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863586b0>, <RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d4d40>, <RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d6990>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d4200>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_negative_index: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 0))          AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 0))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 4))          AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 4))
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 8))          AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 8))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 12))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 12))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 16))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 16))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 20))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 20))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 24))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 24))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 28))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 28))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 32))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 32))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 36))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 36))
AssType: Longword Mov(Imm(42), Reg(R9d))                               AssType: Longword Mov(Imm(42), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 40))         AssType: Longword Mov(Reg(R9d), PseudoMem(unsigned_arr.2, 40))
AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44))           AssType: Longword Mov(Imm(0), PseudoMem(unsigned_arr.2, 44))
Lea(PseudoMem(unsigned_arr.2, 0), Reg(R9d))                            Lea(PseudoMem(unsigned_arr.2, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 48), Reg(R8d))                                          Lea(Memory(AX, 48), Reg(R8d))
AssType: Longword Mov(Imm(10), Reg(R9d))                               AssType: Longword Mov(Imm(10), Reg(R9d))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Reg(R9d))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R8d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R8d))
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Reg(R9d))
AssType: Longword Cmp(Reg(R9d), Reg(R8d))                              AssType: Longword Cmp(Reg(R9d), Reg(R8d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_add_pointer_to_int
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0))
AssType: Quadword Mov(Pseudo(tmp.101), Reg(AX))
AssType: Longword Mov(Imm(1), Pseudo(tmp.106))
Label(tmp.103)
Label(tmp.107)
-------------LABELS-----------------
tmp.103 3: [Label(tmp.103), AssType: Longword Mov(Imm(0), Pseudo(tmp.106))] Pred: set() Suc: set() iMap: [(Label(tmp.103), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.106)), set())] ReachingCopies: set()
tmp.107 4: [Label(tmp.107), AssType: Longword Mov(Pseudo(tmp.106), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.107), set()), (AssType: Longword Mov(Pseudo(tmp.106), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)), AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)), AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)), AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)), AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)), Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.92)), AssType: Quadword Mov(Pseudo(tmp.92), Reg(AX)), Lea(Memory(AX, 8), Pseudo(tmp.96)), Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.97)), AssType: Quadword Mov(Pseudo(tmp.97), Reg(AX)), Lea(Memory(AX, 8), Pseudo(tmp.101)), AssType: Quadword Cmp(Pseudo(tmp.101), Pseudo(tmp.96)), AssType: Longword Mov(Imm(0), Pseudo(tmp.102)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.102)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.102)), JmpCC(ConcCodeType.E, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)), set()), (AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)), set()), (AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)), set()), (AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)), set()), (AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)), set()), (Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.92)), set()), (AssType: Quadword Mov(Pseudo(tmp.92), Reg(AX)), set()), (Lea(Memory(AX, 8), Pseudo(tmp.96)), set()), (Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.97)), set()), (AssType: Quadword Mov(Pseudo(tmp.97), Reg(AX)), set()), (Lea(Memory(AX, 8), Pseudo(tmp.101)), set()), (AssType: Quadword Cmp(Pseudo(tmp.101), Pseudo(tmp.96)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.102)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.102)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.102)), set()), (JmpCC(ConcCodeType.E, tmp.103), set())] ReachingCopies: set()
1 1: [AssType: Quadword Mov(Pseudo(tmp.101), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.104)), AssType: Longword Cmp(Imm(99), Pseudo(tmp.104)), AssType: Longword Mov(Imm(0), Pseudo(tmp.105)), SetCC(ConcCodeType.E, Pseudo(tmp.105)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.105)), JmpCC(ConcCodeType.E, tmp.103)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Quadword Mov(Pseudo(tmp.101), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.104)), set()), (AssType: Longword Cmp(Imm(99), Pseudo(tmp.104)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.105)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.105)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.105)), set()), (JmpCC(ConcCodeType.E, tmp.103), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Pseudo(tmp.106)), Jmp(tmp.107)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.106)), set()), (Jmp(tmp.107), set())] ReachingCopies: set()
3 3: [Label(tmp.103), AssType: Longword Mov(Imm(0), Pseudo(tmp.106))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.103), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.106)), set())] ReachingCopies: set()
4 4: [Label(tmp.107), AssType: Longword Mov(Pseudo(tmp.106), Reg(AX)), ret] Pred: {2, 3} Suc: {EXIT} iMap: [(Label(tmp.107), set()), (AssType: Longword Mov(Pseudo(tmp.106), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {4}
--------------LIVE for block 4-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.106), Reg(AX)) {Reg(AX)}
Label(tmp.107) {Pseudo(tmp.106)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.106)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.106)) {Pseudo(tmp.106)}
Label(tmp.103) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
Jmp(tmp.107) {Pseudo(tmp.106)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.106)) {Pseudo(tmp.106)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.103) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.105)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.105)) {Pseudo(tmp.105)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.105)) set()
AssType: Longword Cmp(Imm(99), Pseudo(tmp.104)) set()
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.104)) {Pseudo(tmp.104)}
AssType: Quadword Mov(Pseudo(tmp.101), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.101)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.103) {Pseudo(tmp.101)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.102)) {Pseudo(tmp.101)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.102)) {Pseudo(tmp.102), Pseudo(tmp.101)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.102)) {Pseudo(tmp.101)}
AssType: Quadword Cmp(Pseudo(tmp.101), Pseudo(tmp.96)) {Pseudo(tmp.101)}
Lea(Memory(AX, 8), Pseudo(tmp.101)) {Pseudo(tmp.101), Pseudo(tmp.96)}
AssType: Quadword Mov(Pseudo(tmp.97), Reg(AX)) {Reg(AX), Pseudo(tmp.96)}
Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.97)) {Pseudo(tmp.97), Pseudo(tmp.96)}
Lea(Memory(AX, 8), Pseudo(tmp.96)) {Pseudo(tmp.96)}
AssType: Quadword Mov(Pseudo(tmp.92), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.92)) {Pseudo(tmp.92)}
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)) set()
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)) set()
AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)) set()
AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)) set()
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)) set()
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.96)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.92)
    Pseudo(tmp.92) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.96)
    Pseudo(tmp.96) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.97)
        Pseudo(tmp.101)
        Reg(AX)
Pseudo(tmp.97)
    Pseudo(tmp.97) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.96)
Pseudo(tmp.101)
    Pseudo(tmp.101) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.102)
        Pseudo(tmp.96)
Pseudo(tmp.102)
    Pseudo(tmp.102) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.101)
Pseudo(tmp.104)
    Pseudo(tmp.104) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.105)
    Pseudo(tmp.105) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.106)
    Pseudo(tmp.106) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.92) Pseudo(tmp.92) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.96) Pseudo(tmp.96) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.97) Pseudo(tmp.97) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.101) Pseudo(tmp.101) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.102) Pseudo(tmp.102) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.104) Pseudo(tmp.104) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.105) Pseudo(tmp.105) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.106) Pseudo(tmp.106) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f86308bc0>, <RegisterAllocation.Node object at 0x7f8f86309760>, <RegisterAllocation.Node object at 0x7f8f8630ba40>, <RegisterAllocation.Node object at 0x7f8f86308e90>, <RegisterAllocation.Node object at 0x7f8f8630bb60>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f86309760>, <RegisterAllocation.Node object at 0x7f8f8630ba40>, <RegisterAllocation.Node object at 0x7f8f86308e90>, <RegisterAllocation.Node object at 0x7f8f8630bb60>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86309760>, <RegisterAllocation.Node object at 0x7f8f8630ba40>, <RegisterAllocation.Node object at 0x7f8f86308e90>, <RegisterAllocation.Node object at 0x7f8f8630bb60>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630ba40>, <RegisterAllocation.Node object at 0x7f8f86308e90>, <RegisterAllocation.Node object at 0x7f8f8630bb60>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86308e90>, <RegisterAllocation.Node object at 0x7f8f8630bb60>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bb60>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86309f40>, <RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630af90>, <RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b620>, <RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a7b0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863059a0>, <RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307680>, <RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634ec90>, <RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86306000>, <RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307980>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307e00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.92) Pseudo(tmp.92) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.96) Pseudo(tmp.96) spillCost: 2.0 color: 3 pruned: False
Pseudo(tmp.97) Pseudo(tmp.97) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.101) Pseudo(tmp.101) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.102) Pseudo(tmp.102) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.104) Pseudo(tmp.104) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.105) Pseudo(tmp.105) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.106) Pseudo(tmp.106) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_pointer_to_int: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.92): Reg(R9d), Pseudo(tmp.96): Reg(SI), Pseudo(tmp.97): Reg(R9d), Pseudo(tmp.101): Reg(R8d), Pseudo(tmp.102): Reg(R9d), Pseudo(tmp.104): Reg(R9d), Pseudo(tmp.105): Reg(R9d), Pseudo(tmp.106): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0))                 AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0))
AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4))                AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4))
AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8))                AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8))
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12))                AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12))
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16))                AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16))
Lea(PseudoMem(int_arr.5, 0), Reg(R9d))                                 Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.92))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.92), Reg(AX))
Lea(Memory(AX, 8), Reg(SI))                                            Lea(Memory(AX, 8), Pseudo(tmp.96))
Lea(PseudoMem(int_arr.5, 0), Reg(R9d))                                 Lea(PseudoMem(int_arr.5, 0), Pseudo(tmp.97))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.97), Reg(AX))
Lea(Memory(AX, 8), Reg(R8d))                                           Lea(Memory(AX, 8), Pseudo(tmp.101))
AssType: Quadword Cmp(Reg(R8d), Reg(SI))                               AssType: Quadword Cmp(Pseudo(tmp.101), Pseudo(tmp.96))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.102))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.102))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.102))
JmpCC(ConcCodeType.E, tmp.103)                                         JmpCC(ConcCodeType.E, tmp.103)
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.101), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.104))
AssType: Longword Cmp(Imm(99), Reg(R9d))                               AssType: Longword Cmp(Imm(99), Pseudo(tmp.104))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.105))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.105))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.105))
JmpCC(ConcCodeType.E, tmp.103)                                         JmpCC(ConcCodeType.E, tmp.103)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Pseudo(tmp.106))
Jmp(tmp.107)                                                           Jmp(tmp.107)
Label(tmp.103)                                                         Label(tmp.103)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.106))
Label(tmp.107)                                                         Label(tmp.107)
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Pseudo(tmp.106), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0))
AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.103)
Label(tmp.107)
-------------LABELS-----------------
tmp.103 3: [Label(tmp.103), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.103), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.107 4: [Label(tmp.107), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.107), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)), AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)), AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)), AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)), AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)), Lea(PseudoMem(int_arr.5, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(SI)), Lea(PseudoMem(int_arr.5, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(R8d)), AssType: Quadword Cmp(Reg(R8d), Reg(SI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.103)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)), set()), (AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)), set()), (AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)), set()), (AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)), set()), (AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)), set()), (Lea(PseudoMem(int_arr.5, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 8), Reg(SI)), set()), (Lea(PseudoMem(int_arr.5, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 8), Reg(R8d)), set()), (AssType: Quadword Cmp(Reg(R8d), Reg(SI)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.103), set())] ReachingCopies: set()
1 1: [AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(99), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.103)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(99), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.103), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.107)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.107), set())] ReachingCopies: set()
3 3: [Label(tmp.103), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.103), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
4 4: [Label(tmp.107), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {2, 3} Suc: {EXIT} iMap: [(Label(tmp.107), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {4}
--------------LIVE for block 4-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Label(tmp.107) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R9d)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
Label(tmp.103) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
Jmp(tmp.107) {Reg(R9d)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.103) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(99), Reg(R9d)) set()
AssType: Longword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.103) {Reg(R8d)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d)}
AssType: Quadword Cmp(Reg(R8d), Reg(SI)) {Reg(R8d)}
Lea(Memory(AX, 8), Reg(R8d)) {Reg(R8d), Reg(SI)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(SI), Reg(AX)}
Lea(PseudoMem(int_arr.5, 0), Reg(R9d)) {Reg(SI), Reg(R9d)}
Lea(Memory(AX, 8), Reg(SI)) {Reg(SI)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(int_arr.5, 0), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16)) set()
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12)) set()
AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8)) set()
AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4)) set()
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0)) set()
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e5940>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f862c6090>, <RegisterAllocation.Node object at 0x7f8f862c5670>, <RegisterAllocation.Node object at 0x7f8f862c5e50>, <RegisterAllocation.Node object at 0x7f8f862c5880>, <RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f862c6090>, <RegisterAllocation.Node object at 0x7f8f862c5670>, <RegisterAllocation.Node object at 0x7f8f862c5e50>, <RegisterAllocation.Node object at 0x7f8f862c5880>, <RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c6090>, <RegisterAllocation.Node object at 0x7f8f862c5670>, <RegisterAllocation.Node object at 0x7f8f862c5e50>, <RegisterAllocation.Node object at 0x7f8f862c5880>, <RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c5670>, <RegisterAllocation.Node object at 0x7f8f862c5e50>, <RegisterAllocation.Node object at 0x7f8f862c5880>, <RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c5e50>, <RegisterAllocation.Node object at 0x7f8f862c5880>, <RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c5880>, <RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c66c0>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ed7f0>, <RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ee540>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863005c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_pointer_to_int: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0))                 AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 0))
AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4))                AssType: Longword Mov(Imm(98), PseudoMem(int_arr.5, 4))
AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8))                AssType: Longword Mov(Imm(99), PseudoMem(int_arr.5, 8))
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12))                AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 12))
AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16))                AssType: Longword Mov(Imm(0), PseudoMem(int_arr.5, 16))
Lea(PseudoMem(int_arr.5, 0), Reg(R9d))                                 Lea(PseudoMem(int_arr.5, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 8), Reg(SI))                                            Lea(Memory(AX, 8), Reg(SI))
Lea(PseudoMem(int_arr.5, 0), Reg(R9d))                                 Lea(PseudoMem(int_arr.5, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 8), Reg(R8d))                                           Lea(Memory(AX, 8), Reg(R8d))
AssType: Quadword Cmp(Reg(R8d), Reg(SI))                               AssType: Quadword Cmp(Reg(R8d), Reg(SI))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.103)                                         JmpCC(ConcCodeType.E, tmp.103)
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R9d))
AssType: Longword Cmp(Imm(99), Reg(R9d))                               AssType: Longword Cmp(Imm(99), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.103)                                         JmpCC(ConcCodeType.E, tmp.103)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.107)                                                           Jmp(tmp.107)
Label(tmp.103)                                                         Label(tmp.103)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.107)                                                         Label(tmp.107)
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_add_different_index_types
-----------Building INTEGER interference graph.------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108))
AssType: Quadword Cmp(Pseudo(tmp.126), Pseudo(tmp.117))
AssType: Longword Mov(Imm(1), Pseudo(tmp.135))
Label(tmp.133)
Label(tmp.136)
AssType: Quadword Cmp(Pseudo(tmp.131), Pseudo(tmp.117))
AssType: Longword Mov(Imm(1), Pseudo(tmp.139))
Label(tmp.137)
Label(tmp.140)
AssType: Quadword Mov(Pseudo(tmp.131), Reg(AX))
AssType: Longword Mov(Imm(1), Pseudo(tmp.144))
Label(tmp.141)
Label(tmp.145)
-------------LABELS-----------------
tmp.133 3: [Label(tmp.133), AssType: Longword Mov(Imm(0), Pseudo(tmp.135))] Pred: set() Suc: set() iMap: [(Label(tmp.133), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.135)), set())] ReachingCopies: set()
tmp.136 4: [Label(tmp.136), AssType: Longword Cmp(Imm(0), Pseudo(tmp.135)), JmpCC(ConcCodeType.E, tmp.137)] Pred: set() Suc: set() iMap: [(Label(tmp.136), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.135)), set()), (JmpCC(ConcCodeType.E, tmp.137), set())] ReachingCopies: set()
tmp.137 7: [Label(tmp.137), AssType: Longword Mov(Imm(0), Pseudo(tmp.139))] Pred: set() Suc: set() iMap: [(Label(tmp.137), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.139)), set())] ReachingCopies: set()
tmp.140 8: [Label(tmp.140), AssType: Longword Cmp(Imm(0), Pseudo(tmp.139)), JmpCC(ConcCodeType.E, tmp.141)] Pred: set() Suc: set() iMap: [(Label(tmp.140), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.139)), set()), (JmpCC(ConcCodeType.E, tmp.141), set())] ReachingCopies: set()
tmp.141 11: [Label(tmp.141), AssType: Longword Mov(Imm(0), Pseudo(tmp.144))] Pred: set() Suc: set() iMap: [(Label(tmp.141), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.144)), set())] ReachingCopies: set()
tmp.145 12: [Label(tmp.145), AssType: Longword Mov(Pseudo(tmp.144), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.145), set()), (AssType: Longword Mov(Pseudo(tmp.144), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)), AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)), AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)), AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)), AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)), AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)), AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)), AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.113)), AssType: Quadword Mov(Pseudo(tmp.113), Reg(AX)), Lea(Memory(AX, 40), Pseudo(tmp.117)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.118)), AssType: Quadword Mov(Pseudo(tmp.118), Reg(AX)), Lea(Memory(AX, 40), Pseudo(tmp.121)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.122)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.124)), AssType: Quadword Mov(Pseudo(tmp.122), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.124), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.126)), Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.127)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.129)), AssType: Quadword Mov(Pseudo(tmp.127), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.129), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.131)), AssType: Quadword Cmp(Pseudo(tmp.121), Pseudo(tmp.117)), AssType: Longword Mov(Imm(0), Pseudo(tmp.132)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.132)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.132)), JmpCC(ConcCodeType.E, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)), set()), (AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)), set()), (AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)), set()), (AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)), set()), (AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)), set()), (AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)), set()), (AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)), set()), (AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)), set()), (Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.113)), set()), (AssType: Quadword Mov(Pseudo(tmp.113), Reg(AX)), set()), (Lea(Memory(AX, 40), Pseudo(tmp.117)), set()), (Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.118)), set()), (AssType: Quadword Mov(Pseudo(tmp.118), Reg(AX)), set()), (Lea(Memory(AX, 40), Pseudo(tmp.121)), set()), (Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.122)), set()), (SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.124)), set()), (AssType: Quadword Mov(Pseudo(tmp.122), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.124), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.126)), set()), (Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.127)), set()), (AssType: Quadword Mov(Imm(5), Pseudo(tmp.129)), set()), (AssType: Quadword Mov(Pseudo(tmp.127), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.129), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.131)), set()), (AssType: Quadword Cmp(Pseudo(tmp.121), Pseudo(tmp.117)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.132)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.132)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.132)), set()), (JmpCC(ConcCodeType.E, tmp.133), set())] ReachingCopies: set()
1 1: [AssType: Quadword Cmp(Pseudo(tmp.126), Pseudo(tmp.117)), AssType: Longword Mov(Imm(0), Pseudo(tmp.134)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.134)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.134)), JmpCC(ConcCodeType.E, tmp.133)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Quadword Cmp(Pseudo(tmp.126), Pseudo(tmp.117)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.134)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.134)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.134)), set()), (JmpCC(ConcCodeType.E, tmp.133), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Pseudo(tmp.135)), Jmp(tmp.136)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.135)), set()), (Jmp(tmp.136), set())] ReachingCopies: set()
3 3: [Label(tmp.133), AssType: Longword Mov(Imm(0), Pseudo(tmp.135))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.133), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.135)), set())] ReachingCopies: set()
4 4: [Label(tmp.136), AssType: Longword Cmp(Imm(0), Pseudo(tmp.135)), JmpCC(ConcCodeType.E, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: [(Label(tmp.136), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.135)), set()), (JmpCC(ConcCodeType.E, tmp.137), set())] ReachingCopies: set()
5 5: [AssType: Quadword Cmp(Pseudo(tmp.131), Pseudo(tmp.117)), AssType: Longword Mov(Imm(0), Pseudo(tmp.138)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.138)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.138)), JmpCC(ConcCodeType.E, tmp.137)] Pred: {4} Suc: {6, 7} iMap: [(AssType: Quadword Cmp(Pseudo(tmp.131), Pseudo(tmp.117)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.138)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.138)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.138)), set()), (JmpCC(ConcCodeType.E, tmp.137), set())] ReachingCopies: set()
6 6: [AssType: Longword Mov(Imm(1), Pseudo(tmp.139)), Jmp(tmp.140)] Pred: {5} Suc: {8} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.139)), set()), (Jmp(tmp.140), set())] ReachingCopies: set()
7 7: [Label(tmp.137), AssType: Longword Mov(Imm(0), Pseudo(tmp.139))] Pred: {4, 5} Suc: {8} iMap: [(Label(tmp.137), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.139)), set())] ReachingCopies: set()
8 8: [Label(tmp.140), AssType: Longword Cmp(Imm(0), Pseudo(tmp.139)), JmpCC(ConcCodeType.E, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: [(Label(tmp.140), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.139)), set()), (JmpCC(ConcCodeType.E, tmp.141), set())] ReachingCopies: set()
9 9: [AssType: Quadword Mov(Pseudo(tmp.131), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)), AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)), AssType: Longword Mov(Imm(0), Pseudo(tmp.143)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.143)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.143)), JmpCC(ConcCodeType.E, tmp.141)] Pred: {8} Suc: {10, 11} iMap: [(AssType: Quadword Mov(Pseudo(tmp.131), Reg(AX)), set()), (AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)), set()), (AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.143)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.143)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.143)), set()), (JmpCC(ConcCodeType.E, tmp.141), set())] ReachingCopies: set()
10 10: [AssType: Longword Mov(Imm(1), Pseudo(tmp.144)), Jmp(tmp.145)] Pred: {9} Suc: {12} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.144)), set()), (Jmp(tmp.145), set())] ReachingCopies: set()
11 11: [Label(tmp.141), AssType: Longword Mov(Imm(0), Pseudo(tmp.144))] Pred: {8, 9} Suc: {12} iMap: [(Label(tmp.141), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.144)), set())] ReachingCopies: set()
12 12: [Label(tmp.145), AssType: Longword Mov(Pseudo(tmp.144), Reg(AX)), ret] Pred: {10, 11} Suc: {EXIT} iMap: [(Label(tmp.145), set()), (AssType: Longword Mov(Pseudo(tmp.144), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------LIVE for block 12-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.144), Reg(AX)) {Reg(AX)}
Label(tmp.145) {Pseudo(tmp.144)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.144)}
--------------LIVE for block 11-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.144)) {Pseudo(tmp.144)}
Label(tmp.141) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 10-------------------
Jmp(tmp.145) {Pseudo(tmp.144)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.144)) {Pseudo(tmp.144)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 9-------------------
JmpCC(ConcCodeType.E, tmp.141) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.143)) set()
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.143)) {Pseudo(tmp.143)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.143)) set()
AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)) set()
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)) {Pseudo(tmp.142)}
AssType: Quadword Mov(Pseudo(tmp.131), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.131)}
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.141) {Pseudo(tmp.131)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.139)) {Pseudo(tmp.131)}
Label(tmp.140) {Pseudo(tmp.139), Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.139), Pseudo(tmp.131)}
--------------LIVE for block 7-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.139)) {Pseudo(tmp.139), Pseudo(tmp.131)}
Label(tmp.137) {Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.131)}
--------------LIVE for block 6-------------------
Jmp(tmp.140) {Pseudo(tmp.139), Pseudo(tmp.131)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.139)) {Pseudo(tmp.139), Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.131)}
--------------LIVE for block 5-------------------
JmpCC(ConcCodeType.E, tmp.137) {Pseudo(tmp.131)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.138)) {Pseudo(tmp.131)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.138)) {Pseudo(tmp.138), Pseudo(tmp.131)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.138)) {Pseudo(tmp.131)}
AssType: Quadword Cmp(Pseudo(tmp.131), Pseudo(tmp.117)) {Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.117), Pseudo(tmp.131)}
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.137) {Pseudo(tmp.117), Pseudo(tmp.131)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.135)) {Pseudo(tmp.117), Pseudo(tmp.131)}
Label(tmp.136) {Pseudo(tmp.117), Pseudo(tmp.135), Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.117), Pseudo(tmp.135), Pseudo(tmp.131)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.135)) {Pseudo(tmp.117), Pseudo(tmp.135), Pseudo(tmp.131)}
Label(tmp.133) {Pseudo(tmp.117), Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.117), Pseudo(tmp.131)}
--------------LIVE for block 2-------------------
Jmp(tmp.136) {Pseudo(tmp.117), Pseudo(tmp.135), Pseudo(tmp.131)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.135)) {Pseudo(tmp.117), Pseudo(tmp.135), Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.117), Pseudo(tmp.131)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.133) {Pseudo(tmp.117), Pseudo(tmp.131)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.134)) {Pseudo(tmp.117), Pseudo(tmp.131)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.134)) {Pseudo(tmp.117), Pseudo(tmp.134), Pseudo(tmp.131)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.134)) {Pseudo(tmp.117), Pseudo(tmp.131)}
AssType: Quadword Cmp(Pseudo(tmp.126), Pseudo(tmp.117)) {Pseudo(tmp.117), Pseudo(tmp.131)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.117), Pseudo(tmp.131), Pseudo(tmp.126)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.133) {Pseudo(tmp.117), Pseudo(tmp.131), Pseudo(tmp.126)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.132)) {Pseudo(tmp.117), Pseudo(tmp.131), Pseudo(tmp.126)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.132)) {Pseudo(tmp.117), Pseudo(tmp.131), Pseudo(tmp.126), Pseudo(tmp.132)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.132)) {Pseudo(tmp.117), Pseudo(tmp.131), Pseudo(tmp.126)}
AssType: Quadword Cmp(Pseudo(tmp.121), Pseudo(tmp.117)) {Pseudo(tmp.117), Pseudo(tmp.131), Pseudo(tmp.126)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.131)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.131), Pseudo(tmp.126)}
AssType: Quadword Mov(Pseudo(tmp.129), Reg(DX)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.126), Reg(DX), Reg(AX)}
AssType: Quadword Mov(Pseudo(tmp.127), Reg(AX)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.126), Pseudo(tmp.129), Reg(AX)}
AssType: Quadword Mov(Imm(5), Pseudo(tmp.129)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.126), Pseudo(tmp.129), Pseudo(tmp.127)}
Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.127)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.127), Pseudo(tmp.126)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.126)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.126)}
AssType: Quadword Mov(Pseudo(tmp.124), Reg(DX)) {Pseudo(tmp.117), Pseudo(tmp.121), Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.122), Reg(AX)) {Pseudo(tmp.117), Pseudo(tmp.121), Pseudo(tmp.124), Reg(AX)}
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.124)) {Pseudo(tmp.117), Pseudo(tmp.122), Pseudo(tmp.121), Pseudo(tmp.124)}
Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.122)) {Pseudo(tmp.117), Pseudo(tmp.122), Pseudo(tmp.121)}
Lea(Memory(AX, 40), Pseudo(tmp.121)) {Pseudo(tmp.117), Pseudo(tmp.121)}
AssType: Quadword Mov(Pseudo(tmp.118), Reg(AX)) {Pseudo(tmp.117), Reg(AX)}
Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.118)) {Pseudo(tmp.117), Pseudo(tmp.118)}
Lea(Memory(AX, 40), Pseudo(tmp.117)) {Pseudo(tmp.117)}
AssType: Quadword Mov(Pseudo(tmp.113), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.113)) {Pseudo(tmp.113)}
AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)) set()
AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)) set()
AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)) set()
AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)) set()
AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)) set()
AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)) set()
AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)) {Pseudo(tmp.112)}
AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)) {Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)) {Pseudo(tmp.110)}
AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)) {Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)) {Pseudo(tmp.108)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.117)
        Pseudo(tmp.124)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.126)
        Pseudo(tmp.129)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Pseudo(tmp.121)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.117)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.126)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Pseudo(tmp.121)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.113)
    Pseudo(tmp.113) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.117)
    Pseudo(tmp.117) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.118)
        Pseudo(tmp.135)
        Pseudo(tmp.134)
        Pseudo(tmp.124)
        Pseudo(tmp.126)
        Pseudo(tmp.129)
        Pseudo(tmp.127)
        Reg(AX)
        Pseudo(tmp.131)
        Pseudo(tmp.132)
        Pseudo(tmp.121)
        Reg(DX)
        Pseudo(tmp.122)
Pseudo(tmp.118)
    Pseudo(tmp.118) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
Pseudo(tmp.121)
    Pseudo(tmp.121) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.124)
        Pseudo(tmp.126)
        Pseudo(tmp.129)
        Pseudo(tmp.127)
        Reg(AX)
        Pseudo(tmp.131)
        Reg(DX)
        Pseudo(tmp.122)
Pseudo(tmp.122)
    Pseudo(tmp.122) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.121)
        Pseudo(tmp.124)
Pseudo(tmp.124)
    Pseudo(tmp.124) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.122)
        Pseudo(tmp.121)
        Reg(AX)
Pseudo(tmp.126)
    Pseudo(tmp.126) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.129)
        Pseudo(tmp.127)
        Reg(AX)
        Pseudo(tmp.131)
        Pseudo(tmp.132)
        Pseudo(tmp.121)
        Reg(DX)
Pseudo(tmp.127)
    Pseudo(tmp.127) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.121)
        Pseudo(tmp.126)
        Pseudo(tmp.129)
Pseudo(tmp.129)
    Pseudo(tmp.129) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.126)
        Pseudo(tmp.127)
        Reg(AX)
        Pseudo(tmp.121)
Pseudo(tmp.131)
    Pseudo(tmp.131) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.139)
        Pseudo(tmp.135)
        Pseudo(tmp.134)
        Pseudo(tmp.126)
        Pseudo(tmp.138)
        Pseudo(tmp.132)
        Pseudo(tmp.121)
Pseudo(tmp.132)
    Pseudo(tmp.132) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.131)
        Pseudo(tmp.126)
Pseudo(tmp.134)
    Pseudo(tmp.134) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.131)
Pseudo(tmp.135)
    Pseudo(tmp.135) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.117)
        Pseudo(tmp.131)
Pseudo(tmp.138)
    Pseudo(tmp.138) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.131)
Pseudo(tmp.139)
    Pseudo(tmp.139) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.131)
Pseudo(tmp.143)
    Pseudo(tmp.143) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.144)
    Pseudo(tmp.144) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.113) Pseudo(tmp.113) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.117) Pseudo(tmp.117) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.118) Pseudo(tmp.118) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.121) Pseudo(tmp.121) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.122) Pseudo(tmp.122) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.124) Pseudo(tmp.124) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.126) Pseudo(tmp.126) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.127) Pseudo(tmp.127) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.129) Pseudo(tmp.129) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.131) Pseudo(tmp.131) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.132) Pseudo(tmp.132) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.134) Pseudo(tmp.134) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.135) Pseudo(tmp.135) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.138) Pseudo(tmp.138) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.139) Pseudo(tmp.139) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.143) Pseudo(tmp.143) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.144) Pseudo(tmp.144) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2f60>, <RegisterAllocation.Node object at 0x7f8f862e11f0>, <RegisterAllocation.Node object at 0x7f8f86342a50>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f86343dd0>, <RegisterAllocation.Node object at 0x7f8f863247d0>, <RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2f60>, <RegisterAllocation.Node object at 0x7f8f86342a50>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f86343dd0>, <RegisterAllocation.Node object at 0x7f8f863247d0>, <RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2f60>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f86343dd0>, <RegisterAllocation.Node object at 0x7f8f863247d0>, <RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2f60>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f863247d0>, <RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2f60>, <RegisterAllocation.Node object at 0x7f8f863247d0>, <RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2f60>, <RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324800>, <RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86326b10>, <RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324f20>, <RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324e60>, <RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86301220>, <RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86300a10>, <RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86309850>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634ed50>, <RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634e3c0>, <RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311a30>, <RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f6c30>, <RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d610>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634dca0>, <RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634da00>, <RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86321b50>, <RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d400>, <RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634e5d0>, <RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e1e80>, <RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d460>, <RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634eab0>, <RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d8b0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 6 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 5 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 7 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.113) Pseudo(tmp.113) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.117) Pseudo(tmp.117) spillCost: 4.0 color: 5 pruned: False
Pseudo(tmp.118) Pseudo(tmp.118) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.121) Pseudo(tmp.121) spillCost: 2.0 color: 4 pruned: False
Pseudo(tmp.122) Pseudo(tmp.122) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.124) Pseudo(tmp.124) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.126) Pseudo(tmp.126) spillCost: 2.0 color: 3 pruned: False
Pseudo(tmp.127) Pseudo(tmp.127) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.129) Pseudo(tmp.129) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.131) Pseudo(tmp.131) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.132) Pseudo(tmp.132) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.134) Pseudo(tmp.134) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.135) Pseudo(tmp.135) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.138) Pseudo(tmp.138) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.139) Pseudo(tmp.139) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.143) Pseudo(tmp.143) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.144) Pseudo(tmp.144) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{6: Reg(AX), 8: Reg(BX), 5: Reg(CX), 7: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_different_index_types: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.113): Reg(R9d), Pseudo(tmp.117): Reg(CX), Pseudo(tmp.118): Reg(R9d), Pseudo(tmp.121): Reg(DI), Pseudo(tmp.122): Reg(R8d), Pseudo(tmp.124): Reg(R9d), Pseudo(tmp.126): Reg(SI), Pseudo(tmp.127): Reg(R8d), Pseudo(tmp.129): Reg(R9d), Pseudo(tmp.131): Reg(R8d), Pseudo(tmp.132): Reg(R9d), Pseudo(tmp.134): Reg(R9d), Pseudo(tmp.135): Reg(R9d), Pseudo(tmp.138): Reg(R9d), Pseudo(tmp.139): Reg(R9d), Pseudo(tmp.143): Reg(R9d), Pseudo(tmp.144): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108))
AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0))       AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109))
AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8))       AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110))
AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16))      AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111))
AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24))      AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112))
AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32))      AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32))
AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40))     AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40))
AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48))     AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48))
AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56))     AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56))
AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64))     AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64))
AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72))     AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72))
AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80))     AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80))
Lea(PseudoMem(double_arr.8, 0), Reg(R9d))                              Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.113))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.113), Reg(AX))
Lea(Memory(AX, 40), Reg(CX))                                           Lea(Memory(AX, 40), Pseudo(tmp.117))
Lea(PseudoMem(double_arr.8, 0), Reg(R9d))                              Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.118))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.118), Reg(AX))
Lea(Memory(AX, 40), Reg(DI))                                           Lea(Memory(AX, 40), Pseudo(tmp.121))
Lea(PseudoMem(double_arr.8, 0), Reg(R8d))                              Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.122))
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d))    SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.124))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.122), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.124), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(SI))                                     Lea(Indexed(AX + DX * 8), Pseudo(tmp.126))
Lea(PseudoMem(double_arr.8, 0), Reg(R8d))                              Lea(PseudoMem(double_arr.8, 0), Pseudo(tmp.127))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Mov(Imm(5), Pseudo(tmp.129))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.127), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.129), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(R8d))                                    Lea(Indexed(AX + DX * 8), Pseudo(tmp.131))
AssType: Quadword Cmp(Reg(DI), Reg(CX))                                AssType: Quadword Cmp(Pseudo(tmp.121), Pseudo(tmp.117))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.132))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.132))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.132))
JmpCC(ConcCodeType.E, tmp.133)                                         JmpCC(ConcCodeType.E, tmp.133)
AssType: Quadword Cmp(Reg(SI), Reg(CX))                                AssType: Quadword Cmp(Pseudo(tmp.126), Pseudo(tmp.117))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.134))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.134))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.134))
JmpCC(ConcCodeType.E, tmp.133)                                         JmpCC(ConcCodeType.E, tmp.133)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Pseudo(tmp.135))
Jmp(tmp.136)                                                           Jmp(tmp.136)
Label(tmp.133)                                                         Label(tmp.133)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.135))
Label(tmp.136)                                                         Label(tmp.136)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.135))
JmpCC(ConcCodeType.E, tmp.137)                                         JmpCC(ConcCodeType.E, tmp.137)
AssType: Quadword Cmp(Reg(R8d), Reg(CX))                               AssType: Quadword Cmp(Pseudo(tmp.131), Pseudo(tmp.117))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.138))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.138))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.138))
JmpCC(ConcCodeType.E, tmp.137)                                         JmpCC(ConcCodeType.E, tmp.137)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Pseudo(tmp.139))
Jmp(tmp.140)                                                           Jmp(tmp.140)
Label(tmp.137)                                                         Label(tmp.137)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.139))
Label(tmp.140)                                                         Label(tmp.140)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.139))
JmpCC(ConcCodeType.E, tmp.141)                                         JmpCC(ConcCodeType.E, tmp.141)
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.131), Reg(AX))
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142))                    AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142))
AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142))                 AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.143))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.143))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.143))
JmpCC(ConcCodeType.E, tmp.141)                                         JmpCC(ConcCodeType.E, tmp.141)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Pseudo(tmp.144))
Jmp(tmp.145)                                                           Jmp(tmp.145)
Label(tmp.141)                                                         Label(tmp.141)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.144))
Label(tmp.145)                                                         Label(tmp.145)
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Pseudo(tmp.144), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108))
AssType: Quadword Cmp(Reg(SI), Reg(CX))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.133)
Label(tmp.136)
AssType: Quadword Cmp(Reg(R8d), Reg(CX))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.137)
Label(tmp.140)
AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.141)
Label(tmp.145)
-------------LABELS-----------------
tmp.133 3: [Label(tmp.133), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.133), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.136 4: [Label(tmp.136), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137)] Pred: set() Suc: set() iMap: [(Label(tmp.136), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.137), set())] ReachingCopies: set()
tmp.137 7: [Label(tmp.137), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.137), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.140 8: [Label(tmp.140), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141)] Pred: set() Suc: set() iMap: [(Label(tmp.140), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.141), set())] ReachingCopies: set()
tmp.141 11: [Label(tmp.141), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.141), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.145 12: [Label(tmp.145), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.145), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)), AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)), AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)), AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)), AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)), AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)), AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)), AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)), AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)), AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)), AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)), AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)), Lea(PseudoMem(double_arr.8, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(CX)), Lea(PseudoMem(double_arr.8, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(DI)), Lea(PseudoMem(double_arr.8, 0), Reg(R8d)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(SI)), Lea(PseudoMem(double_arr.8, 0), Reg(R8d)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R8d)), AssType: Quadword Cmp(Reg(DI), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.133)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)), set()), (AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)), set()), (AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)), set()), (AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)), set()), (AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)), set()), (AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)), set()), (AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)), set()), (AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)), set()), (AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)), set()), (AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)), set()), (AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)), set()), (AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)), set()), (Lea(PseudoMem(double_arr.8, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 40), Reg(CX)), set()), (Lea(PseudoMem(double_arr.8, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 40), Reg(DI)), set()), (Lea(PseudoMem(double_arr.8, 0), Reg(R8d)), set()), (SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(SI)), set()), (Lea(PseudoMem(double_arr.8, 0), Reg(R8d)), set()), (AssType: Quadword Mov(Imm(5), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(R8d)), set()), (AssType: Quadword Cmp(Reg(DI), Reg(CX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.133), set())] ReachingCopies: set()
1 1: [AssType: Quadword Cmp(Reg(SI), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.133)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Quadword Cmp(Reg(SI), Reg(CX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.133), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.136)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.136), set())] ReachingCopies: set()
3 3: [Label(tmp.133), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.133), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
4 4: [Label(tmp.136), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137)] Pred: {2, 3} Suc: {5, 7} iMap: [(Label(tmp.136), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.137), set())] ReachingCopies: set()
5 5: [AssType: Quadword Cmp(Reg(R8d), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137)] Pred: {4} Suc: {6, 7} iMap: [(AssType: Quadword Cmp(Reg(R8d), Reg(CX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.137), set())] ReachingCopies: set()
6 6: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.140)] Pred: {5} Suc: {8} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.140), set())] ReachingCopies: set()
7 7: [Label(tmp.137), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {4, 5} Suc: {8} iMap: [(Label(tmp.137), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
8 8: [Label(tmp.140), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141)] Pred: {6, 7} Suc: {9, 11} iMap: [(Label(tmp.140), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.141), set())] ReachingCopies: set()
9 9: [AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)), AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141)] Pred: {8} Suc: {10, 11} iMap: [(AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)), set()), (AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.141), set())] ReachingCopies: set()
10 10: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.145)] Pred: {9} Suc: {12} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.145), set())] ReachingCopies: set()
11 11: [Label(tmp.141), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {8, 9} Suc: {12} iMap: [(Label(tmp.141), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
12 12: [Label(tmp.145), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {10, 11} Suc: {EXIT} iMap: [(Label(tmp.145), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------LIVE for block 12-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Label(tmp.145) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R9d)}
--------------LIVE for block 11-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
Label(tmp.141) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 10-------------------
Jmp(tmp.145) {Reg(R9d)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 9-------------------
JmpCC(ConcCodeType.E, tmp.141) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142)) set()
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142)) {Pseudo(tmp.142)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d)}
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.141) {Reg(R8d)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d)}
Label(tmp.140) {Reg(R8d), Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(R9d)}
--------------LIVE for block 7-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Label(tmp.137) {Reg(R8d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d)}
--------------LIVE for block 6-------------------
Jmp(tmp.140) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(R8d), Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d)}
--------------LIVE for block 5-------------------
JmpCC(ConcCodeType.E, tmp.137) {Reg(R8d)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d)}
AssType: Quadword Cmp(Reg(R8d), Reg(CX)) {Reg(R8d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(CX)}
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.137) {Reg(R8d), Reg(CX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d), Reg(CX)}
Label(tmp.136) {Reg(R8d), Reg(R9d), Reg(CX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(R9d), Reg(CX)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d), Reg(R9d), Reg(CX)}
Label(tmp.133) {Reg(R8d), Reg(CX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(CX)}
--------------LIVE for block 2-------------------
Jmp(tmp.136) {Reg(R8d), Reg(R9d), Reg(CX)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(R8d), Reg(R9d), Reg(CX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(CX)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.133) {Reg(R8d), Reg(CX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d), Reg(CX)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R8d), Reg(R9d), Reg(CX)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d), Reg(CX)}
AssType: Quadword Cmp(Reg(SI), Reg(CX)) {Reg(R8d), Reg(CX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(SI), Reg(CX)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.133) {Reg(R8d), Reg(SI), Reg(CX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d), Reg(SI), Reg(CX)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R8d), Reg(SI), Reg(R9d), Reg(CX)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d), Reg(SI), Reg(CX)}
AssType: Quadword Cmp(Reg(DI), Reg(CX)) {Reg(R8d), Reg(SI), Reg(CX)}
Lea(Indexed(AX + DX * 8), Reg(R8d)) {Reg(R8d), Reg(SI), Reg(CX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(SI), Reg(DX), Reg(DI), Reg(AX), Reg(CX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(SI), Reg(DI), Reg(AX), Reg(CX), Reg(R9d)}
AssType: Quadword Mov(Imm(5), Reg(R9d)) {Reg(R8d), Reg(SI), Reg(DI), Reg(R9d), Reg(CX)}
Lea(PseudoMem(double_arr.8, 0), Reg(R8d)) {Reg(R8d), Reg(SI), Reg(CX), Reg(DI)}
Lea(Indexed(AX + DX * 8), Reg(SI)) {Reg(SI), Reg(CX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(DI), Reg(AX), Reg(CX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(R9d), Reg(AX), Reg(CX), Reg(DI)}
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)) {Reg(R8d), Reg(R9d), Reg(CX), Reg(DI)}
Lea(PseudoMem(double_arr.8, 0), Reg(R8d)) {Reg(R8d), Reg(CX), Reg(DI)}
Lea(Memory(AX, 40), Reg(DI)) {Reg(CX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX), Reg(CX)}
Lea(PseudoMem(double_arr.8, 0), Reg(R9d)) {Reg(R9d), Reg(CX)}
Lea(Memory(AX, 40), Reg(CX)) {Reg(CX)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(double_arr.8, 0), Reg(R9d)) {Reg(R9d)}
AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80)) set()
AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72)) set()
AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64)) set()
AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56)) set()
AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48)) set()
AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40)) set()
AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112)) {Pseudo(tmp.112)}
AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111)) {Pseudo(tmp.111)}
AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110)) {Pseudo(tmp.110)}
AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109)) {Pseudo(tmp.109)}
AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108)) {Pseudo(tmp.108)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Pseudo(tmp.108)
    Pseudo(tmp.108) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.109)
    Pseudo(tmp.109) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.110)
    Pseudo(tmp.110) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.111)
    Pseudo(tmp.111) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.112)
    Pseudo(tmp.112) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.142)
    Pseudo(tmp.142) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
Pseudo(tmp.108) Pseudo(tmp.108) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.109) Pseudo(tmp.109) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.110) Pseudo(tmp.110) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.111) Pseudo(tmp.111) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.112) Pseudo(tmp.112) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.142) Pseudo(tmp.142) spillCost: 2.0 color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f0c80>, <RegisterAllocation.Node object at 0x7f8f862f2180>, <RegisterAllocation.Node object at 0x7f8f862f3440>, <RegisterAllocation.Node object at 0x7f8f862815e0>, <RegisterAllocation.Node object at 0x7f8f86307560>, <RegisterAllocation.Node object at 0x7f8f863046e0>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f2180>, <RegisterAllocation.Node object at 0x7f8f862f3440>, <RegisterAllocation.Node object at 0x7f8f862815e0>, <RegisterAllocation.Node object at 0x7f8f86307560>, <RegisterAllocation.Node object at 0x7f8f863046e0>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f3440>, <RegisterAllocation.Node object at 0x7f8f862815e0>, <RegisterAllocation.Node object at 0x7f8f86307560>, <RegisterAllocation.Node object at 0x7f8f863046e0>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862815e0>, <RegisterAllocation.Node object at 0x7f8f86307560>, <RegisterAllocation.Node object at 0x7f8f863046e0>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307560>, <RegisterAllocation.Node object at 0x7f8f863046e0>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863046e0>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305a00>, <RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86304710>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86306f60>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378080>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311220>, <RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86335100>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
Pseudo(tmp.108) Pseudo(tmp.108) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.109) Pseudo(tmp.109) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.110) Pseudo(tmp.110) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.111) Pseudo(tmp.111) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.112) Pseudo(tmp.112) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.142) Pseudo(tmp.142) spillCost: 2.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_different_index_types: set()
------------------REGISTER DOUBLE MAP.--------------------
{Pseudo(tmp.108): Reg(XMM13), Pseudo(tmp.109): Reg(XMM13), Pseudo(tmp.110): Reg(XMM13), Pseudo(tmp.111): Reg(XMM13), Pseudo(tmp.112): Reg(XMM13), Pseudo(tmp.142): Reg(XMM13)}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.108))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.8, 0))            AssType: Double Mov(Pseudo(tmp.108), PseudoMem(double_arr.8, 0))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.109))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.8, 8))            AssType: Double Mov(Pseudo(tmp.109), PseudoMem(double_arr.8, 8))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.110))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.8, 16))           AssType: Double Mov(Pseudo(tmp.110), PseudoMem(double_arr.8, 16))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.111))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.8, 24))           AssType: Double Mov(Pseudo(tmp.111), PseudoMem(double_arr.8, 24))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.112))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.8, 32))           AssType: Double Mov(Pseudo(tmp.112), PseudoMem(double_arr.8, 32))
AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40))     AssType: Double Mov(Data(tmp.358, 0), PseudoMem(double_arr.8, 40))
AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48))     AssType: Double Mov(Data(tmp.359, 0), PseudoMem(double_arr.8, 48))
AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56))     AssType: Double Mov(Data(tmp.360, 0), PseudoMem(double_arr.8, 56))
AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64))     AssType: Double Mov(Data(tmp.361, 0), PseudoMem(double_arr.8, 64))
AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72))     AssType: Double Mov(Data(tmp.362, 0), PseudoMem(double_arr.8, 72))
AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80))     AssType: Double Mov(Data(tmp.363, 0), PseudoMem(double_arr.8, 80))
Lea(PseudoMem(double_arr.8, 0), Reg(R9d))                              Lea(PseudoMem(double_arr.8, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 40), Reg(CX))                                           Lea(Memory(AX, 40), Reg(CX))
Lea(PseudoMem(double_arr.8, 0), Reg(R9d))                              Lea(PseudoMem(double_arr.8, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 40), Reg(DI))                                           Lea(Memory(AX, 40), Reg(DI))
Lea(PseudoMem(double_arr.8, 0), Reg(R8d))                              Lea(PseudoMem(double_arr.8, 0), Reg(R8d))
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d))    SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(SI))                                     Lea(Indexed(AX + DX * 8), Reg(SI))
Lea(PseudoMem(double_arr.8, 0), Reg(R8d))                              Lea(PseudoMem(double_arr.8, 0), Reg(R8d))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Mov(Imm(5), Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(R8d))                                    Lea(Indexed(AX + DX * 8), Reg(R8d))
AssType: Quadword Cmp(Reg(DI), Reg(CX))                                AssType: Quadword Cmp(Reg(DI), Reg(CX))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.133)                                         JmpCC(ConcCodeType.E, tmp.133)
AssType: Quadword Cmp(Reg(SI), Reg(CX))                                AssType: Quadword Cmp(Reg(SI), Reg(CX))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.133)                                         JmpCC(ConcCodeType.E, tmp.133)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.136)                                                           Jmp(tmp.136)
Label(tmp.133)                                                         Label(tmp.133)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.136)                                                         Label(tmp.136)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.137)                                         JmpCC(ConcCodeType.E, tmp.137)
AssType: Quadword Cmp(Reg(R8d), Reg(CX))                               AssType: Quadword Cmp(Reg(R8d), Reg(CX))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.137)                                         JmpCC(ConcCodeType.E, tmp.137)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.140)                                                           Jmp(tmp.140)
Label(tmp.137)                                                         Label(tmp.137)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.140)                                                         Label(tmp.140)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.141)                                         JmpCC(ConcCodeType.E, tmp.141)
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Double Mov(Memory(AX, 0), Reg(XMM13))                         AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.142))
AssType: Double Cmp(Data(tmp.364, 0), Reg(XMM13))                      AssType: Double Cmp(Data(tmp.364, 0), Pseudo(tmp.142))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.141)                                         JmpCC(ConcCodeType.E, tmp.141)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.145)                                                           Jmp(tmp.145)
Label(tmp.141)                                                         Label(tmp.141)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.145)                                                         Label(tmp.145)
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_add_complex_expressions
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(2), Pseudo(tmp.146))
Lea(PseudoMem(arr.18, 0), Pseudo(tmp.150))
Label(tmp.149)
Label(tmp.155)
AssType: Quadword Mov(Pseudo(tmp.166), Reg(AX))
AssType: Longword Mov(Imm(1), Pseudo(tmp.176))
Label(tmp.173)
Label(tmp.177)
-------------LABELS-----------------
tmp.149 2: [Label(tmp.149), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156)), AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158)), AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154))] Pred: set() Suc: set() iMap: [(Label(tmp.149), set()), (Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156)), set()), (AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158)), set()), (AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154)), set())] ReachingCopies: set()
tmp.155 3: [Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Pseudo(tmp.161)), AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162)), AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163)), AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164)), AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.166)), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167)), AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX)), Lea(Memory(AX, 4), Pseudo(tmp.171)), AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166)), AssType: Longword Mov(Imm(0), Pseudo(tmp.172)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.172)), JmpCC(ConcCodeType.E, tmp.173)] Pred: set() Suc: set() iMap: [(Label(tmp.155), set()), (Call(return_one), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.161)), set()), (AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162)), set()), (AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163)), set()), (AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164)), set()), (AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.166)), set()), (Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167)), set()), (AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX)), set()), (Lea(Memory(AX, 4), Pseudo(tmp.171)), set()), (AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.172)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.172)), set()), (JmpCC(ConcCodeType.E, tmp.173), set())] ReachingCopies: set()
tmp.173 6: [Label(tmp.173), AssType: Longword Mov(Imm(0), Pseudo(tmp.176))] Pred: set() Suc: set() iMap: [(Label(tmp.173), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.176)), set())] ReachingCopies: set()
tmp.177 7: [Label(tmp.177), AssType: Longword Mov(Pseudo(tmp.176), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.177), set()), (AssType: Longword Mov(Pseudo(tmp.176), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(2), Pseudo(tmp.146)), AssType: Longword Unary(Neg, Pseudo(tmp.146)), AssType: Longword Mov(Pseudo(tmp.146), Pseudo(i.14)), Lea(Pseudo(i.14), Pseudo(tmp.147)), AssType: Longword Cmp(Imm(0), Pseudo(flag.13)), JmpCC(ConcCodeType.E, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Mov(Imm(2), Pseudo(tmp.146)), set()), (AssType: Longword Unary(Neg, Pseudo(tmp.146)), set()), (AssType: Longword Mov(Pseudo(tmp.146), Pseudo(i.14)), set()), (Lea(Pseudo(i.14), Pseudo(tmp.147)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(flag.13)), set()), (JmpCC(ConcCodeType.E, tmp.149), set())] ReachingCopies: set()
1 1: [Lea(PseudoMem(arr.18, 0), Pseudo(tmp.150)), AssType: Quadword Mov(Pseudo(tmp.150), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.152)), AssType: Quadword Mov(Pseudo(tmp.152), Pseudo(tmp.154)), Jmp(tmp.155)] Pred: {0} Suc: {3} iMap: [(Lea(PseudoMem(arr.18, 0), Pseudo(tmp.150)), set()), (AssType: Quadword Mov(Pseudo(tmp.150), Reg(DI)), set()), (Call(get_elem1_ptr), set()), (AssType: Quadword Mov(Reg(AX), Pseudo(tmp.152)), set()), (AssType: Quadword Mov(Pseudo(tmp.152), Pseudo(tmp.154)), set()), (Jmp(tmp.155), set())] ReachingCopies: set()
2 2: [Label(tmp.149), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156)), AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158)), AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154))] Pred: {0} Suc: {3} iMap: [(Label(tmp.149), set()), (Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156)), set()), (AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158)), set()), (AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154)), set())] ReachingCopies: set()
3 3: [Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Pseudo(tmp.161)), AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162)), AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163)), AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164)), AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.166)), Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167)), AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX)), Lea(Memory(AX, 4), Pseudo(tmp.171)), AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166)), AssType: Longword Mov(Imm(0), Pseudo(tmp.172)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.172)), JmpCC(ConcCodeType.E, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: [(Label(tmp.155), set()), (Call(return_one), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.161)), set()), (AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162)), set()), (AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163)), set()), (AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164)), set()), (AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.166)), set()), (Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167)), set()), (AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX)), set()), (Lea(Memory(AX, 4), Pseudo(tmp.171)), set()), (AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.172)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.172)), set()), (JmpCC(ConcCodeType.E, tmp.173), set())] ReachingCopies: set()
4 4: [AssType: Quadword Mov(Pseudo(tmp.166), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.174)), AssType: Longword Cmp(Imm(2), Pseudo(tmp.174)), AssType: Longword Mov(Imm(0), Pseudo(tmp.175)), SetCC(ConcCodeType.E, Pseudo(tmp.175)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.175)), JmpCC(ConcCodeType.E, tmp.173)] Pred: {3} Suc: {5, 6} iMap: [(AssType: Quadword Mov(Pseudo(tmp.166), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.174)), set()), (AssType: Longword Cmp(Imm(2), Pseudo(tmp.174)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.175)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.175)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.175)), set()), (JmpCC(ConcCodeType.E, tmp.173), set())] ReachingCopies: set()
5 5: [AssType: Longword Mov(Imm(1), Pseudo(tmp.176)), Jmp(tmp.177)] Pred: {4} Suc: {7} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.176)), set()), (Jmp(tmp.177), set())] ReachingCopies: set()
6 6: [Label(tmp.173), AssType: Longword Mov(Imm(0), Pseudo(tmp.176))] Pred: {3, 4} Suc: {7} iMap: [(Label(tmp.173), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.176)), set())] ReachingCopies: set()
7 7: [Label(tmp.177), AssType: Longword Mov(Pseudo(tmp.176), Reg(AX)), ret] Pred: {5, 6} Suc: {EXIT} iMap: [(Label(tmp.177), set()), (AssType: Longword Mov(Pseudo(tmp.176), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {7}
--------------LIVE for block 7-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.176), Reg(AX)) {Reg(AX)}
Label(tmp.177) {Pseudo(tmp.176)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.176)}
--------------LIVE for block 6-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.176)) {Pseudo(tmp.176)}
Label(tmp.173) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 5-------------------
Jmp(tmp.177) {Pseudo(tmp.176)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.176)) {Pseudo(tmp.176)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.173) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.175)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.175)) {Pseudo(tmp.175)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.175)) set()
AssType: Longword Cmp(Imm(2), Pseudo(tmp.174)) set()
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.174)) {Pseudo(tmp.174)}
AssType: Quadword Mov(Pseudo(tmp.166), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.166)}
--------------LIVE for block 3-------------------
JmpCC(ConcCodeType.E, tmp.173) {Pseudo(tmp.166)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.172)) {Pseudo(tmp.166)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172)) {Pseudo(tmp.172), Pseudo(tmp.166)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.172)) {Pseudo(tmp.166)}
AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166)) {Pseudo(tmp.166)}
Lea(Memory(AX, 4), Pseudo(tmp.171)) {Pseudo(tmp.171), Pseudo(tmp.166)}
AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX)) {Reg(AX), Pseudo(tmp.166)}
Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167)) {Pseudo(tmp.167), Pseudo(tmp.166)}
Lea(Indexed(AX + DX * 4), Pseudo(tmp.166)) {Pseudo(tmp.166)}
AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX)) {Pseudo(tmp.164), Reg(AX)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164)) {Pseudo(tmp.164), Pseudo(tmp.154)}
AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163)) {Pseudo(tmp.154), Pseudo(tmp.163)}
AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163)) {Pseudo(tmp.162), Pseudo(tmp.154), Pseudo(tmp.163)}
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162)) {Pseudo(tmp.162), Pseudo(tmp.161), Pseudo(tmp.154)}
AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX)) {Pseudo(tmp.161), Pseudo(tmp.154), Reg(AX)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.161)) {Pseudo(tmp.161), Pseudo(tmp.154), Pseudo(tmp.147)}
Call(return_one) {Pseudo(tmp.154), Reg(AX), Pseudo(tmp.147)}
Label(tmp.155) {Pseudo(tmp.154), Pseudo(tmp.147)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.154), Pseudo(tmp.147)}
--------------LIVE for block 2-------------------
AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154)) {Pseudo(tmp.154), Pseudo(tmp.147)}
AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158)) {Pseudo(tmp.158), Pseudo(tmp.147)}
Call(get_elem2_ptr) {Reg(AX), Pseudo(tmp.147)}
AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI)) {Pseudo(tmp.147), Reg(DI)}
Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156)) {Pseudo(tmp.156), Pseudo(tmp.147)}
Label(tmp.149) {Pseudo(tmp.147)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.147)}
--------------LIVE for block 1-------------------
Jmp(tmp.155) {Pseudo(tmp.154), Pseudo(tmp.147)}
AssType: Quadword Mov(Pseudo(tmp.152), Pseudo(tmp.154)) {Pseudo(tmp.154), Pseudo(tmp.147)}
AssType: Quadword Mov(Reg(AX), Pseudo(tmp.152)) {Pseudo(tmp.152), Pseudo(tmp.147)}
Call(get_elem1_ptr) {Reg(AX), Pseudo(tmp.147)}
AssType: Quadword Mov(Pseudo(tmp.150), Reg(DI)) {Pseudo(tmp.147), Reg(DI)}
Lea(PseudoMem(arr.18, 0), Pseudo(tmp.150)) {Pseudo(tmp.150), Pseudo(tmp.147)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.147)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.149) {Pseudo(tmp.147)}
AssType: Longword Cmp(Imm(0), Pseudo(flag.13)) {Pseudo(tmp.147)}
Lea(Pseudo(i.14), Pseudo(tmp.147)) {Pseudo(flag.13), Pseudo(tmp.147)}
AssType: Longword Mov(Pseudo(tmp.146), Pseudo(i.14)) {Pseudo(flag.13), Pseudo(i.14)}
AssType: Longword Unary(Neg, Pseudo(tmp.146)) {Pseudo(flag.13), Pseudo(tmp.146)}
AssType: Longword Mov(Imm(2), Pseudo(tmp.146)) {Pseudo(flag.13), Pseudo(tmp.146)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag.13)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(R9d)
        Reg(CX)
        Pseudo(tmp.147)
        Pseudo(tmp.164)
        Reg(SI)
        Pseudo(tmp.161)
        Reg(R13d)
        Pseudo(tmp.166)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(AX)
        Reg(R9d)
        Pseudo(tmp.147)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Pseudo(tmp.147)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Pseudo(tmp.147)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Pseudo(tmp.147)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Pseudo(tmp.147)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.154)
        Reg(AX)
        Reg(CX)
        Pseudo(tmp.147)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.146)
    Pseudo(tmp.146) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.147)
    Pseudo(tmp.147) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.152)
        Pseudo(tmp.150)
        Reg(DI)
        Pseudo(tmp.154)
        Reg(R9d)
        Reg(CX)
        Reg(AX)
        Reg(SI)
        Pseudo(tmp.161)
        Pseudo(tmp.158)
        Reg(DX)
        Pseudo(tmp.156)
Pseudo(tmp.150)
    Pseudo(tmp.150) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.147)
Pseudo(tmp.152)
    Pseudo(tmp.152) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.147)
Pseudo(tmp.154)
    Pseudo(tmp.154) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.163)
        Reg(DI)
        Pseudo(tmp.162)
        Reg(R9d)
        Reg(CX)
        Pseudo(tmp.147)
        Reg(AX)
        Reg(SI)
        Pseudo(tmp.164)
        Pseudo(tmp.161)
        Reg(DX)
Pseudo(tmp.156)
    Pseudo(tmp.156) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.147)
Pseudo(tmp.158)
    Pseudo(tmp.158) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.147)
Pseudo(tmp.161)
    Pseudo(tmp.161) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.162)
        Pseudo(tmp.154)
        Reg(AX)
        Pseudo(tmp.147)
Pseudo(tmp.162)
    Pseudo(tmp.162) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.161)
        Pseudo(tmp.154)
        Pseudo(tmp.163)
Pseudo(tmp.163)
    Pseudo(tmp.163) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.162)
        Pseudo(tmp.154)
Pseudo(tmp.164)
    Pseudo(tmp.164) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.154)
        Reg(AX)
Pseudo(tmp.166)
    Pseudo(tmp.166) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.172)
        Pseudo(tmp.167)
        Reg(AX)
        Pseudo(tmp.171)
Pseudo(tmp.167)
    Pseudo(tmp.167) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.166)
Pseudo(tmp.171)
    Pseudo(tmp.171) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.166)
Pseudo(tmp.172)
    Pseudo(tmp.172) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.166)
Pseudo(tmp.174)
    Pseudo(tmp.174) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.175)
    Pseudo(tmp.175) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.176)
    Pseudo(tmp.176) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.146) Pseudo(tmp.146) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.147) Pseudo(tmp.147) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.150) Pseudo(tmp.150) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.152) Pseudo(tmp.152) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.154) Pseudo(tmp.154) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.156) Pseudo(tmp.156) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.158) Pseudo(tmp.158) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.161) Pseudo(tmp.161) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.162) Pseudo(tmp.162) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.163) Pseudo(tmp.163) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.164) Pseudo(tmp.164) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.166) Pseudo(tmp.166) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.167) Pseudo(tmp.167) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.171) Pseudo(tmp.171) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.172) Pseudo(tmp.172) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.174) Pseudo(tmp.174) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.175) Pseudo(tmp.175) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.176) Pseudo(tmp.176) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bbc0>, <RegisterAllocation.Node object at 0x7f8f863084a0>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86308500>, <RegisterAllocation.Node object at 0x7f8f863096d0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bbc0>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86308500>, <RegisterAllocation.Node object at 0x7f8f863096d0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bbc0>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86308500>, <RegisterAllocation.Node object at 0x7f8f863096d0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bbc0>, <RegisterAllocation.Node object at 0x7f8f86308500>, <RegisterAllocation.Node object at 0x7f8f863096d0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bbc0>, <RegisterAllocation.Node object at 0x7f8f863096d0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bbc0>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d4ce0>, <RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d40b0>, <RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d7320>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86342990>, <RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b2c0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86343230>, <RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863433e0>, <RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86322570>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d0a0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86340e00>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86343f80>, <RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86342a50>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 6 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 2 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 9 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 8 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 7 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 5 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 4 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 3 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.146) Pseudo(tmp.146) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.147) Pseudo(tmp.147) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.150) Pseudo(tmp.150) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.152) Pseudo(tmp.152) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.154) Pseudo(tmp.154) spillCost: 3.0 color: 3 pruned: False
Pseudo(tmp.156) Pseudo(tmp.156) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.158) Pseudo(tmp.158) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.161) Pseudo(tmp.161) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.162) Pseudo(tmp.162) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.163) Pseudo(tmp.163) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.164) Pseudo(tmp.164) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.166) Pseudo(tmp.166) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.167) Pseudo(tmp.167) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.171) Pseudo(tmp.171) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.172) Pseudo(tmp.172) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.174) Pseudo(tmp.174) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.175) Pseudo(tmp.175) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.176) Pseudo(tmp.176) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{6: Reg(AX), 2: Reg(BX), 9: Reg(CX), 8: Reg(DX), 7: Reg(DI), 5: Reg(SI), 4: Reg(R8d), 1: Reg(R9d), 3: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_complex_expressions: {Reg(BX), Reg(R12d)}
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.146): Reg(R9d), Pseudo(tmp.147): Reg(BX), Pseudo(tmp.150): Reg(R9d), Pseudo(tmp.152): Reg(R9d), Pseudo(tmp.154): Reg(R12d), Pseudo(tmp.156): Reg(R9d), Pseudo(tmp.158): Reg(R9d), Pseudo(tmp.161): Reg(R9d), Pseudo(tmp.162): Reg(BX), Pseudo(tmp.163): Reg(R9d), Pseudo(tmp.164): Reg(R9d), Pseudo(tmp.166): Reg(BX), Pseudo(tmp.167): Reg(R9d), Pseudo(tmp.171): Reg(R9d), Pseudo(tmp.172): Reg(R9d), Pseudo(tmp.174): Reg(R9d), Pseudo(tmp.175): Reg(R9d), Pseudo(tmp.176): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Pseudo(tmp.146))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Pseudo(tmp.146))
AssType: Longword Mov(Reg(R9d), Pseudo(i.14))                          AssType: Longword Mov(Pseudo(tmp.146), Pseudo(i.14))
Lea(Pseudo(i.14), Reg(BX))                                             Lea(Pseudo(i.14), Pseudo(tmp.147))
AssType: Longword Cmp(Imm(0), Pseudo(flag.13))                         AssType: Longword Cmp(Imm(0), Pseudo(flag.13))
JmpCC(ConcCodeType.E, tmp.149)                                         JmpCC(ConcCodeType.E, tmp.149)
Lea(PseudoMem(arr.18, 0), Reg(R9d))                                    Lea(PseudoMem(arr.18, 0), Pseudo(tmp.150))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Pseudo(tmp.150), Reg(DI))
Call(get_elem1_ptr)                                                    Call(get_elem1_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Pseudo(tmp.152))
AssType: Quadword Mov(Reg(R9d), Reg(R12d))                             AssType: Quadword Mov(Pseudo(tmp.152), Pseudo(tmp.154))
Jmp(tmp.155)                                                           Jmp(tmp.155)
Label(tmp.149)                                                         Label(tmp.149)
Lea(PseudoMem(arr.18, 0), Reg(R9d))                                    Lea(PseudoMem(arr.18, 0), Pseudo(tmp.156))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Pseudo(tmp.156), Reg(DI))
Call(get_elem2_ptr)                                                    Call(get_elem2_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Pseudo(tmp.158))
AssType: Quadword Mov(Reg(R9d), Reg(R12d))                             AssType: Quadword Mov(Pseudo(tmp.158), Pseudo(tmp.154))
Label(tmp.155)                                                         Label(tmp.155)
Call(return_one)                                                       Call(return_one)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.161))
AssType: Quadword Mov(Reg(BX), Reg(AX))                                AssType: Quadword Mov(Pseudo(tmp.147), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(BX))                          AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.162))
AssType: Longword Binary(Add, Reg(BX), Reg(R9d))                       AssType: Longword Mov(Pseudo(tmp.161), Pseudo(tmp.163))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          AssType: Longword Binary(Add, Pseudo(tmp.162), Pseudo(tmp.163))
AssType: Quadword Mov(Reg(R12d), Reg(AX))                              SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.163), Pseudo(tmp.164))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.154), Reg(AX))
Lea(Indexed(AX + DX * 4), Reg(BX))                                     AssType: Quadword Mov(Pseudo(tmp.164), Reg(DX))
Lea(PseudoMem(arr.18, 0), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Pseudo(tmp.166))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               Lea(PseudoMem(arr.18, 0), Pseudo(tmp.167))
Lea(Memory(AX, 4), Reg(R9d))                                           AssType: Quadword Mov(Pseudo(tmp.167), Reg(AX))
AssType: Quadword Cmp(Reg(R9d), Reg(BX))                               Lea(Memory(AX, 4), Pseudo(tmp.171))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Quadword Cmp(Pseudo(tmp.171), Pseudo(tmp.166))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.172))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.172))
JmpCC(ConcCodeType.E, tmp.173)                                         AssType: Longword Cmp(Imm(0), Pseudo(tmp.172))
AssType: Quadword Mov(Reg(BX), Reg(AX))                                JmpCC(ConcCodeType.E, tmp.173)
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Pseudo(tmp.166), Reg(AX))
AssType: Longword Cmp(Imm(2), Reg(R9d))                                AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.174))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(2), Pseudo(tmp.174))
SetCC(ConcCodeType.E, Reg(R9d))                                        AssType: Longword Mov(Imm(0), Pseudo(tmp.175))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                SetCC(ConcCodeType.E, Pseudo(tmp.175))
JmpCC(ConcCodeType.E, tmp.173)                                         AssType: Longword Cmp(Imm(0), Pseudo(tmp.175))
AssType: Longword Mov(Imm(1), Reg(R9d))                                JmpCC(ConcCodeType.E, tmp.173)
Jmp(tmp.177)                                                           AssType: Longword Mov(Imm(1), Pseudo(tmp.176))
Label(tmp.173)                                                         Jmp(tmp.177)
AssType: Longword Mov(Imm(0), Reg(R9d))                                Label(tmp.173)
Label(tmp.177)                                                         AssType: Longword Mov(Imm(0), Pseudo(tmp.176))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               Label(tmp.177)
ret                                                                    AssType: Longword Mov(Pseudo(tmp.176), Reg(AX))
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(2), Reg(R9d))
Lea(PseudoMem(arr.18, 0), Reg(R9d))
Label(tmp.149)
Label(tmp.155)
AssType: Quadword Mov(Reg(BX), Reg(AX))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.173)
Label(tmp.177)
-------------LABELS-----------------
tmp.149 2: [Label(tmp.149), Lea(PseudoMem(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d))] Pred: set() Suc: set() iMap: [(Label(tmp.149), set()), (Lea(PseudoMem(arr.18, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(R12d)), set())] ReachingCopies: set()
tmp.155 3: [Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(BX)), AssType: Longword Binary(Add, Reg(BX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R12d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(BX)), Lea(PseudoMem(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Cmp(Reg(R9d), Reg(BX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173)] Pred: set() Suc: set() iMap: [(Label(tmp.155), set()), (Call(return_one), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(BX), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(BX)), set()), (AssType: Longword Binary(Add, Reg(BX), Reg(R9d)), set()), (SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R12d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(BX)), set()), (Lea(PseudoMem(arr.18, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 4), Reg(R9d)), set()), (AssType: Quadword Cmp(Reg(R9d), Reg(BX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.173), set())] ReachingCopies: set()
tmp.173 6: [Label(tmp.173), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.173), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.177 7: [Label(tmp.177), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.177), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Pseudo(i.14)), Lea(Pseudo(i.14), Reg(BX)), AssType: Longword Cmp(Imm(0), Pseudo(flag.13)), JmpCC(ConcCodeType.E, tmp.149)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Mov(Imm(2), Reg(R9d)), set()), (AssType: Longword Unary(Neg, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Pseudo(i.14)), set()), (Lea(Pseudo(i.14), Reg(BX)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(flag.13)), set()), (JmpCC(ConcCodeType.E, tmp.149), set())] ReachingCopies: set()
1 1: [Lea(PseudoMem(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d)), Jmp(tmp.155)] Pred: {0} Suc: {3} iMap: [(Lea(PseudoMem(arr.18, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DI)), set()), (Call(get_elem1_ptr), set()), (AssType: Quadword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(R12d)), set()), (Jmp(tmp.155), set())] ReachingCopies: set()
2 2: [Label(tmp.149), Lea(PseudoMem(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d))] Pred: {0} Suc: {3} iMap: [(Label(tmp.149), set()), (Lea(PseudoMem(arr.18, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(R12d)), set())] ReachingCopies: set()
3 3: [Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(BX)), AssType: Longword Binary(Add, Reg(BX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R12d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(BX)), Lea(PseudoMem(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Cmp(Reg(R9d), Reg(BX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173)] Pred: {1, 2} Suc: {4, 6} iMap: [(Label(tmp.155), set()), (Call(return_one), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(BX), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(BX)), set()), (AssType: Longword Binary(Add, Reg(BX), Reg(R9d)), set()), (SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R12d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(BX)), set()), (Lea(PseudoMem(arr.18, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 4), Reg(R9d)), set()), (AssType: Quadword Cmp(Reg(R9d), Reg(BX)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.173), set())] ReachingCopies: set()
4 4: [AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(2), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173)] Pred: {3} Suc: {5, 6} iMap: [(AssType: Quadword Mov(Reg(BX), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(2), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.173), set())] ReachingCopies: set()
5 5: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.177)] Pred: {4} Suc: {7} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.177), set())] ReachingCopies: set()
6 6: [Label(tmp.173), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {3, 4} Suc: {7} iMap: [(Label(tmp.173), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
7 7: [Label(tmp.177), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {5, 6} Suc: {EXIT} iMap: [(Label(tmp.177), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {7}
--------------LIVE for block 7-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Label(tmp.177) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R9d)}
--------------LIVE for block 6-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
Label(tmp.173) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 5-------------------
Jmp(tmp.177) {Reg(R9d)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.173) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(2), Reg(R9d)) set()
AssType: Longword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(BX), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(BX)}
--------------LIVE for block 3-------------------
JmpCC(ConcCodeType.E, tmp.173) {Reg(BX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(BX)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R9d), Reg(BX)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(BX)}
AssType: Quadword Cmp(Reg(R9d), Reg(BX)) {Reg(BX)}
Lea(Memory(AX, 4), Reg(R9d)) {Reg(R9d), Reg(BX)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX), Reg(BX)}
Lea(PseudoMem(arr.18, 0), Reg(R9d)) {Reg(R9d), Reg(BX)}
Lea(Indexed(AX + DX * 4), Reg(BX)) {Reg(BX)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R12d), Reg(AX)) {Reg(AX), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)) {Reg(R9d), Reg(R12d)}
AssType: Longword Binary(Add, Reg(BX), Reg(R9d)) {Reg(R9d), Reg(R12d)}
AssType: Longword Mov(Memory(AX, 0), Reg(BX)) {Reg(R9d), Reg(BX), Reg(R12d)}
AssType: Quadword Mov(Reg(BX), Reg(AX)) {Reg(AX), Reg(R12d), Reg(R9d)}
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d), Reg(BX), Reg(R12d)}
Call(return_one) {Reg(AX), Reg(BX), Reg(R12d)}
Label(tmp.155) {Reg(BX), Reg(R12d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(BX), Reg(R12d)}
--------------LIVE for block 2-------------------
AssType: Quadword Mov(Reg(R9d), Reg(R12d)) {Reg(BX), Reg(R12d)}
AssType: Quadword Mov(Reg(AX), Reg(R9d)) {Reg(R9d), Reg(BX)}
Call(get_elem2_ptr) {Reg(AX), Reg(BX)}
AssType: Quadword Mov(Reg(R9d), Reg(DI)) {Reg(BX), Reg(DI)}
Lea(PseudoMem(arr.18, 0), Reg(R9d)) {Reg(R9d), Reg(BX)}
Label(tmp.149) {Reg(BX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(BX)}
--------------LIVE for block 1-------------------
Jmp(tmp.155) {Reg(BX), Reg(R12d)}
AssType: Quadword Mov(Reg(R9d), Reg(R12d)) {Reg(BX), Reg(R12d)}
AssType: Quadword Mov(Reg(AX), Reg(R9d)) {Reg(R9d), Reg(BX)}
Call(get_elem1_ptr) {Reg(AX), Reg(BX)}
AssType: Quadword Mov(Reg(R9d), Reg(DI)) {Reg(BX), Reg(DI)}
Lea(PseudoMem(arr.18, 0), Reg(R9d)) {Reg(R9d), Reg(BX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(BX)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.149) {Reg(BX)}
AssType: Longword Cmp(Imm(0), Pseudo(flag.13)) {Reg(BX)}
Lea(Pseudo(i.14), Reg(BX)) {Pseudo(flag.13), Reg(BX)}
AssType: Longword Mov(Reg(R9d), Pseudo(i.14)) {Pseudo(flag.13), Pseudo(i.14)}
AssType: Longword Unary(Neg, Reg(R9d)) {Pseudo(flag.13), Reg(R9d)}
AssType: Longword Mov(Imm(2), Reg(R9d)) {Pseudo(flag.13), Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag.13)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862eeae0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f86305310>, <RegisterAllocation.Node object at 0x7f8f86305eb0>, <RegisterAllocation.Node object at 0x7f8f863057c0>, <RegisterAllocation.Node object at 0x7f8f86304f50>, <RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f86305310>, <RegisterAllocation.Node object at 0x7f8f86305eb0>, <RegisterAllocation.Node object at 0x7f8f863057c0>, <RegisterAllocation.Node object at 0x7f8f86304f50>, <RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305310>, <RegisterAllocation.Node object at 0x7f8f86305eb0>, <RegisterAllocation.Node object at 0x7f8f863057c0>, <RegisterAllocation.Node object at 0x7f8f86304f50>, <RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305eb0>, <RegisterAllocation.Node object at 0x7f8f863057c0>, <RegisterAllocation.Node object at 0x7f8f86304f50>, <RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863057c0>, <RegisterAllocation.Node object at 0x7f8f86304f50>, <RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86304f50>, <RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307380>, <RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305af0>, <RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307920>, <RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307b90>, <RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305280>, <RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305730>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1af0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_complex_expressions: {Reg(BX), Reg(R12d)}
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Reg(R9d))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Pseudo(i.14))                          AssType: Longword Mov(Reg(R9d), Pseudo(i.14))
Lea(Pseudo(i.14), Reg(BX))                                             Lea(Pseudo(i.14), Reg(BX))
AssType: Longword Cmp(Imm(0), Pseudo(flag.13))                         AssType: Longword Cmp(Imm(0), Pseudo(flag.13))
JmpCC(ConcCodeType.E, tmp.149)                                         JmpCC(ConcCodeType.E, tmp.149)
Lea(PseudoMem(arr.18, 0), Reg(R9d))                                    Lea(PseudoMem(arr.18, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Reg(R9d), Reg(DI))
Call(get_elem1_ptr)                                                    Call(get_elem1_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(R12d))                             AssType: Quadword Mov(Reg(R9d), Reg(R12d))
Jmp(tmp.155)                                                           Jmp(tmp.155)
Label(tmp.149)                                                         Label(tmp.149)
Lea(PseudoMem(arr.18, 0), Reg(R9d))                                    Lea(PseudoMem(arr.18, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Reg(R9d), Reg(DI))
Call(get_elem2_ptr)                                                    Call(get_elem2_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(R12d))                             AssType: Quadword Mov(Reg(R9d), Reg(R12d))
Label(tmp.155)                                                         Label(tmp.155)
Call(return_one)                                                       Call(return_one)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Quadword Mov(Reg(BX), Reg(AX))                                AssType: Quadword Mov(Reg(BX), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(BX))                          AssType: Longword Mov(Memory(AX, 0), Reg(BX))
AssType: Longword Binary(Add, Reg(BX), Reg(R9d))                       AssType: Longword Binary(Add, Reg(BX), Reg(R9d))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))
AssType: Quadword Mov(Reg(R12d), Reg(AX))                              AssType: Quadword Mov(Reg(R12d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(BX))                                     Lea(Indexed(AX + DX * 4), Reg(BX))
Lea(PseudoMem(arr.18, 0), Reg(R9d))                                    Lea(PseudoMem(arr.18, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 4), Reg(R9d))                                           Lea(Memory(AX, 4), Reg(R9d))
AssType: Quadword Cmp(Reg(R9d), Reg(BX))                               AssType: Quadword Cmp(Reg(R9d), Reg(BX))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.173)                                         JmpCC(ConcCodeType.E, tmp.173)
AssType: Quadword Mov(Reg(BX), Reg(AX))                                AssType: Quadword Mov(Reg(BX), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R9d))
AssType: Longword Cmp(Imm(2), Reg(R9d))                                AssType: Longword Cmp(Imm(2), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.173)                                         JmpCC(ConcCodeType.E, tmp.173)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.177)                                                           Jmp(tmp.177)
Label(tmp.173)                                                         Label(tmp.173)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.177)                                                         Label(tmp.177)
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION return_one
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(1), Reg(AX))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f86344110>, <RegisterAllocation.Node object at 0x7f8f86347d70>, <RegisterAllocation.Node object at 0x7f8f86344650>, <RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fe540>, <RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f86344110>, <RegisterAllocation.Node object at 0x7f8f86347d70>, <RegisterAllocation.Node object at 0x7f8f86344650>, <RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f86344110>, <RegisterAllocation.Node object at 0x7f8f86347d70>, <RegisterAllocation.Node object at 0x7f8f86344650>, <RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86344110>, <RegisterAllocation.Node object at 0x7f8f86347d70>, <RegisterAllocation.Node object at 0x7f8f86344650>, <RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86347d70>, <RegisterAllocation.Node object at 0x7f8f86344650>, <RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86344650>, <RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86319160>, <RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863184d0>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86337530>, <RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86339070>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for return_one: set()
------------------REGISTER INTEGER MAP.--------------------
{}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Mov(Imm(1), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(1), Reg(AX))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86310110>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86313530>, <RegisterAllocation.Node object at 0x7f8f86310b00>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86310110>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86313530>, <RegisterAllocation.Node object at 0x7f8f86310b00>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310110>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86313530>, <RegisterAllocation.Node object at 0x7f8f86310b00>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86313530>, <RegisterAllocation.Node object at 0x7f8f86310b00>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313530>, <RegisterAllocation.Node object at 0x7f8f86310b00>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310b00>, <RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863133e0>, <RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ce420>, <RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cfb30>, <RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635abd0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86337230>, <RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ee540>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for return_one: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Mov(Imm(1), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION get_elem1_ptr
-----------Building INTEGER interference graph.------------------
AssType: Quadword Mov(Reg(DI), Pseudo(arr.20))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Reg(DI), Pseudo(arr.20)), AssType: Quadword Mov(Pseudo(arr.20), Reg(AX)), Lea(Memory(AX, 4), Pseudo(tmp.181)), AssType: Quadword Mov(Pseudo(tmp.181), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Reg(DI), Pseudo(arr.20)), set()), (AssType: Quadword Mov(Pseudo(arr.20), Reg(AX)), set()), (Lea(Memory(AX, 4), Pseudo(tmp.181)), set()), (AssType: Quadword Mov(Pseudo(tmp.181), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Quadword Mov(Pseudo(tmp.181), Reg(AX)) {Reg(AX)}
Lea(Memory(AX, 4), Pseudo(tmp.181)) {Pseudo(tmp.181)}
AssType: Quadword Mov(Pseudo(arr.20), Reg(AX)) {Reg(AX)}
AssType: Quadword Mov(Reg(DI), Pseudo(arr.20)) {Pseudo(arr.20)}
OLD ANNOT: set()
NEW ANNOT: {Reg(DI)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(arr.20)
    Pseudo(arr.20) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.181)
    Pseudo(tmp.181) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(arr.20) Pseudo(arr.20) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.181) Pseudo(tmp.181) spillCost: 2.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f862f0ce0>, <RegisterAllocation.Node object at 0x7f8f862f1e80>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1310>, <RegisterAllocation.Node object at 0x7f8f862f1df0>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f0ce0>, <RegisterAllocation.Node object at 0x7f8f862f1e80>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1310>, <RegisterAllocation.Node object at 0x7f8f862f1df0>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1e80>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1310>, <RegisterAllocation.Node object at 0x7f8f862f1df0>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1310>, <RegisterAllocation.Node object at 0x7f8f862f1df0>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1310>, <RegisterAllocation.Node object at 0x7f8f862f1df0>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1df0>, <RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86358080>, <RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ba40>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863386e0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863788f0>, <RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d64e0>, <RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d4f20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(arr.20) Pseudo(arr.20) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.181) Pseudo(tmp.181) spillCost: 2.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for get_elem1_ptr: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(arr.20): Reg(R9d), Pseudo(tmp.181): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Quadword Mov(Reg(DI), Reg(R9d))                               AssType: Quadword Mov(Reg(DI), Pseudo(arr.20))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(arr.20), Reg(AX))
Lea(Memory(AX, 4), Reg(R9d))                                           Lea(Memory(AX, 4), Pseudo(tmp.181))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.181), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Quadword Mov(Reg(DI), Reg(R9d))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Reg(DI), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Reg(DI), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 4), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Memory(AX, 4), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
AssType: Quadword Mov(Reg(DI), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(DI)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d5910>, <RegisterAllocation.Node object at 0x7f8f8634d760>, <RegisterAllocation.Node object at 0x7f8f8634e1e0>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86339670>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d760>, <RegisterAllocation.Node object at 0x7f8f8634e1e0>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86339670>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634e1e0>, <RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86339670>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634c8f0>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86339670>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86339670>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86339670>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631a000>, <RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86318350>, <RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e6090>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e6f60>, <RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e5940>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for get_elem1_ptr: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Quadword Mov(Reg(DI), Reg(R9d))                               AssType: Quadword Mov(Reg(DI), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 4), Reg(R9d))                                           Lea(Memory(AX, 4), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION get_elem2_ptr
-----------Building INTEGER interference graph.------------------
AssType: Quadword Mov(Reg(DI), Pseudo(arr.21))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Reg(DI), Pseudo(arr.21)), AssType: Quadword Mov(Pseudo(arr.21), Reg(AX)), Lea(Memory(AX, 8), Pseudo(tmp.185)), AssType: Quadword Mov(Pseudo(tmp.185), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Reg(DI), Pseudo(arr.21)), set()), (AssType: Quadword Mov(Pseudo(arr.21), Reg(AX)), set()), (Lea(Memory(AX, 8), Pseudo(tmp.185)), set()), (AssType: Quadword Mov(Pseudo(tmp.185), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Quadword Mov(Pseudo(tmp.185), Reg(AX)) {Reg(AX)}
Lea(Memory(AX, 8), Pseudo(tmp.185)) {Pseudo(tmp.185)}
AssType: Quadword Mov(Pseudo(arr.21), Reg(AX)) {Reg(AX)}
AssType: Quadword Mov(Reg(DI), Pseudo(arr.21)) {Pseudo(arr.21)}
OLD ANNOT: set()
NEW ANNOT: {Reg(DI)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(arr.21)
    Pseudo(arr.21) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.185)
    Pseudo(tmp.185) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(arr.21) Pseudo(arr.21) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.185) Pseudo(tmp.185) spillCost: 2.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b6b0>, <RegisterAllocation.Node object at 0x7f8f8630aed0>, <RegisterAllocation.Node object at 0x7f8f86309970>, <RegisterAllocation.Node object at 0x7f8f86309490>, <RegisterAllocation.Node object at 0x7f8f8630b050>, <RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630aed0>, <RegisterAllocation.Node object at 0x7f8f86309970>, <RegisterAllocation.Node object at 0x7f8f86309490>, <RegisterAllocation.Node object at 0x7f8f8630b050>, <RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86309970>, <RegisterAllocation.Node object at 0x7f8f86309490>, <RegisterAllocation.Node object at 0x7f8f8630b050>, <RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86309490>, <RegisterAllocation.Node object at 0x7f8f8630b050>, <RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b050>, <RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b4d0>, <RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bad0>, <RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86308440>, <RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bd10>, <RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863086e0>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313890>, <RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862da930>, <RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862dbad0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(arr.21) Pseudo(arr.21) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.185) Pseudo(tmp.185) spillCost: 2.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for get_elem2_ptr: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(arr.21): Reg(R9d), Pseudo(tmp.185): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Quadword Mov(Reg(DI), Reg(R9d))                               AssType: Quadword Mov(Reg(DI), Pseudo(arr.21))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(arr.21), Reg(AX))
Lea(Memory(AX, 8), Reg(R9d))                                           Lea(Memory(AX, 8), Pseudo(tmp.185))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.185), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Quadword Mov(Reg(DI), Reg(R9d))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Reg(DI), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Reg(DI), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 8), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Memory(AX, 8), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
AssType: Quadword Mov(Reg(DI), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(DI)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f862d9a60>, <RegisterAllocation.Node object at 0x7f8f8635b980>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d9a60>, <RegisterAllocation.Node object at 0x7f8f8635b980>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b980>, <RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b380>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e5040>, <RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7710>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be330>, <RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be900>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324140>, <RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86324740>, <RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86325d30>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for get_elem2_ptr: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Quadword Mov(Reg(DI), Reg(R9d))                               AssType: Quadword Mov(Reg(DI), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 8), Reg(R9d))                                           Lea(Memory(AX, 8), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_add_multi_dimensional
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)), Lea(PseudoMem(nested_arr.23, 0), Pseudo(tmp.186)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Pseudo(tmp.188)), AssType: Quadword Mov(Pseudo(tmp.186), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.188), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Pseudo(tmp.190)), AssType: Quadword Mov(Pseudo(tmp.190), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.191)), AssType: Longword Cmp(Imm(7), Pseudo(tmp.191)), AssType: Longword Mov(Imm(0), Pseudo(tmp.192)), SetCC(ConcCodeType.E, Pseudo(tmp.192)), AssType: Longword Mov(Pseudo(tmp.192), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)), set()), (AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)), set()), (AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)), set()), (AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)), set()), (AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)), set()), (AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)), set()), (AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)), set()), (AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)), set()), (AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)), set()), (Lea(PseudoMem(nested_arr.23, 0), Pseudo(tmp.186)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Pseudo(tmp.188)), set()), (AssType: Quadword Mov(Pseudo(tmp.186), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.188), Reg(DX)), set()), (AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), set()), (Lea(Indexed(AX + DX * 1), Pseudo(tmp.190)), set()), (AssType: Quadword Mov(Pseudo(tmp.190), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.191)), set()), (AssType: Longword Cmp(Imm(7), Pseudo(tmp.191)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.192)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.192)), set()), (AssType: Longword Mov(Pseudo(tmp.192), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.192), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Pseudo(tmp.192)) {Pseudo(tmp.192)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.192)) set()
AssType: Longword Cmp(Imm(7), Pseudo(tmp.191)) set()
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.191)) {Pseudo(tmp.191)}
AssType: Quadword Mov(Pseudo(tmp.190), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 1), Pseudo(tmp.190)) {Pseudo(tmp.190)}
AssType: Quadword Binary(Mult, Imm(12), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.188), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.186), Reg(AX)) {Reg(AX), Pseudo(tmp.188)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Pseudo(tmp.188)) {Pseudo(tmp.188), Pseudo(tmp.186)}
Lea(PseudoMem(nested_arr.23, 0), Pseudo(tmp.186)) {Pseudo(tmp.186), Pseudo(index.22)}
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)) {Pseudo(index.22)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.22)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Pseudo(tmp.188)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.186)
    Pseudo(tmp.186) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.188)
Pseudo(tmp.188)
    Pseudo(tmp.188) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Pseudo(tmp.186)
Pseudo(tmp.190)
    Pseudo(tmp.190) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.191)
    Pseudo(tmp.191) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.192)
    Pseudo(tmp.192) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.186) Pseudo(tmp.186) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.188) Pseudo(tmp.188) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.190) Pseudo(tmp.190) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.191) Pseudo(tmp.191) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.192) Pseudo(tmp.192) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86337f80>, <RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f863104d0>, <RegisterAllocation.Node object at 0x7f8f86312a20>, <RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863be870>, <RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f863104d0>, <RegisterAllocation.Node object at 0x7f8f86312a20>, <RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f863104d0>, <RegisterAllocation.Node object at 0x7f8f86312a20>, <RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86335eb0>, <RegisterAllocation.Node object at 0x7f8f863104d0>, <RegisterAllocation.Node object at 0x7f8f86312a20>, <RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863104d0>, <RegisterAllocation.Node object at 0x7f8f86312a20>, <RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312a20>, <RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310e60>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312d20>, <RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630a270>, <RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630b1a0>, <RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86309250>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.186) Pseudo(tmp.186) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.188) Pseudo(tmp.188) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.190) Pseudo(tmp.190) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.191) Pseudo(tmp.191) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.192) Pseudo(tmp.192) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_multi_dimensional: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.186): Reg(R8d), Pseudo(tmp.188): Reg(R9d), Pseudo(tmp.190): Reg(R9d), Pseudo(tmp.191): Reg(R9d), Pseudo(tmp.192): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0))             AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0))
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4))             AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4))
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8))             AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8))
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12))            AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12))
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16))            AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16))
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20))            AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20))
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24))            AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24))
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28))            AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28))
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32))            AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32))
Lea(PseudoMem(nested_arr.23, 0), Reg(R8d))                             Lea(PseudoMem(nested_arr.23, 0), Pseudo(tmp.186))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Pseudo(tmp.188))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.186), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.188), Reg(DX))
AssType: Quadword Binary(Mult, Imm(12), Reg(DX))                       AssType: Quadword Binary(Mult, Imm(12), Reg(DX))
Lea(Indexed(AX + DX * 1), Reg(R9d))                                    Lea(Indexed(AX + DX * 1), Pseudo(tmp.190))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.190), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.191))
AssType: Longword Cmp(Imm(7), Reg(R9d))                                AssType: Longword Cmp(Imm(7), Pseudo(tmp.191))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.192))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.192))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Pseudo(tmp.192), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)), Lea(PseudoMem(nested_arr.23, 0), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(7), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)), set()), (AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)), set()), (AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)), set()), (AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)), set()), (AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)), set()), (AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)), set()), (AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)), set()), (AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)), set()), (AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)), set()), (Lea(PseudoMem(nested_arr.23, 0), Reg(R8d)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), set()), (Lea(Indexed(AX + DX * 1), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(7), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(7), Reg(R9d)) set()
AssType: Longword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 1), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Binary(Mult, Imm(12), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Lea(PseudoMem(nested_arr.23, 0), Reg(R8d)) {Reg(R8d), Pseudo(index.22)}
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4)) {Pseudo(index.22)}
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0)) {Pseudo(index.22)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.22)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86359b20>, <RegisterAllocation.Node object at 0x7f8f86326a50>, <RegisterAllocation.Node object at 0x7f8f8633aa50>, <RegisterAllocation.Node object at 0x7f8f8633a930>, <RegisterAllocation.Node object at 0x7f8f86338fb0>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86326a50>, <RegisterAllocation.Node object at 0x7f8f8633aa50>, <RegisterAllocation.Node object at 0x7f8f8633a930>, <RegisterAllocation.Node object at 0x7f8f86338fb0>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8633aa50>, <RegisterAllocation.Node object at 0x7f8f8633a930>, <RegisterAllocation.Node object at 0x7f8f86338fb0>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8633a930>, <RegisterAllocation.Node object at 0x7f8f86338fb0>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86338fb0>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863393d0>, <RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86320110>, <RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86323620>, <RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86321a30>, <RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cdeb0>, <RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cf290>, <RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635f920>, <RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f24e0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_multi_dimensional: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0))             AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.23, 0))
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4))             AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.23, 4))
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8))             AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.23, 8))
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12))            AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.23, 12))
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16))            AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.23, 16))
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20))            AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.23, 20))
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24))            AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.23, 24))
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28))            AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.23, 28))
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32))            AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.23, 32))
Lea(PseudoMem(nested_arr.23, 0), Reg(R8d))                             Lea(PseudoMem(nested_arr.23, 0), Reg(R8d))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.22), Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
AssType: Quadword Binary(Mult, Imm(12), Reg(DX))                       AssType: Quadword Binary(Mult, Imm(12), Reg(DX))
Lea(Indexed(AX + DX * 1), Reg(R9d))                                    Lea(Indexed(AX + DX * 1), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R9d))
AssType: Longword Cmp(Imm(7), Reg(R9d))                                AssType: Longword Cmp(Imm(7), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_add_to_subarray_pointer
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)), Lea(PseudoMem(nested_arr.26, 0), Pseudo(tmp.193)), AssType: Quadword Mov(Pseudo(tmp.193), Reg(AX)), Lea(Memory(AX, 12), Pseudo(tmp.197)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Pseudo(tmp.199)), AssType: Quadword Mov(Pseudo(tmp.197), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.199), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.201)), AssType: Quadword Mov(Pseudo(tmp.201), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.202)), AssType: Longword Cmp(Imm(6), Pseudo(tmp.202)), AssType: Longword Mov(Imm(0), Pseudo(tmp.203)), SetCC(ConcCodeType.E, Pseudo(tmp.203)), AssType: Longword Mov(Pseudo(tmp.203), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)), set()), (AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)), set()), (AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)), set()), (AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)), set()), (AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)), set()), (AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)), set()), (AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)), set()), (AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)), set()), (AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)), set()), (Lea(PseudoMem(nested_arr.26, 0), Pseudo(tmp.193)), set()), (AssType: Quadword Mov(Pseudo(tmp.193), Reg(AX)), set()), (Lea(Memory(AX, 12), Pseudo(tmp.197)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Pseudo(tmp.199)), set()), (AssType: Quadword Mov(Pseudo(tmp.197), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.199), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.201)), set()), (AssType: Quadword Mov(Pseudo(tmp.201), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.202)), set()), (AssType: Longword Cmp(Imm(6), Pseudo(tmp.202)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.203)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.203)), set()), (AssType: Longword Mov(Pseudo(tmp.203), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.203), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Pseudo(tmp.203)) {Pseudo(tmp.203)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.203)) set()
AssType: Longword Cmp(Imm(6), Pseudo(tmp.202)) set()
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.202)) {Pseudo(tmp.202)}
AssType: Quadword Mov(Pseudo(tmp.201), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Pseudo(tmp.201)) {Pseudo(tmp.201)}
AssType: Quadword Mov(Pseudo(tmp.199), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.197), Reg(AX)) {Reg(AX), Pseudo(tmp.199)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Pseudo(tmp.199)) {Pseudo(tmp.199), Pseudo(tmp.197)}
Lea(Memory(AX, 12), Pseudo(tmp.197)) {Pseudo(index.25), Pseudo(tmp.197)}
AssType: Quadword Mov(Pseudo(tmp.193), Reg(AX)) {Reg(AX), Pseudo(index.25)}
Lea(PseudoMem(nested_arr.26, 0), Pseudo(tmp.193)) {Pseudo(tmp.193), Pseudo(index.25)}
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)) {Pseudo(index.25)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.25)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Pseudo(tmp.199)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.193)
    Pseudo(tmp.193) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.197)
    Pseudo(tmp.197) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.199)
Pseudo(tmp.199)
    Pseudo(tmp.199) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Pseudo(tmp.197)
Pseudo(tmp.201)
    Pseudo(tmp.201) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.202)
    Pseudo(tmp.202) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.203)
    Pseudo(tmp.203) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.193) Pseudo(tmp.193) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.197) Pseudo(tmp.197) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.199) Pseudo(tmp.199) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.201) Pseudo(tmp.201) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.202) Pseudo(tmp.202) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.203) Pseudo(tmp.203) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cda30>, <RegisterAllocation.Node object at 0x7f8f86310fe0>, <RegisterAllocation.Node object at 0x7f8f86310b30>, <RegisterAllocation.Node object at 0x7f8f86310ad0>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862cda30>, <RegisterAllocation.Node object at 0x7f8f86310b30>, <RegisterAllocation.Node object at 0x7f8f86310ad0>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310b30>, <RegisterAllocation.Node object at 0x7f8f86310ad0>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310ad0>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310d70>, <RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313bf0>, <RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f866e6960>, <RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86321850>, <RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862dbfe0>, <RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862da030>, <RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d8380>, <RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d8f50>, <RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d98e0>, <RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d9df0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.193) Pseudo(tmp.193) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.197) Pseudo(tmp.197) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.199) Pseudo(tmp.199) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.201) Pseudo(tmp.201) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.202) Pseudo(tmp.202) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.203) Pseudo(tmp.203) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_add_to_subarray_pointer: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.193): Reg(R9d), Pseudo(tmp.197): Reg(R8d), Pseudo(tmp.199): Reg(R9d), Pseudo(tmp.201): Reg(R9d), Pseudo(tmp.202): Reg(R9d), Pseudo(tmp.203): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0))             AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0))
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4))             AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4))
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8))             AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8))
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12))            AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12))
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16))            AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16))
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20))            AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20))
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24))            AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24))
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28))            AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28))
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32))            AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32))
Lea(PseudoMem(nested_arr.26, 0), Reg(R9d))                             Lea(PseudoMem(nested_arr.26, 0), Pseudo(tmp.193))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.193), Reg(AX))
Lea(Memory(AX, 12), Reg(R8d))                                          Lea(Memory(AX, 12), Pseudo(tmp.197))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Pseudo(tmp.199))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.197), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.199), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Pseudo(tmp.201))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.201), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.202))
AssType: Longword Cmp(Imm(6), Reg(R9d))                                AssType: Longword Cmp(Imm(6), Pseudo(tmp.202))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.203))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.203))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Pseudo(tmp.203), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)), Lea(PseudoMem(nested_arr.26, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 12), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(6), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)), set()), (AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)), set()), (AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)), set()), (AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)), set()), (AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)), set()), (AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)), set()), (AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)), set()), (AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)), set()), (AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)), set()), (Lea(PseudoMem(nested_arr.26, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 12), Reg(R8d)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(6), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(6), Reg(R9d)) set()
AssType: Longword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Lea(Memory(AX, 12), Reg(R8d)) {Reg(R8d), Pseudo(index.25)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX), Pseudo(index.25)}
Lea(PseudoMem(nested_arr.26, 0), Reg(R9d)) {Reg(R9d), Pseudo(index.25)}
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4)) {Pseudo(index.25)}
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0)) {Pseudo(index.25)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.25)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f14f0>, <RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862ffdd0>, <RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f867fe030>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862ffdd0>, <RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862ffdd0>, <RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862ffdd0>, <RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862ffdd0>, <RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ffdd0>, <RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fe4b0>, <RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fff50>, <RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ff170>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f864713a0>, <RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307230>, <RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86305ac0>, <RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86304f50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_add_to_subarray_pointer: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0))             AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.26, 0))
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4))             AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.26, 4))
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8))             AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.26, 8))
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12))            AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.26, 12))
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16))            AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.26, 16))
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20))            AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.26, 20))
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24))            AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.26, 24))
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28))            AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.26, 28))
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32))            AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.26, 32))
Lea(PseudoMem(nested_arr.26, 0), Reg(R9d))                             Lea(PseudoMem(nested_arr.26, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 12), Reg(R8d))                                          Lea(Memory(AX, 12), Reg(R8d))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.25), Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R9d))
AssType: Longword Cmp(Imm(6), Reg(R9d))                                AssType: Longword Cmp(Imm(6), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_subtract_from_pointer
-----------Building INTEGER interference graph.------------------
AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)), AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)), AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)), AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)), AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)), Lea(PseudoMem(long_arr.29, 0), Pseudo(tmp.209)), AssType: Quadword Mov(Pseudo(tmp.209), Reg(AX)), Lea(Memory(AX, 40), Pseudo(tmp.213)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Pseudo(tmp.215)), AssType: Quadword Mov(Pseudo(tmp.215), Pseudo(tmp.217)), AssType: Quadword Unary(Neg, Pseudo(tmp.217)), AssType: Quadword Mov(Pseudo(tmp.213), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.217), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.218)), AssType: Quadword Mov(Pseudo(tmp.218), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.219)), AssType: Quadword Cmp(Imm(8), Pseudo(tmp.219)), AssType: Longword Mov(Imm(0), Pseudo(tmp.221)), SetCC(ConcCodeType.E, Pseudo(tmp.221)), AssType: Longword Mov(Pseudo(tmp.221), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)), set()), (AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)), set()), (AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)), set()), (AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)), set()), (AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)), set()), (Lea(PseudoMem(long_arr.29, 0), Pseudo(tmp.209)), set()), (AssType: Quadword Mov(Pseudo(tmp.209), Reg(AX)), set()), (Lea(Memory(AX, 40), Pseudo(tmp.213)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Pseudo(tmp.215)), set()), (AssType: Quadword Mov(Pseudo(tmp.215), Pseudo(tmp.217)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.217)), set()), (AssType: Quadword Mov(Pseudo(tmp.213), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.217), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.218)), set()), (AssType: Quadword Mov(Pseudo(tmp.218), Reg(AX)), set()), (AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.219)), set()), (AssType: Quadword Cmp(Imm(8), Pseudo(tmp.219)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.221)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.221)), set()), (AssType: Longword Mov(Pseudo(tmp.221), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.221), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Pseudo(tmp.221)) {Pseudo(tmp.221)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.221)) set()
AssType: Quadword Cmp(Imm(8), Pseudo(tmp.219)) set()
AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.219)) {Pseudo(tmp.219)}
AssType: Quadword Mov(Pseudo(tmp.218), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.218)) {Pseudo(tmp.218)}
AssType: Quadword Mov(Pseudo(tmp.217), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.213), Reg(AX)) {Reg(AX), Pseudo(tmp.217)}
AssType: Quadword Unary(Neg, Pseudo(tmp.217)) {Pseudo(tmp.213), Pseudo(tmp.217)}
AssType: Quadword Mov(Pseudo(tmp.215), Pseudo(tmp.217)) {Pseudo(tmp.213), Pseudo(tmp.217)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Pseudo(tmp.215)) {Pseudo(tmp.213), Pseudo(tmp.215)}
Lea(Memory(AX, 40), Pseudo(tmp.213)) {Pseudo(index.31), Pseudo(tmp.213)}
AssType: Quadword Mov(Pseudo(tmp.209), Reg(AX)) {Pseudo(index.31), Reg(AX)}
Lea(PseudoMem(long_arr.29, 0), Pseudo(tmp.209)) {Pseudo(tmp.209), Pseudo(index.31)}
AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)) {Pseudo(index.31)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.31)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Pseudo(tmp.217)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.209)
    Pseudo(tmp.209) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.213)
    Pseudo(tmp.213) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.217)
        Pseudo(tmp.215)
Pseudo(tmp.215)
    Pseudo(tmp.215) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.213)
Pseudo(tmp.217)
    Pseudo(tmp.217) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.213)
        Reg(AX)
Pseudo(tmp.218)
    Pseudo(tmp.218) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.219)
    Pseudo(tmp.219) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.221)
    Pseudo(tmp.221) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.209) Pseudo(tmp.209) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.213) Pseudo(tmp.213) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.215) Pseudo(tmp.215) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.217) Pseudo(tmp.217) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.218) Pseudo(tmp.218) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.219) Pseudo(tmp.219) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.221) Pseudo(tmp.221) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f863127b0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86613470>, <RegisterAllocation.Node object at 0x7f8f862fcc50>, <RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863119d0>, <RegisterAllocation.Node object at 0x7f8f863127b0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86613470>, <RegisterAllocation.Node object at 0x7f8f862fcc50>, <RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863127b0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86613470>, <RegisterAllocation.Node object at 0x7f8f862fcc50>, <RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86613470>, <RegisterAllocation.Node object at 0x7f8f862fcc50>, <RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86613470>, <RegisterAllocation.Node object at 0x7f8f862fcc50>, <RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fcc50>, <RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ff770>, <RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862fd6a0>, <RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635fb30>, <RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2300>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e18b0>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d790>, <RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862eebd0>, <RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d2b0>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d700>, <RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631e090>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.209) Pseudo(tmp.209) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.213) Pseudo(tmp.213) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.215) Pseudo(tmp.215) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.217) Pseudo(tmp.217) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.218) Pseudo(tmp.218) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.219) Pseudo(tmp.219) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.221) Pseudo(tmp.221) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_subtract_from_pointer: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.209): Reg(R9d), Pseudo(tmp.213): Reg(R8d), Pseudo(tmp.215): Reg(R9d), Pseudo(tmp.217): Reg(R9d), Pseudo(tmp.218): Reg(R9d), Pseudo(tmp.219): Reg(R9d), Pseudo(tmp.221): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0))              AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0))
AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8))               AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8))
AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16))              AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16))
AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24))              AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24))
AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32))              AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32))
Lea(PseudoMem(long_arr.29, 0), Reg(R9d))                               Lea(PseudoMem(long_arr.29, 0), Pseudo(tmp.209))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.209), Reg(AX))
Lea(Memory(AX, 40), Reg(R8d))                                          Lea(Memory(AX, 40), Pseudo(tmp.213))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Pseudo(tmp.215))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Mov(Pseudo(tmp.215), Pseudo(tmp.217))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Unary(Neg, Pseudo(tmp.217))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.213), Reg(AX))
Lea(Indexed(AX + DX * 8), Reg(R9d))                                    AssType: Quadword Mov(Pseudo(tmp.217), Reg(DX))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               Lea(Indexed(AX + DX * 8), Pseudo(tmp.218))
AssType: Quadword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Pseudo(tmp.218), Reg(AX))
AssType: Quadword Cmp(Imm(8), Reg(R9d))                                AssType: Quadword Mov(Memory(AX, 0), Pseudo(tmp.219))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Quadword Cmp(Imm(8), Pseudo(tmp.219))
SetCC(ConcCodeType.E, Reg(R9d))                                        AssType: Longword Mov(Imm(0), Pseudo(tmp.221))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               SetCC(ConcCodeType.E, Pseudo(tmp.221))
ret                                                                    AssType: Longword Mov(Pseudo(tmp.221), Reg(AX))
-----------Building DOUBLE interference graph.------------------
AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)), AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)), AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)), AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)), AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)), Lea(PseudoMem(long_arr.29, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), AssType: Quadword Cmp(Imm(8), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)), set()), (AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)), set()), (AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)), set()), (AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)), set()), (AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)), set()), (Lea(PseudoMem(long_arr.29, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 40), Reg(R8d)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Quadword Cmp(Imm(8), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Quadword Cmp(Imm(8), Reg(R9d)) set()
AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 8), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Lea(Memory(AX, 40), Reg(R8d)) {Reg(R8d), Pseudo(index.31)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Pseudo(index.31), Reg(AX)}
Lea(PseudoMem(long_arr.29, 0), Reg(R9d)) {Pseudo(index.31), Reg(R9d)}
AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8)) {Pseudo(index.31)}
AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0)) {Pseudo(index.31)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.31)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f8635f1a0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e4320>, <RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f8635f1a0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7290>, <RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f8635f1a0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f8635f1a0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635f1a0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329370>, <RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329430>, <RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863284d0>, <RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863281d0>, <RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ac320>, <RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8639ddc0>, <RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ba10>, <RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635ba40>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_subtract_from_pointer: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0))              AssType: Quadword Mov(Imm(10), PseudoMem(long_arr.29, 0))
AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8))               AssType: Quadword Mov(Imm(9), PseudoMem(long_arr.29, 8))
AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16))              AssType: Quadword Mov(Imm(8), PseudoMem(long_arr.29, 16))
AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24))              AssType: Quadword Mov(Imm(7), PseudoMem(long_arr.29, 24))
AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32))              AssType: Quadword Mov(Imm(6), PseudoMem(long_arr.29, 32))
Lea(PseudoMem(long_arr.29, 0), Reg(R9d))                               Lea(PseudoMem(long_arr.29, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 40), Reg(R8d))                                          Lea(Memory(AX, 40), Reg(R8d))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.31), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(R9d))                                    Lea(Indexed(AX + DX * 8), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Quadword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Memory(AX, 0), Reg(R9d))
AssType: Quadword Cmp(Imm(8), Reg(R9d))                                AssType: Quadword Cmp(Imm(8), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_subtract_negative_index
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(100), Pseudo(tmp.222))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(100), Pseudo(tmp.222)), AssType: Longword Mov(Pseudo(tmp.222), PseudoMem(arr.33, 0)), AssType: Longword Mov(Imm(101), Pseudo(tmp.223)), AssType: Longword Mov(Pseudo(tmp.223), PseudoMem(arr.33, 4)), AssType: Longword Mov(Imm(102), Pseudo(tmp.224)), AssType: Longword Mov(Pseudo(tmp.224), PseudoMem(arr.33, 8)), AssType: Longword Mov(Imm(103), Pseudo(tmp.225)), AssType: Longword Mov(Pseudo(tmp.225), PseudoMem(arr.33, 12)), AssType: Longword Mov(Imm(104), Pseudo(tmp.226)), AssType: Longword Mov(Pseudo(tmp.226), PseudoMem(arr.33, 16)), Lea(PseudoMem(arr.33, 0), Pseudo(tmp.227)), AssType: Longword Mov(Imm(3), Pseudo(tmp.229)), AssType: Longword Unary(Neg, Pseudo(tmp.229)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.229), Pseudo(tmp.230)), AssType: Quadword Mov(Pseudo(tmp.230), Pseudo(tmp.232)), AssType: Quadword Unary(Neg, Pseudo(tmp.232)), AssType: Quadword Mov(Pseudo(tmp.227), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.232), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.233)), AssType: Quadword Mov(Pseudo(tmp.233), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.234)), AssType: Longword Mov(Imm(103), Pseudo(tmp.235)), AssType: Longword Cmp(Pseudo(tmp.235), Pseudo(tmp.234)), AssType: Longword Mov(Imm(0), Pseudo(tmp.236)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.236)), AssType: Longword Mov(Pseudo(tmp.236), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(100), Pseudo(tmp.222)), set()), (AssType: Longword Mov(Pseudo(tmp.222), PseudoMem(arr.33, 0)), set()), (AssType: Longword Mov(Imm(101), Pseudo(tmp.223)), set()), (AssType: Longword Mov(Pseudo(tmp.223), PseudoMem(arr.33, 4)), set()), (AssType: Longword Mov(Imm(102), Pseudo(tmp.224)), set()), (AssType: Longword Mov(Pseudo(tmp.224), PseudoMem(arr.33, 8)), set()), (AssType: Longword Mov(Imm(103), Pseudo(tmp.225)), set()), (AssType: Longword Mov(Pseudo(tmp.225), PseudoMem(arr.33, 12)), set()), (AssType: Longword Mov(Imm(104), Pseudo(tmp.226)), set()), (AssType: Longword Mov(Pseudo(tmp.226), PseudoMem(arr.33, 16)), set()), (Lea(PseudoMem(arr.33, 0), Pseudo(tmp.227)), set()), (AssType: Longword Mov(Imm(3), Pseudo(tmp.229)), set()), (AssType: Longword Unary(Neg, Pseudo(tmp.229)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.229), Pseudo(tmp.230)), set()), (AssType: Quadword Mov(Pseudo(tmp.230), Pseudo(tmp.232)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.232)), set()), (AssType: Quadword Mov(Pseudo(tmp.227), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.232), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.233)), set()), (AssType: Quadword Mov(Pseudo(tmp.233), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.234)), set()), (AssType: Longword Mov(Imm(103), Pseudo(tmp.235)), set()), (AssType: Longword Cmp(Pseudo(tmp.235), Pseudo(tmp.234)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.236)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.236)), set()), (AssType: Longword Mov(Pseudo(tmp.236), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.236), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.236)) {Pseudo(tmp.236)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.236)) set()
AssType: Longword Cmp(Pseudo(tmp.235), Pseudo(tmp.234)) set()
AssType: Longword Mov(Imm(103), Pseudo(tmp.235)) {Pseudo(tmp.234), Pseudo(tmp.235)}
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.234)) {Pseudo(tmp.234)}
AssType: Quadword Mov(Pseudo(tmp.233), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Pseudo(tmp.233)) {Pseudo(tmp.233)}
AssType: Quadword Mov(Pseudo(tmp.232), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.227), Reg(AX)) {Pseudo(tmp.232), Reg(AX)}
AssType: Quadword Unary(Neg, Pseudo(tmp.232)) {Pseudo(tmp.227), Pseudo(tmp.232)}
AssType: Quadword Mov(Pseudo(tmp.230), Pseudo(tmp.232)) {Pseudo(tmp.227), Pseudo(tmp.232)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.229), Pseudo(tmp.230)) {Pseudo(tmp.227), Pseudo(tmp.230)}
AssType: Longword Unary(Neg, Pseudo(tmp.229)) {Pseudo(tmp.227), Pseudo(tmp.229)}
AssType: Longword Mov(Imm(3), Pseudo(tmp.229)) {Pseudo(tmp.227), Pseudo(tmp.229)}
Lea(PseudoMem(arr.33, 0), Pseudo(tmp.227)) {Pseudo(tmp.227)}
AssType: Longword Mov(Pseudo(tmp.226), PseudoMem(arr.33, 16)) set()
AssType: Longword Mov(Imm(104), Pseudo(tmp.226)) {Pseudo(tmp.226)}
AssType: Longword Mov(Pseudo(tmp.225), PseudoMem(arr.33, 12)) set()
AssType: Longword Mov(Imm(103), Pseudo(tmp.225)) {Pseudo(tmp.225)}
AssType: Longword Mov(Pseudo(tmp.224), PseudoMem(arr.33, 8)) set()
AssType: Longword Mov(Imm(102), Pseudo(tmp.224)) {Pseudo(tmp.224)}
AssType: Longword Mov(Pseudo(tmp.223), PseudoMem(arr.33, 4)) set()
AssType: Longword Mov(Imm(101), Pseudo(tmp.223)) {Pseudo(tmp.223)}
AssType: Longword Mov(Pseudo(tmp.222), PseudoMem(arr.33, 0)) set()
AssType: Longword Mov(Imm(100), Pseudo(tmp.222)) {Pseudo(tmp.222)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.232)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.222)
    Pseudo(tmp.222) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.223)
    Pseudo(tmp.223) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.224)
    Pseudo(tmp.224) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.225)
    Pseudo(tmp.225) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.226)
    Pseudo(tmp.226) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.227)
    Pseudo(tmp.227) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.232)
        Pseudo(tmp.229)
        Pseudo(tmp.230)
Pseudo(tmp.229)
    Pseudo(tmp.229) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.227)
Pseudo(tmp.230)
    Pseudo(tmp.230) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.227)
Pseudo(tmp.232)
    Pseudo(tmp.232) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.227)
        Reg(AX)
Pseudo(tmp.233)
    Pseudo(tmp.233) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.234)
    Pseudo(tmp.234) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.235)
Pseudo(tmp.235)
    Pseudo(tmp.235) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.234)
Pseudo(tmp.236)
    Pseudo(tmp.236) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.222) Pseudo(tmp.222) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.223) Pseudo(tmp.223) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.224) Pseudo(tmp.224) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.225) Pseudo(tmp.225) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.226) Pseudo(tmp.226) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.227) Pseudo(tmp.227) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.229) Pseudo(tmp.229) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.230) Pseudo(tmp.230) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.232) Pseudo(tmp.232) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.233) Pseudo(tmp.233) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.234) Pseudo(tmp.234) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.235) Pseudo(tmp.235) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.236) Pseudo(tmp.236) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862eeae0>, <RegisterAllocation.Node object at 0x7f8f86187ec0>, <RegisterAllocation.Node object at 0x7f8f862ce120>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>, <RegisterAllocation.Node object at 0x7f8f863294c0>, <RegisterAllocation.Node object at 0x7f8f86328860>, <RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862eeae0>, <RegisterAllocation.Node object at 0x7f8f862ce120>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>, <RegisterAllocation.Node object at 0x7f8f863294c0>, <RegisterAllocation.Node object at 0x7f8f86328860>, <RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ce120>, <RegisterAllocation.Node object at 0x7f8f862ce6c0>, <RegisterAllocation.Node object at 0x7f8f863294c0>, <RegisterAllocation.Node object at 0x7f8f86328860>, <RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ce6c0>, <RegisterAllocation.Node object at 0x7f8f863294c0>, <RegisterAllocation.Node object at 0x7f8f86328860>, <RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863294c0>, <RegisterAllocation.Node object at 0x7f8f86328860>, <RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86328860>, <RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863281a0>, <RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329250>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d820>, <RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634dee0>, <RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8634d7c0>, <RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311820>, <RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310350>, <RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313fe0>, <RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313da0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86312510>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863130e0>, <RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313c80>, <RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863136e0>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310c20>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.222) Pseudo(tmp.222) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.223) Pseudo(tmp.223) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.224) Pseudo(tmp.224) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.225) Pseudo(tmp.225) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.226) Pseudo(tmp.226) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.227) Pseudo(tmp.227) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.229) Pseudo(tmp.229) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.230) Pseudo(tmp.230) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.232) Pseudo(tmp.232) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.233) Pseudo(tmp.233) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.234) Pseudo(tmp.234) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.235) Pseudo(tmp.235) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.236) Pseudo(tmp.236) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_subtract_negative_index: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.222): Reg(R9d), Pseudo(tmp.223): Reg(R9d), Pseudo(tmp.224): Reg(R9d), Pseudo(tmp.225): Reg(R9d), Pseudo(tmp.226): Reg(R9d), Pseudo(tmp.227): Reg(R8d), Pseudo(tmp.229): Reg(R9d), Pseudo(tmp.230): Reg(R9d), Pseudo(tmp.232): Reg(R9d), Pseudo(tmp.233): Reg(R9d), Pseudo(tmp.234): Reg(R8d), Pseudo(tmp.235): Reg(R9d), Pseudo(tmp.236): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(100), Reg(R9d))                              AssType: Longword Mov(Imm(100), Pseudo(tmp.222))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 0))                  AssType: Longword Mov(Pseudo(tmp.222), PseudoMem(arr.33, 0))
AssType: Longword Mov(Imm(101), Reg(R9d))                              AssType: Longword Mov(Imm(101), Pseudo(tmp.223))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 4))                  AssType: Longword Mov(Pseudo(tmp.223), PseudoMem(arr.33, 4))
AssType: Longword Mov(Imm(102), Reg(R9d))                              AssType: Longword Mov(Imm(102), Pseudo(tmp.224))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 8))                  AssType: Longword Mov(Pseudo(tmp.224), PseudoMem(arr.33, 8))
AssType: Longword Mov(Imm(103), Reg(R9d))                              AssType: Longword Mov(Imm(103), Pseudo(tmp.225))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 12))                 AssType: Longword Mov(Pseudo(tmp.225), PseudoMem(arr.33, 12))
AssType: Longword Mov(Imm(104), Reg(R9d))                              AssType: Longword Mov(Imm(104), Pseudo(tmp.226))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 16))                 AssType: Longword Mov(Pseudo(tmp.226), PseudoMem(arr.33, 16))
Lea(PseudoMem(arr.33, 0), Reg(R8d))                                    Lea(PseudoMem(arr.33, 0), Pseudo(tmp.227))
AssType: Longword Mov(Imm(3), Reg(R9d))                                AssType: Longword Mov(Imm(3), Pseudo(tmp.229))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Pseudo(tmp.229))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.229), Pseudo(tmp.230))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Mov(Pseudo(tmp.230), Pseudo(tmp.232))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Unary(Neg, Pseudo(tmp.232))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.227), Reg(AX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    AssType: Quadword Mov(Pseudo(tmp.232), Reg(DX))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               Lea(Indexed(AX + DX * 4), Pseudo(tmp.233))
AssType: Longword Mov(Memory(AX, 0), Reg(R8d))                         AssType: Quadword Mov(Pseudo(tmp.233), Reg(AX))
AssType: Longword Mov(Imm(103), Reg(R9d))                              AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.234))
AssType: Longword Cmp(Reg(R9d), Reg(R8d))                              AssType: Longword Mov(Imm(103), Pseudo(tmp.235))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Pseudo(tmp.235), Pseudo(tmp.234))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.236))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.236))
ret                                                                    AssType: Longword Mov(Pseudo(tmp.236), Reg(AX))
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(100), Reg(R9d))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(100), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 0)), AssType: Longword Mov(Imm(101), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 4)), AssType: Longword Mov(Imm(102), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 8)), AssType: Longword Mov(Imm(103), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 12)), AssType: Longword Mov(Imm(104), Reg(R9d)), AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 16)), Lea(PseudoMem(arr.33, 0), Reg(R8d)), AssType: Longword Mov(Imm(3), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), AssType: Longword Mov(Imm(103), Reg(R9d)), AssType: Longword Cmp(Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(100), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 0)), set()), (AssType: Longword Mov(Imm(101), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 4)), set()), (AssType: Longword Mov(Imm(102), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 8)), set()), (AssType: Longword Mov(Imm(103), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 12)), set()), (AssType: Longword Mov(Imm(104), Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 16)), set()), (Lea(PseudoMem(arr.33, 0), Reg(R8d)), set()), (AssType: Longword Mov(Imm(3), Reg(R9d)), set()), (AssType: Longword Unary(Neg, Reg(R9d)), set()), (SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), set()), (AssType: Longword Mov(Imm(103), Reg(R9d)), set()), (AssType: Longword Cmp(Reg(R9d), Reg(R8d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Reg(R9d), Reg(R8d)) set()
AssType: Longword Mov(Imm(103), Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Memory(AX, 0), Reg(R8d)) {Reg(R8d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Imm(3), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Lea(PseudoMem(arr.33, 0), Reg(R8d)) {Reg(R8d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 16)) set()
AssType: Longword Mov(Imm(104), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 12)) set()
AssType: Longword Mov(Imm(103), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 8)) set()
AssType: Longword Mov(Imm(102), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 4)) set()
AssType: Longword Mov(Imm(101), Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 0)) set()
AssType: Longword Mov(Imm(100), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e65a0>, <RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862e38c0>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e2360>, <RegisterAllocation.Node object at 0x7f8f8631e5a0>, <RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e6030>, <RegisterAllocation.Node object at 0x7f8f862e38c0>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e2360>, <RegisterAllocation.Node object at 0x7f8f8631e5a0>, <RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e38c0>, <RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e2360>, <RegisterAllocation.Node object at 0x7f8f8631e5a0>, <RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2810>, <RegisterAllocation.Node object at 0x7f8f862e2360>, <RegisterAllocation.Node object at 0x7f8f8631e5a0>, <RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e2360>, <RegisterAllocation.Node object at 0x7f8f8631e5a0>, <RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631e5a0>, <RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632b200>, <RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a7e0>, <RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329fa0>, <RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632abd0>, <RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a4b0>, <RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863299d0>, <RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86329b80>, <RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86328f20>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_subtract_negative_index: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(100), Reg(R9d))                              AssType: Longword Mov(Imm(100), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 0))                  AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 0))
AssType: Longword Mov(Imm(101), Reg(R9d))                              AssType: Longword Mov(Imm(101), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 4))                  AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 4))
AssType: Longword Mov(Imm(102), Reg(R9d))                              AssType: Longword Mov(Imm(102), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 8))                  AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 8))
AssType: Longword Mov(Imm(103), Reg(R9d))                              AssType: Longword Mov(Imm(103), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 12))                 AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 12))
AssType: Longword Mov(Imm(104), Reg(R9d))                              AssType: Longword Mov(Imm(104), Reg(R9d))
AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 16))                 AssType: Longword Mov(Reg(R9d), PseudoMem(arr.33, 16))
Lea(PseudoMem(arr.33, 0), Reg(R8d))                                    Lea(PseudoMem(arr.33, 0), Reg(R8d))
AssType: Longword Mov(Imm(3), Reg(R9d))                                AssType: Longword Mov(Imm(3), Reg(R9d))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Reg(R9d))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R8d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R8d))
AssType: Longword Mov(Imm(103), Reg(R9d))                              AssType: Longword Mov(Imm(103), Reg(R9d))
AssType: Longword Cmp(Reg(R9d), Reg(R8d))                              AssType: Longword Cmp(Reg(R9d), Reg(R8d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_subtract_different_index_types
-----------Building INTEGER interference graph.------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237))
AssType: Quadword Cmp(Pseudo(tmp.261), Pseudo(tmp.252))
AssType: Longword Mov(Imm(1), Pseudo(tmp.270))
Label(tmp.268)
Label(tmp.271)
AssType: Quadword Cmp(Pseudo(tmp.266), Pseudo(tmp.252))
AssType: Longword Mov(Imm(1), Pseudo(tmp.274))
Label(tmp.272)
Label(tmp.275)
AssType: Quadword Mov(Pseudo(tmp.266), Reg(AX))
AssType: Longword Mov(Imm(1), Pseudo(tmp.279))
Label(tmp.276)
Label(tmp.280)
-------------LABELS-----------------
tmp.268 3: [Label(tmp.268), AssType: Longword Mov(Imm(0), Pseudo(tmp.270))] Pred: set() Suc: set() iMap: [(Label(tmp.268), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.270)), set())] ReachingCopies: set()
tmp.271 4: [Label(tmp.271), AssType: Longword Cmp(Imm(0), Pseudo(tmp.270)), JmpCC(ConcCodeType.E, tmp.272)] Pred: set() Suc: set() iMap: [(Label(tmp.271), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.270)), set()), (JmpCC(ConcCodeType.E, tmp.272), set())] ReachingCopies: set()
tmp.272 7: [Label(tmp.272), AssType: Longword Mov(Imm(0), Pseudo(tmp.274))] Pred: set() Suc: set() iMap: [(Label(tmp.272), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.274)), set())] ReachingCopies: set()
tmp.275 8: [Label(tmp.275), AssType: Longword Cmp(Imm(0), Pseudo(tmp.274)), JmpCC(ConcCodeType.E, tmp.276)] Pred: set() Suc: set() iMap: [(Label(tmp.275), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.274)), set()), (JmpCC(ConcCodeType.E, tmp.276), set())] ReachingCopies: set()
tmp.276 11: [Label(tmp.276), AssType: Longword Mov(Imm(0), Pseudo(tmp.279))] Pred: set() Suc: set() iMap: [(Label(tmp.276), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.279)), set())] ReachingCopies: set()
tmp.280 12: [Label(tmp.280), AssType: Longword Mov(Pseudo(tmp.279), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.280), set()), (AssType: Longword Mov(Pseudo(tmp.279), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)), AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)), AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)), AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)), AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)), AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)), AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)), AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)), AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)), AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)), AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)), AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)), Lea(PseudoMem(double_arr.35, 0), Pseudo(tmp.243)), AssType: Quadword Mov(Pseudo(tmp.243), Reg(AX)), Lea(Memory(AX, 88), Pseudo(tmp.247)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.251)), AssType: Quadword Unary(Neg, Pseudo(tmp.251)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.251), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.252)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.255)), AssType: Quadword Unary(Neg, Pseudo(tmp.255)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.255), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.256)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.258)), AssType: Quadword Mov(Pseudo(tmp.258), Pseudo(tmp.260)), AssType: Quadword Unary(Neg, Pseudo(tmp.260)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.260), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.261)), AssType: Quadword Mov(Imm(5), Pseudo(tmp.263)), AssType: Quadword Mov(Pseudo(tmp.263), Pseudo(tmp.265)), AssType: Quadword Unary(Neg, Pseudo(tmp.265)), AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.265), Reg(DX)), Lea(Indexed(AX + DX * 8), Pseudo(tmp.266)), AssType: Quadword Cmp(Pseudo(tmp.256), Pseudo(tmp.252)), AssType: Longword Mov(Imm(0), Pseudo(tmp.267)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.267)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.267)), JmpCC(ConcCodeType.E, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)), set()), (AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)), set()), (AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)), set()), (AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)), set()), (AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)), set()), (AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)), set()), (AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)), set()), (AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)), set()), (AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)), set()), (AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)), set()), (AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)), set()), (AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)), set()), (Lea(PseudoMem(double_arr.35, 0), Pseudo(tmp.243)), set()), (AssType: Quadword Mov(Pseudo(tmp.243), Reg(AX)), set()), (Lea(Memory(AX, 88), Pseudo(tmp.247)), set()), (AssType: Quadword Mov(Imm(5), Pseudo(tmp.251)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.251)), set()), (AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.251), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.252)), set()), (AssType: Quadword Mov(Imm(5), Pseudo(tmp.255)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.255)), set()), (AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.255), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.256)), set()), (SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.258)), set()), (AssType: Quadword Mov(Pseudo(tmp.258), Pseudo(tmp.260)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.260)), set()), (AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.260), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.261)), set()), (AssType: Quadword Mov(Imm(5), Pseudo(tmp.263)), set()), (AssType: Quadword Mov(Pseudo(tmp.263), Pseudo(tmp.265)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.265)), set()), (AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.265), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Pseudo(tmp.266)), set()), (AssType: Quadword Cmp(Pseudo(tmp.256), Pseudo(tmp.252)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.267)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.267)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.267)), set()), (JmpCC(ConcCodeType.E, tmp.268), set())] ReachingCopies: set()
1 1: [AssType: Quadword Cmp(Pseudo(tmp.261), Pseudo(tmp.252)), AssType: Longword Mov(Imm(0), Pseudo(tmp.269)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.269)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.269)), JmpCC(ConcCodeType.E, tmp.268)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Quadword Cmp(Pseudo(tmp.261), Pseudo(tmp.252)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.269)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.269)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.269)), set()), (JmpCC(ConcCodeType.E, tmp.268), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Pseudo(tmp.270)), Jmp(tmp.271)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.270)), set()), (Jmp(tmp.271), set())] ReachingCopies: set()
3 3: [Label(tmp.268), AssType: Longword Mov(Imm(0), Pseudo(tmp.270))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.268), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.270)), set())] ReachingCopies: set()
4 4: [Label(tmp.271), AssType: Longword Cmp(Imm(0), Pseudo(tmp.270)), JmpCC(ConcCodeType.E, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: [(Label(tmp.271), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.270)), set()), (JmpCC(ConcCodeType.E, tmp.272), set())] ReachingCopies: set()
5 5: [AssType: Quadword Cmp(Pseudo(tmp.266), Pseudo(tmp.252)), AssType: Longword Mov(Imm(0), Pseudo(tmp.273)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.273)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.273)), JmpCC(ConcCodeType.E, tmp.272)] Pred: {4} Suc: {6, 7} iMap: [(AssType: Quadword Cmp(Pseudo(tmp.266), Pseudo(tmp.252)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.273)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.273)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.273)), set()), (JmpCC(ConcCodeType.E, tmp.272), set())] ReachingCopies: set()
6 6: [AssType: Longword Mov(Imm(1), Pseudo(tmp.274)), Jmp(tmp.275)] Pred: {5} Suc: {8} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.274)), set()), (Jmp(tmp.275), set())] ReachingCopies: set()
7 7: [Label(tmp.272), AssType: Longword Mov(Imm(0), Pseudo(tmp.274))] Pred: {4, 5} Suc: {8} iMap: [(Label(tmp.272), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.274)), set())] ReachingCopies: set()
8 8: [Label(tmp.275), AssType: Longword Cmp(Imm(0), Pseudo(tmp.274)), JmpCC(ConcCodeType.E, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: [(Label(tmp.275), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.274)), set()), (JmpCC(ConcCodeType.E, tmp.276), set())] ReachingCopies: set()
9 9: [AssType: Quadword Mov(Pseudo(tmp.266), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)), AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)), AssType: Longword Mov(Imm(0), Pseudo(tmp.278)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.278)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.278)), JmpCC(ConcCodeType.E, tmp.276)] Pred: {8} Suc: {10, 11} iMap: [(AssType: Quadword Mov(Pseudo(tmp.266), Reg(AX)), set()), (AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)), set()), (AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.278)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.278)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.278)), set()), (JmpCC(ConcCodeType.E, tmp.276), set())] ReachingCopies: set()
10 10: [AssType: Longword Mov(Imm(1), Pseudo(tmp.279)), Jmp(tmp.280)] Pred: {9} Suc: {12} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.279)), set()), (Jmp(tmp.280), set())] ReachingCopies: set()
11 11: [Label(tmp.276), AssType: Longword Mov(Imm(0), Pseudo(tmp.279))] Pred: {8, 9} Suc: {12} iMap: [(Label(tmp.276), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.279)), set())] ReachingCopies: set()
12 12: [Label(tmp.280), AssType: Longword Mov(Pseudo(tmp.279), Reg(AX)), ret] Pred: {10, 11} Suc: {EXIT} iMap: [(Label(tmp.280), set()), (AssType: Longword Mov(Pseudo(tmp.279), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------LIVE for block 12-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.279), Reg(AX)) {Reg(AX)}
Label(tmp.280) {Pseudo(tmp.279)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.279)}
--------------LIVE for block 11-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.279)) {Pseudo(tmp.279)}
Label(tmp.276) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 10-------------------
Jmp(tmp.280) {Pseudo(tmp.279)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.279)) {Pseudo(tmp.279)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 9-------------------
JmpCC(ConcCodeType.E, tmp.276) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.278)) set()
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.278)) {Pseudo(tmp.278)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.278)) set()
AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)) set()
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)) {Pseudo(tmp.277)}
AssType: Quadword Mov(Pseudo(tmp.266), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.266)}
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.276) {Pseudo(tmp.266)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.274)) {Pseudo(tmp.266)}
Label(tmp.275) {Pseudo(tmp.274), Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.274), Pseudo(tmp.266)}
--------------LIVE for block 7-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.274)) {Pseudo(tmp.274), Pseudo(tmp.266)}
Label(tmp.272) {Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.266)}
--------------LIVE for block 6-------------------
Jmp(tmp.275) {Pseudo(tmp.274), Pseudo(tmp.266)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.274)) {Pseudo(tmp.274), Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.266)}
--------------LIVE for block 5-------------------
JmpCC(ConcCodeType.E, tmp.272) {Pseudo(tmp.266)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.273)) {Pseudo(tmp.266)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.273)) {Pseudo(tmp.273), Pseudo(tmp.266)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.273)) {Pseudo(tmp.266)}
AssType: Quadword Cmp(Pseudo(tmp.266), Pseudo(tmp.252)) {Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.252), Pseudo(tmp.266)}
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.272) {Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.270)) {Pseudo(tmp.252), Pseudo(tmp.266)}
Label(tmp.271) {Pseudo(tmp.270), Pseudo(tmp.252), Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.270), Pseudo(tmp.252), Pseudo(tmp.266)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.270)) {Pseudo(tmp.270), Pseudo(tmp.252), Pseudo(tmp.266)}
Label(tmp.268) {Pseudo(tmp.252), Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.252), Pseudo(tmp.266)}
--------------LIVE for block 2-------------------
Jmp(tmp.271) {Pseudo(tmp.270), Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.270)) {Pseudo(tmp.270), Pseudo(tmp.252), Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.252), Pseudo(tmp.266)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.268) {Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.269)) {Pseudo(tmp.252), Pseudo(tmp.266)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.269)) {Pseudo(tmp.269), Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.269)) {Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Quadword Cmp(Pseudo(tmp.261), Pseudo(tmp.252)) {Pseudo(tmp.252), Pseudo(tmp.266)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.252), Pseudo(tmp.261), Pseudo(tmp.266)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.268) {Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.267)) {Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.266)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.267)) {Pseudo(tmp.266), Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.267)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.267)) {Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Quadword Cmp(Pseudo(tmp.256), Pseudo(tmp.252)) {Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.266)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.266)) {Pseudo(tmp.256), Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.266)}
AssType: Quadword Mov(Pseudo(tmp.265), Reg(DX)) {Pseudo(tmp.256), Pseudo(tmp.252), Pseudo(tmp.261), Reg(DX), Reg(AX)}
AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)) {Pseudo(tmp.265), Pseudo(tmp.256), Pseudo(tmp.252), Pseudo(tmp.261), Reg(AX)}
AssType: Quadword Unary(Neg, Pseudo(tmp.265)) {Pseudo(tmp.265), Pseudo(tmp.252), Pseudo(tmp.261), Pseudo(tmp.247), Pseudo(tmp.256)}
AssType: Quadword Mov(Pseudo(tmp.263), Pseudo(tmp.265)) {Pseudo(tmp.265), Pseudo(tmp.252), Pseudo(tmp.261), Pseudo(tmp.247), Pseudo(tmp.256)}
AssType: Quadword Mov(Imm(5), Pseudo(tmp.263)) {Pseudo(tmp.263), Pseudo(tmp.252), Pseudo(tmp.261), Pseudo(tmp.247), Pseudo(tmp.256)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.261)) {Pseudo(tmp.256), Pseudo(tmp.261), Pseudo(tmp.252), Pseudo(tmp.247)}
AssType: Quadword Mov(Pseudo(tmp.260), Reg(DX)) {Pseudo(tmp.256), Pseudo(tmp.252), Pseudo(tmp.247), Reg(DX), Reg(AX)}
AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)) {Pseudo(tmp.256), Pseudo(tmp.252), Pseudo(tmp.247), Pseudo(tmp.260), Reg(AX)}
AssType: Quadword Unary(Neg, Pseudo(tmp.260)) {Pseudo(tmp.256), Pseudo(tmp.260), Pseudo(tmp.252), Pseudo(tmp.247)}
AssType: Quadword Mov(Pseudo(tmp.258), Pseudo(tmp.260)) {Pseudo(tmp.256), Pseudo(tmp.260), Pseudo(tmp.252), Pseudo(tmp.247)}
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.258)) {Pseudo(tmp.258), Pseudo(tmp.256), Pseudo(tmp.252), Pseudo(tmp.247)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.256)) {Pseudo(tmp.256), Pseudo(tmp.252), Pseudo(tmp.247)}
AssType: Quadword Mov(Pseudo(tmp.255), Reg(DX)) {Reg(AX), Pseudo(tmp.252), Pseudo(tmp.247), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)) {Reg(AX), Pseudo(tmp.252), Pseudo(tmp.247), Pseudo(tmp.255)}
AssType: Quadword Unary(Neg, Pseudo(tmp.255)) {Pseudo(tmp.252), Pseudo(tmp.247), Pseudo(tmp.255)}
AssType: Quadword Mov(Imm(5), Pseudo(tmp.255)) {Pseudo(tmp.252), Pseudo(tmp.247), Pseudo(tmp.255)}
Lea(Indexed(AX + DX * 8), Pseudo(tmp.252)) {Pseudo(tmp.252), Pseudo(tmp.247)}
AssType: Quadword Mov(Pseudo(tmp.251), Reg(DX)) {Reg(AX), Pseudo(tmp.247), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX)) {Pseudo(tmp.251), Reg(AX), Pseudo(tmp.247)}
AssType: Quadword Unary(Neg, Pseudo(tmp.251)) {Pseudo(tmp.251), Pseudo(tmp.247)}
AssType: Quadword Mov(Imm(5), Pseudo(tmp.251)) {Pseudo(tmp.251), Pseudo(tmp.247)}
Lea(Memory(AX, 88), Pseudo(tmp.247)) {Pseudo(tmp.247)}
AssType: Quadword Mov(Pseudo(tmp.243), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(double_arr.35, 0), Pseudo(tmp.243)) {Pseudo(tmp.243)}
AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)) set()
AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)) set()
AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)) set()
AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)) set()
AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)) set()
AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)) {Pseudo(tmp.242)}
AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)) {Pseudo(tmp.241)}
AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)) {Pseudo(tmp.240)}
AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)) {Pseudo(tmp.239)}
AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)) {Pseudo(tmp.238)}
AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)) {Pseudo(tmp.237)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.252)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.261)
        Reg(R9d)
        Reg(CX)
        Pseudo(tmp.255)
        Pseudo(tmp.256)
        Reg(SI)
        Pseudo(tmp.265)
        Reg(R13d)
        Pseudo(tmp.251)
        Reg(DX)
        Pseudo(tmp.260)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.252)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.247)
        Pseudo(tmp.261)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Pseudo(tmp.256)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.243)
    Pseudo(tmp.243) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.247)
    Pseudo(tmp.247) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.263)
        Pseudo(tmp.252)
        Pseudo(tmp.261)
        Pseudo(tmp.256)
        Pseudo(tmp.255)
        Pseudo(tmp.258)
        Pseudo(tmp.265)
        Pseudo(tmp.251)
        Reg(DX)
        Pseudo(tmp.260)
Pseudo(tmp.251)
    Pseudo(tmp.251) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Pseudo(tmp.247)
Pseudo(tmp.252)
    Pseudo(tmp.252) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.267)
        Pseudo(tmp.263)
        Pseudo(tmp.269)
        Pseudo(tmp.261)
        Pseudo(tmp.247)
        Pseudo(tmp.256)
        Reg(AX)
        Pseudo(tmp.255)
        Pseudo(tmp.258)
        Pseudo(tmp.265)
        Pseudo(tmp.266)
        Pseudo(tmp.270)
        Reg(DX)
        Pseudo(tmp.260)
Pseudo(tmp.255)
    Pseudo(tmp.255) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Pseudo(tmp.252)
        Pseudo(tmp.247)
Pseudo(tmp.256)
    Pseudo(tmp.256) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.263)
        Pseudo(tmp.252)
        Pseudo(tmp.247)
        Pseudo(tmp.261)
        Pseudo(tmp.258)
        Reg(AX)
        Pseudo(tmp.266)
        Pseudo(tmp.265)
        Reg(DX)
        Pseudo(tmp.260)
Pseudo(tmp.258)
    Pseudo(tmp.258) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.252)
        Pseudo(tmp.256)
        Pseudo(tmp.247)
Pseudo(tmp.260)
    Pseudo(tmp.260) spillCost: 0.0 color: None pruned: False
        Reg(AX)
        Pseudo(tmp.252)
        Pseudo(tmp.256)
        Pseudo(tmp.247)
Pseudo(tmp.261)
    Pseudo(tmp.261) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.267)
        Pseudo(tmp.263)
        Pseudo(tmp.252)
        Pseudo(tmp.247)
        Pseudo(tmp.256)
        Reg(AX)
        Pseudo(tmp.266)
        Pseudo(tmp.265)
        Reg(DX)
Pseudo(tmp.263)
    Pseudo(tmp.263) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.256)
        Pseudo(tmp.261)
        Pseudo(tmp.252)
        Pseudo(tmp.247)
Pseudo(tmp.265)
    Pseudo(tmp.265) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.261)
        Pseudo(tmp.252)
        Pseudo(tmp.247)
        Reg(AX)
        Pseudo(tmp.256)
Pseudo(tmp.266)
    Pseudo(tmp.266) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.269)
        Pseudo(tmp.252)
        Pseudo(tmp.261)
        Pseudo(tmp.256)
        Pseudo(tmp.270)
        Pseudo(tmp.273)
        Pseudo(tmp.274)
        Pseudo(tmp.267)
Pseudo(tmp.267)
    Pseudo(tmp.267) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.252)
        Pseudo(tmp.261)
        Pseudo(tmp.266)
Pseudo(tmp.269)
    Pseudo(tmp.269) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.252)
        Pseudo(tmp.266)
Pseudo(tmp.270)
    Pseudo(tmp.270) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.252)
        Pseudo(tmp.266)
Pseudo(tmp.273)
    Pseudo(tmp.273) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.266)
Pseudo(tmp.274)
    Pseudo(tmp.274) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.266)
Pseudo(tmp.278)
    Pseudo(tmp.278) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.279)
    Pseudo(tmp.279) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.243) Pseudo(tmp.243) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.247) Pseudo(tmp.247) spillCost: 5.0 color: None pruned: False
Pseudo(tmp.251) Pseudo(tmp.251) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.252) Pseudo(tmp.252) spillCost: 4.0 color: None pruned: False
Pseudo(tmp.255) Pseudo(tmp.255) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.256) Pseudo(tmp.256) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.258) Pseudo(tmp.258) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.260) Pseudo(tmp.260) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.261) Pseudo(tmp.261) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.263) Pseudo(tmp.263) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.265) Pseudo(tmp.265) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.266) Pseudo(tmp.266) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.267) Pseudo(tmp.267) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.269) Pseudo(tmp.269) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.270) Pseudo(tmp.270) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.273) Pseudo(tmp.273) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.274) Pseudo(tmp.274) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.278) Pseudo(tmp.278) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.279) Pseudo(tmp.279) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f863066f0>, <RegisterAllocation.Node object at 0x7f8f86306150>, <RegisterAllocation.Node object at 0x7f8f86472ea0>, <RegisterAllocation.Node object at 0x7f8f862c52b0>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634d970>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f86306150>, <RegisterAllocation.Node object at 0x7f8f86472ea0>, <RegisterAllocation.Node object at 0x7f8f862c52b0>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634d970>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f86472ea0>, <RegisterAllocation.Node object at 0x7f8f862c52b0>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634d970>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f86472ea0>, <RegisterAllocation.Node object at 0x7f8f8634d700>, <RegisterAllocation.Node object at 0x7f8f8634d970>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f86472ea0>, <RegisterAllocation.Node object at 0x7f8f8634d970>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f8634d970>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f8634fe60>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86307f80>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310800>, <RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a5a0>, <RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189b80>, <RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c5160>, <RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618b800>, <RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861899d0>, <RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a4b0>, <RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861897c0>, <RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a330>, <RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618b200>, <RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a900>, <RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863051f0>, <RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a240>, <RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861890d0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a930>, <RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618aab0>, <RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a960>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 2 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 7 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 6 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 5 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 4 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 3 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.243) Pseudo(tmp.243) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.247) Pseudo(tmp.247) spillCost: 5.0 color: 2 pruned: False
Pseudo(tmp.251) Pseudo(tmp.251) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.252) Pseudo(tmp.252) spillCost: 4.0 color: 5 pruned: False
Pseudo(tmp.255) Pseudo(tmp.255) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.256) Pseudo(tmp.256) spillCost: 2.0 color: 4 pruned: False
Pseudo(tmp.258) Pseudo(tmp.258) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.260) Pseudo(tmp.260) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.261) Pseudo(tmp.261) spillCost: 2.0 color: 3 pruned: False
Pseudo(tmp.263) Pseudo(tmp.263) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.265) Pseudo(tmp.265) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.266) Pseudo(tmp.266) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.267) Pseudo(tmp.267) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.269) Pseudo(tmp.269) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.270) Pseudo(tmp.270) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.273) Pseudo(tmp.273) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.274) Pseudo(tmp.274) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.278) Pseudo(tmp.278) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.279) Pseudo(tmp.279) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{2: Reg(AX), 8: Reg(BX), 7: Reg(CX), 6: Reg(DX), 5: Reg(DI), 4: Reg(SI), 3: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_subtract_different_index_types: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.243): Reg(R9d), Pseudo(tmp.247): Reg(AX), Pseudo(tmp.251): Reg(R9d), Pseudo(tmp.252): Reg(DI), Pseudo(tmp.255): Reg(R9d), Pseudo(tmp.256): Reg(SI), Pseudo(tmp.258): Reg(R9d), Pseudo(tmp.260): Reg(R9d), Pseudo(tmp.261): Reg(R8d), Pseudo(tmp.263): Reg(R9d), Pseudo(tmp.265): Reg(R9d), Pseudo(tmp.266): Reg(AX), Pseudo(tmp.267): Reg(R9d), Pseudo(tmp.269): Reg(R9d), Pseudo(tmp.270): Reg(R9d), Pseudo(tmp.273): Reg(R9d), Pseudo(tmp.274): Reg(R9d), Pseudo(tmp.278): Reg(R9d), Pseudo(tmp.279): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237))
AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0))      AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238))
AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8))      AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239))
AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16))     AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240))
AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24))     AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241))
AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32))     AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32))
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242))                    AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242))
AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40))     AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40))
AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48))    AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48))
AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56))    AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56))
AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64))    AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64))
AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72))    AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72))
AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80))    AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80))
Lea(PseudoMem(double_arr.35, 0), Reg(R9d))                             Lea(PseudoMem(double_arr.35, 0), Pseudo(tmp.243))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.243), Reg(AX))
Lea(Memory(AX, 88), Reg(AX))                                           Lea(Memory(AX, 88), Pseudo(tmp.247))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Mov(Imm(5), Pseudo(tmp.251))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Pseudo(tmp.251))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX))
Lea(Indexed(AX + DX * 8), Reg(DI))                                     AssType: Quadword Mov(Pseudo(tmp.251), Reg(DX))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                Lea(Indexed(AX + DX * 8), Pseudo(tmp.252))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Mov(Imm(5), Pseudo(tmp.255))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Unary(Neg, Pseudo(tmp.255))
Lea(Indexed(AX + DX * 8), Reg(SI))                                     AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX))
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d))    AssType: Quadword Mov(Pseudo(tmp.255), Reg(DX))
AssType: Quadword Unary(Neg, Reg(R9d))                                 Lea(Indexed(AX + DX * 8), Pseudo(tmp.256))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Pseudo(tmp.258))
Lea(Indexed(AX + DX * 8), Reg(R8d))                                    AssType: Quadword Mov(Pseudo(tmp.258), Pseudo(tmp.260))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Unary(Neg, Pseudo(tmp.260))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.260), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(AX))                                     Lea(Indexed(AX + DX * 8), Pseudo(tmp.261))
AssType: Quadword Cmp(Reg(SI), Reg(DI))                                AssType: Quadword Mov(Imm(5), Pseudo(tmp.263))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Quadword Mov(Pseudo(tmp.263), Pseudo(tmp.265))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                AssType: Quadword Unary(Neg, Pseudo(tmp.265))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Quadword Mov(Pseudo(tmp.247), Reg(AX))
JmpCC(ConcCodeType.E, tmp.268)                                         AssType: Quadword Mov(Pseudo(tmp.265), Reg(DX))
AssType: Quadword Cmp(Reg(R8d), Reg(DI))                               Lea(Indexed(AX + DX * 8), Pseudo(tmp.266))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Quadword Cmp(Pseudo(tmp.256), Pseudo(tmp.252))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.267))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.267))
JmpCC(ConcCodeType.E, tmp.268)                                         AssType: Longword Cmp(Imm(0), Pseudo(tmp.267))
AssType: Longword Mov(Imm(1), Reg(R9d))                                JmpCC(ConcCodeType.E, tmp.268)
Jmp(tmp.271)                                                           AssType: Quadword Cmp(Pseudo(tmp.261), Pseudo(tmp.252))
Label(tmp.268)                                                         AssType: Longword Mov(Imm(0), Pseudo(tmp.269))
AssType: Longword Mov(Imm(0), Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.269))
Label(tmp.271)                                                         AssType: Longword Cmp(Imm(0), Pseudo(tmp.269))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                JmpCC(ConcCodeType.E, tmp.268)
JmpCC(ConcCodeType.E, tmp.272)                                         AssType: Longword Mov(Imm(1), Pseudo(tmp.270))
AssType: Quadword Cmp(Reg(AX), Reg(DI))                                Jmp(tmp.271)
AssType: Longword Mov(Imm(0), Reg(R9d))                                Label(tmp.268)
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.270))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                Label(tmp.271)
JmpCC(ConcCodeType.E, tmp.272)                                         AssType: Longword Cmp(Imm(0), Pseudo(tmp.270))
AssType: Longword Mov(Imm(1), Reg(R9d))                                JmpCC(ConcCodeType.E, tmp.272)
Jmp(tmp.275)                                                           AssType: Quadword Cmp(Pseudo(tmp.266), Pseudo(tmp.252))
Label(tmp.272)                                                         AssType: Longword Mov(Imm(0), Pseudo(tmp.273))
AssType: Longword Mov(Imm(0), Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.273))
Label(tmp.275)                                                         AssType: Longword Cmp(Imm(0), Pseudo(tmp.273))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                JmpCC(ConcCodeType.E, tmp.272)
JmpCC(ConcCodeType.E, tmp.276)                                         AssType: Longword Mov(Imm(1), Pseudo(tmp.274))
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277))                    Jmp(tmp.275)
AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277))                 Label(tmp.272)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.274))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                Label(tmp.275)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.274))
JmpCC(ConcCodeType.E, tmp.276)                                         JmpCC(ConcCodeType.E, tmp.276)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Quadword Mov(Pseudo(tmp.266), Reg(AX))
Jmp(tmp.280)                                                           AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277))
Label(tmp.276)                                                         AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.278))
Label(tmp.280)                                                         SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.278))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Cmp(Imm(0), Pseudo(tmp.278))
ret                                                                    JmpCC(ConcCodeType.E, tmp.276)
-----------Building DOUBLE interference graph.------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237))
AssType: Quadword Cmp(Reg(R8d), Reg(DI))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.268)
Label(tmp.271)
AssType: Quadword Cmp(Reg(AX), Reg(DI))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.272)
Label(tmp.275)
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277))
AssType: Longword Mov(Imm(1), Reg(R9d))
Label(tmp.276)
Label(tmp.280)
-------------LABELS-----------------
tmp.268 3: [Label(tmp.268), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.268), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.271 4: [Label(tmp.271), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272)] Pred: set() Suc: set() iMap: [(Label(tmp.271), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.272), set())] ReachingCopies: set()
tmp.272 7: [Label(tmp.272), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.272), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.275 8: [Label(tmp.275), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276)] Pred: set() Suc: set() iMap: [(Label(tmp.275), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.276), set())] ReachingCopies: set()
tmp.276 11: [Label(tmp.276), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: set() Suc: set() iMap: [(Label(tmp.276), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
tmp.280 12: [Label(tmp.280), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.280), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)), AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)), AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)), AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)), AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)), AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)), AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)), AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)), AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)), AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)), AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)), AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)), Lea(PseudoMem(double_arr.35, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 88), Reg(AX)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(DI)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(SI)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R8d)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(AX)), AssType: Quadword Cmp(Reg(SI), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.268)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)), set()), (AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)), set()), (AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)), set()), (AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)), set()), (AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)), set()), (AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)), set()), (AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)), set()), (AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)), set()), (AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)), set()), (AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)), set()), (AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)), set()), (AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)), set()), (AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)), set()), (Lea(PseudoMem(double_arr.35, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 88), Reg(AX)), set()), (AssType: Quadword Mov(Imm(5), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(DI)), set()), (AssType: Quadword Mov(Imm(5), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(SI)), set()), (SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(R8d)), set()), (AssType: Quadword Mov(Imm(5), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 8), Reg(AX)), set()), (AssType: Quadword Cmp(Reg(SI), Reg(DI)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.268), set())] ReachingCopies: set()
1 1: [AssType: Quadword Cmp(Reg(R8d), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.268)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Quadword Cmp(Reg(R8d), Reg(DI)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.268), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.271)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.271), set())] ReachingCopies: set()
3 3: [Label(tmp.268), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.268), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
4 4: [Label(tmp.271), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272)] Pred: {2, 3} Suc: {5, 7} iMap: [(Label(tmp.271), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.272), set())] ReachingCopies: set()
5 5: [AssType: Quadword Cmp(Reg(AX), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272)] Pred: {4} Suc: {6, 7} iMap: [(AssType: Quadword Cmp(Reg(AX), Reg(DI)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.272), set())] ReachingCopies: set()
6 6: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.275)] Pred: {5} Suc: {8} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.275), set())] ReachingCopies: set()
7 7: [Label(tmp.272), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {4, 5} Suc: {8} iMap: [(Label(tmp.272), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
8 8: [Label(tmp.275), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276)] Pred: {6, 7} Suc: {9, 11} iMap: [(Label(tmp.275), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.276), set())] ReachingCopies: set()
9 9: [AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)), AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276)] Pred: {8} Suc: {10, 11} iMap: [(AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)), set()), (AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.276), set())] ReachingCopies: set()
10 10: [AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.280)] Pred: {9} Suc: {12} iMap: [(AssType: Longword Mov(Imm(1), Reg(R9d)), set()), (Jmp(tmp.280), set())] ReachingCopies: set()
11 11: [Label(tmp.276), AssType: Longword Mov(Imm(0), Reg(R9d))] Pred: {8, 9} Suc: {12} iMap: [(Label(tmp.276), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set())] ReachingCopies: set()
12 12: [Label(tmp.280), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {10, 11} Suc: {EXIT} iMap: [(Label(tmp.280), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {12}
--------------LIVE for block 12-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Label(tmp.280) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R9d)}
--------------LIVE for block 11-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R9d)}
Label(tmp.276) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 10-------------------
Jmp(tmp.280) {Reg(R9d)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 9-------------------
JmpCC(ConcCodeType.E, tmp.276) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277)) set()
AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277)) {Pseudo(tmp.277)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX)}
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.276) {Reg(AX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(AX)}
Label(tmp.275) {Reg(AX), Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX), Reg(R9d)}
--------------LIVE for block 7-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(AX), Reg(R9d)}
Label(tmp.272) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX)}
--------------LIVE for block 6-------------------
Jmp(tmp.275) {Reg(AX), Reg(R9d)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(AX), Reg(R9d)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX)}
--------------LIVE for block 5-------------------
JmpCC(ConcCodeType.E, tmp.272) {Reg(AX)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(AX)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(AX), Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(AX)}
AssType: Quadword Cmp(Reg(AX), Reg(DI)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX), Reg(DI)}
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.272) {Reg(AX), Reg(DI)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(AX), Reg(DI)}
Label(tmp.271) {Reg(AX), Reg(R9d), Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX), Reg(R9d), Reg(DI)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(AX), Reg(R9d), Reg(DI)}
Label(tmp.268) {Reg(AX), Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX), Reg(DI)}
--------------LIVE for block 2-------------------
Jmp(tmp.271) {Reg(AX), Reg(R9d), Reg(DI)}
AssType: Longword Mov(Imm(1), Reg(R9d)) {Reg(AX), Reg(R9d), Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: {Reg(AX), Reg(DI)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.268) {Reg(AX), Reg(DI)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(AX), Reg(DI)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(AX), Reg(R9d), Reg(DI)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(AX), Reg(DI)}
AssType: Quadword Cmp(Reg(R8d), Reg(DI)) {Reg(AX), Reg(DI)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Reg(AX), Reg(DI)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.268) {Reg(R8d), Reg(AX), Reg(DI)}
AssType: Longword Cmp(Imm(0), Reg(R9d)) {Reg(R8d), Reg(AX), Reg(DI)}
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)) {Reg(R8d), Reg(AX), Reg(R9d), Reg(DI)}
AssType: Longword Mov(Imm(0), Reg(R9d)) {Reg(R8d), Reg(AX), Reg(DI)}
AssType: Quadword Cmp(Reg(SI), Reg(DI)) {Reg(R8d), Reg(AX), Reg(DI)}
Lea(Indexed(AX + DX * 8), Reg(AX)) {Reg(R8d), Reg(SI), Reg(AX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(R8d), Reg(SI), Reg(DX), Reg(DI), Reg(AX)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(SI), Reg(DI), Reg(AX), Reg(R9d)}
AssType: Quadword Mov(Imm(5), Reg(R9d)) {Reg(R8d), Reg(SI), Reg(DI), Reg(AX), Reg(R9d)}
Lea(Indexed(AX + DX * 8), Reg(R8d)) {Reg(R8d), Reg(SI), Reg(AX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(DI), Reg(SI), Reg(AX), Reg(DX)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(SI), Reg(AX), Reg(R9d), Reg(DI)}
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)) {Reg(SI), Reg(AX), Reg(R9d), Reg(DI)}
Lea(Indexed(AX + DX * 8), Reg(SI)) {Reg(SI), Reg(AX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(DI), Reg(AX), Reg(DX)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(AX), Reg(R9d), Reg(DI)}
AssType: Quadword Mov(Imm(5), Reg(R9d)) {Reg(AX), Reg(R9d), Reg(DI)}
Lea(Indexed(AX + DX * 8), Reg(DI)) {Reg(AX), Reg(DI)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(AX), Reg(R9d)}
AssType: Quadword Mov(Imm(5), Reg(R9d)) {Reg(AX), Reg(R9d)}
Lea(Memory(AX, 88), Reg(AX)) {Reg(AX)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(PseudoMem(double_arr.35, 0), Reg(R9d)) {Reg(R9d)}
AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80)) set()
AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72)) set()
AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64)) set()
AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56)) set()
AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48)) set()
AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242)) {Pseudo(tmp.242)}
AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241)) {Pseudo(tmp.241)}
AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240)) {Pseudo(tmp.240)}
AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239)) {Pseudo(tmp.239)}
AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238)) {Pseudo(tmp.238)}
AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0)) set()
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237)) {Pseudo(tmp.237)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Pseudo(tmp.237)
    Pseudo(tmp.237) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.238)
    Pseudo(tmp.238) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.239)
    Pseudo(tmp.239) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.240)
    Pseudo(tmp.240) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.241)
    Pseudo(tmp.241) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.242)
    Pseudo(tmp.242) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.277)
    Pseudo(tmp.277) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
Pseudo(tmp.237) Pseudo(tmp.237) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.238) Pseudo(tmp.238) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.239) Pseudo(tmp.239) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.240) Pseudo(tmp.240) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.241) Pseudo(tmp.241) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.242) Pseudo(tmp.242) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.277) Pseudo(tmp.277) spillCost: 2.0 color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630c8f0>, <RegisterAllocation.Node object at 0x7f8f8630f740>, <RegisterAllocation.Node object at 0x7f8f8630d460>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630e870>, <RegisterAllocation.Node object at 0x7f8f8630c080>, <RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630f740>, <RegisterAllocation.Node object at 0x7f8f8630d460>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630e870>, <RegisterAllocation.Node object at 0x7f8f8630c080>, <RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d460>, <RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630e870>, <RegisterAllocation.Node object at 0x7f8f8630c080>, <RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d4f0>, <RegisterAllocation.Node object at 0x7f8f8630e870>, <RegisterAllocation.Node object at 0x7f8f8630c080>, <RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630e870>, <RegisterAllocation.Node object at 0x7f8f8630c080>, <RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630c080>, <RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630e090>, <RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630c740>, <RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630d370>, <RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86300440>, <RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d5340>, <RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863bd6a0>, <RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863bed20>, <RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ed0a0>, <RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f5820>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86321ca0>, <RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86323560>, <RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631e090>, <RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d9d0>, <RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862c6d50>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
Pseudo(tmp.237) Pseudo(tmp.237) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.238) Pseudo(tmp.238) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.239) Pseudo(tmp.239) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.240) Pseudo(tmp.240) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.241) Pseudo(tmp.241) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.242) Pseudo(tmp.242) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.277) Pseudo(tmp.277) spillCost: 2.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_subtract_different_index_types: set()
------------------REGISTER DOUBLE MAP.--------------------
{Pseudo(tmp.237): Reg(XMM13), Pseudo(tmp.238): Reg(XMM13), Pseudo(tmp.239): Reg(XMM13), Pseudo(tmp.240): Reg(XMM13), Pseudo(tmp.241): Reg(XMM13), Pseudo(tmp.242): Reg(XMM13), Pseudo(tmp.277): Reg(XMM13)}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.237))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.35, 0))           AssType: Double Mov(Pseudo(tmp.237), PseudoMem(double_arr.35, 0))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.238))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.35, 8))           AssType: Double Mov(Pseudo(tmp.238), PseudoMem(double_arr.35, 8))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.239))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.35, 16))          AssType: Double Mov(Pseudo(tmp.239), PseudoMem(double_arr.35, 16))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.240))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.35, 24))          AssType: Double Mov(Pseudo(tmp.240), PseudoMem(double_arr.35, 24))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.241))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.35, 32))          AssType: Double Mov(Pseudo(tmp.241), PseudoMem(double_arr.35, 32))
AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13))                         AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.242))
AssType: Double Mov(Reg(XMM13), PseudoMem(double_arr.35, 40))          AssType: Double Mov(Pseudo(tmp.242), PseudoMem(double_arr.35, 40))
AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48))    AssType: Double Mov(Data(tmp.365, 0), PseudoMem(double_arr.35, 48))
AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56))    AssType: Double Mov(Data(tmp.366, 0), PseudoMem(double_arr.35, 56))
AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64))    AssType: Double Mov(Data(tmp.367, 0), PseudoMem(double_arr.35, 64))
AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72))    AssType: Double Mov(Data(tmp.368, 0), PseudoMem(double_arr.35, 72))
AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80))    AssType: Double Mov(Data(tmp.369, 0), PseudoMem(double_arr.35, 80))
Lea(PseudoMem(double_arr.35, 0), Reg(R9d))                             Lea(PseudoMem(double_arr.35, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 88), Reg(AX))                                           Lea(Memory(AX, 88), Reg(AX))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Mov(Imm(5), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(DI))                                     Lea(Indexed(AX + DX * 8), Reg(DI))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Mov(Imm(5), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(SI))                                     Lea(Indexed(AX + DX * 8), Reg(SI))
SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d))    SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(R8d))                                    Lea(Indexed(AX + DX * 8), Reg(R8d))
AssType: Quadword Mov(Imm(5), Reg(R9d))                                AssType: Quadword Mov(Imm(5), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 8), Reg(AX))                                     Lea(Indexed(AX + DX * 8), Reg(AX))
AssType: Quadword Cmp(Reg(SI), Reg(DI))                                AssType: Quadword Cmp(Reg(SI), Reg(DI))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.268)                                         JmpCC(ConcCodeType.E, tmp.268)
AssType: Quadword Cmp(Reg(R8d), Reg(DI))                               AssType: Quadword Cmp(Reg(R8d), Reg(DI))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.268)                                         JmpCC(ConcCodeType.E, tmp.268)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.271)                                                           Jmp(tmp.271)
Label(tmp.268)                                                         Label(tmp.268)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.271)                                                         Label(tmp.271)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.272)                                         JmpCC(ConcCodeType.E, tmp.272)
AssType: Quadword Cmp(Reg(AX), Reg(DI))                                AssType: Quadword Cmp(Reg(AX), Reg(DI))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.272)                                         JmpCC(ConcCodeType.E, tmp.272)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.275)                                                           Jmp(tmp.275)
Label(tmp.272)                                                         Label(tmp.272)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.275)                                                         Label(tmp.275)
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.276)                                         JmpCC(ConcCodeType.E, tmp.276)
AssType: Double Mov(Memory(AX, 0), Reg(XMM13))                         AssType: Double Mov(Memory(AX, 0), Pseudo(tmp.277))
AssType: Double Cmp(Data(tmp.370, 0), Reg(XMM13))                      AssType: Double Cmp(Data(tmp.370, 0), Pseudo(tmp.277))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))                                SetCC(ConcCodeTypeUnsigned.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.276)                                         JmpCC(ConcCodeType.E, tmp.276)
AssType: Longword Mov(Imm(1), Reg(R9d))                                AssType: Longword Mov(Imm(1), Reg(R9d))
Jmp(tmp.280)                                                           Jmp(tmp.280)
Label(tmp.276)                                                         Label(tmp.276)
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
Label(tmp.280)                                                         Label(tmp.280)
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_subtract_complex_expressions
-----------Building INTEGER interference graph.------------------
AssType: Longword Cmp(Imm(0), Pseudo(flag.41))
Lea(PseudoMem(arr.43, 0), Pseudo(tmp.283))
Label(tmp.282)
Label(tmp.288)
-------------LABELS-----------------
tmp.282 2: [Label(tmp.282), Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289)), AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291)), AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287))] Pred: set() Suc: set() iMap: [(Label(tmp.282), set()), (Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289)), set()), (AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291)), set()), (AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287)), set())] ReachingCopies: set()
tmp.288 3: [Label(tmp.288), AssType: Longword Mov(Imm(2), Pseudo(tmp.294)), AssType: Longword Unary(Neg, Pseudo(tmp.294)), AssType: Longword Mov(Pseudo(four.42), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Pseudo(tmp.294)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.295)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296)), AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298)), AssType: Quadword Unary(Neg, Pseudo(tmp.298)), AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.299)), AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300)), AssType: Longword Cmp(Imm(4), Pseudo(tmp.300)), AssType: Longword Mov(Imm(0), Pseudo(tmp.301)), SetCC(ConcCodeType.E, Pseudo(tmp.301)), AssType: Longword Mov(Pseudo(tmp.301), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.288), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.294)), set()), (AssType: Longword Unary(Neg, Pseudo(tmp.294)), set()), (AssType: Longword Mov(Pseudo(four.42), Reg(AX)), set()), (AssType: {self.assType} Cdq, set()), (AssType: Longword Idiv(Pseudo(tmp.294)), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.295)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296)), set()), (AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.298)), set()), (AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.299)), set()), (AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300)), set()), (AssType: Longword Cmp(Imm(4), Pseudo(tmp.300)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.301)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.301)), set()), (AssType: Longword Mov(Pseudo(tmp.301), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cmp(Imm(0), Pseudo(flag.41)), JmpCC(ConcCodeType.E, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Cmp(Imm(0), Pseudo(flag.41)), set()), (JmpCC(ConcCodeType.E, tmp.282), set())] ReachingCopies: set()
1 1: [Lea(PseudoMem(arr.43, 0), Pseudo(tmp.283)), AssType: Quadword Mov(Pseudo(tmp.283), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.285)), AssType: Quadword Mov(Pseudo(tmp.285), Pseudo(tmp.287)), Jmp(tmp.288)] Pred: {0} Suc: {3} iMap: [(Lea(PseudoMem(arr.43, 0), Pseudo(tmp.283)), set()), (AssType: Quadword Mov(Pseudo(tmp.283), Reg(DI)), set()), (Call(get_elem1_ptr), set()), (AssType: Quadword Mov(Reg(AX), Pseudo(tmp.285)), set()), (AssType: Quadword Mov(Pseudo(tmp.285), Pseudo(tmp.287)), set()), (Jmp(tmp.288), set())] ReachingCopies: set()
2 2: [Label(tmp.282), Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289)), AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291)), AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287))] Pred: {0} Suc: {3} iMap: [(Label(tmp.282), set()), (Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289)), set()), (AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291)), set()), (AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287)), set())] ReachingCopies: set()
3 3: [Label(tmp.288), AssType: Longword Mov(Imm(2), Pseudo(tmp.294)), AssType: Longword Unary(Neg, Pseudo(tmp.294)), AssType: Longword Mov(Pseudo(four.42), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Pseudo(tmp.294)), AssType: Longword Mov(Reg(AX), Pseudo(tmp.295)), SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296)), AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298)), AssType: Quadword Unary(Neg, Pseudo(tmp.298)), AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX)), Lea(Indexed(AX + DX * 4), Pseudo(tmp.299)), AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300)), AssType: Longword Cmp(Imm(4), Pseudo(tmp.300)), AssType: Longword Mov(Imm(0), Pseudo(tmp.301)), SetCC(ConcCodeType.E, Pseudo(tmp.301)), AssType: Longword Mov(Pseudo(tmp.301), Reg(AX)), ret] Pred: {1, 2} Suc: {EXIT} iMap: [(Label(tmp.288), set()), (AssType: Longword Mov(Imm(2), Pseudo(tmp.294)), set()), (AssType: Longword Unary(Neg, Pseudo(tmp.294)), set()), (AssType: Longword Mov(Pseudo(four.42), Reg(AX)), set()), (AssType: {self.assType} Cdq, set()), (AssType: Longword Idiv(Pseudo(tmp.294)), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.295)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296)), set()), (AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.298)), set()), (AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Pseudo(tmp.299)), set()), (AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300)), set()), (AssType: Longword Cmp(Imm(4), Pseudo(tmp.300)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.301)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.301)), set()), (AssType: Longword Mov(Pseudo(tmp.301), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {3}
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.301), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Pseudo(tmp.301)) {Pseudo(tmp.301)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.301)) set()
AssType: Longword Cmp(Imm(4), Pseudo(tmp.300)) set()
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300)) {Pseudo(tmp.300)}
AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Pseudo(tmp.299)) {Pseudo(tmp.299)}
AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX)) {Reg(AX), Pseudo(tmp.298)}
AssType: Quadword Unary(Neg, Pseudo(tmp.298)) {Pseudo(tmp.287), Pseudo(tmp.298)}
AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298)) {Pseudo(tmp.287), Pseudo(tmp.298)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296)) {Pseudo(tmp.287), Pseudo(tmp.296)}
AssType: Longword Mov(Reg(AX), Pseudo(tmp.295)) {Pseudo(tmp.287), Pseudo(tmp.295)}
AssType: Longword Idiv(Pseudo(tmp.294)) {Pseudo(tmp.287), Reg(AX)}
AssType: {self.assType} Cdq {Pseudo(tmp.287), Pseudo(tmp.294), Reg(AX), Reg(DX)}
AssType: Longword Mov(Pseudo(four.42), Reg(AX)) {Pseudo(tmp.287), Pseudo(tmp.294), Reg(AX)}
AssType: Longword Unary(Neg, Pseudo(tmp.294)) {Pseudo(tmp.287), Pseudo(tmp.294), Pseudo(four.42)}
AssType: Longword Mov(Imm(2), Pseudo(tmp.294)) {Pseudo(tmp.287), Pseudo(tmp.294), Pseudo(four.42)}
Label(tmp.288) {Pseudo(tmp.287), Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.287), Pseudo(four.42)}
--------------LIVE for block 2-------------------
AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287)) {Pseudo(tmp.287), Pseudo(four.42)}
AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291)) {Pseudo(tmp.291), Pseudo(four.42)}
Call(get_elem2_ptr) {Reg(AX), Pseudo(four.42)}
AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI)) {Pseudo(four.42), Reg(DI)}
Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289)) {Pseudo(tmp.289), Pseudo(four.42)}
Label(tmp.282) {Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(four.42)}
--------------LIVE for block 1-------------------
Jmp(tmp.288) {Pseudo(tmp.287), Pseudo(four.42)}
AssType: Quadword Mov(Pseudo(tmp.285), Pseudo(tmp.287)) {Pseudo(tmp.287), Pseudo(four.42)}
AssType: Quadword Mov(Reg(AX), Pseudo(tmp.285)) {Pseudo(four.42), Pseudo(tmp.285)}
Call(get_elem1_ptr) {Reg(AX), Pseudo(four.42)}
AssType: Quadword Mov(Pseudo(tmp.283), Reg(DI)) {Pseudo(four.42), Reg(DI)}
Lea(PseudoMem(arr.43, 0), Pseudo(tmp.283)) {Pseudo(tmp.283), Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(four.42)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.282) {Pseudo(four.42)}
AssType: Longword Cmp(Imm(0), Pseudo(flag.41)) {Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag.41), Pseudo(four.42)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.287)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.294)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Pseudo(tmp.298)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Pseudo(tmp.287)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Pseudo(tmp.294)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.283)
    Pseudo(tmp.283) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.285)
    Pseudo(tmp.285) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.287)
    Pseudo(tmp.287) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.295)
        Pseudo(tmp.294)
        Reg(AX)
        Pseudo(tmp.296)
        Reg(DX)
        Pseudo(tmp.298)
Pseudo(tmp.289)
    Pseudo(tmp.289) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.291)
    Pseudo(tmp.291) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.294)
    Pseudo(tmp.294) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.287)
        Reg(AX)
        Reg(DX)
Pseudo(tmp.295)
    Pseudo(tmp.295) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.287)
Pseudo(tmp.296)
    Pseudo(tmp.296) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.287)
Pseudo(tmp.298)
    Pseudo(tmp.298) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.287)
        Reg(AX)
Pseudo(tmp.299)
    Pseudo(tmp.299) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.300)
    Pseudo(tmp.300) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.301)
    Pseudo(tmp.301) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.283) Pseudo(tmp.283) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.285) Pseudo(tmp.285) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.287) Pseudo(tmp.287) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.289) Pseudo(tmp.289) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.291) Pseudo(tmp.291) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.294) Pseudo(tmp.294) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.295) Pseudo(tmp.295) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.296) Pseudo(tmp.296) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.298) Pseudo(tmp.298) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.299) Pseudo(tmp.299) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.300) Pseudo(tmp.300) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.301) Pseudo(tmp.301) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bb00>, <RegisterAllocation.Node object at 0x7f8f863005f0>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f863105f0>, <RegisterAllocation.Node object at 0x7f8f86310050>, <RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bb00>, <RegisterAllocation.Node object at 0x7f8f86313350>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f863105f0>, <RegisterAllocation.Node object at 0x7f8f86310050>, <RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bb00>, <RegisterAllocation.Node object at 0x7f8f86310470>, <RegisterAllocation.Node object at 0x7f8f863105f0>, <RegisterAllocation.Node object at 0x7f8f86310050>, <RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bb00>, <RegisterAllocation.Node object at 0x7f8f863105f0>, <RegisterAllocation.Node object at 0x7f8f86310050>, <RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863105f0>, <RegisterAllocation.Node object at 0x7f8f86310050>, <RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310050>, <RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311dc0>, <RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313830>, <RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310740>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f75f0>, <RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f5940>, <RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f22d0>, <RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f2fc0>, <RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f0530>, <RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f00b0>, <RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1a30>, <RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1190>, <RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f0080>, <RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1fa0>, <RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f38c0>, <RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1d30>, <RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f1580>, <RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631d0a0>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 5 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 7 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 6 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.283) Pseudo(tmp.283) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.285) Pseudo(tmp.285) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.287) Pseudo(tmp.287) spillCost: 3.0 color: 2 pruned: False
Pseudo(tmp.289) Pseudo(tmp.289) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.291) Pseudo(tmp.291) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.294) Pseudo(tmp.294) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.295) Pseudo(tmp.295) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.296) Pseudo(tmp.296) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.298) Pseudo(tmp.298) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.299) Pseudo(tmp.299) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.300) Pseudo(tmp.300) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.301) Pseudo(tmp.301) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{5: Reg(AX), 8: Reg(BX), 7: Reg(CX), 6: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_subtract_complex_expressions: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.283): Reg(R9d), Pseudo(tmp.285): Reg(R9d), Pseudo(tmp.287): Reg(R8d), Pseudo(tmp.289): Reg(R9d), Pseudo(tmp.291): Reg(R9d), Pseudo(tmp.294): Reg(R9d), Pseudo(tmp.295): Reg(R9d), Pseudo(tmp.296): Reg(R9d), Pseudo(tmp.298): Reg(R9d), Pseudo(tmp.299): Reg(R9d), Pseudo(tmp.300): Reg(R9d), Pseudo(tmp.301): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Cmp(Imm(0), Pseudo(flag.41))                         AssType: Longword Cmp(Imm(0), Pseudo(flag.41))
JmpCC(ConcCodeType.E, tmp.282)                                         JmpCC(ConcCodeType.E, tmp.282)
Lea(PseudoMem(arr.43, 0), Reg(R9d))                                    Lea(PseudoMem(arr.43, 0), Pseudo(tmp.283))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Pseudo(tmp.283), Reg(DI))
Call(get_elem1_ptr)                                                    Call(get_elem1_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Pseudo(tmp.285))
AssType: Quadword Mov(Reg(R9d), Reg(R8d))                              AssType: Quadword Mov(Pseudo(tmp.285), Pseudo(tmp.287))
Jmp(tmp.288)                                                           Jmp(tmp.288)
Label(tmp.282)                                                         Label(tmp.282)
Lea(PseudoMem(arr.43, 0), Reg(R9d))                                    Lea(PseudoMem(arr.43, 0), Pseudo(tmp.289))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Pseudo(tmp.289), Reg(DI))
Call(get_elem2_ptr)                                                    Call(get_elem2_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Pseudo(tmp.291))
AssType: Quadword Mov(Reg(R9d), Reg(R8d))                              AssType: Quadword Mov(Pseudo(tmp.291), Pseudo(tmp.287))
Label(tmp.288)                                                         Label(tmp.288)
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Pseudo(tmp.294))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Pseudo(tmp.294))
AssType: Longword Mov(Pseudo(four.42), Reg(AX))                        AssType: Longword Mov(Pseudo(four.42), Reg(AX))
AssType: {self.assType} Cdq                                            AssType: {self.assType} Cdq
AssType: Longword Idiv(Reg(R9d))                                       AssType: Longword Idiv(Pseudo(tmp.294))
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.295))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Pseudo(tmp.295), Pseudo(tmp.296))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Mov(Pseudo(tmp.296), Pseudo(tmp.298))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Unary(Neg, Pseudo(tmp.298))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.287), Reg(AX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    AssType: Quadword Mov(Pseudo(tmp.298), Reg(DX))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               Lea(Indexed(AX + DX * 4), Pseudo(tmp.299))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Pseudo(tmp.299), Reg(AX))
AssType: Longword Cmp(Imm(4), Reg(R9d))                                AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.300))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(4), Pseudo(tmp.300))
SetCC(ConcCodeType.E, Reg(R9d))                                        AssType: Longword Mov(Imm(0), Pseudo(tmp.301))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               SetCC(ConcCodeType.E, Pseudo(tmp.301))
ret                                                                    AssType: Longword Mov(Pseudo(tmp.301), Reg(AX))
-----------Building DOUBLE interference graph.------------------
AssType: Longword Cmp(Imm(0), Pseudo(flag.41))
Lea(PseudoMem(arr.43, 0), Reg(R9d))
Label(tmp.282)
Label(tmp.288)
-------------LABELS-----------------
tmp.282 2: [Label(tmp.282), Lea(PseudoMem(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d))] Pred: set() Suc: set() iMap: [(Label(tmp.282), set()), (Lea(PseudoMem(arr.43, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(R8d)), set())] ReachingCopies: set()
tmp.288 3: [Label(tmp.288), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Pseudo(four.42), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Reg(R9d)), AssType: Longword Mov(Reg(AX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.288), set()), (AssType: Longword Mov(Imm(2), Reg(R9d)), set()), (AssType: Longword Unary(Neg, Reg(R9d)), set()), (AssType: Longword Mov(Pseudo(four.42), Reg(AX)), set()), (AssType: {self.assType} Cdq, set()), (AssType: Longword Idiv(Reg(R9d)), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(4), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Cmp(Imm(0), Pseudo(flag.41)), JmpCC(ConcCodeType.E, tmp.282)] Pred: {ENTRY} Suc: {1, 2} iMap: [(AssType: Longword Cmp(Imm(0), Pseudo(flag.41)), set()), (JmpCC(ConcCodeType.E, tmp.282), set())] ReachingCopies: set()
1 1: [Lea(PseudoMem(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d)), Jmp(tmp.288)] Pred: {0} Suc: {3} iMap: [(Lea(PseudoMem(arr.43, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DI)), set()), (Call(get_elem1_ptr), set()), (AssType: Quadword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(R8d)), set()), (Jmp(tmp.288), set())] ReachingCopies: set()
2 2: [Label(tmp.282), Lea(PseudoMem(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d))] Pred: {0} Suc: {3} iMap: [(Label(tmp.282), set()), (Lea(PseudoMem(arr.43, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DI)), set()), (Call(get_elem2_ptr), set()), (AssType: Quadword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(R8d)), set())] ReachingCopies: set()
3 3: [Label(tmp.288), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Pseudo(four.42), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Reg(R9d)), AssType: Longword Mov(Reg(AX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {1, 2} Suc: {EXIT} iMap: [(Label(tmp.288), set()), (AssType: Longword Mov(Imm(2), Reg(R9d)), set()), (AssType: Longword Unary(Neg, Reg(R9d)), set()), (AssType: Longword Mov(Pseudo(four.42), Reg(AX)), set()), (AssType: {self.assType} Cdq, set()), (AssType: Longword Idiv(Reg(R9d)), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (Lea(Indexed(AX + DX * 4), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(4), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {3}
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(4), Reg(R9d)) set()
AssType: Longword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 4), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R8d), Reg(R9d)}
AssType: Longword Idiv(Reg(R9d)) {Reg(R8d), Reg(AX)}
AssType: {self.assType} Cdq {Reg(R8d), Reg(DX), Reg(AX), Reg(R9d)}
AssType: Longword Mov(Pseudo(four.42), Reg(AX)) {Reg(R8d), Reg(AX), Reg(R9d)}
AssType: Longword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d), Pseudo(four.42)}
AssType: Longword Mov(Imm(2), Reg(R9d)) {Reg(R8d), Reg(R9d), Pseudo(four.42)}
Label(tmp.288) {Reg(R8d), Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Reg(R8d), Pseudo(four.42)}
--------------LIVE for block 2-------------------
AssType: Quadword Mov(Reg(R9d), Reg(R8d)) {Reg(R8d), Pseudo(four.42)}
AssType: Quadword Mov(Reg(AX), Reg(R9d)) {Reg(R9d), Pseudo(four.42)}
Call(get_elem2_ptr) {Reg(AX), Pseudo(four.42)}
AssType: Quadword Mov(Reg(R9d), Reg(DI)) {Pseudo(four.42), Reg(DI)}
Lea(PseudoMem(arr.43, 0), Reg(R9d)) {Reg(R9d), Pseudo(four.42)}
Label(tmp.282) {Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(four.42)}
--------------LIVE for block 1-------------------
Jmp(tmp.288) {Reg(R8d), Pseudo(four.42)}
AssType: Quadword Mov(Reg(R9d), Reg(R8d)) {Reg(R8d), Pseudo(four.42)}
AssType: Quadword Mov(Reg(AX), Reg(R9d)) {Reg(R9d), Pseudo(four.42)}
Call(get_elem1_ptr) {Reg(AX), Pseudo(four.42)}
AssType: Quadword Mov(Reg(R9d), Reg(DI)) {Pseudo(four.42), Reg(DI)}
Lea(PseudoMem(arr.43, 0), Reg(R9d)) {Reg(R9d), Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(four.42)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.282) {Pseudo(four.42)}
AssType: Longword Cmp(Imm(0), Pseudo(flag.41)) {Pseudo(four.42)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(flag.41), Pseudo(four.42)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a2d0>, <RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8632a690>, <RegisterAllocation.Node object at 0x7f8f8632a510>, <RegisterAllocation.Node object at 0x7f8f8632a180>, <RegisterAllocation.Node object at 0x7f8f8632b230>, <RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86328f50>, <RegisterAllocation.Node object at 0x7f8f8632a690>, <RegisterAllocation.Node object at 0x7f8f8632a510>, <RegisterAllocation.Node object at 0x7f8f8632a180>, <RegisterAllocation.Node object at 0x7f8f8632b230>, <RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a690>, <RegisterAllocation.Node object at 0x7f8f8632a510>, <RegisterAllocation.Node object at 0x7f8f8632a180>, <RegisterAllocation.Node object at 0x7f8f8632b230>, <RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a510>, <RegisterAllocation.Node object at 0x7f8f8632a180>, <RegisterAllocation.Node object at 0x7f8f8632b230>, <RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a180>, <RegisterAllocation.Node object at 0x7f8f8632b230>, <RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632b230>, <RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632a540>, <RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632b380>, <RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632bc50>, <RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632b7d0>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378590>, <RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86308500>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_subtract_complex_expressions: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Cmp(Imm(0), Pseudo(flag.41))                         AssType: Longword Cmp(Imm(0), Pseudo(flag.41))
JmpCC(ConcCodeType.E, tmp.282)                                         JmpCC(ConcCodeType.E, tmp.282)
Lea(PseudoMem(arr.43, 0), Reg(R9d))                                    Lea(PseudoMem(arr.43, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Reg(R9d), Reg(DI))
Call(get_elem1_ptr)                                                    Call(get_elem1_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(R8d))                              AssType: Quadword Mov(Reg(R9d), Reg(R8d))
Jmp(tmp.288)                                                           Jmp(tmp.288)
Label(tmp.282)                                                         Label(tmp.282)
Lea(PseudoMem(arr.43, 0), Reg(R9d))                                    Lea(PseudoMem(arr.43, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(DI))                               AssType: Quadword Mov(Reg(R9d), Reg(DI))
Call(get_elem2_ptr)                                                    Call(get_elem2_ptr)
AssType: Quadword Mov(Reg(AX), Reg(R9d))                               AssType: Quadword Mov(Reg(AX), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(R8d))                              AssType: Quadword Mov(Reg(R9d), Reg(R8d))
Label(tmp.288)                                                         Label(tmp.288)
AssType: Longword Mov(Imm(2), Reg(R9d))                                AssType: Longword Mov(Imm(2), Reg(R9d))
AssType: Longword Unary(Neg, Reg(R9d))                                 AssType: Longword Unary(Neg, Reg(R9d))
AssType: Longword Mov(Pseudo(four.42), Reg(AX))                        AssType: Longword Mov(Pseudo(four.42), Reg(AX))
AssType: {self.assType} Cdq                                            AssType: {self.assType} Cdq
AssType: Longword Idiv(Reg(R9d))                                       AssType: Longword Idiv(Reg(R9d))
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))          SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
Lea(Indexed(AX + DX * 4), Reg(R9d))                                    Lea(Indexed(AX + DX * 4), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R9d))
AssType: Longword Cmp(Imm(4), Reg(R9d))                                AssType: Longword Cmp(Imm(4), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION test_subtract_multi_dimensional
-----------Building INTEGER interference graph.------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)), Lea(PseudoMem(nested_arr.46, 0), Pseudo(tmp.302)), AssType: Quadword Mov(Pseudo(tmp.302), Reg(AX)), Lea(Memory(AX, 24), Pseudo(tmp.306)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Pseudo(tmp.308)), AssType: Quadword Mov(Pseudo(tmp.308), Pseudo(tmp.310)), AssType: Quadword Unary(Neg, Pseudo(tmp.310)), AssType: Quadword Mov(Pseudo(tmp.306), Reg(AX)), AssType: Quadword Mov(Pseudo(tmp.310), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Pseudo(tmp.311)), AssType: Quadword Mov(Pseudo(tmp.311), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.312)), AssType: Longword Cmp(Imm(4), Pseudo(tmp.312)), AssType: Longword Mov(Imm(0), Pseudo(tmp.313)), SetCC(ConcCodeType.E, Pseudo(tmp.313)), AssType: Longword Mov(Pseudo(tmp.313), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)), set()), (AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)), set()), (AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)), set()), (AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)), set()), (AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)), set()), (AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)), set()), (AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)), set()), (AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)), set()), (AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)), set()), (Lea(PseudoMem(nested_arr.46, 0), Pseudo(tmp.302)), set()), (AssType: Quadword Mov(Pseudo(tmp.302), Reg(AX)), set()), (Lea(Memory(AX, 24), Pseudo(tmp.306)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Pseudo(tmp.308)), set()), (AssType: Quadword Mov(Pseudo(tmp.308), Pseudo(tmp.310)), set()), (AssType: Quadword Unary(Neg, Pseudo(tmp.310)), set()), (AssType: Quadword Mov(Pseudo(tmp.306), Reg(AX)), set()), (AssType: Quadword Mov(Pseudo(tmp.310), Reg(DX)), set()), (AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), set()), (Lea(Indexed(AX + DX * 1), Pseudo(tmp.311)), set()), (AssType: Quadword Mov(Pseudo(tmp.311), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.312)), set()), (AssType: Longword Cmp(Imm(4), Pseudo(tmp.312)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.313)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.313)), set()), (AssType: Longword Mov(Pseudo(tmp.313), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Pseudo(tmp.313), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Pseudo(tmp.313)) {Pseudo(tmp.313)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.313)) set()
AssType: Longword Cmp(Imm(4), Pseudo(tmp.312)) set()
AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.312)) {Pseudo(tmp.312)}
AssType: Quadword Mov(Pseudo(tmp.311), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 1), Pseudo(tmp.311)) {Pseudo(tmp.311)}
AssType: Quadword Binary(Mult, Imm(12), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.310), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Pseudo(tmp.306), Reg(AX)) {Pseudo(tmp.310), Reg(AX)}
AssType: Quadword Unary(Neg, Pseudo(tmp.310)) {Pseudo(tmp.306), Pseudo(tmp.310)}
AssType: Quadword Mov(Pseudo(tmp.308), Pseudo(tmp.310)) {Pseudo(tmp.306), Pseudo(tmp.310)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Pseudo(tmp.308)) {Pseudo(tmp.306), Pseudo(tmp.308)}
Lea(Memory(AX, 24), Pseudo(tmp.306)) {Pseudo(index.45), Pseudo(tmp.306)}
AssType: Quadword Mov(Pseudo(tmp.302), Reg(AX)) {Pseudo(index.45), Reg(AX)}
Lea(PseudoMem(nested_arr.46, 0), Pseudo(tmp.302)) {Pseudo(index.45), Pseudo(tmp.302)}
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)) {Pseudo(index.45)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.45)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Pseudo(tmp.310)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.302)
    Pseudo(tmp.302) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.306)
    Pseudo(tmp.306) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.308)
        Pseudo(tmp.310)
Pseudo(tmp.308)
    Pseudo(tmp.308) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.306)
Pseudo(tmp.310)
    Pseudo(tmp.310) spillCost: 0.0 color: None pruned: False
        Pseudo(tmp.306)
        Reg(AX)
Pseudo(tmp.311)
    Pseudo(tmp.311) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.312)
    Pseudo(tmp.312) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.313)
    Pseudo(tmp.313) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.302) Pseudo(tmp.302) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.306) Pseudo(tmp.306) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.308) Pseudo(tmp.308) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.310) Pseudo(tmp.310) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.311) Pseudo(tmp.311) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.312) Pseudo(tmp.312) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.313) Pseudo(tmp.313) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7fe0>, <RegisterAllocation.Node object at 0x7f8f862e7440>, <RegisterAllocation.Node object at 0x7f8f862e5400>, <RegisterAllocation.Node object at 0x7f8f86323800>, <RegisterAllocation.Node object at 0x7f8f86321670>, <RegisterAllocation.Node object at 0x7f8f863234a0>, <RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e7fe0>, <RegisterAllocation.Node object at 0x7f8f862e5400>, <RegisterAllocation.Node object at 0x7f8f86323800>, <RegisterAllocation.Node object at 0x7f8f86321670>, <RegisterAllocation.Node object at 0x7f8f863234a0>, <RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862e5400>, <RegisterAllocation.Node object at 0x7f8f86323800>, <RegisterAllocation.Node object at 0x7f8f86321670>, <RegisterAllocation.Node object at 0x7f8f863234a0>, <RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86323800>, <RegisterAllocation.Node object at 0x7f8f86321670>, <RegisterAllocation.Node object at 0x7f8f863234a0>, <RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86321670>, <RegisterAllocation.Node object at 0x7f8f863234a0>, <RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863234a0>, <RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86320680>, <RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86322150>, <RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635cc80>, <RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635d340>, <RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635eab0>, <RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635c6e0>, <RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bfe0>, <RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631a810>, <RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631ad50>, <RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86319eb0>, <RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631b1a0>, <RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8631bb90>, <RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86302510>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.302) Pseudo(tmp.302) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.306) Pseudo(tmp.306) spillCost: 2.0 color: 2 pruned: False
Pseudo(tmp.308) Pseudo(tmp.308) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.310) Pseudo(tmp.310) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.311) Pseudo(tmp.311) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.312) Pseudo(tmp.312) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.313) Pseudo(tmp.313) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for test_subtract_multi_dimensional: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.302): Reg(R9d), Pseudo(tmp.306): Reg(R8d), Pseudo(tmp.308): Reg(R9d), Pseudo(tmp.310): Reg(R9d), Pseudo(tmp.311): Reg(R9d), Pseudo(tmp.312): Reg(R9d), Pseudo(tmp.313): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0))             AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0))
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4))             AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4))
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8))             AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8))
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12))            AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12))
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16))            AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16))
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20))            AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20))
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24))            AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24))
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28))            AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28))
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32))            AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32))
Lea(PseudoMem(nested_arr.46, 0), Reg(R9d))                             Lea(PseudoMem(nested_arr.46, 0), Pseudo(tmp.302))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Pseudo(tmp.302), Reg(AX))
Lea(Memory(AX, 24), Reg(R8d))                                          Lea(Memory(AX, 24), Pseudo(tmp.306))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Pseudo(tmp.308))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Mov(Pseudo(tmp.308), Pseudo(tmp.310))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Unary(Neg, Pseudo(tmp.310))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Pseudo(tmp.306), Reg(AX))
AssType: Quadword Binary(Mult, Imm(12), Reg(DX))                       AssType: Quadword Mov(Pseudo(tmp.310), Reg(DX))
Lea(Indexed(AX + DX * 1), Reg(R9d))                                    AssType: Quadword Binary(Mult, Imm(12), Reg(DX))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               Lea(Indexed(AX + DX * 1), Pseudo(tmp.311))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Quadword Mov(Pseudo(tmp.311), Reg(AX))
AssType: Longword Cmp(Imm(4), Reg(R9d))                                AssType: Longword Mov(Memory(AX, 0), Pseudo(tmp.312))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(4), Pseudo(tmp.312))
SetCC(ConcCodeType.E, Reg(R9d))                                        AssType: Longword Mov(Imm(0), Pseudo(tmp.313))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               SetCC(ConcCodeType.E, Pseudo(tmp.313))
ret                                                                    AssType: Longword Mov(Pseudo(tmp.313), Reg(AX))
-----------Building DOUBLE interference graph.------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0))
-------------LABELS-----------------
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)), AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)), AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)), AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)), AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)), AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)), AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)), AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)), AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)), Lea(PseudoMem(nested_arr.46, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 24), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret] Pred: {ENTRY} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)), set()), (AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)), set()), (AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)), set()), (AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)), set()), (AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)), set()), (AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)), set()), (AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)), set()), (AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)), set()), (AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)), set()), (Lea(PseudoMem(nested_arr.46, 0), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (Lea(Memory(AX, 24), Reg(R8d)), set()), (SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Reg(R9d)), set()), (AssType: Quadword Unary(Neg, Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R8d), Reg(AX)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(DX)), set()), (AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), set()), (Lea(Indexed(AX + DX * 1), Reg(R9d)), set()), (AssType: Quadword Mov(Reg(R9d), Reg(AX)), set()), (AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(4), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Mov(Reg(R9d), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {0}
--------------LIVE for block 0-------------------
ret {Reg(AX)}
AssType: Longword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(4), Reg(R9d)) set()
AssType: Longword Mov(Memory(AX, 0), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Reg(AX)}
Lea(Indexed(AX + DX * 1), Reg(R9d)) {Reg(R9d)}
AssType: Quadword Binary(Mult, Imm(12), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R9d), Reg(DX)) {Reg(AX), Reg(DX)}
AssType: Quadword Mov(Reg(R8d), Reg(AX)) {Reg(AX), Reg(R9d)}
AssType: Quadword Unary(Neg, Reg(R9d)) {Reg(R8d), Reg(R9d)}
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Reg(R9d)) {Reg(R8d), Reg(R9d)}
Lea(Memory(AX, 24), Reg(R8d)) {Reg(R8d), Pseudo(index.45)}
AssType: Quadword Mov(Reg(R9d), Reg(AX)) {Pseudo(index.45), Reg(AX)}
Lea(PseudoMem(nested_arr.46, 0), Reg(R9d)) {Pseudo(index.45), Reg(R9d)}
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4)) {Pseudo(index.45)}
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0)) {Pseudo(index.45)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(index.45)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8632b770>, <RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86335c70>, <RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86339610>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863359d0>, <RegisterAllocation.Node object at 0x7f8f86335c70>, <RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86339610>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86335c70>, <RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86339610>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86337c20>, <RegisterAllocation.Node object at 0x7f8f86339610>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86339610>, <RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863399a0>, <RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86343620>, <RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86341400>, <RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86342e10>, <RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862efec0>, <RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ed460>, <RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862ef320>, <RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8639d820>, <RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8645aea0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for test_subtract_multi_dimensional: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0))             AssType: Longword Mov(Imm(1), PseudoMem(nested_arr.46, 0))
AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4))             AssType: Longword Mov(Imm(2), PseudoMem(nested_arr.46, 4))
AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8))             AssType: Longword Mov(Imm(3), PseudoMem(nested_arr.46, 8))
AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12))            AssType: Longword Mov(Imm(4), PseudoMem(nested_arr.46, 12))
AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16))            AssType: Longword Mov(Imm(5), PseudoMem(nested_arr.46, 16))
AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20))            AssType: Longword Mov(Imm(6), PseudoMem(nested_arr.46, 20))
AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24))            AssType: Longword Mov(Imm(7), PseudoMem(nested_arr.46, 24))
AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28))            AssType: Longword Mov(Imm(8), PseudoMem(nested_arr.46, 28))
AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32))            AssType: Longword Mov(Imm(9), PseudoMem(nested_arr.46, 32))
Lea(PseudoMem(nested_arr.46, 0), Reg(R9d))                             Lea(PseudoMem(nested_arr.46, 0), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
Lea(Memory(AX, 24), Reg(R8d))                                          Lea(Memory(AX, 24), Reg(R8d))
SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Reg(R9d))  SrcType: Longword DstType: Quadword MovSX(Pseudo(index.45), Reg(R9d))
AssType: Quadword Unary(Neg, Reg(R9d))                                 AssType: Quadword Unary(Neg, Reg(R9d))
AssType: Quadword Mov(Reg(R8d), Reg(AX))                               AssType: Quadword Mov(Reg(R8d), Reg(AX))
AssType: Quadword Mov(Reg(R9d), Reg(DX))                               AssType: Quadword Mov(Reg(R9d), Reg(DX))
AssType: Quadword Binary(Mult, Imm(12), Reg(DX))                       AssType: Quadword Binary(Mult, Imm(12), Reg(DX))
Lea(Indexed(AX + DX * 1), Reg(R9d))                                    Lea(Indexed(AX + DX * 1), Reg(R9d))
AssType: Quadword Mov(Reg(R9d), Reg(AX))                               AssType: Quadword Mov(Reg(R9d), Reg(AX))
AssType: Longword Mov(Memory(AX, 0), Reg(R9d))                         AssType: Longword Mov(Memory(AX, 0), Reg(R9d))
AssType: Longword Cmp(Imm(4), Reg(R9d))                                AssType: Longword Cmp(Imm(4), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Mov(Reg(R9d), Reg(AX))                               AssType: Longword Mov(Reg(R9d), Reg(AX))
ret                                                                    ret
REGISTER ALLOCATE FUNCTION main
-----------Building INTEGER interference graph.------------------
Call(test_add_constant_to_pointer)
AssType: Longword Mov(Imm(1), Reg(AX))
Label(tmp.317)
AssType: Longword Mov(Imm(2), Reg(AX))
Label(tmp.321)
AssType: Longword Mov(Imm(3), Reg(AX))
Label(tmp.325)
AssType: Longword Mov(Imm(4), Reg(AX))
Label(tmp.329)
AssType: Longword Mov(Imm(5), Reg(AX))
Label(tmp.333)
AssType: Longword Mov(Imm(6), Reg(AX))
Label(tmp.337)
AssType: Longword Mov(Imm(7), Reg(AX))
Label(tmp.341)
AssType: Longword Mov(Imm(8), Reg(AX))
Label(tmp.345)
AssType: Longword Mov(Imm(9), Reg(AX))
Label(tmp.349)
AssType: Longword Mov(Imm(10), Reg(AX))
Label(tmp.353)
AssType: Longword Mov(Imm(11), Reg(AX))
Label(tmp.357)
-------------LABELS-----------------
tmp.317 2: [Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Pseudo(tmp.318)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.318)), AssType: Longword Mov(Imm(0), Pseudo(tmp.319)), SetCC(ConcCodeType.E, Pseudo(tmp.319)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.319)), JmpCC(ConcCodeType.E, tmp.321)] Pred: set() Suc: set() iMap: [(Label(tmp.317), set()), (Call(test_add_negative_index), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.318)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.318)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.319)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.319)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.319)), set()), (JmpCC(ConcCodeType.E, tmp.321), set())] ReachingCopies: set()
tmp.321 4: [Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.322)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.322)), AssType: Longword Mov(Imm(0), Pseudo(tmp.323)), SetCC(ConcCodeType.E, Pseudo(tmp.323)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.323)), JmpCC(ConcCodeType.E, tmp.325)] Pred: set() Suc: set() iMap: [(Label(tmp.321), set()), (Call(test_add_pointer_to_int), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.322)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.322)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.323)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.323)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.323)), set()), (JmpCC(ConcCodeType.E, tmp.325), set())] ReachingCopies: set()
tmp.325 6: [Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Pseudo(tmp.326)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.326)), AssType: Longword Mov(Imm(0), Pseudo(tmp.327)), SetCC(ConcCodeType.E, Pseudo(tmp.327)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.327)), JmpCC(ConcCodeType.E, tmp.329)] Pred: set() Suc: set() iMap: [(Label(tmp.325), set()), (Call(test_add_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.326)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.326)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.327)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.327)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.327)), set()), (JmpCC(ConcCodeType.E, tmp.329), set())] ReachingCopies: set()
tmp.329 8: [Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Pseudo(tmp.330)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.330)), AssType: Longword Mov(Imm(0), Pseudo(tmp.331)), SetCC(ConcCodeType.E, Pseudo(tmp.331)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.331)), JmpCC(ConcCodeType.E, tmp.333)] Pred: set() Suc: set() iMap: [(Label(tmp.329), set()), (Call(test_add_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.330)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.330)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.331)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.331)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.331)), set()), (JmpCC(ConcCodeType.E, tmp.333), set())] ReachingCopies: set()
tmp.333 10: [Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Pseudo(tmp.334)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.334)), AssType: Longword Mov(Imm(0), Pseudo(tmp.335)), SetCC(ConcCodeType.E, Pseudo(tmp.335)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.335)), JmpCC(ConcCodeType.E, tmp.337)] Pred: set() Suc: set() iMap: [(Label(tmp.333), set()), (Call(test_add_multi_dimensional), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.334)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.334)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.335)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.335)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.335)), set()), (JmpCC(ConcCodeType.E, tmp.337), set())] ReachingCopies: set()
tmp.337 12: [Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.338)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.338)), AssType: Longword Mov(Imm(0), Pseudo(tmp.339)), SetCC(ConcCodeType.E, Pseudo(tmp.339)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.339)), JmpCC(ConcCodeType.E, tmp.341)] Pred: set() Suc: set() iMap: [(Label(tmp.337), set()), (Call(test_add_to_subarray_pointer), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.338)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.338)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.339)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.339)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.339)), set()), (JmpCC(ConcCodeType.E, tmp.341), set())] ReachingCopies: set()
tmp.341 14: [Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.342)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.342)), AssType: Longword Mov(Imm(0), Pseudo(tmp.343)), SetCC(ConcCodeType.E, Pseudo(tmp.343)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.343)), JmpCC(ConcCodeType.E, tmp.345)] Pred: set() Suc: set() iMap: [(Label(tmp.341), set()), (Call(test_subtract_from_pointer), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.342)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.342)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.343)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.343)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.343)), set()), (JmpCC(ConcCodeType.E, tmp.345), set())] ReachingCopies: set()
tmp.345 16: [Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Pseudo(tmp.346)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.346)), AssType: Longword Mov(Imm(0), Pseudo(tmp.347)), SetCC(ConcCodeType.E, Pseudo(tmp.347)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.347)), JmpCC(ConcCodeType.E, tmp.349)] Pred: set() Suc: set() iMap: [(Label(tmp.345), set()), (Call(test_subtract_negative_index), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.346)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.346)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.347)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.347)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.347)), set()), (JmpCC(ConcCodeType.E, tmp.349), set())] ReachingCopies: set()
tmp.349 18: [Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Pseudo(tmp.350)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.350)), AssType: Longword Mov(Imm(0), Pseudo(tmp.351)), SetCC(ConcCodeType.E, Pseudo(tmp.351)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.351)), JmpCC(ConcCodeType.E, tmp.353)] Pred: set() Suc: set() iMap: [(Label(tmp.349), set()), (Call(test_subtract_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.350)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.350)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.351)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.351)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.351)), set()), (JmpCC(ConcCodeType.E, tmp.353), set())] ReachingCopies: set()
tmp.353 20: [Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Pseudo(tmp.354)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.354)), AssType: Longword Mov(Imm(0), Pseudo(tmp.355)), SetCC(ConcCodeType.E, Pseudo(tmp.355)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.355)), JmpCC(ConcCodeType.E, tmp.357)] Pred: set() Suc: set() iMap: [(Label(tmp.353), set()), (Call(test_subtract_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.354)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.354)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.355)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.355)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.355)), set()), (JmpCC(ConcCodeType.E, tmp.357), set())] ReachingCopies: set()
tmp.357 22: [Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.357), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(test_add_constant_to_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.314)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.314)), AssType: Longword Mov(Imm(0), Pseudo(tmp.315)), SetCC(ConcCodeType.E, Pseudo(tmp.315)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.315)), JmpCC(ConcCodeType.E, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: [(Call(test_add_constant_to_pointer), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.314)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.314)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.315)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.315)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.315)), set()), (JmpCC(ConcCodeType.E, tmp.317), set())] ReachingCopies: set()
1 1: [AssType: Longword Mov(Imm(1), Reg(AX)), ret] Pred: {0} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
2 2: [Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Pseudo(tmp.318)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.318)), AssType: Longword Mov(Imm(0), Pseudo(tmp.319)), SetCC(ConcCodeType.E, Pseudo(tmp.319)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.319)), JmpCC(ConcCodeType.E, tmp.321)] Pred: {0} Suc: {3, 4} iMap: [(Label(tmp.317), set()), (Call(test_add_negative_index), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.318)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.318)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.319)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.319)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.319)), set()), (JmpCC(ConcCodeType.E, tmp.321), set())] ReachingCopies: set()
3 3: [AssType: Longword Mov(Imm(2), Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(2), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
4 4: [Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Pseudo(tmp.322)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.322)), AssType: Longword Mov(Imm(0), Pseudo(tmp.323)), SetCC(ConcCodeType.E, Pseudo(tmp.323)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.323)), JmpCC(ConcCodeType.E, tmp.325)] Pred: {2} Suc: {5, 6} iMap: [(Label(tmp.321), set()), (Call(test_add_pointer_to_int), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.322)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.322)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.323)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.323)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.323)), set()), (JmpCC(ConcCodeType.E, tmp.325), set())] ReachingCopies: set()
5 5: [AssType: Longword Mov(Imm(3), Reg(AX)), ret] Pred: {4} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(3), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
6 6: [Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Pseudo(tmp.326)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.326)), AssType: Longword Mov(Imm(0), Pseudo(tmp.327)), SetCC(ConcCodeType.E, Pseudo(tmp.327)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.327)), JmpCC(ConcCodeType.E, tmp.329)] Pred: {4} Suc: {8, 7} iMap: [(Label(tmp.325), set()), (Call(test_add_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.326)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.326)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.327)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.327)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.327)), set()), (JmpCC(ConcCodeType.E, tmp.329), set())] ReachingCopies: set()
7 7: [AssType: Longword Mov(Imm(4), Reg(AX)), ret] Pred: {6} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(4), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
8 8: [Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Pseudo(tmp.330)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.330)), AssType: Longword Mov(Imm(0), Pseudo(tmp.331)), SetCC(ConcCodeType.E, Pseudo(tmp.331)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.331)), JmpCC(ConcCodeType.E, tmp.333)] Pred: {6} Suc: {9, 10} iMap: [(Label(tmp.329), set()), (Call(test_add_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.330)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.330)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.331)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.331)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.331)), set()), (JmpCC(ConcCodeType.E, tmp.333), set())] ReachingCopies: set()
9 9: [AssType: Longword Mov(Imm(5), Reg(AX)), ret] Pred: {8} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(5), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
10 10: [Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Pseudo(tmp.334)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.334)), AssType: Longword Mov(Imm(0), Pseudo(tmp.335)), SetCC(ConcCodeType.E, Pseudo(tmp.335)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.335)), JmpCC(ConcCodeType.E, tmp.337)] Pred: {8} Suc: {11, 12} iMap: [(Label(tmp.333), set()), (Call(test_add_multi_dimensional), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.334)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.334)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.335)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.335)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.335)), set()), (JmpCC(ConcCodeType.E, tmp.337), set())] ReachingCopies: set()
11 11: [AssType: Longword Mov(Imm(6), Reg(AX)), ret] Pred: {10} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(6), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
12 12: [Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.338)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.338)), AssType: Longword Mov(Imm(0), Pseudo(tmp.339)), SetCC(ConcCodeType.E, Pseudo(tmp.339)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.339)), JmpCC(ConcCodeType.E, tmp.341)] Pred: {10} Suc: {13, 14} iMap: [(Label(tmp.337), set()), (Call(test_add_to_subarray_pointer), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.338)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.338)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.339)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.339)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.339)), set()), (JmpCC(ConcCodeType.E, tmp.341), set())] ReachingCopies: set()
13 13: [AssType: Longword Mov(Imm(7), Reg(AX)), ret] Pred: {12} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(7), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
14 14: [Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Pseudo(tmp.342)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.342)), AssType: Longword Mov(Imm(0), Pseudo(tmp.343)), SetCC(ConcCodeType.E, Pseudo(tmp.343)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.343)), JmpCC(ConcCodeType.E, tmp.345)] Pred: {12} Suc: {16, 15} iMap: [(Label(tmp.341), set()), (Call(test_subtract_from_pointer), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.342)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.342)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.343)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.343)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.343)), set()), (JmpCC(ConcCodeType.E, tmp.345), set())] ReachingCopies: set()
15 15: [AssType: Longword Mov(Imm(8), Reg(AX)), ret] Pred: {14} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(8), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
16 16: [Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Pseudo(tmp.346)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.346)), AssType: Longword Mov(Imm(0), Pseudo(tmp.347)), SetCC(ConcCodeType.E, Pseudo(tmp.347)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.347)), JmpCC(ConcCodeType.E, tmp.349)] Pred: {14} Suc: {17, 18} iMap: [(Label(tmp.345), set()), (Call(test_subtract_negative_index), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.346)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.346)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.347)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.347)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.347)), set()), (JmpCC(ConcCodeType.E, tmp.349), set())] ReachingCopies: set()
17 17: [AssType: Longword Mov(Imm(9), Reg(AX)), ret] Pred: {16} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(9), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
18 18: [Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Pseudo(tmp.350)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.350)), AssType: Longword Mov(Imm(0), Pseudo(tmp.351)), SetCC(ConcCodeType.E, Pseudo(tmp.351)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.351)), JmpCC(ConcCodeType.E, tmp.353)] Pred: {16} Suc: {19, 20} iMap: [(Label(tmp.349), set()), (Call(test_subtract_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.350)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.350)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.351)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.351)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.351)), set()), (JmpCC(ConcCodeType.E, tmp.353), set())] ReachingCopies: set()
19 19: [AssType: Longword Mov(Imm(10), Reg(AX)), ret] Pred: {18} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(10), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
20 20: [Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Pseudo(tmp.354)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.354)), AssType: Longword Mov(Imm(0), Pseudo(tmp.355)), SetCC(ConcCodeType.E, Pseudo(tmp.355)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.355)), JmpCC(ConcCodeType.E, tmp.357)] Pred: {18} Suc: {21, 22} iMap: [(Label(tmp.353), set()), (Call(test_subtract_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Pseudo(tmp.354)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.354)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.355)), set()), (SetCC(ConcCodeType.E, Pseudo(tmp.355)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.355)), set()), (JmpCC(ConcCodeType.E, tmp.357), set())] ReachingCopies: set()
21 21: [AssType: Longword Mov(Imm(11), Reg(AX)), ret] Pred: {20} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(11), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
22 22: [Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {20} Suc: {EXIT} iMap: [(Label(tmp.357), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------LIVE for block 22-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Label(tmp.357) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 21-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(11), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 20-------------------
JmpCC(ConcCodeType.E, tmp.357) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.355)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.355)) {Pseudo(tmp.355)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.355)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.354)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.354)) {Pseudo(tmp.354)}
Call(test_subtract_complex_expressions) {Reg(AX)}
Label(tmp.353) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 19-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(10), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 18-------------------
JmpCC(ConcCodeType.E, tmp.353) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.351)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.351)) {Pseudo(tmp.351)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.351)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.350)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.350)) {Pseudo(tmp.350)}
Call(test_subtract_different_index_types) {Reg(AX)}
Label(tmp.349) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 17-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(9), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 16-------------------
JmpCC(ConcCodeType.E, tmp.349) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.347)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.347)) {Pseudo(tmp.347)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.347)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.346)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.346)) {Pseudo(tmp.346)}
Call(test_subtract_negative_index) {Reg(AX)}
Label(tmp.345) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 15-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(8), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 14-------------------
JmpCC(ConcCodeType.E, tmp.345) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.343)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.343)) {Pseudo(tmp.343)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.343)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.342)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.342)) {Pseudo(tmp.342)}
Call(test_subtract_from_pointer) {Reg(AX)}
Label(tmp.341) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 13-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(7), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 12-------------------
JmpCC(ConcCodeType.E, tmp.341) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.339)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.339)) {Pseudo(tmp.339)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.339)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.338)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.338)) {Pseudo(tmp.338)}
Call(test_add_to_subarray_pointer) {Reg(AX)}
Label(tmp.337) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 11-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(6), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 10-------------------
JmpCC(ConcCodeType.E, tmp.337) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.335)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.335)) {Pseudo(tmp.335)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.335)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.334)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.334)) {Pseudo(tmp.334)}
Call(test_add_multi_dimensional) {Reg(AX)}
Label(tmp.333) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 9-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(5), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.333) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.331)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.331)) {Pseudo(tmp.331)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.331)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.330)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.330)) {Pseudo(tmp.330)}
Call(test_add_complex_expressions) {Reg(AX)}
Label(tmp.329) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 7-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(4), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 6-------------------
JmpCC(ConcCodeType.E, tmp.329) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.327)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.327)) {Pseudo(tmp.327)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.327)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.326)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.326)) {Pseudo(tmp.326)}
Call(test_add_different_index_types) {Reg(AX)}
Label(tmp.325) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 5-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(3), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.325) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.323)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.323)) {Pseudo(tmp.323)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.323)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.322)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.322)) {Pseudo(tmp.322)}
Call(test_add_pointer_to_int) {Reg(AX)}
Label(tmp.321) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(2), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.321) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.319)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.319)) {Pseudo(tmp.319)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.319)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.318)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.318)) {Pseudo(tmp.318)}
Call(test_add_negative_index) {Reg(AX)}
Label(tmp.317) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 1-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.317) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.315)) set()
SetCC(ConcCodeType.E, Pseudo(tmp.315)) {Pseudo(tmp.315)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.315)) set()
AssType: Longword Cmp(Imm(0), Pseudo(tmp.314)) set()
AssType: Longword Mov(Reg(AX), Pseudo(tmp.314)) {Pseudo(tmp.314)}
Call(test_add_constant_to_pointer) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(R9d)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(R12d)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(R15d)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(DX)
        Reg(R15d)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
        Reg(R15d)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(R8d)
        Reg(BX)
        Reg(DI)
        Reg(R12d)
        Reg(R14d)
        Reg(AX)
        Reg(CX)
        Reg(R9d)
        Reg(SI)
        Reg(R13d)
        Reg(DX)
Pseudo(tmp.314)
    Pseudo(tmp.314) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.315)
    Pseudo(tmp.315) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.318)
    Pseudo(tmp.318) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.319)
    Pseudo(tmp.319) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.322)
    Pseudo(tmp.322) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.323)
    Pseudo(tmp.323) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.326)
    Pseudo(tmp.326) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.327)
    Pseudo(tmp.327) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.330)
    Pseudo(tmp.330) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.331)
    Pseudo(tmp.331) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.334)
    Pseudo(tmp.334) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.335)
    Pseudo(tmp.335) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.338)
    Pseudo(tmp.338) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.339)
    Pseudo(tmp.339) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.342)
    Pseudo(tmp.342) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.343)
    Pseudo(tmp.343) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.346)
    Pseudo(tmp.346) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.347)
    Pseudo(tmp.347) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.350)
    Pseudo(tmp.350) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.351)
    Pseudo(tmp.351) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.354)
    Pseudo(tmp.354) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.355)
    Pseudo(tmp.355) spillCost: 0.0 color: None pruned: False
----------------ADD SPILL COSTS INTEGER.-------------------
Reg(AX) Reg(AX) spillCost: inf color: None pruned: False
Reg(BX) Reg(BX) spillCost: inf color: None pruned: False
Reg(CX) Reg(CX) spillCost: inf color: None pruned: False
Reg(DX) Reg(DX) spillCost: inf color: None pruned: False
Reg(DI) Reg(DI) spillCost: inf color: None pruned: False
Reg(SI) Reg(SI) spillCost: inf color: None pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: None pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: None pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: None pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: None pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: None pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: None pruned: False
Pseudo(tmp.314) Pseudo(tmp.314) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.315) Pseudo(tmp.315) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.318) Pseudo(tmp.318) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.319) Pseudo(tmp.319) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.322) Pseudo(tmp.322) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.323) Pseudo(tmp.323) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.326) Pseudo(tmp.326) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.327) Pseudo(tmp.327) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.330) Pseudo(tmp.330) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.331) Pseudo(tmp.331) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.334) Pseudo(tmp.334) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.335) Pseudo(tmp.335) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.338) Pseudo(tmp.338) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.339) Pseudo(tmp.339) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.342) Pseudo(tmp.342) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.343) Pseudo(tmp.343) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.346) Pseudo(tmp.346) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.347) Pseudo(tmp.347) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.350) Pseudo(tmp.350) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.351) Pseudo(tmp.351) spillCost: 3.0 color: None pruned: False
Pseudo(tmp.354) Pseudo(tmp.354) spillCost: 2.0 color: None pruned: False
Pseudo(tmp.355) Pseudo(tmp.355) spillCost: 3.0 color: None pruned: False
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863469c0>, <RegisterAllocation.Node object at 0x7f8f8630bb90>, <RegisterAllocation.Node object at 0x7f8f863085c0>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86310c20>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8630bb90>, <RegisterAllocation.Node object at 0x7f8f863085c0>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86310c20>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863085c0>, <RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86310c20>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310440>, <RegisterAllocation.Node object at 0x7f8f86310c20>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86310c20>, <RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313230>, <RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86313050>, <RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863102f0>, <RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863129c0>, <RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86311490>, <RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862d6180>, <RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f862f5310>, <RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a060>, <RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189b20>, <RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189ac0>, <RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188380>, <RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861881d0>, <RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a8a0>, <RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188470>, <RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861885f0>, <RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618b020>, <RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189e80>, <RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861891c0>, <RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a6f0>, <RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86189dc0>, <RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618baa0>, <RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861884a0>, <RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618b1a0>, <RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188860>, <RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86188260>, <RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618a3c0>, <RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618ae10>, <RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f861885c0>, <RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8618ac00>]
------------------COLOR GRAPH INTEGER.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
-----------------COLORED INTEGER INTER GRAPH.------------------
Reg(AX) Reg(AX) spillCost: inf color: 7 pruned: False
Reg(BX) Reg(BX) spillCost: inf color: 8 pruned: False
Reg(CX) Reg(CX) spillCost: inf color: 6 pruned: False
Reg(DX) Reg(DX) spillCost: inf color: 5 pruned: False
Reg(DI) Reg(DI) spillCost: inf color: 4 pruned: False
Reg(SI) Reg(SI) spillCost: inf color: 3 pruned: False
Reg(R8d) Reg(R8d) spillCost: inf color: 2 pruned: False
Reg(R9d) Reg(R9d) spillCost: inf color: 1 pruned: False
Reg(R12d) Reg(R12d) spillCost: inf color: 9 pruned: False
Reg(R13d) Reg(R13d) spillCost: inf color: 10 pruned: False
Reg(R14d) Reg(R14d) spillCost: inf color: 11 pruned: False
Reg(R15d) Reg(R15d) spillCost: inf color: 12 pruned: False
Pseudo(tmp.314) Pseudo(tmp.314) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.315) Pseudo(tmp.315) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.318) Pseudo(tmp.318) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.319) Pseudo(tmp.319) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.322) Pseudo(tmp.322) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.323) Pseudo(tmp.323) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.326) Pseudo(tmp.326) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.327) Pseudo(tmp.327) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.330) Pseudo(tmp.330) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.331) Pseudo(tmp.331) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.334) Pseudo(tmp.334) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.335) Pseudo(tmp.335) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.338) Pseudo(tmp.338) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.339) Pseudo(tmp.339) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.342) Pseudo(tmp.342) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.343) Pseudo(tmp.343) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.346) Pseudo(tmp.346) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.347) Pseudo(tmp.347) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.350) Pseudo(tmp.350) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.351) Pseudo(tmp.351) spillCost: 3.0 color: 1 pruned: False
Pseudo(tmp.354) Pseudo(tmp.354) spillCost: 2.0 color: 1 pruned: False
Pseudo(tmp.355) Pseudo(tmp.355) spillCost: 3.0 color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{7: Reg(AX), 8: Reg(BX), 6: Reg(CX), 5: Reg(DX), 4: Reg(DI), 3: Reg(SI), 2: Reg(R8d), 1: Reg(R9d), 9: Reg(R12d), 10: Reg(R13d), 11: Reg(R14d), 12: Reg(R15d)}
Calle Saved Registers for main: set()
------------------REGISTER INTEGER MAP.--------------------
{Pseudo(tmp.314): Reg(R9d), Pseudo(tmp.315): Reg(R9d), Pseudo(tmp.318): Reg(R9d), Pseudo(tmp.319): Reg(R9d), Pseudo(tmp.322): Reg(R9d), Pseudo(tmp.323): Reg(R9d), Pseudo(tmp.326): Reg(R9d), Pseudo(tmp.327): Reg(R9d), Pseudo(tmp.330): Reg(R9d), Pseudo(tmp.331): Reg(R9d), Pseudo(tmp.334): Reg(R9d), Pseudo(tmp.335): Reg(R9d), Pseudo(tmp.338): Reg(R9d), Pseudo(tmp.339): Reg(R9d), Pseudo(tmp.342): Reg(R9d), Pseudo(tmp.343): Reg(R9d), Pseudo(tmp.346): Reg(R9d), Pseudo(tmp.347): Reg(R9d), Pseudo(tmp.350): Reg(R9d), Pseudo(tmp.351): Reg(R9d), Pseudo(tmp.354): Reg(R9d), Pseudo(tmp.355): Reg(R9d)}
------------------REPLACED INTEGER INTRUCTIONS.--------------------
Call(test_add_constant_to_pointer)                                     Call(test_add_constant_to_pointer)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.314))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.314))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.315))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.315))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.315))
JmpCC(ConcCodeType.E, tmp.317)                                         JmpCC(ConcCodeType.E, tmp.317)
AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Mov(Imm(1), Reg(AX))
ret                                                                    ret
Label(tmp.317)                                                         Label(tmp.317)
Call(test_add_negative_index)                                          Call(test_add_negative_index)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.318))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.318))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.319))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.319))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.319))
JmpCC(ConcCodeType.E, tmp.321)                                         JmpCC(ConcCodeType.E, tmp.321)
AssType: Longword Mov(Imm(2), Reg(AX))                                 AssType: Longword Mov(Imm(2), Reg(AX))
ret                                                                    ret
Label(tmp.321)                                                         Label(tmp.321)
Call(test_add_pointer_to_int)                                          Call(test_add_pointer_to_int)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.322))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.322))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.323))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.323))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.323))
JmpCC(ConcCodeType.E, tmp.325)                                         JmpCC(ConcCodeType.E, tmp.325)
AssType: Longword Mov(Imm(3), Reg(AX))                                 AssType: Longword Mov(Imm(3), Reg(AX))
ret                                                                    ret
Label(tmp.325)                                                         Label(tmp.325)
Call(test_add_different_index_types)                                   Call(test_add_different_index_types)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.326))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.326))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.327))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.327))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.327))
JmpCC(ConcCodeType.E, tmp.329)                                         JmpCC(ConcCodeType.E, tmp.329)
AssType: Longword Mov(Imm(4), Reg(AX))                                 AssType: Longword Mov(Imm(4), Reg(AX))
ret                                                                    ret
Label(tmp.329)                                                         Label(tmp.329)
Call(test_add_complex_expressions)                                     Call(test_add_complex_expressions)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.330))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.330))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.331))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.331))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.331))
JmpCC(ConcCodeType.E, tmp.333)                                         JmpCC(ConcCodeType.E, tmp.333)
AssType: Longword Mov(Imm(5), Reg(AX))                                 AssType: Longword Mov(Imm(5), Reg(AX))
ret                                                                    ret
Label(tmp.333)                                                         Label(tmp.333)
Call(test_add_multi_dimensional)                                       Call(test_add_multi_dimensional)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.334))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.334))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.335))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.335))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.335))
JmpCC(ConcCodeType.E, tmp.337)                                         JmpCC(ConcCodeType.E, tmp.337)
AssType: Longword Mov(Imm(6), Reg(AX))                                 AssType: Longword Mov(Imm(6), Reg(AX))
ret                                                                    ret
Label(tmp.337)                                                         Label(tmp.337)
Call(test_add_to_subarray_pointer)                                     Call(test_add_to_subarray_pointer)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.338))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.338))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.339))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.339))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.339))
JmpCC(ConcCodeType.E, tmp.341)                                         JmpCC(ConcCodeType.E, tmp.341)
AssType: Longword Mov(Imm(7), Reg(AX))                                 AssType: Longword Mov(Imm(7), Reg(AX))
ret                                                                    ret
Label(tmp.341)                                                         Label(tmp.341)
Call(test_subtract_from_pointer)                                       Call(test_subtract_from_pointer)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.342))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.342))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.343))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.343))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.343))
JmpCC(ConcCodeType.E, tmp.345)                                         JmpCC(ConcCodeType.E, tmp.345)
AssType: Longword Mov(Imm(8), Reg(AX))                                 AssType: Longword Mov(Imm(8), Reg(AX))
ret                                                                    ret
Label(tmp.345)                                                         Label(tmp.345)
Call(test_subtract_negative_index)                                     Call(test_subtract_negative_index)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.346))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.346))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.347))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.347))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.347))
JmpCC(ConcCodeType.E, tmp.349)                                         JmpCC(ConcCodeType.E, tmp.349)
AssType: Longword Mov(Imm(9), Reg(AX))                                 AssType: Longword Mov(Imm(9), Reg(AX))
ret                                                                    ret
Label(tmp.349)                                                         Label(tmp.349)
Call(test_subtract_different_index_types)                              Call(test_subtract_different_index_types)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.350))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.350))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.351))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.351))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.351))
JmpCC(ConcCodeType.E, tmp.353)                                         JmpCC(ConcCodeType.E, tmp.353)
AssType: Longword Mov(Imm(10), Reg(AX))                                AssType: Longword Mov(Imm(10), Reg(AX))
ret                                                                    ret
Label(tmp.353)                                                         Label(tmp.353)
Call(test_subtract_complex_expressions)                                Call(test_subtract_complex_expressions)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Pseudo(tmp.354))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.354))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Pseudo(tmp.355))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Pseudo(tmp.355))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Pseudo(tmp.355))
JmpCC(ConcCodeType.E, tmp.357)                                         JmpCC(ConcCodeType.E, tmp.357)
AssType: Longword Mov(Imm(11), Reg(AX))                                AssType: Longword Mov(Imm(11), Reg(AX))
ret                                                                    ret
Label(tmp.357)                                                         Label(tmp.357)
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret
-----------Building DOUBLE interference graph.------------------
Call(test_add_constant_to_pointer)
AssType: Longword Mov(Imm(1), Reg(AX))
Label(tmp.317)
AssType: Longword Mov(Imm(2), Reg(AX))
Label(tmp.321)
AssType: Longword Mov(Imm(3), Reg(AX))
Label(tmp.325)
AssType: Longword Mov(Imm(4), Reg(AX))
Label(tmp.329)
AssType: Longword Mov(Imm(5), Reg(AX))
Label(tmp.333)
AssType: Longword Mov(Imm(6), Reg(AX))
Label(tmp.337)
AssType: Longword Mov(Imm(7), Reg(AX))
Label(tmp.341)
AssType: Longword Mov(Imm(8), Reg(AX))
Label(tmp.345)
AssType: Longword Mov(Imm(9), Reg(AX))
Label(tmp.349)
AssType: Longword Mov(Imm(10), Reg(AX))
Label(tmp.353)
AssType: Longword Mov(Imm(11), Reg(AX))
Label(tmp.357)
-------------LABELS-----------------
tmp.317 2: [Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.321)] Pred: set() Suc: set() iMap: [(Label(tmp.317), set()), (Call(test_add_negative_index), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.321), set())] ReachingCopies: set()
tmp.321 4: [Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.325)] Pred: set() Suc: set() iMap: [(Label(tmp.321), set()), (Call(test_add_pointer_to_int), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.325), set())] ReachingCopies: set()
tmp.325 6: [Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.329)] Pred: set() Suc: set() iMap: [(Label(tmp.325), set()), (Call(test_add_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.329), set())] ReachingCopies: set()
tmp.329 8: [Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.333)] Pred: set() Suc: set() iMap: [(Label(tmp.329), set()), (Call(test_add_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.333), set())] ReachingCopies: set()
tmp.333 10: [Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.337)] Pred: set() Suc: set() iMap: [(Label(tmp.333), set()), (Call(test_add_multi_dimensional), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.337), set())] ReachingCopies: set()
tmp.337 12: [Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.341)] Pred: set() Suc: set() iMap: [(Label(tmp.337), set()), (Call(test_add_to_subarray_pointer), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.341), set())] ReachingCopies: set()
tmp.341 14: [Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.345)] Pred: set() Suc: set() iMap: [(Label(tmp.341), set()), (Call(test_subtract_from_pointer), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.345), set())] ReachingCopies: set()
tmp.345 16: [Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.349)] Pred: set() Suc: set() iMap: [(Label(tmp.345), set()), (Call(test_subtract_negative_index), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.349), set())] ReachingCopies: set()
tmp.349 18: [Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.353)] Pred: set() Suc: set() iMap: [(Label(tmp.349), set()), (Call(test_subtract_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.353), set())] ReachingCopies: set()
tmp.353 20: [Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.357)] Pred: set() Suc: set() iMap: [(Label(tmp.353), set()), (Call(test_subtract_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.357), set())] ReachingCopies: set()
tmp.357 22: [Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.357), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [Call(test_add_constant_to_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.317)] Pred: {ENTRY} Suc: {1, 2} iMap: [(Call(test_add_constant_to_pointer), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.317), set())] ReachingCopies: set()
1 1: [AssType: Longword Mov(Imm(1), Reg(AX)), ret] Pred: {0} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(1), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
2 2: [Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.321)] Pred: {0} Suc: {3, 4} iMap: [(Label(tmp.317), set()), (Call(test_add_negative_index), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.321), set())] ReachingCopies: set()
3 3: [AssType: Longword Mov(Imm(2), Reg(AX)), ret] Pred: {2} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(2), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
4 4: [Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.325)] Pred: {2} Suc: {5, 6} iMap: [(Label(tmp.321), set()), (Call(test_add_pointer_to_int), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.325), set())] ReachingCopies: set()
5 5: [AssType: Longword Mov(Imm(3), Reg(AX)), ret] Pred: {4} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(3), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
6 6: [Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.329)] Pred: {4} Suc: {8, 7} iMap: [(Label(tmp.325), set()), (Call(test_add_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.329), set())] ReachingCopies: set()
7 7: [AssType: Longword Mov(Imm(4), Reg(AX)), ret] Pred: {6} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(4), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
8 8: [Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.333)] Pred: {6} Suc: {9, 10} iMap: [(Label(tmp.329), set()), (Call(test_add_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.333), set())] ReachingCopies: set()
9 9: [AssType: Longword Mov(Imm(5), Reg(AX)), ret] Pred: {8} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(5), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
10 10: [Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.337)] Pred: {8} Suc: {11, 12} iMap: [(Label(tmp.333), set()), (Call(test_add_multi_dimensional), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.337), set())] ReachingCopies: set()
11 11: [AssType: Longword Mov(Imm(6), Reg(AX)), ret] Pred: {10} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(6), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
12 12: [Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.341)] Pred: {10} Suc: {13, 14} iMap: [(Label(tmp.337), set()), (Call(test_add_to_subarray_pointer), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.341), set())] ReachingCopies: set()
13 13: [AssType: Longword Mov(Imm(7), Reg(AX)), ret] Pred: {12} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(7), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
14 14: [Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.345)] Pred: {12} Suc: {16, 15} iMap: [(Label(tmp.341), set()), (Call(test_subtract_from_pointer), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.345), set())] ReachingCopies: set()
15 15: [AssType: Longword Mov(Imm(8), Reg(AX)), ret] Pred: {14} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(8), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
16 16: [Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.349)] Pred: {14} Suc: {17, 18} iMap: [(Label(tmp.345), set()), (Call(test_subtract_negative_index), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.349), set())] ReachingCopies: set()
17 17: [AssType: Longword Mov(Imm(9), Reg(AX)), ret] Pred: {16} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(9), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
18 18: [Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.353)] Pred: {16} Suc: {19, 20} iMap: [(Label(tmp.349), set()), (Call(test_subtract_different_index_types), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.353), set())] ReachingCopies: set()
19 19: [AssType: Longword Mov(Imm(10), Reg(AX)), ret] Pred: {18} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(10), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
20 20: [Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.357)] Pred: {18} Suc: {21, 22} iMap: [(Label(tmp.353), set()), (Call(test_subtract_complex_expressions), set()), (AssType: Longword Mov(Reg(AX), Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (AssType: Longword Mov(Imm(0), Reg(R9d)), set()), (SetCC(ConcCodeType.E, Reg(R9d)), set()), (AssType: Longword Cmp(Imm(0), Reg(R9d)), set()), (JmpCC(ConcCodeType.E, tmp.357), set())] ReachingCopies: set()
21 21: [AssType: Longword Mov(Imm(11), Reg(AX)), ret] Pred: {20} Suc: {EXIT} iMap: [(AssType: Longword Mov(Imm(11), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
22 22: [Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret] Pred: {20} Suc: {EXIT} iMap: [(Label(tmp.357), set()), (AssType: Longword Mov(Imm(0), Reg(AX)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22}
--------------LIVE for block 22-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(0), Reg(AX)) {Reg(AX)}
Label(tmp.357) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 21-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(11), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 20-------------------
JmpCC(ConcCodeType.E, tmp.357) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_subtract_complex_expressions) {Reg(AX)}
Label(tmp.353) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 19-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(10), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 18-------------------
JmpCC(ConcCodeType.E, tmp.353) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_subtract_different_index_types) {Reg(AX)}
Label(tmp.349) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 17-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(9), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 16-------------------
JmpCC(ConcCodeType.E, tmp.349) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_subtract_negative_index) {Reg(AX)}
Label(tmp.345) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 15-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(8), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 14-------------------
JmpCC(ConcCodeType.E, tmp.345) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_subtract_from_pointer) {Reg(AX)}
Label(tmp.341) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 13-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(7), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 12-------------------
JmpCC(ConcCodeType.E, tmp.341) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_to_subarray_pointer) {Reg(AX)}
Label(tmp.337) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 11-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(6), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 10-------------------
JmpCC(ConcCodeType.E, tmp.337) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_multi_dimensional) {Reg(AX)}
Label(tmp.333) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 9-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(5), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.333) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_complex_expressions) {Reg(AX)}
Label(tmp.329) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 7-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(4), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 6-------------------
JmpCC(ConcCodeType.E, tmp.329) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_different_index_types) {Reg(AX)}
Label(tmp.325) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 5-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(3), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.325) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_pointer_to_int) {Reg(AX)}
Label(tmp.321) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 3-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(2), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 2-------------------
JmpCC(ConcCodeType.E, tmp.321) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_negative_index) {Reg(AX)}
Label(tmp.317) set()
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 1-------------------
ret {Reg(AX)}
AssType: Longword Mov(Imm(1), Reg(AX)) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.317) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
SetCC(ConcCodeType.E, Reg(R9d)) {Reg(R9d)}
AssType: Longword Mov(Imm(0), Reg(R9d)) set()
AssType: Longword Cmp(Imm(0), Reg(R9d)) set()
AssType: Longword Mov(Reg(AX), Reg(R9d)) {Reg(R9d)}
Call(test_add_constant_to_pointer) {Reg(AX)}
OLD ANNOT: set()
NEW ANNOT: set()
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM6)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM13)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM2)
        Reg(XMM6)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM10)
        Reg(XMM9)
        Reg(XMM5)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM4)
        Reg(XMM7)
        Reg(XMM11)
        Reg(XMM12)
        Reg(XMM2)
        Reg(XMM6)
----------------ADD SPILL COSTS DOUBLE.-------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: None pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: None pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: None pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: None pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: None pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: None pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: None pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: None pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: None pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: None pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: None pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: None pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: None pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: None pruned: False
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863583b0>, <RegisterAllocation.Node object at 0x7f8f86358aa0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f8635a120>, <RegisterAllocation.Node object at 0x7f8f86358b00>, <RegisterAllocation.Node object at 0x7f8f8635a930>, <RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86358aa0>, <RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f8635a120>, <RegisterAllocation.Node object at 0x7f8f86358b00>, <RegisterAllocation.Node object at 0x7f8f8635a930>, <RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635b9e0>, <RegisterAllocation.Node object at 0x7f8f8635a120>, <RegisterAllocation.Node object at 0x7f8f86358b00>, <RegisterAllocation.Node object at 0x7f8f8635a930>, <RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635a120>, <RegisterAllocation.Node object at 0x7f8f86358b00>, <RegisterAllocation.Node object at 0x7f8f8635a930>, <RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86358b00>, <RegisterAllocation.Node object at 0x7f8f8635a930>, <RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635a930>, <RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8635a1b0>, <RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86341a90>, <RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86343b00>, <RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86378d10>, <RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86379130>, <RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f8633bcb0>, <RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f86339e80>, <RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: [<RegisterAllocation.Node object at 0x7f8f863457c0>]
------------------COLOR GRAPH DOUBLE.---------------------
Reamining Nodes: []
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}
-----------------COLORED DOUBLE INTER GRAPH.------------------
Reg(XMM0) Reg(XMM0) spillCost: inf color: 14 pruned: False
Reg(XMM1) Reg(XMM1) spillCost: inf color: 13 pruned: False
Reg(XMM2) Reg(XMM2) spillCost: inf color: 12 pruned: False
Reg(XMM3) Reg(XMM3) spillCost: inf color: 11 pruned: False
Reg(XMM4) Reg(XMM4) spillCost: inf color: 10 pruned: False
Reg(XMM5) Reg(XMM5) spillCost: inf color: 9 pruned: False
Reg(XMM6) Reg(XMM6) spillCost: inf color: 8 pruned: False
Reg(XMM7) Reg(XMM7) spillCost: inf color: 7 pruned: False
Reg(XMM8) Reg(XMM8) spillCost: inf color: 6 pruned: False
Reg(XMM9) Reg(XMM9) spillCost: inf color: 5 pruned: False
Reg(XMM10) Reg(XMM10) spillCost: inf color: 4 pruned: False
Reg(XMM11) Reg(XMM11) spillCost: inf color: 3 pruned: False
Reg(XMM12) Reg(XMM12) spillCost: inf color: 2 pruned: False
Reg(XMM13) Reg(XMM13) spillCost: inf color: 1 pruned: False
---------------CREATE REGISTER MAP.-------------------
{14: Reg(XMM0), 13: Reg(XMM1), 12: Reg(XMM2), 11: Reg(XMM3), 10: Reg(XMM4), 9: Reg(XMM5), 8: Reg(XMM6), 7: Reg(XMM7), 6: Reg(XMM8), 5: Reg(XMM9), 4: Reg(XMM10), 3: Reg(XMM11), 2: Reg(XMM12), 1: Reg(XMM13)}
Calle Saved Registers for main: set()
------------------REGISTER DOUBLE MAP.--------------------
{}
------------------REPLACED DOUBLE INTRUCTIONS.--------------------
Call(test_add_constant_to_pointer)                                     Call(test_add_constant_to_pointer)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.317)                                         JmpCC(ConcCodeType.E, tmp.317)
AssType: Longword Mov(Imm(1), Reg(AX))                                 AssType: Longword Mov(Imm(1), Reg(AX))
ret                                                                    ret
Label(tmp.317)                                                         Label(tmp.317)
Call(test_add_negative_index)                                          Call(test_add_negative_index)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.321)                                         JmpCC(ConcCodeType.E, tmp.321)
AssType: Longword Mov(Imm(2), Reg(AX))                                 AssType: Longword Mov(Imm(2), Reg(AX))
ret                                                                    ret
Label(tmp.321)                                                         Label(tmp.321)
Call(test_add_pointer_to_int)                                          Call(test_add_pointer_to_int)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.325)                                         JmpCC(ConcCodeType.E, tmp.325)
AssType: Longword Mov(Imm(3), Reg(AX))                                 AssType: Longword Mov(Imm(3), Reg(AX))
ret                                                                    ret
Label(tmp.325)                                                         Label(tmp.325)
Call(test_add_different_index_types)                                   Call(test_add_different_index_types)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.329)                                         JmpCC(ConcCodeType.E, tmp.329)
AssType: Longword Mov(Imm(4), Reg(AX))                                 AssType: Longword Mov(Imm(4), Reg(AX))
ret                                                                    ret
Label(tmp.329)                                                         Label(tmp.329)
Call(test_add_complex_expressions)                                     Call(test_add_complex_expressions)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.333)                                         JmpCC(ConcCodeType.E, tmp.333)
AssType: Longword Mov(Imm(5), Reg(AX))                                 AssType: Longword Mov(Imm(5), Reg(AX))
ret                                                                    ret
Label(tmp.333)                                                         Label(tmp.333)
Call(test_add_multi_dimensional)                                       Call(test_add_multi_dimensional)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.337)                                         JmpCC(ConcCodeType.E, tmp.337)
AssType: Longword Mov(Imm(6), Reg(AX))                                 AssType: Longword Mov(Imm(6), Reg(AX))
ret                                                                    ret
Label(tmp.337)                                                         Label(tmp.337)
Call(test_add_to_subarray_pointer)                                     Call(test_add_to_subarray_pointer)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.341)                                         JmpCC(ConcCodeType.E, tmp.341)
AssType: Longword Mov(Imm(7), Reg(AX))                                 AssType: Longword Mov(Imm(7), Reg(AX))
ret                                                                    ret
Label(tmp.341)                                                         Label(tmp.341)
Call(test_subtract_from_pointer)                                       Call(test_subtract_from_pointer)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.345)                                         JmpCC(ConcCodeType.E, tmp.345)
AssType: Longword Mov(Imm(8), Reg(AX))                                 AssType: Longword Mov(Imm(8), Reg(AX))
ret                                                                    ret
Label(tmp.345)                                                         Label(tmp.345)
Call(test_subtract_negative_index)                                     Call(test_subtract_negative_index)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.349)                                         JmpCC(ConcCodeType.E, tmp.349)
AssType: Longword Mov(Imm(9), Reg(AX))                                 AssType: Longword Mov(Imm(9), Reg(AX))
ret                                                                    ret
Label(tmp.349)                                                         Label(tmp.349)
Call(test_subtract_different_index_types)                              Call(test_subtract_different_index_types)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.353)                                         JmpCC(ConcCodeType.E, tmp.353)
AssType: Longword Mov(Imm(10), Reg(AX))                                AssType: Longword Mov(Imm(10), Reg(AX))
ret                                                                    ret
Label(tmp.353)                                                         Label(tmp.353)
Call(test_subtract_complex_expressions)                                Call(test_subtract_complex_expressions)
AssType: Longword Mov(Reg(AX), Reg(R9d))                               AssType: Longword Mov(Reg(AX), Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
AssType: Longword Mov(Imm(0), Reg(R9d))                                AssType: Longword Mov(Imm(0), Reg(R9d))
SetCC(ConcCodeType.E, Reg(R9d))                                        SetCC(ConcCodeType.E, Reg(R9d))
AssType: Longword Cmp(Imm(0), Reg(R9d))                                AssType: Longword Cmp(Imm(0), Reg(R9d))
JmpCC(ConcCodeType.E, tmp.357)                                         JmpCC(ConcCodeType.E, tmp.357)
AssType: Longword Mov(Imm(11), Reg(AX))                                AssType: Longword Mov(Imm(11), Reg(AX))
ret                                                                    ret
Label(tmp.357)                                                         Label(tmp.357)
AssType: Longword Mov(Imm(0), Reg(AX))                                 AssType: Longword Mov(Imm(0), Reg(AX))
ret                                                                    ret
ASM Program: [Function test_add_constant_to_pointer stackOffset: -96 global: True instructions:[AssType: Quadword Mov(Imm(0), Memory(BP, -96)), AssType: Quadword Mov(Imm(0), Memory(BP, -88)), AssType: Quadword Mov(Imm(3), Memory(BP, -80)), AssType: Quadword Mov(Imm(0), Memory(BP, -72)), AssType: Quadword Mov(Imm(0), Memory(BP, -64)), AssType: Quadword Mov(Imm(0), Memory(BP, -56)), AssType: Quadword Mov(Imm(0), Memory(BP, -48)), AssType: Quadword Mov(Imm(0), Memory(BP, -40)), AssType: Quadword Mov(Imm(0), Memory(BP, -32)), AssType: Quadword Mov(Imm(0), Memory(BP, -24)), AssType: Quadword Mov(Imm(13), Memory(BP, -16)), AssType: Quadword Mov(Imm(0), Memory(BP, -8)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 80), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), AssType: Quadword Cmp(Imm(13), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_negative_index stackOffset: -48 global: True instructions:[AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -48)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -44)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -40)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -36)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -32)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -28)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -24)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -20)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -16)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -12)), AssType: Longword Mov(Imm(42), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -8)), AssType: Longword Mov(Imm(0), Memory(BP, -4)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 48), Reg(R8d)), AssType: Longword Mov(Imm(10), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Cmp(Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_pointer_to_int stackOffset: -32 global: True instructions:[AssType: Longword Mov(Imm(0), Memory(BP, -32)), AssType: Longword Mov(Imm(98), Memory(BP, -28)), AssType: Longword Mov(Imm(99), Memory(BP, -24)), AssType: Longword Mov(Imm(0), Memory(BP, -20)), AssType: Longword Mov(Imm(0), Memory(BP, -16)), Lea(Memory(BP, -32), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(SI)), Lea(Memory(BP, -32), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(R8d)), AssType: Quadword Cmp(Reg(R8d), Reg(SI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.103), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(99), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.103), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.107), Label(tmp.103), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.107), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.358 = c_double(6.0), Static Constant: Alignment = 8 : tmp.359 = c_double(0.0), Static Constant: Alignment = 8 : tmp.360 = c_double(0.0), Static Constant: Alignment = 8 : tmp.361 = c_double(0.0), Static Constant: Alignment = 8 : tmp.362 = c_double(0.0), Static Constant: Alignment = 8 : tmp.363 = c_double(0.0), Static Constant: Alignment = 8 : tmp.364 = c_double(6.0), Function test_add_different_index_types stackOffset: -96 global: True instructions:[AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -96)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -88)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -80)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -72)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -64)), AssType: Double Mov(Data(tmp.358, 0), Memory(BP, -56)), AssType: Double Mov(Data(tmp.359, 0), Memory(BP, -48)), AssType: Double Mov(Data(tmp.360, 0), Memory(BP, -40)), AssType: Double Mov(Data(tmp.361, 0), Memory(BP, -32)), AssType: Double Mov(Data(tmp.362, 0), Memory(BP, -24)), AssType: Double Mov(Data(tmp.363, 0), Memory(BP, -16)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(CX)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(DI)), Lea(Memory(BP, -96), Reg(R8d)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(SI)), Lea(Memory(BP, -96), Reg(R8d)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R8d)), AssType: Quadword Cmp(Reg(DI), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.133), AssType: Quadword Cmp(Reg(SI), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.133), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.136), Label(tmp.133), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.136), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137), AssType: Quadword Cmp(Reg(R8d), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.140), Label(tmp.137), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.140), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Reg(XMM13)), AssType: Double Cmp(Data(tmp.364, 0), Reg(XMM13)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.145), Label(tmp.141), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.145), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_complex_expressions stackOffset: -4 global: True instructions:[AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -4)), Lea(Memory(BP, -4), Reg(BX)), AssType: Longword Cmp(Imm(0), Data(flag.13, 0)), JmpCC(ConcCodeType.E, tmp.149), Lea(Data(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d)), Jmp(tmp.155), Label(tmp.149), Lea(Data(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d)), Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(BX)), AssType: Longword Binary(Add, Reg(BX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R12d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(BX)), Lea(Data(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Cmp(Reg(R9d), Reg(BX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173), AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(2), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.177), Label(tmp.173), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.177), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function return_one stackOffset: 0 global: True instructions:[AssType: Longword Mov(Imm(1), Reg(AX)), ret], Function get_elem1_ptr stackOffset: 0 global: True instructions:[AssType: Quadword Mov(Reg(DI), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), ret], Function get_elem2_ptr stackOffset: 0 global: True instructions:[AssType: Quadword Mov(Reg(DI), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_multi_dimensional stackOffset: -48 global: True instructions:[AssType: Longword Mov(Imm(1), Memory(BP, -48)), AssType: Longword Mov(Imm(2), Memory(BP, -44)), AssType: Longword Mov(Imm(3), Memory(BP, -40)), AssType: Longword Mov(Imm(4), Memory(BP, -36)), AssType: Longword Mov(Imm(5), Memory(BP, -32)), AssType: Longword Mov(Imm(6), Memory(BP, -28)), AssType: Longword Mov(Imm(7), Memory(BP, -24)), AssType: Longword Mov(Imm(8), Memory(BP, -20)), AssType: Longword Mov(Imm(9), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.22, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(7), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_to_subarray_pointer stackOffset: -48 global: True instructions:[AssType: Longword Mov(Imm(1), Memory(BP, -48)), AssType: Longword Mov(Imm(2), Memory(BP, -44)), AssType: Longword Mov(Imm(3), Memory(BP, -40)), AssType: Longword Mov(Imm(4), Memory(BP, -36)), AssType: Longword Mov(Imm(5), Memory(BP, -32)), AssType: Longword Mov(Imm(6), Memory(BP, -28)), AssType: Longword Mov(Imm(7), Memory(BP, -24)), AssType: Longword Mov(Imm(8), Memory(BP, -20)), AssType: Longword Mov(Imm(9), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 12), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.25, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(6), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_from_pointer stackOffset: -48 global: True instructions:[AssType: Quadword Mov(Imm(10), Memory(BP, -48)), AssType: Quadword Mov(Imm(9), Memory(BP, -40)), AssType: Quadword Mov(Imm(8), Memory(BP, -32)), AssType: Quadword Mov(Imm(7), Memory(BP, -24)), AssType: Quadword Mov(Imm(6), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.31, 0), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), AssType: Quadword Cmp(Imm(8), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_negative_index stackOffset: -32 global: True instructions:[AssType: Longword Mov(Imm(100), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -32)), AssType: Longword Mov(Imm(101), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -28)), AssType: Longword Mov(Imm(102), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -24)), AssType: Longword Mov(Imm(103), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -20)), AssType: Longword Mov(Imm(104), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -16)), Lea(Memory(BP, -32), Reg(R8d)), AssType: Longword Mov(Imm(3), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), AssType: Longword Mov(Imm(103), Reg(R9d)), AssType: Longword Cmp(Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.365 = c_double(6.0), Static Constant: Alignment = 8 : tmp.366 = c_double(0.0), Static Constant: Alignment = 8 : tmp.367 = c_double(0.0), Static Constant: Alignment = 8 : tmp.368 = c_double(0.0), Static Constant: Alignment = 8 : tmp.369 = c_double(0.0), Static Constant: Alignment = 8 : tmp.370 = c_double(6.0), Function test_subtract_different_index_types stackOffset: -96 global: True instructions:[AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -96)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -88)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -80)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -72)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -64)), AssType: Longword Cvtsi2sd(Imm(0), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -56)), AssType: Double Mov(Data(tmp.365, 0), Memory(BP, -48)), AssType: Double Mov(Data(tmp.366, 0), Memory(BP, -40)), AssType: Double Mov(Data(tmp.367, 0), Memory(BP, -32)), AssType: Double Mov(Data(tmp.368, 0), Memory(BP, -24)), AssType: Double Mov(Data(tmp.369, 0), Memory(BP, -16)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 88), Reg(AX)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(DI)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(SI)), SrcType: Longword DstType: Quadword MovZeroExtend(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R8d)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(AX)), AssType: Quadword Cmp(Reg(SI), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.268), AssType: Quadword Cmp(Reg(R8d), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.268), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.271), Label(tmp.268), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.271), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272), AssType: Quadword Cmp(Reg(AX), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.275), Label(tmp.272), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.275), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276), AssType: Double Mov(Memory(AX, 0), Reg(XMM13)), AssType: Double Cmp(Data(tmp.370, 0), Reg(XMM13)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.280), Label(tmp.276), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.280), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_complex_expressions stackOffset: 0 global: True instructions:[AssType: Longword Cmp(Imm(0), Data(flag.41, 0)), JmpCC(ConcCodeType.E, tmp.282), Lea(Data(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d)), Jmp(tmp.288), Label(tmp.282), Lea(Data(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d)), Label(tmp.288), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Data(four.42, 0), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Reg(R9d)), AssType: Longword Mov(Reg(AX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_multi_dimensional stackOffset: -48 global: True instructions:[AssType: Longword Mov(Imm(1), Memory(BP, -48)), AssType: Longword Mov(Imm(2), Memory(BP, -44)), AssType: Longword Mov(Imm(3), Memory(BP, -40)), AssType: Longword Mov(Imm(4), Memory(BP, -36)), AssType: Longword Mov(Imm(5), Memory(BP, -32)), AssType: Longword Mov(Imm(6), Memory(BP, -28)), AssType: Longword Mov(Imm(7), Memory(BP, -24)), AssType: Longword Mov(Imm(8), Memory(BP, -20)), AssType: Longword Mov(Imm(9), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 24), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.45, 0), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function main stackOffset: 0 global: True instructions:[Call(test_add_constant_to_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.317), AssType: Longword Mov(Imm(1), Reg(AX)), ret, Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.321), AssType: Longword Mov(Imm(2), Reg(AX)), ret, Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.325), AssType: Longword Mov(Imm(3), Reg(AX)), ret, Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.329), AssType: Longword Mov(Imm(4), Reg(AX)), ret, Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.333), AssType: Longword Mov(Imm(5), Reg(AX)), ret, Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.337), AssType: Longword Mov(Imm(6), Reg(AX)), ret, Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.341), AssType: Longword Mov(Imm(7), Reg(AX)), ret, Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.345), AssType: Longword Mov(Imm(8), Reg(AX)), ret, Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.349), AssType: Longword Mov(Imm(9), Reg(AX)), ret, Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.353), AssType: Longword Mov(Imm(10), Reg(AX)), ret, Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.357), AssType: Longword Mov(Imm(11), Reg(AX)), ret, Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = False Alignment = 4 : flag.13 = [c_int(0)], Static Variable: Global = False Alignment = 16 : arr.18 = [c_int(1), c_int(2), c_int(3), c_int(4)], Static Variable: Global = False Alignment = 4 : index.22 = [c_int(2)], Static Variable: Global = False Alignment = 4 : index.25 = [c_int(2)], Static Variable: Global = False Alignment = 4 : index.31 = [c_int(3)], Static Variable: Global = False Alignment = 4 : flag.41 = [c_int(1)], Static Variable: Global = False Alignment = 4 : four.42 = [c_int(4)], Static Variable: Global = False Alignment = 16 : arr.43 = [c_int(1), c_int(2), c_int(3), c_int(4)], Static Variable: Global = False Alignment = 4 : index.45 = [c_int(1)]]
original: 96
rounded: 112
adjustment: 112
original: 48
rounded: 64
adjustment: 64
original: 32
rounded: 48
adjustment: 48
original: 96
rounded: 112
adjustment: 112
original: 20
rounded: 32
adjustment: 16
<class 'assemblyGenerator.RegisterOperand'>
<class 'assemblyGenerator.RegisterOperand'>
original: 0
rounded: 16
adjustment: 16
original: 0
rounded: 16
adjustment: 16
original: 0
rounded: 16
adjustment: 16
original: 48
rounded: 64
adjustment: 64
original: 48
rounded: 64
adjustment: 64
original: 48
rounded: 64
adjustment: 64
original: 32
rounded: 48
adjustment: 48
original: 96
rounded: 112
adjustment: 112
original: 0
rounded: 16
adjustment: 16
original: 48
rounded: 64
adjustment: 64
original: 0
rounded: 16
adjustment: 16
ASM Program: [Function test_add_constant_to_pointer stackOffset: -96 global: True instructions:[AssType: Quadword Binary(Sub, Imm(112), Reg(SP)), AssType: Quadword Mov(Imm(0), Memory(BP, -96)), AssType: Quadword Mov(Imm(0), Memory(BP, -88)), AssType: Quadword Mov(Imm(3), Memory(BP, -80)), AssType: Quadword Mov(Imm(0), Memory(BP, -72)), AssType: Quadword Mov(Imm(0), Memory(BP, -64)), AssType: Quadword Mov(Imm(0), Memory(BP, -56)), AssType: Quadword Mov(Imm(0), Memory(BP, -48)), AssType: Quadword Mov(Imm(0), Memory(BP, -40)), AssType: Quadword Mov(Imm(0), Memory(BP, -32)), AssType: Quadword Mov(Imm(0), Memory(BP, -24)), AssType: Quadword Mov(Imm(13), Memory(BP, -16)), AssType: Quadword Mov(Imm(0), Memory(BP, -8)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 80), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), AssType: Quadword Cmp(Imm(13), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_negative_index stackOffset: -48 global: True instructions:[AssType: Quadword Binary(Sub, Imm(64), Reg(SP)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -48)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -44)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -40)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -36)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -32)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -28)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -24)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -20)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -16)), AssType: Longword Mov(Imm(0), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -12)), AssType: Longword Mov(Imm(42), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -8)), AssType: Longword Mov(Imm(0), Memory(BP, -4)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 48), Reg(R8d)), AssType: Longword Mov(Imm(10), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Cmp(Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_pointer_to_int stackOffset: -32 global: True instructions:[AssType: Quadword Binary(Sub, Imm(48), Reg(SP)), AssType: Longword Mov(Imm(0), Memory(BP, -32)), AssType: Longword Mov(Imm(98), Memory(BP, -28)), AssType: Longword Mov(Imm(99), Memory(BP, -24)), AssType: Longword Mov(Imm(0), Memory(BP, -20)), AssType: Longword Mov(Imm(0), Memory(BP, -16)), Lea(Memory(BP, -32), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(SI)), Lea(Memory(BP, -32), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(R8d)), AssType: Quadword Cmp(Reg(R8d), Reg(SI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.103), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(99), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.103), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.107), Label(tmp.103), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.107), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.358 = c_double(6.0), Static Constant: Alignment = 8 : tmp.359 = c_double(0.0), Static Constant: Alignment = 8 : tmp.360 = c_double(0.0), Static Constant: Alignment = 8 : tmp.361 = c_double(0.0), Static Constant: Alignment = 8 : tmp.362 = c_double(0.0), Static Constant: Alignment = 8 : tmp.363 = c_double(0.0), Static Constant: Alignment = 8 : tmp.364 = c_double(6.0), Function test_add_different_index_types stackOffset: -96 global: True instructions:[AssType: Quadword Binary(Sub, Imm(112), Reg(SP)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -96)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -88)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -80)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -72)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -64)), AssType: Double Mov(Data(tmp.358, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -56)), AssType: Double Mov(Data(tmp.359, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -48)), AssType: Double Mov(Data(tmp.360, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -40)), AssType: Double Mov(Data(tmp.361, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -32)), AssType: Double Mov(Data(tmp.362, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -24)), AssType: Double Mov(Data(tmp.363, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -16)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(CX)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(DI)), Lea(Memory(BP, -96), Reg(R8d)), AssType: Longword Mov(Imm(5), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(SI)), Lea(Memory(BP, -96), Reg(R8d)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R8d)), AssType: Quadword Cmp(Reg(DI), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.133), AssType: Quadword Cmp(Reg(SI), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.133), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.136), Label(tmp.133), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.136), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137), AssType: Quadword Cmp(Reg(R8d), Reg(CX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.137), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.140), Label(tmp.137), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.140), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Double Mov(Memory(AX, 0), Reg(XMM13)), AssType: Double Cmp(Data(tmp.364, 0), Reg(XMM13)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.141), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.145), Label(tmp.141), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.145), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_complex_expressions stackOffset: -4 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), Push(Reg(BX)), Push(Reg(R12d)), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -4)), Lea(Memory(BP, -4), Reg(BX)), AssType: Longword Cmp(Imm(0), Data(flag.13, 0)), JmpCC(ConcCodeType.E, tmp.149), Lea(Data(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d)), Jmp(tmp.155), Label(tmp.149), Lea(Data(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R12d)), Label(tmp.155), Call(return_one), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(BX)), AssType: Longword Binary(Add, Reg(BX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Mov(Reg(R12d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(BX)), Lea(Data(arr.18, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Cmp(Reg(R9d), Reg(BX)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173), AssType: Quadword Mov(Reg(BX), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(2), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.173), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.177), Label(tmp.173), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.177), AssType: Longword Mov(Reg(R9d), Reg(AX)), Pop(Reg(R12d)), Pop(Reg(BX)), ret], Function return_one stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Longword Mov(Imm(1), Reg(AX)), ret], Function get_elem1_ptr stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Quadword Mov(Reg(DI), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), ret], Function get_elem2_ptr stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Quadword Mov(Reg(DI), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 8), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_multi_dimensional stackOffset: -48 global: True instructions:[AssType: Quadword Binary(Sub, Imm(64), Reg(SP)), AssType: Longword Mov(Imm(1), Memory(BP, -48)), AssType: Longword Mov(Imm(2), Memory(BP, -44)), AssType: Longword Mov(Imm(3), Memory(BP, -40)), AssType: Longword Mov(Imm(4), Memory(BP, -36)), AssType: Longword Mov(Imm(5), Memory(BP, -32)), AssType: Longword Mov(Imm(6), Memory(BP, -28)), AssType: Longword Mov(Imm(7), Memory(BP, -24)), AssType: Longword Mov(Imm(8), Memory(BP, -20)), AssType: Longword Mov(Imm(9), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.22, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(7), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_add_to_subarray_pointer stackOffset: -48 global: True instructions:[AssType: Quadword Binary(Sub, Imm(64), Reg(SP)), AssType: Longword Mov(Imm(1), Memory(BP, -48)), AssType: Longword Mov(Imm(2), Memory(BP, -44)), AssType: Longword Mov(Imm(3), Memory(BP, -40)), AssType: Longword Mov(Imm(4), Memory(BP, -36)), AssType: Longword Mov(Imm(5), Memory(BP, -32)), AssType: Longword Mov(Imm(6), Memory(BP, -28)), AssType: Longword Mov(Imm(7), Memory(BP, -24)), AssType: Longword Mov(Imm(8), Memory(BP, -20)), AssType: Longword Mov(Imm(9), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 12), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.25, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(6), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_from_pointer stackOffset: -48 global: True instructions:[AssType: Quadword Binary(Sub, Imm(64), Reg(SP)), AssType: Quadword Mov(Imm(10), Memory(BP, -48)), AssType: Quadword Mov(Imm(9), Memory(BP, -40)), AssType: Quadword Mov(Imm(8), Memory(BP, -32)), AssType: Quadword Mov(Imm(7), Memory(BP, -24)), AssType: Quadword Mov(Imm(6), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 40), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.31, 0), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Quadword Mov(Memory(AX, 0), Reg(R9d)), AssType: Quadword Cmp(Imm(8), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_negative_index stackOffset: -32 global: True instructions:[AssType: Quadword Binary(Sub, Imm(48), Reg(SP)), AssType: Longword Mov(Imm(100), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -32)), AssType: Longword Mov(Imm(101), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -28)), AssType: Longword Mov(Imm(102), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -24)), AssType: Longword Mov(Imm(103), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -20)), AssType: Longword Mov(Imm(104), Reg(R9d)), AssType: Longword Mov(Reg(R9d), Memory(BP, -16)), Lea(Memory(BP, -32), Reg(R8d)), AssType: Longword Mov(Imm(3), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R8d)), AssType: Longword Mov(Imm(103), Reg(R9d)), AssType: Longword Cmp(Reg(R9d), Reg(R8d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Static Constant: Alignment = 8 : tmp.365 = c_double(6.0), Static Constant: Alignment = 8 : tmp.366 = c_double(0.0), Static Constant: Alignment = 8 : tmp.367 = c_double(0.0), Static Constant: Alignment = 8 : tmp.368 = c_double(0.0), Static Constant: Alignment = 8 : tmp.369 = c_double(0.0), Static Constant: Alignment = 8 : tmp.370 = c_double(6.0), Function test_subtract_different_index_types stackOffset: -96 global: True instructions:[AssType: Quadword Binary(Sub, Imm(112), Reg(SP)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -96)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -88)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -80)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -72)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -64)), AssType: Longword Mov(Imm(0), Reg(R10d)), AssType: Longword Cvtsi2sd(Reg(R10d), Reg(XMM13)), AssType: Double Mov(Reg(XMM13), Memory(BP, -56)), AssType: Double Mov(Data(tmp.365, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -48)), AssType: Double Mov(Data(tmp.366, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -40)), AssType: Double Mov(Data(tmp.367, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -32)), AssType: Double Mov(Data(tmp.368, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -24)), AssType: Double Mov(Data(tmp.369, 0), Reg(XMM14)), AssType: Double Mov(Reg(XMM14), Memory(BP, -16)), Lea(Memory(BP, -96), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 88), Reg(AX)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(DI)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(SI)), AssType: Longword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(R8d)), AssType: Quadword Mov(Imm(5), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 8), Reg(AX)), AssType: Quadword Cmp(Reg(SI), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.268), AssType: Quadword Cmp(Reg(R8d), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.268), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.271), Label(tmp.268), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.271), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272), AssType: Quadword Cmp(Reg(AX), Reg(DI)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.272), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.275), Label(tmp.272), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.275), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276), AssType: Double Mov(Memory(AX, 0), Reg(XMM13)), AssType: Double Cmp(Data(tmp.370, 0), Reg(XMM13)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeTypeUnsigned.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.276), AssType: Longword Mov(Imm(1), Reg(R9d)), Jmp(tmp.280), Label(tmp.276), AssType: Longword Mov(Imm(0), Reg(R9d)), Label(tmp.280), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_complex_expressions stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), AssType: Longword Cmp(Imm(0), Data(flag.41, 0)), JmpCC(ConcCodeType.E, tmp.282), Lea(Data(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem1_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d)), Jmp(tmp.288), Label(tmp.282), Lea(Data(arr.43, 0), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(DI)), Call(get_elem2_ptr), AssType: Quadword Mov(Reg(AX), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(R8d)), Label(tmp.288), AssType: Longword Mov(Imm(2), Reg(R9d)), AssType: Longword Unary(Neg, Reg(R9d)), AssType: Longword Mov(Data(four.42, 0), Reg(AX)), AssType: {self.assType} Cdq, AssType: Longword Idiv(Reg(R9d)), AssType: Longword Mov(Reg(AX), Reg(R9d)), SrcType: Longword DstType: Quadword MovSX(Reg(R9d), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), Lea(Indexed(AX + DX * 4), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function test_subtract_multi_dimensional stackOffset: -48 global: True instructions:[AssType: Quadword Binary(Sub, Imm(64), Reg(SP)), AssType: Longword Mov(Imm(1), Memory(BP, -48)), AssType: Longword Mov(Imm(2), Memory(BP, -44)), AssType: Longword Mov(Imm(3), Memory(BP, -40)), AssType: Longword Mov(Imm(4), Memory(BP, -36)), AssType: Longword Mov(Imm(5), Memory(BP, -32)), AssType: Longword Mov(Imm(6), Memory(BP, -28)), AssType: Longword Mov(Imm(7), Memory(BP, -24)), AssType: Longword Mov(Imm(8), Memory(BP, -20)), AssType: Longword Mov(Imm(9), Memory(BP, -16)), Lea(Memory(BP, -48), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), Lea(Memory(AX, 24), Reg(R8d)), SrcType: Longword DstType: Quadword MovSX(Data(index.45, 0), Reg(R9d)), AssType: Quadword Unary(Neg, Reg(R9d)), AssType: Quadword Mov(Reg(R8d), Reg(AX)), AssType: Quadword Mov(Reg(R9d), Reg(DX)), AssType: Quadword Binary(Mult, Imm(12), Reg(DX)), Lea(Indexed(AX + DX * 1), Reg(R9d)), AssType: Quadword Mov(Reg(R9d), Reg(AX)), AssType: Longword Mov(Memory(AX, 0), Reg(R9d)), AssType: Longword Cmp(Imm(4), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Mov(Reg(R9d), Reg(AX)), ret], Function main stackOffset: 0 global: True instructions:[AssType: Quadword Binary(Sub, Imm(16), Reg(SP)), Call(test_add_constant_to_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.317), AssType: Longword Mov(Imm(1), Reg(AX)), ret, Label(tmp.317), Call(test_add_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.321), AssType: Longword Mov(Imm(2), Reg(AX)), ret, Label(tmp.321), Call(test_add_pointer_to_int), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.325), AssType: Longword Mov(Imm(3), Reg(AX)), ret, Label(tmp.325), Call(test_add_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.329), AssType: Longword Mov(Imm(4), Reg(AX)), ret, Label(tmp.329), Call(test_add_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.333), AssType: Longword Mov(Imm(5), Reg(AX)), ret, Label(tmp.333), Call(test_add_multi_dimensional), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.337), AssType: Longword Mov(Imm(6), Reg(AX)), ret, Label(tmp.337), Call(test_add_to_subarray_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.341), AssType: Longword Mov(Imm(7), Reg(AX)), ret, Label(tmp.341), Call(test_subtract_from_pointer), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.345), AssType: Longword Mov(Imm(8), Reg(AX)), ret, Label(tmp.345), Call(test_subtract_negative_index), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.349), AssType: Longword Mov(Imm(9), Reg(AX)), ret, Label(tmp.349), Call(test_subtract_different_index_types), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.353), AssType: Longword Mov(Imm(10), Reg(AX)), ret, Label(tmp.353), Call(test_subtract_complex_expressions), AssType: Longword Mov(Reg(AX), Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), AssType: Longword Mov(Imm(0), Reg(R9d)), SetCC(ConcCodeType.E, Reg(R9d)), AssType: Longword Cmp(Imm(0), Reg(R9d)), JmpCC(ConcCodeType.E, tmp.357), AssType: Longword Mov(Imm(11), Reg(AX)), ret, Label(tmp.357), AssType: Longword Mov(Imm(0), Reg(AX)), ret], Static Variable: Global = False Alignment = 4 : flag.13 = [c_int(0)], Static Variable: Global = False Alignment = 16 : arr.18 = [c_int(1), c_int(2), c_int(3), c_int(4)], Static Variable: Global = False Alignment = 4 : index.22 = [c_int(2)], Static Variable: Global = False Alignment = 4 : index.25 = [c_int(2)], Static Variable: Global = False Alignment = 4 : index.31 = [c_int(3)], Static Variable: Global = False Alignment = 4 : flag.41 = [c_int(1)], Static Variable: Global = False Alignment = 4 : four.42 = [c_int(4)], Static Variable: Global = False Alignment = 16 : arr.43 = [c_int(1), c_int(2), c_int(3), c_int(4)], Static Variable: Global = False Alignment = 4 : index.45 = [c_int(1)]]
<class 'int'> 4
<class 'int'> 8
<class 'int'> 8
<class 'int'> 4
<class 'int'> 1
<class 'int'> 4
<class 'int'> 8
<class 'int'> 4
<class 'int'> 8
<class 'int'> 8
<class 'int'> 8
<class 'int'> 8
<class 'int'> 4
<class 'int'> 1
<class 'assemblyGenerator.Longword'>
<class 'assemblyGenerator.ByteArray'>
<class 'assemblyGenerator.Longword'>
<class 'assemblyGenerator.Longword'>
<class 'assemblyGenerator.Longword'>
<class 'assemblyGenerator.Longword'>
<class 'assemblyGenerator.Longword'>
<class 'assemblyGenerator.ByteArray'>
<class 'assemblyGenerator.Longword'>
	.globl test_add_constant_to_pointer
	.text
test_add_constant_to_pointer:
	pushq %rbp
	movq %rsp, %rbp
	subq $112, %rsp
	movq $0, -96(%rbp)
	movq $0, -88(%rbp)
	movq $3, -80(%rbp)
	movq $0, -72(%rbp)
	movq $0, -64(%rbp)
	movq $0, -56(%rbp)
	movq $0, -48(%rbp)
	movq $0, -40(%rbp)
	movq $0, -32(%rbp)
	movq $0, -24(%rbp)
	movq $13, -16(%rbp)
	movq $0, -8(%rbp)
	leaq -96(%rbp), %r9
	movq %r9, %rax
	leaq 80(%rax), %r9
	movq %r9, %rax
	movq 0(%rax), %r9
	cmpq $13, %r9
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_add_negative_index
	.text
test_add_negative_index:
	pushq %rbp
	movq %rsp, %rbp
	subq $64, %rsp
	movl $0, %r9d
	movl %r9d, -48(%rbp)
	movl $0, %r9d
	movl %r9d, -44(%rbp)
	movl $2, %r9d
	movl %r9d, -40(%rbp)
	movl $0, %r9d
	movl %r9d, -36(%rbp)
	movl $0, %r9d
	movl %r9d, -32(%rbp)
	movl $0, %r9d
	movl %r9d, -28(%rbp)
	movl $0, %r9d
	movl %r9d, -24(%rbp)
	movl $0, %r9d
	movl %r9d, -20(%rbp)
	movl $0, %r9d
	movl %r9d, -16(%rbp)
	movl $0, %r9d
	movl %r9d, -12(%rbp)
	movl $42, %r9d
	movl %r9d, -8(%rbp)
	movl $0, -4(%rbp)
	leaq -48(%rbp), %r9
	movq %r9, %rax
	leaq 48(%rax), %r8
	movl $10, %r9d
	negl %r9d
	movslq %r9d, %r9
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 4), %r9
	movq %r9, %rax
	movl 0(%rax), %r8d
	movl $2, %r9d
	cmpl %r9d, %r8d
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_add_pointer_to_int
	.text
test_add_pointer_to_int:
	pushq %rbp
	movq %rsp, %rbp
	subq $48, %rsp
	movl $0, -32(%rbp)
	movl $98, -28(%rbp)
	movl $99, -24(%rbp)
	movl $0, -20(%rbp)
	movl $0, -16(%rbp)
	leaq -32(%rbp), %r9
	movq %r9, %rax
	leaq 8(%rax), %rsi
	leaq -32(%rbp), %r9
	movq %r9, %rax
	leaq 8(%rax), %r8
	cmpq %r8, %rsi
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.103
	movq %r8, %rax
	movl 0(%rax), %r9d
	cmpl $99, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.103
	movl $1, %r9d
	jmp .Ltmp.107
.Ltmp.103:
	movl $0, %r9d
.Ltmp.107:
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.section .rodata
	.align 8
tmp.358:
	.double 6.0
	.section .rodata
	.align 8
tmp.359:
	.double 0.0
	.section .rodata
	.align 8
tmp.360:
	.double 0.0
	.section .rodata
	.align 8
tmp.361:
	.double 0.0
	.section .rodata
	.align 8
tmp.362:
	.double 0.0
	.section .rodata
	.align 8
tmp.363:
	.double 0.0
	.section .rodata
	.align 8
tmp.364:
	.double 6.0
	.globl test_add_different_index_types
	.text
test_add_different_index_types:
	pushq %rbp
	movq %rsp, %rbp
	subq $112, %rsp
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -96(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -88(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -80(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -72(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -64(%rbp)
	movsd tmp.358+0(%rip), %xmm14
	movsd %xmm14, -56(%rbp)
	movsd tmp.359+0(%rip), %xmm14
	movsd %xmm14, -48(%rbp)
	movsd tmp.360+0(%rip), %xmm14
	movsd %xmm14, -40(%rbp)
	movsd tmp.361+0(%rip), %xmm14
	movsd %xmm14, -32(%rbp)
	movsd tmp.362+0(%rip), %xmm14
	movsd %xmm14, -24(%rbp)
	movsd tmp.363+0(%rip), %xmm14
	movsd %xmm14, -16(%rbp)
	leaq -96(%rbp), %r9
	movq %r9, %rax
	leaq 40(%rax), %rcx
	leaq -96(%rbp), %r9
	movq %r9, %rax
	leaq 40(%rax), %rdi
	leaq -96(%rbp), %r8
	movl $5, %r9d
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %rsi
	leaq -96(%rbp), %r8
	movq $5, %r9
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %r8
	cmpq %rdi, %rcx
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.133
	cmpq %rsi, %rcx
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.133
	movl $1, %r9d
	jmp .Ltmp.136
.Ltmp.133:
	movl $0, %r9d
.Ltmp.136:
	cmpl $0, %r9d
	jE .Ltmp.137
	cmpq %r8, %rcx
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.137
	movl $1, %r9d
	jmp .Ltmp.140
.Ltmp.137:
	movl $0, %r9d
.Ltmp.140:
	cmpl $0, %r9d
	jE .Ltmp.141
	movq %r8, %rax
	movsd 0(%rax), %xmm13
	comisd tmp.364+0(%rip), %xmm13
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.141
	movl $1, %r9d
	jmp .Ltmp.145
.Ltmp.141:
	movl $0, %r9d
.Ltmp.145:
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_add_complex_expressions
	.text
test_add_complex_expressions:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	pushq %rbx
	pushq %r12
	movl $2, %r9d
	negl %r9d
	movl %r9d, -4(%rbp)
	leaq -4(%rbp), %rbx
	cmpl $0, flag.13+0(%rip)
	jE .Ltmp.149
	leaq arr.18+0(%rip), %r9
	movq %r9, %rdi
	call get_elem1_ptr
	movq %rax, %r9
	movq %r9, %r12
	jmp .Ltmp.155
.Ltmp.149:
	leaq arr.18+0(%rip), %r9
	movq %r9, %rdi
	call get_elem2_ptr
	movq %rax, %r9
	movq %r9, %r12
.Ltmp.155:
	call return_one
	movl %eax, %r9d
	movq %rbx, %rax
	movl 0(%rax), %ebx
	addl %ebx, %r9d
	movslq %r9d, %r9
	movq %r12, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 4), %rbx
	leaq arr.18+0(%rip), %r9
	movq %r9, %rax
	leaq 4(%rax), %r9
	cmpq %r9, %rbx
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.173
	movq %rbx, %rax
	movl 0(%rax), %r9d
	cmpl $2, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.173
	movl $1, %r9d
	jmp .Ltmp.177
.Ltmp.173:
	movl $0, %r9d
.Ltmp.177:
	movl %r9d, %eax
	popq %r12
	popq %rbx
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl return_one
	.text
return_one:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	movl $1, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl get_elem1_ptr
	.text
get_elem1_ptr:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	movq %rdi, %r9
	movq %r9, %rax
	leaq 4(%rax), %r9
	movq %r9, %rax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl get_elem2_ptr
	.text
get_elem2_ptr:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	movq %rdi, %r9
	movq %r9, %rax
	leaq 8(%rax), %r9
	movq %r9, %rax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_add_multi_dimensional
	.text
test_add_multi_dimensional:
	pushq %rbp
	movq %rsp, %rbp
	subq $64, %rsp
	movl $1, -48(%rbp)
	movl $2, -44(%rbp)
	movl $3, -40(%rbp)
	movl $4, -36(%rbp)
	movl $5, -32(%rbp)
	movl $6, -28(%rbp)
	movl $7, -24(%rbp)
	movl $8, -20(%rbp)
	movl $9, -16(%rbp)
	leaq -48(%rbp), %r8
	movslq index.22+0(%rip), %r9
	movq %r8, %rax
	movq %r9, %rdx
	imul $12, %rdx
	leaq (%rax, %rdx, 1), %r9
	movq %r9, %rax
	movl 0(%rax), %r9d
	cmpl $7, %r9d
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_add_to_subarray_pointer
	.text
test_add_to_subarray_pointer:
	pushq %rbp
	movq %rsp, %rbp
	subq $64, %rsp
	movl $1, -48(%rbp)
	movl $2, -44(%rbp)
	movl $3, -40(%rbp)
	movl $4, -36(%rbp)
	movl $5, -32(%rbp)
	movl $6, -28(%rbp)
	movl $7, -24(%rbp)
	movl $8, -20(%rbp)
	movl $9, -16(%rbp)
	leaq -48(%rbp), %r9
	movq %r9, %rax
	leaq 12(%rax), %r8
	movslq index.25+0(%rip), %r9
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 4), %r9
	movq %r9, %rax
	movl 0(%rax), %r9d
	cmpl $6, %r9d
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_subtract_from_pointer
	.text
test_subtract_from_pointer:
	pushq %rbp
	movq %rsp, %rbp
	subq $64, %rsp
	movq $10, -48(%rbp)
	movq $9, -40(%rbp)
	movq $8, -32(%rbp)
	movq $7, -24(%rbp)
	movq $6, -16(%rbp)
	leaq -48(%rbp), %r9
	movq %r9, %rax
	leaq 40(%rax), %r8
	movslq index.31+0(%rip), %r9
	negq %r9
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %r9
	movq %r9, %rax
	movq 0(%rax), %r9
	cmpq $8, %r9
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_subtract_negative_index
	.text
test_subtract_negative_index:
	pushq %rbp
	movq %rsp, %rbp
	subq $48, %rsp
	movl $100, %r9d
	movl %r9d, -32(%rbp)
	movl $101, %r9d
	movl %r9d, -28(%rbp)
	movl $102, %r9d
	movl %r9d, -24(%rbp)
	movl $103, %r9d
	movl %r9d, -20(%rbp)
	movl $104, %r9d
	movl %r9d, -16(%rbp)
	leaq -32(%rbp), %r8
	movl $3, %r9d
	negl %r9d
	movslq %r9d, %r9
	negq %r9
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 4), %r9
	movq %r9, %rax
	movl 0(%rax), %r8d
	movl $103, %r9d
	cmpl %r9d, %r8d
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.section .rodata
	.align 8
tmp.365:
	.double 6.0
	.section .rodata
	.align 8
tmp.366:
	.double 0.0
	.section .rodata
	.align 8
tmp.367:
	.double 0.0
	.section .rodata
	.align 8
tmp.368:
	.double 0.0
	.section .rodata
	.align 8
tmp.369:
	.double 0.0
	.section .rodata
	.align 8
tmp.370:
	.double 6.0
	.globl test_subtract_different_index_types
	.text
test_subtract_different_index_types:
	pushq %rbp
	movq %rsp, %rbp
	subq $112, %rsp
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -96(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -88(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -80(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -72(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -64(%rbp)
	movl $0, %r10d
	cvtsi2sdl %r10d, %xmm13
	movsd %xmm13, -56(%rbp)
	movsd tmp.365+0(%rip), %xmm14
	movsd %xmm14, -48(%rbp)
	movsd tmp.366+0(%rip), %xmm14
	movsd %xmm14, -40(%rbp)
	movsd tmp.367+0(%rip), %xmm14
	movsd %xmm14, -32(%rbp)
	movsd tmp.368+0(%rip), %xmm14
	movsd %xmm14, -24(%rbp)
	movsd tmp.369+0(%rip), %xmm14
	movsd %xmm14, -16(%rbp)
	leaq -96(%rbp), %r9
	movq %r9, %rax
	leaq 88(%rax), %rax
	movq $5, %r9
	negq %r9
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %rdi
	movq $5, %r9
	negq %r9
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %rsi
	movl $5, %r9d
	negq %r9
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %r8
	movq $5, %r9
	negq %r9
	movq %r9, %rdx
	leaq (%rax, %rdx, 8), %rax
	cmpq %rsi, %rdi
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.268
	cmpq %r8, %rdi
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.268
	movl $1, %r9d
	jmp .Ltmp.271
.Ltmp.268:
	movl $0, %r9d
.Ltmp.271:
	cmpl $0, %r9d
	jE .Ltmp.272
	cmpq %rax, %rdi
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.272
	movl $1, %r9d
	jmp .Ltmp.275
.Ltmp.272:
	movl $0, %r9d
.Ltmp.275:
	cmpl $0, %r9d
	jE .Ltmp.276
	movsd 0(%rax), %xmm13
	comisd tmp.370+0(%rip), %xmm13
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.276
	movl $1, %r9d
	jmp .Ltmp.280
.Ltmp.276:
	movl $0, %r9d
.Ltmp.280:
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_subtract_complex_expressions
	.text
test_subtract_complex_expressions:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	cmpl $0, flag.41+0(%rip)
	jE .Ltmp.282
	leaq arr.43+0(%rip), %r9
	movq %r9, %rdi
	call get_elem1_ptr
	movq %rax, %r9
	movq %r9, %r8
	jmp .Ltmp.288
.Ltmp.282:
	leaq arr.43+0(%rip), %r9
	movq %r9, %rdi
	call get_elem2_ptr
	movq %rax, %r9
	movq %r9, %r8
.Ltmp.288:
	movl $2, %r9d
	negl %r9d
	movl four.42+0(%rip), %eax
	cdq
	idivl %r9d
	movl %eax, %r9d
	movslq %r9d, %r9
	negq %r9
	movq %r8, %rax
	movq %r9, %rdx
	leaq (%rax, %rdx, 4), %r9
	movq %r9, %rax
	movl 0(%rax), %r9d
	cmpl $4, %r9d
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl test_subtract_multi_dimensional
	.text
test_subtract_multi_dimensional:
	pushq %rbp
	movq %rsp, %rbp
	subq $64, %rsp
	movl $1, -48(%rbp)
	movl $2, -44(%rbp)
	movl $3, -40(%rbp)
	movl $4, -36(%rbp)
	movl $5, -32(%rbp)
	movl $6, -28(%rbp)
	movl $7, -24(%rbp)
	movl $8, -20(%rbp)
	movl $9, -16(%rbp)
	leaq -48(%rbp), %r9
	movq %r9, %rax
	leaq 24(%rax), %r8
	movslq index.45+0(%rip), %r9
	negq %r9
	movq %r8, %rax
	movq %r9, %rdx
	imul $12, %rdx
	leaq (%rax, %rdx, 1), %r9
	movq %r9, %rax
	movl 0(%rax), %r9d
	cmpl $4, %r9d
	movl $0, %r9d
	setE %r9b
	movl %r9d, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
	call test_add_constant_to_pointer
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.317
	movl $1, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.317:
	call test_add_negative_index
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.321
	movl $2, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.321:
	call test_add_pointer_to_int
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.325
	movl $3, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.325:
	call test_add_different_index_types
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.329
	movl $4, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.329:
	call test_add_complex_expressions
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.333
	movl $5, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.333:
	call test_add_multi_dimensional
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.337
	movl $6, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.337:
	call test_add_to_subarray_pointer
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.341
	movl $7, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.341:
	call test_subtract_from_pointer
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.345
	movl $8, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.345:
	call test_subtract_negative_index
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.349
	movl $9, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.349:
	call test_subtract_different_index_types
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.353
	movl $10, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.353:
	call test_subtract_complex_expressions
	movl %eax, %r9d
	cmpl $0, %r9d
	movl $0, %r9d
	setE %r9b
	cmpl $0, %r9d
	jE .Ltmp.357
	movl $11, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
.Ltmp.357:
	movl $0, %eax
	movq %rbp, %rsp
	popq %rbp
	ret
	.bss
	.align 4
flag.13:
	.zero 4
	.data
	.align 16
arr.18:
	.long 1
	.long 2
	.long 3
	.long 4
	.data
	.align 4
index.22:
	.long 2
	.data
	.align 4
index.25:
	.long 2
	.data
	.align 4
index.31:
	.long 3
	.data
	.align 4
flag.41:
	.long 1
	.data
	.align 4
four.42:
	.long 4
	.data
	.align 16
arr.43:
	.long 1
	.long 2
	.long 3
	.long 4
	.data
	.align 4
index.45:
	.long 1
	.section	.note.GNU-stack,"",@progbits

gcc -ggdb /home/alejandro/CComp/test_/test.s -o /home/alejandro/CComp/test_/test -lm
