sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
9
['/home/alejandro/CComp/code/cd.py', '--codegen', '-lmath.h', '--fold-constants', '--propagate-copies', '--eliminate-unreachable-code', '--eliminate-dead-stores', '--optimize', '/home/alejandro/CComp/test_/test.c']
File: /home/alejandro/CComp/test_/test.c
Last Stage: assemblyGeneration
NoLink: False
NotAssembly: False
--fold-constants True
--propagate-copies True
--eliminate-unreachable-code True
--eliminate-dead-stores True
--optimize True
Libary: math.h
[('double', <TokenType.DOUBLE_KW: 48>, 1), ('glob', <TokenType.IDENTIFIER: 2>, 1), ('=', <TokenType.EQUAL: 28>, 1), ('20.0', <TokenType.DOUBLE_CONSTANT: 47>, 1), (';', <TokenType.SEMICOLON: 11>, 1), ('double', <TokenType.DOUBLE_KW: 48>, 2), ('glob2', <TokenType.IDENTIFIER: 2>, 2), ('=', <TokenType.EQUAL: 28>, 2), ('30.0', <TokenType.DOUBLE_CONSTANT: 47>, 2), (';', <TokenType.SEMICOLON: 11>, 2), ('int', <TokenType.INT_KW: 4>, 3), ('glob3', <TokenType.IDENTIFIER: 2>, 3), ('=', <TokenType.EQUAL: 28>, 3), ('40.0', <TokenType.DOUBLE_CONSTANT: 47>, 3), (';', <TokenType.SEMICOLON: 11>, 3), ('double', <TokenType.DOUBLE_KW: 48>, 4), ('target', <TokenType.IDENTIFIER: 2>, 4), ('(', <TokenType.OPEN_PAREN: 7>, 4), ('void', <TokenType.VOID_KW: 5>, 4), (')', <TokenType.CLOSE_PAREN: 8>, 4), ('{', <TokenType.OPEN_BRACE: 9>, 4), ('double', <TokenType.DOUBLE_KW: 48>, 5), ('a', <TokenType.IDENTIFIER: 2>, 5), ('=', <TokenType.EQUAL: 28>, 5), ('glob', <TokenType.IDENTIFIER: 2>, 5), ('*', <TokenType.ASTERISK: 17>, 5), ('glob', <TokenType.IDENTIFIER: 2>, 5), (';', <TokenType.SEMICOLON: 11>, 5), ('double', <TokenType.DOUBLE_KW: 48>, 6), ('b', <TokenType.IDENTIFIER: 2>, 6), ('=', <TokenType.EQUAL: 28>, 6), ('glob2', <TokenType.IDENTIFIER: 2>, 6), ('+', <TokenType.PLUS: 18>, 6), ('2.0', <TokenType.DOUBLE_CONSTANT: 47>, 6), (';', <TokenType.SEMICOLON: 11>, 6), ('double', <TokenType.DOUBLE_KW: 48>, 7), ('c', <TokenType.IDENTIFIER: 2>, 7), ('=', <TokenType.EQUAL: 28>, 7), ('a', <TokenType.IDENTIFIER: 2>, 7), ('+', <TokenType.PLUS: 18>, 7), ('5.0', <TokenType.DOUBLE_CONSTANT: 47>, 7), (';', <TokenType.SEMICOLON: 11>, 7), ('double', <TokenType.DOUBLE_KW: 48>, 8), ('d', <TokenType.IDENTIFIER: 2>, 8), ('=', <TokenType.EQUAL: 28>, 8), ('b', <TokenType.IDENTIFIER: 2>, 8), ('-', <TokenType.HYPHEN: 13>, 8), ('glob3', <TokenType.IDENTIFIER: 2>, 8), (';', <TokenType.SEMICOLON: 11>, 8), ('double', <TokenType.DOUBLE_KW: 48>, 9), ('e', <TokenType.IDENTIFIER: 2>, 9), ('=', <TokenType.EQUAL: 28>, 9), ('glob', <TokenType.IDENTIFIER: 2>, 9), ('+', <TokenType.PLUS: 18>, 9), ('7.0', <TokenType.DOUBLE_CONSTANT: 47>, 9), (';', <TokenType.SEMICOLON: 11>, 9), ('double', <TokenType.DOUBLE_KW: 48>, 10), ('f', <TokenType.IDENTIFIER: 2>, 10), ('=', <TokenType.EQUAL: 28>, 10), ('glob2', <TokenType.IDENTIFIER: 2>, 10), ('*', <TokenType.ASTERISK: 17>, 10), ('2.0', <TokenType.DOUBLE_CONSTANT: 47>, 10), (';', <TokenType.SEMICOLON: 11>, 10), ('double', <TokenType.DOUBLE_KW: 48>, 11), ('g', <TokenType.IDENTIFIER: 2>, 11), ('=', <TokenType.EQUAL: 28>, 11), ('c', <TokenType.IDENTIFIER: 2>, 11), ('*', <TokenType.ASTERISK: 17>, 11), ('3.0', <TokenType.DOUBLE_CONSTANT: 47>, 11), (';', <TokenType.SEMICOLON: 11>, 11), ('double', <TokenType.DOUBLE_KW: 48>, 12), ('h', <TokenType.IDENTIFIER: 2>, 12), ('=', <TokenType.EQUAL: 28>, 12), ('d', <TokenType.IDENTIFIER: 2>, 12), ('*', <TokenType.ASTERISK: 17>, 12), ('112.', <TokenType.DOUBLE_CONSTANT: 47>, 12), (';', <TokenType.SEMICOLON: 11>, 12), ('double', <TokenType.DOUBLE_KW: 48>, 13), ('i', <TokenType.IDENTIFIER: 2>, 13), ('=', <TokenType.EQUAL: 28>, 13), ('e', <TokenType.IDENTIFIER: 2>, 13), ('/', <TokenType.FORWARD_SLASH: 15>, 13), ('3.0', <TokenType.DOUBLE_CONSTANT: 47>, 13), (';', <TokenType.SEMICOLON: 11>, 13), ('double', <TokenType.DOUBLE_KW: 48>, 14), ('j', <TokenType.IDENTIFIER: 2>, 14), ('=', <TokenType.EQUAL: 28>, 14), ('g', <TokenType.IDENTIFIER: 2>, 14), ('+', <TokenType.PLUS: 18>, 14), ('f', <TokenType.IDENTIFIER: 2>, 14), (';', <TokenType.SEMICOLON: 11>, 14), ('double', <TokenType.DOUBLE_KW: 48>, 15), ('k', <TokenType.IDENTIFIER: 2>, 15), ('=', <TokenType.EQUAL: 28>, 15), ('h', <TokenType.IDENTIFIER: 2>, 15), ('-', <TokenType.HYPHEN: 13>, 15), ('j', <TokenType.IDENTIFIER: 2>, 15), (';', <TokenType.SEMICOLON: 11>, 15), ('double', <TokenType.DOUBLE_KW: 48>, 16), ('l', <TokenType.IDENTIFIER: 2>, 16), ('=', <TokenType.EQUAL: 28>, 16), ('i', <TokenType.IDENTIFIER: 2>, 16), ('+', <TokenType.PLUS: 18>, 16), ('1000.', <TokenType.DOUBLE_CONSTANT: 47>, 16), (';', <TokenType.SEMICOLON: 11>, 16), ('double', <TokenType.DOUBLE_KW: 48>, 17), ('m', <TokenType.IDENTIFIER: 2>, 17), ('=', <TokenType.EQUAL: 28>, 17), ('j', <TokenType.IDENTIFIER: 2>, 17), ('-', <TokenType.HYPHEN: 13>, 17), ('d', <TokenType.IDENTIFIER: 2>, 17), (';', <TokenType.SEMICOLON: 11>, 17), ('double', <TokenType.DOUBLE_KW: 48>, 18), ('n', <TokenType.IDENTIFIER: 2>, 18), ('=', <TokenType.EQUAL: 28>, 18), ('m', <TokenType.IDENTIFIER: 2>, 18), ('*', <TokenType.ASTERISK: 17>, 18), ('l', <TokenType.IDENTIFIER: 2>, 18), (';', <TokenType.SEMICOLON: 11>, 18), ('if', <TokenType.IF_KW: 31>, 19), ('(', <TokenType.OPEN_PAREN: 7>, 19), ('a', <TokenType.IDENTIFIER: 2>, 19), ('==', <TokenType.TEQUALS: 24>, 19), ('400.0', <TokenType.DOUBLE_CONSTANT: 47>, 19), ('&&', <TokenType.TAMPERSANDS: 22>, 19), ('b', <TokenType.IDENTIFIER: 2>, 19), ('==', <TokenType.TEQUALS: 24>, 19), ('32.0', <TokenType.DOUBLE_CONSTANT: 47>, 19), ('&&', <TokenType.TAMPERSANDS: 22>, 19), ('c', <TokenType.IDENTIFIER: 2>, 19), ('==', <TokenType.TEQUALS: 24>, 19), ('405.0', <TokenType.DOUBLE_CONSTANT: 47>, 19), ('&&', <TokenType.TAMPERSANDS: 22>, 19), ('d', <TokenType.IDENTIFIER: 2>, 19), ('==', <TokenType.TEQUALS: 24>, 19), ('-', <TokenType.HYPHEN: 13>, 19), ('8.0', <TokenType.DOUBLE_CONSTANT: 47>, 19), ('&&', <TokenType.TAMPERSANDS: 22>, 19), ('e', <TokenType.IDENTIFIER: 2>, 19), ('==', <TokenType.TEQUALS: 24>, 19), ('27.0', <TokenType.DOUBLE_CONSTANT: 47>, 19), ('&&', <TokenType.TAMPERSANDS: 22>, 19), ('f', <TokenType.IDENTIFIER: 2>, 20), ('==', <TokenType.TEQUALS: 24>, 20), ('60.0', <TokenType.DOUBLE_CONSTANT: 47>, 20), ('&&', <TokenType.TAMPERSANDS: 22>, 20), ('g', <TokenType.IDENTIFIER: 2>, 20), ('==', <TokenType.TEQUALS: 24>, 20), ('1215.0', <TokenType.DOUBLE_CONSTANT: 47>, 20), ('&&', <TokenType.TAMPERSANDS: 22>, 20), ('h', <TokenType.IDENTIFIER: 2>, 20), ('==', <TokenType.TEQUALS: 24>, 20), ('-', <TokenType.HYPHEN: 13>, 20), ('896.', <TokenType.DOUBLE_CONSTANT: 47>, 20), ('&&', <TokenType.TAMPERSANDS: 22>, 20), ('i', <TokenType.IDENTIFIER: 2>, 20), ('==', <TokenType.TEQUALS: 24>, 20), ('9.0', <TokenType.DOUBLE_CONSTANT: 47>, 20), ('&&', <TokenType.TAMPERSANDS: 22>, 20), ('j', <TokenType.IDENTIFIER: 2>, 20), ('==', <TokenType.TEQUALS: 24>, 20), ('1275.', <TokenType.DOUBLE_CONSTANT: 47>, 20), ('&&', <TokenType.TAMPERSANDS: 22>, 20), ('k', <TokenType.IDENTIFIER: 2>, 21), ('==', <TokenType.TEQUALS: 24>, 21), ('-', <TokenType.HYPHEN: 13>, 21), ('2171.', <TokenType.DOUBLE_CONSTANT: 47>, 21), ('&&', <TokenType.TAMPERSANDS: 22>, 21), ('l', <TokenType.IDENTIFIER: 2>, 21), ('==', <TokenType.TEQUALS: 24>, 21), ('1009.', <TokenType.DOUBLE_CONSTANT: 47>, 21), ('&&', <TokenType.TAMPERSANDS: 22>, 21), ('m', <TokenType.IDENTIFIER: 2>, 21), ('==', <TokenType.TEQUALS: 24>, 21), ('1283.', <TokenType.DOUBLE_CONSTANT: 47>, 21), ('&&', <TokenType.TAMPERSANDS: 22>, 21), ('n', <TokenType.IDENTIFIER: 2>, 21), ('==', <TokenType.TEQUALS: 24>, 21), ('1294547.', <TokenType.DOUBLE_CONSTANT: 47>, 21), (')', <TokenType.CLOSE_PAREN: 8>, 21), ('{', <TokenType.OPEN_BRACE: 9>, 21), ('return', <TokenType.RETURN_KW: 6>, 22), ('0', <TokenType.INT_CONSTANT: 3>, 22), (';', <TokenType.SEMICOLON: 11>, 22), ('}', <TokenType.CLOSE_BRACE: 10>, 23), ('else', <TokenType.ELSE_KW: 32>, 23), ('{', <TokenType.OPEN_BRACE: 9>, 23), ('return', <TokenType.RETURN_KW: 6>, 24), ('1', <TokenType.INT_CONSTANT: 3>, 24), (';', <TokenType.SEMICOLON: 11>, 24), ('}', <TokenType.CLOSE_BRACE: 10>, 25), ('}', <TokenType.CLOSE_BRACE: 10>, 26)]
<parser.Double object at 0x7fc677d86ae0>
[<parser.TypeS object at 0x7fc67ba15df0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob)
double
<parser.Double object at 0x7fc67ba15df0>
[<parser.TypeS object at 0x7fc677d86b40>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: glob2)
double
<parser.Int object at 0x7fc67ba15df0>
[<parser.TypeS object at 0x7fc677d86a20>]
[<class 'parser.Int'>]
int
int (IdenDeclarator: glob3)
int
<parser.Double object at 0x7fc67ba15df0>
[<parser.TypeS object at 0x7fc677d86d20>]
[<class 'parser.Double'>]
double
double (FunDeclarator: (IdenDeclarator: target) [])
FunType: ParamTypes: [] Return Type: double
<parser.Double object at 0x7fc677d86f00>
[<parser.TypeS object at 0x7fc677d86f30>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: a)
double
<parser.Double object at 0x7fc677d86f30>
[<parser.TypeS object at 0x7fc677d86f00>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: b)
double
<parser.Double object at 0x7fc677d86f00>
[<parser.TypeS object at 0x7fc677d86f30>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: c)
double
<parser.Double object at 0x7fc677d86f30>
[<parser.TypeS object at 0x7fc677d86f00>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: d)
double
<parser.Double object at 0x7fc677d86f00>
[<parser.TypeS object at 0x7fc677d86f30>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: e)
double
<parser.Double object at 0x7fc677d86f30>
[<parser.TypeS object at 0x7fc677d86f00>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: f)
double
<parser.Double object at 0x7fc677d86f00>
[<parser.TypeS object at 0x7fc677d86f30>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: g)
double
<parser.Double object at 0x7fc677d86f30>
[<parser.TypeS object at 0x7fc677d86f00>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: h)
double
<parser.Double object at 0x7fc677d86f00>
[<parser.TypeS object at 0x7fc677d86f30>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: i)
double
<parser.Double object at 0x7fc677d86f30>
[<parser.TypeS object at 0x7fc677d86f00>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: j)
double
<parser.Double object at 0x7fc677d86f30>
[<parser.TypeS object at 0x7fc677acc0e0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: k)
double
<parser.Double object at 0x7fc677acc2c0>
[<parser.TypeS object at 0x7fc677acc0e0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: l)
double
<parser.Double object at 0x7fc677acc0e0>
[<parser.TypeS object at 0x7fc677acc2c0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: m)
double
<parser.Double object at 0x7fc677acc2c0>
[<parser.TypeS object at 0x7fc677acc0e0>]
[<class 'parser.Double'>]
double
double (IdenDeclarator: n)
double
0
1
1
AST Program:
VarDecl: NULL double glob = SI: (20.0)
VarDecl: NULL double glob2 = SI: (30.0)
VarDecl: NULL int glob3 = SI: (40.0)
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double a = SI: ((glob) MULTIPLY (glob))
Declaration:
VarDecl: NULL double b = SI: ((glob2) ADD (2.0))
Declaration:
VarDecl: NULL double c = SI: ((a) ADD (5.0))
Declaration:
VarDecl: NULL double d = SI: ((b) SUBTRACT (glob3))
Declaration:
VarDecl: NULL double e = SI: ((glob) ADD (7.0))
Declaration:
VarDecl: NULL double f = SI: ((glob2) MULTIPLY (2.0))
Declaration:
VarDecl: NULL double g = SI: ((c) MULTIPLY (3.0))
Declaration:
VarDecl: NULL double h = SI: ((d) MULTIPLY (112.0))
Declaration:
VarDecl: NULL double i = SI: ((e) DIVIDE (3.0))
Declaration:
VarDecl: NULL double j = SI: ((g) ADD (f))
Declaration:
VarDecl: NULL double k = SI: ((h) SUBTRACT (j))
Declaration:
VarDecl: NULL double l = SI: ((i) ADD (1000.0))
Declaration:
VarDecl: NULL double m = SI: ((j) SUBTRACT (d))
Declaration:
VarDecl: NULL double n = SI: ((m) MULTIPLY (l))
Statement: if ((((((((((((((((a) EQUAL (400.0)) AND ((b) EQUAL (32.0))) AND ((c) EQUAL (405.0))) AND ((d) EQUAL (NEGATE (8.0)))) AND ((e) EQUAL (27.0))) AND ((f) EQUAL (60.0))) AND ((g) EQUAL (1215.0))) AND ((h) EQUAL (NEGATE (896.0)))) AND ((i) EQUAL (9.0))) AND ((j) EQUAL (1275.0))) AND ((k) EQUAL (NEGATE (2171.0)))) AND ((l) EQUAL (1009.0))) AND ((m) EQUAL (1283.0))) AND ((n) EQUAL (1294547.0))))
	Statement: return (0)
	Statement: return (1)

OLD {}
NEW {}
OLD {}
NEW {}
OLD {}
NEW {}
0
1
1
AST Program:
VarDecl: NULL double glob = SI: (20.0)
VarDecl: NULL double glob2 = SI: (30.0)
VarDecl: NULL int glob3 = SI: (40.0)
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double a.0 = SI: ((glob) MULTIPLY (glob))
Declaration:
VarDecl: NULL double b.1 = SI: ((glob2) ADD (2.0))
Declaration:
VarDecl: NULL double c.2 = SI: ((a.0) ADD (5.0))
Declaration:
VarDecl: NULL double d.3 = SI: ((b.1) SUBTRACT (glob3))
Declaration:
VarDecl: NULL double e.4 = SI: ((glob) ADD (7.0))
Declaration:
VarDecl: NULL double f.5 = SI: ((glob2) MULTIPLY (2.0))
Declaration:
VarDecl: NULL double g.6 = SI: ((c.2) MULTIPLY (3.0))
Declaration:
VarDecl: NULL double h.7 = SI: ((d.3) MULTIPLY (112.0))
Declaration:
VarDecl: NULL double i.8 = SI: ((e.4) DIVIDE (3.0))
Declaration:
VarDecl: NULL double j.9 = SI: ((g.6) ADD (f.5))
Declaration:
VarDecl: NULL double k.10 = SI: ((h.7) SUBTRACT (j.9))
Declaration:
VarDecl: NULL double l.11 = SI: ((i.8) ADD (1000.0))
Declaration:
VarDecl: NULL double m.12 = SI: ((j.9) SUBTRACT (d.3))
Declaration:
VarDecl: NULL double n.13 = SI: ((m.12) MULTIPLY (l.11))
Statement: if ((((((((((((((((a.0) EQUAL (400.0)) AND ((b.1) EQUAL (32.0))) AND ((c.2) EQUAL (405.0))) AND ((d.3) EQUAL (NEGATE (8.0)))) AND ((e.4) EQUAL (27.0))) AND ((f.5) EQUAL (60.0))) AND ((g.6) EQUAL (1215.0))) AND ((h.7) EQUAL (NEGATE (896.0)))) AND ((i.8) EQUAL (9.0))) AND ((j.9) EQUAL (1275.0))) AND ((k.10) EQUAL (NEGATE (2171.0)))) AND ((l.11) EQUAL (1009.0))) AND ((m.12) EQUAL (1283.0))) AND ((n.13) EQUAL (1294547.0))))
	Statement: return (0)
	Statement: return (1)

0
1
1
AST Program:
VarDecl: NULL double glob = SI: (20.0 : double) : double
VarDecl: NULL double glob2 = SI: (30.0 : double) : double
VarDecl: NULL int glob3 = SI: ((int) (40.0 : double) : int) : int
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double a.0 = SI: ((glob : double) MULTIPLY (glob : double) : double) : double
Declaration:
VarDecl: NULL double b.1 = SI: ((glob2 : double) ADD (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double c.2 = SI: ((a.0 : double) ADD (5.0 : double) : double) : double
Declaration:
VarDecl: NULL double d.3 = SI: ((b.1 : double) SUBTRACT ((double) (glob3 : int) : double) : double) : double
Declaration:
VarDecl: NULL double e.4 = SI: ((glob : double) ADD (7.0 : double) : double) : double
Declaration:
VarDecl: NULL double f.5 = SI: ((glob2 : double) MULTIPLY (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double g.6 = SI: ((c.2 : double) MULTIPLY (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double h.7 = SI: ((d.3 : double) MULTIPLY (112.0 : double) : double) : double
Declaration:
VarDecl: NULL double i.8 = SI: ((e.4 : double) DIVIDE (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double j.9 = SI: ((g.6 : double) ADD (f.5 : double) : double) : double
Declaration:
VarDecl: NULL double k.10 = SI: ((h.7 : double) SUBTRACT (j.9 : double) : double) : double
Declaration:
VarDecl: NULL double l.11 = SI: ((i.8 : double) ADD (1000.0 : double) : double) : double
Declaration:
VarDecl: NULL double m.12 = SI: ((j.9 : double) SUBTRACT (d.3 : double) : double) : double
Declaration:
VarDecl: NULL double n.13 = SI: ((m.12 : double) MULTIPLY (l.11 : double) : double) : double
Statement: if ((((((((((((((((a.0 : double) EQUAL (400.0 : double) : int) AND ((b.1 : double) EQUAL (32.0 : double) : int) : int) AND ((c.2 : double) EQUAL (405.0 : double) : int) : int) AND ((d.3 : double) EQUAL (NEGATE (8.0 : double) : double) : int) : int) AND ((e.4 : double) EQUAL (27.0 : double) : int) : int) AND ((f.5 : double) EQUAL (60.0 : double) : int) : int) AND ((g.6 : double) EQUAL (1215.0 : double) : int) : int) AND ((h.7 : double) EQUAL (NEGATE (896.0 : double) : double) : int) : int) AND ((i.8 : double) EQUAL (9.0 : double) : int) : int) AND ((j.9 : double) EQUAL (1275.0 : double) : int) : int) AND ((k.10 : double) EQUAL (NEGATE (2171.0 : double) : double) : int) : int) AND ((l.11 : double) EQUAL (1009.0 : double) : int) : int) AND ((m.12 : double) EQUAL (1283.0 : double) : int) : int) AND ((n.13 : double) EQUAL (1294547.0 : double) : int) : int))
	Statement: return ((double) (0 : int) : double)
	Statement: return ((double) (1 : int) : double)

Type Table:
 {}
Symbol Table:
 {'glob': glob double InitialVal: InitialList: [c_double(20.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(30.0)] Global: True, 'glob3': glob3 int InitialVal: InitialList: [c_int(40)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: double Defined: True Global: True, 'a.0': a.0 double <typeChecker.LocalAttributes object at 0x7fc677ae93a0>, 'b.1': b.1 double <typeChecker.LocalAttributes object at 0x7fc677ae95b0>, 'c.2': c.2 double <typeChecker.LocalAttributes object at 0x7fc677ae97f0>, 'd.3': d.3 double <typeChecker.LocalAttributes object at 0x7fc677ae9a30>, 'e.4': e.4 double <typeChecker.LocalAttributes object at 0x7fc677ae9ca0>, 'f.5': f.5 double <typeChecker.LocalAttributes object at 0x7fc677ae9ee0>, 'g.6': g.6 double <typeChecker.LocalAttributes object at 0x7fc677aea150>, 'h.7': h.7 double <typeChecker.LocalAttributes object at 0x7fc677aea3c0>, 'i.8': i.8 double <typeChecker.LocalAttributes object at 0x7fc677aea600>, 'j.9': j.9 double <typeChecker.LocalAttributes object at 0x7fc677aea840>, 'k.10': k.10 double <typeChecker.LocalAttributes object at 0x7fc677dac230>, 'l.11': l.11 double <typeChecker.LocalAttributes object at 0x7fc677dac440>, 'm.12': m.12 double <typeChecker.LocalAttributes object at 0x7fc677dac680>, 'n.13': n.13 double <typeChecker.LocalAttributes object at 0x7fc677dac890>}
0
1
1
AST Program:
VarDecl: NULL double glob = SI: (20.0 : double) : double
VarDecl: NULL double glob2 = SI: (30.0 : double) : double
VarDecl: NULL int glob3 = SI: ((int) (40.0 : double) : int) : int
FunDecl: NULL target () ParamTypes: () ReturnType: double
Declaration:
VarDecl: NULL double a.0 = SI: ((glob : double) MULTIPLY (glob : double) : double) : double
Declaration:
VarDecl: NULL double b.1 = SI: ((glob2 : double) ADD (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double c.2 = SI: ((a.0 : double) ADD (5.0 : double) : double) : double
Declaration:
VarDecl: NULL double d.3 = SI: ((b.1 : double) SUBTRACT ((double) (glob3 : int) : double) : double) : double
Declaration:
VarDecl: NULL double e.4 = SI: ((glob : double) ADD (7.0 : double) : double) : double
Declaration:
VarDecl: NULL double f.5 = SI: ((glob2 : double) MULTIPLY (2.0 : double) : double) : double
Declaration:
VarDecl: NULL double g.6 = SI: ((c.2 : double) MULTIPLY (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double h.7 = SI: ((d.3 : double) MULTIPLY (112.0 : double) : double) : double
Declaration:
VarDecl: NULL double i.8 = SI: ((e.4 : double) DIVIDE (3.0 : double) : double) : double
Declaration:
VarDecl: NULL double j.9 = SI: ((g.6 : double) ADD (f.5 : double) : double) : double
Declaration:
VarDecl: NULL double k.10 = SI: ((h.7 : double) SUBTRACT (j.9 : double) : double) : double
Declaration:
VarDecl: NULL double l.11 = SI: ((i.8 : double) ADD (1000.0 : double) : double) : double
Declaration:
VarDecl: NULL double m.12 = SI: ((j.9 : double) SUBTRACT (d.3 : double) : double) : double
Declaration:
VarDecl: NULL double n.13 = SI: ((m.12 : double) MULTIPLY (l.11 : double) : double) : double
Statement: if ((((((((((((((((a.0 : double) EQUAL (400.0 : double) : int) AND ((b.1 : double) EQUAL (32.0 : double) : int) : int) AND ((c.2 : double) EQUAL (405.0 : double) : int) : int) AND ((d.3 : double) EQUAL (NEGATE (8.0 : double) : double) : int) : int) AND ((e.4 : double) EQUAL (27.0 : double) : int) : int) AND ((f.5 : double) EQUAL (60.0 : double) : int) : int) AND ((g.6 : double) EQUAL (1215.0 : double) : int) : int) AND ((h.7 : double) EQUAL (NEGATE (896.0 : double) : double) : int) : int) AND ((i.8 : double) EQUAL (9.0 : double) : int) : int) AND ((j.9 : double) EQUAL (1275.0 : double) : int) : int) AND ((k.10 : double) EQUAL (NEGATE (2171.0 : double) : double) : int) : int) AND ((l.11 : double) EQUAL (1009.0 : double) : int) : int) AND ((m.12 : double) EQUAL (1283.0 : double) : int) : int) AND ((n.13 : double) EQUAL (1294547.0 : double) : int) : int))
	Statement: return ((double) (0 : int) : double)
	Statement: return ((double) (1 : int) : double)

glob double InitialVal: InitialList: [c_double(20.0)] Global: True
glob2 double InitialVal: InitialList: [c_double(30.0)] Global: True
glob3 int InitialVal: InitialList: [c_int(40)] Global: True
target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
a.0 double <typeChecker.LocalAttributes object at 0x7fc677ae93a0>
b.1 double <typeChecker.LocalAttributes object at 0x7fc677ae95b0>
c.2 double <typeChecker.LocalAttributes object at 0x7fc677ae97f0>
d.3 double <typeChecker.LocalAttributes object at 0x7fc677ae9a30>
e.4 double <typeChecker.LocalAttributes object at 0x7fc677ae9ca0>
f.5 double <typeChecker.LocalAttributes object at 0x7fc677ae9ee0>
g.6 double <typeChecker.LocalAttributes object at 0x7fc677aea150>
h.7 double <typeChecker.LocalAttributes object at 0x7fc677aea3c0>
i.8 double <typeChecker.LocalAttributes object at 0x7fc677aea600>
j.9 double <typeChecker.LocalAttributes object at 0x7fc677aea840>
k.10 double <typeChecker.LocalAttributes object at 0x7fc677dac230>
l.11 double <typeChecker.LocalAttributes object at 0x7fc677dac440>
m.12 double <typeChecker.LocalAttributes object at 0x7fc677dac680>
n.13 double <typeChecker.LocalAttributes object at 0x7fc677dac890>
tmp.14 double <typeChecker.LocalAttributes object at 0x7fc677daf620>
tmp.15 double <typeChecker.LocalAttributes object at 0x7fc677daf650>
tmp.16 double <typeChecker.LocalAttributes object at 0x7fc677daf7a0>
tmp.17 double <typeChecker.LocalAttributes object at 0x7fc677dafbf0>
tmp.18 double <typeChecker.LocalAttributes object at 0x7fc677daf980>
tmp.19 double <typeChecker.LocalAttributes object at 0x7fc677dafb00>
tmp.20 double <typeChecker.LocalAttributes object at 0x7fc677dafdd0>
tmp.21 double <typeChecker.LocalAttributes object at 0x7fc677daffb0>
tmp.22 double <typeChecker.LocalAttributes object at 0x7fc677da01d0>
tmp.23 double <typeChecker.LocalAttributes object at 0x7fc677da03e0>
tmp.24 double <typeChecker.LocalAttributes object at 0x7fc677da0590>
tmp.25 double <typeChecker.LocalAttributes object at 0x7fc677da07a0>
tmp.26 double <typeChecker.LocalAttributes object at 0x7fc677da0a10>
tmp.27 double <typeChecker.LocalAttributes object at 0x7fc677da0bf0>
tmp.28 double <typeChecker.LocalAttributes object at 0x7fc677da0dd0>
tmp.29 int <typeChecker.LocalAttributes object at 0x7fc677da20c0>
tmp.31 int <typeChecker.LocalAttributes object at 0x7fc677da22d0>
tmp.32 int <typeChecker.LocalAttributes object at 0x7fc677da1fd0>
tmp.35 int <typeChecker.LocalAttributes object at 0x7fc677da2690>
tmp.36 int <typeChecker.LocalAttributes object at 0x7fc677da1e80>
tmp.39 double <typeChecker.LocalAttributes object at 0x7fc677da2cc0>
tmp.40 int <typeChecker.LocalAttributes object at 0x7fc677da2a50>
tmp.41 int <typeChecker.LocalAttributes object at 0x7fc677da1d30>
tmp.44 int <typeChecker.LocalAttributes object at 0x7fc677da2f60>
tmp.45 int <typeChecker.LocalAttributes object at 0x7fc677da1be0>
tmp.48 int <typeChecker.LocalAttributes object at 0x7fc677da3320>
tmp.49 int <typeChecker.LocalAttributes object at 0x7fc677da1a90>
tmp.52 int <typeChecker.LocalAttributes object at 0x7fc677da36e0>
tmp.53 int <typeChecker.LocalAttributes object at 0x7fc677da1940>
tmp.56 double <typeChecker.LocalAttributes object at 0x7fc677da3d70>
tmp.57 int <typeChecker.LocalAttributes object at 0x7fc677da3b00>
tmp.58 int <typeChecker.LocalAttributes object at 0x7fc677da17f0>
tmp.61 int <typeChecker.LocalAttributes object at 0x7fc677ac41d0>
tmp.62 int <typeChecker.LocalAttributes object at 0x7fc677da1670>
tmp.65 int <typeChecker.LocalAttributes object at 0x7fc677ac4410>
tmp.66 int <typeChecker.LocalAttributes object at 0x7fc677da14c0>
tmp.69 double <typeChecker.LocalAttributes object at 0x7fc677ac4a40>
tmp.70 int <typeChecker.LocalAttributes object at 0x7fc677ac47d0>
tmp.71 int <typeChecker.LocalAttributes object at 0x7fc677da1370>
tmp.74 int <typeChecker.LocalAttributes object at 0x7fc677ac4d40>
tmp.75 int <typeChecker.LocalAttributes object at 0x7fc677da1220>
tmp.78 int <typeChecker.LocalAttributes object at 0x7fc677ac5160>
tmp.79 int <typeChecker.LocalAttributes object at 0x7fc677da10d0>
tmp.82 int <typeChecker.LocalAttributes object at 0x7fc677ac55e0>
tmp.83 int <typeChecker.LocalAttributes object at 0x7fc677da1010>
tmp.85 int <typeChecker.LocalAttributes object at 0x7fc677da09b0>
tmp.88 double <typeChecker.LocalAttributes object at 0x7fc677ac5d30>
tmp.89 double <typeChecker.LocalAttributes object at 0x7fc677ac5f10>
TAC Program:[Function: target ([]) instructions:[tmp.14 = glob * glob, CopyToOffset(a.0 + 0) = tmp.14 , tmp.15 = glob2 + 2.0, CopyToOffset(b.1 + 0) = tmp.15 , tmp.16 = a.0 + 5.0, CopyToOffset(c.2 + 0) = tmp.16 , IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, CopyToOffset(d.3 + 0) = tmp.18 , tmp.19 = glob + 7.0, CopyToOffset(e.4 + 0) = tmp.19 , tmp.20 = glob2 * 2.0, CopyToOffset(f.5 + 0) = tmp.20 , tmp.21 = c.2 * 3.0, CopyToOffset(g.6 + 0) = tmp.21 , tmp.22 = d.3 * 112.0, CopyToOffset(h.7 + 0) = tmp.22 , tmp.23 = e.4 / 3.0, CopyToOffset(i.8 + 0) = tmp.23 , tmp.24 = g.6 + f.5, CopyToOffset(j.9 + 0) = tmp.24 , tmp.25 = h.7 - j.9, CopyToOffset(k.10 + 0) = tmp.25 , tmp.26 = i.8 + 1000.0, CopyToOffset(l.11 + 0) = tmp.26 , tmp.27 = j.9 - d.3, CopyToOffset(m.12 + 0) = tmp.27 , tmp.28 = m.12 * l.11, CopyToOffset(n.13 + 0) = tmp.28 , tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Jump(tmp.86), Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89, Label(tmp.86), Return 0], Global: True glob = [c_double(20.0)], Global: True glob2 = [c_double(30.0)], Global: True glob3 = [c_int(40)]]
Type Table:
 {}
Symbol Table:
 {'glob': glob double InitialVal: InitialList: [c_double(20.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(30.0)] Global: True, 'glob3': glob3 int InitialVal: InitialList: [c_int(40)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: double Defined: True Global: True, 'a.0': a.0 double <typeChecker.LocalAttributes object at 0x7fc677ae93a0>, 'b.1': b.1 double <typeChecker.LocalAttributes object at 0x7fc677ae95b0>, 'c.2': c.2 double <typeChecker.LocalAttributes object at 0x7fc677ae97f0>, 'd.3': d.3 double <typeChecker.LocalAttributes object at 0x7fc677ae9a30>, 'e.4': e.4 double <typeChecker.LocalAttributes object at 0x7fc677ae9ca0>, 'f.5': f.5 double <typeChecker.LocalAttributes object at 0x7fc677ae9ee0>, 'g.6': g.6 double <typeChecker.LocalAttributes object at 0x7fc677aea150>, 'h.7': h.7 double <typeChecker.LocalAttributes object at 0x7fc677aea3c0>, 'i.8': i.8 double <typeChecker.LocalAttributes object at 0x7fc677aea600>, 'j.9': j.9 double <typeChecker.LocalAttributes object at 0x7fc677aea840>, 'k.10': k.10 double <typeChecker.LocalAttributes object at 0x7fc677dac230>, 'l.11': l.11 double <typeChecker.LocalAttributes object at 0x7fc677dac440>, 'm.12': m.12 double <typeChecker.LocalAttributes object at 0x7fc677dac680>, 'n.13': n.13 double <typeChecker.LocalAttributes object at 0x7fc677dac890>, 'tmp.14': tmp.14 double <typeChecker.LocalAttributes object at 0x7fc677daf620>, 'tmp.15': tmp.15 double <typeChecker.LocalAttributes object at 0x7fc677daf650>, 'tmp.16': tmp.16 double <typeChecker.LocalAttributes object at 0x7fc677daf7a0>, 'tmp.17': tmp.17 double <typeChecker.LocalAttributes object at 0x7fc677dafbf0>, 'tmp.18': tmp.18 double <typeChecker.LocalAttributes object at 0x7fc677daf980>, 'tmp.19': tmp.19 double <typeChecker.LocalAttributes object at 0x7fc677dafb00>, 'tmp.20': tmp.20 double <typeChecker.LocalAttributes object at 0x7fc677dafdd0>, 'tmp.21': tmp.21 double <typeChecker.LocalAttributes object at 0x7fc677daffb0>, 'tmp.22': tmp.22 double <typeChecker.LocalAttributes object at 0x7fc677da01d0>, 'tmp.23': tmp.23 double <typeChecker.LocalAttributes object at 0x7fc677da03e0>, 'tmp.24': tmp.24 double <typeChecker.LocalAttributes object at 0x7fc677da0590>, 'tmp.25': tmp.25 double <typeChecker.LocalAttributes object at 0x7fc677da07a0>, 'tmp.26': tmp.26 double <typeChecker.LocalAttributes object at 0x7fc677da0a10>, 'tmp.27': tmp.27 double <typeChecker.LocalAttributes object at 0x7fc677da0bf0>, 'tmp.28': tmp.28 double <typeChecker.LocalAttributes object at 0x7fc677da0dd0>, 'tmp.29': tmp.29 int <typeChecker.LocalAttributes object at 0x7fc677da20c0>, 'tmp.31': tmp.31 int <typeChecker.LocalAttributes object at 0x7fc677da22d0>, 'tmp.32': tmp.32 int <typeChecker.LocalAttributes object at 0x7fc677da1fd0>, 'tmp.35': tmp.35 int <typeChecker.LocalAttributes object at 0x7fc677da2690>, 'tmp.36': tmp.36 int <typeChecker.LocalAttributes object at 0x7fc677da1e80>, 'tmp.39': tmp.39 double <typeChecker.LocalAttributes object at 0x7fc677da2cc0>, 'tmp.40': tmp.40 int <typeChecker.LocalAttributes object at 0x7fc677da2a50>, 'tmp.41': tmp.41 int <typeChecker.LocalAttributes object at 0x7fc677da1d30>, 'tmp.44': tmp.44 int <typeChecker.LocalAttributes object at 0x7fc677da2f60>, 'tmp.45': tmp.45 int <typeChecker.LocalAttributes object at 0x7fc677da1be0>, 'tmp.48': tmp.48 int <typeChecker.LocalAttributes object at 0x7fc677da3320>, 'tmp.49': tmp.49 int <typeChecker.LocalAttributes object at 0x7fc677da1a90>, 'tmp.52': tmp.52 int <typeChecker.LocalAttributes object at 0x7fc677da36e0>, 'tmp.53': tmp.53 int <typeChecker.LocalAttributes object at 0x7fc677da1940>, 'tmp.56': tmp.56 double <typeChecker.LocalAttributes object at 0x7fc677da3d70>, 'tmp.57': tmp.57 int <typeChecker.LocalAttributes object at 0x7fc677da3b00>, 'tmp.58': tmp.58 int <typeChecker.LocalAttributes object at 0x7fc677da17f0>, 'tmp.61': tmp.61 int <typeChecker.LocalAttributes object at 0x7fc677ac41d0>, 'tmp.62': tmp.62 int <typeChecker.LocalAttributes object at 0x7fc677da1670>, 'tmp.65': tmp.65 int <typeChecker.LocalAttributes object at 0x7fc677ac4410>, 'tmp.66': tmp.66 int <typeChecker.LocalAttributes object at 0x7fc677da14c0>, 'tmp.69': tmp.69 double <typeChecker.LocalAttributes object at 0x7fc677ac4a40>, 'tmp.70': tmp.70 int <typeChecker.LocalAttributes object at 0x7fc677ac47d0>, 'tmp.71': tmp.71 int <typeChecker.LocalAttributes object at 0x7fc677da1370>, 'tmp.74': tmp.74 int <typeChecker.LocalAttributes object at 0x7fc677ac4d40>, 'tmp.75': tmp.75 int <typeChecker.LocalAttributes object at 0x7fc677da1220>, 'tmp.78': tmp.78 int <typeChecker.LocalAttributes object at 0x7fc677ac5160>, 'tmp.79': tmp.79 int <typeChecker.LocalAttributes object at 0x7fc677da10d0>, 'tmp.82': tmp.82 int <typeChecker.LocalAttributes object at 0x7fc677ac55e0>, 'tmp.83': tmp.83 int <typeChecker.LocalAttributes object at 0x7fc677da1010>, 'tmp.85': tmp.85 int <typeChecker.LocalAttributes object at 0x7fc677da09b0>, 'tmp.88': tmp.88 double <typeChecker.LocalAttributes object at 0x7fc677ac5d30>, 'tmp.89': tmp.89 double <typeChecker.LocalAttributes object at 0x7fc677ac5f10>}
OPTIMIZING FUNCTION Function: target ([]) instructions:[tmp.14 = glob * glob, CopyToOffset(a.0 + 0) = tmp.14 , tmp.15 = glob2 + 2.0, CopyToOffset(b.1 + 0) = tmp.15 , tmp.16 = a.0 + 5.0, CopyToOffset(c.2 + 0) = tmp.16 , IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, CopyToOffset(d.3 + 0) = tmp.18 , tmp.19 = glob + 7.0, CopyToOffset(e.4 + 0) = tmp.19 , tmp.20 = glob2 * 2.0, CopyToOffset(f.5 + 0) = tmp.20 , tmp.21 = c.2 * 3.0, CopyToOffset(g.6 + 0) = tmp.21 , tmp.22 = d.3 * 112.0, CopyToOffset(h.7 + 0) = tmp.22 , tmp.23 = e.4 / 3.0, CopyToOffset(i.8 + 0) = tmp.23 , tmp.24 = g.6 + f.5, CopyToOffset(j.9 + 0) = tmp.24 , tmp.25 = h.7 - j.9, CopyToOffset(k.10 + 0) = tmp.25 , tmp.26 = i.8 + 1000.0, CopyToOffset(l.11 + 0) = tmp.26 , tmp.27 = j.9 - d.3, CopyToOffset(m.12 + 0) = tmp.27 , tmp.28 = m.12 * l.11, CopyToOffset(n.13 + 0) = tmp.28 , tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Jump(tmp.86), Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89, Label(tmp.86), Return 0]
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob, glob3, glob2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.14 = glob * glob, CopyToOffset(a.0 + 0) = tmp.14 , tmp.15 = glob2 + 2.0, CopyToOffset(b.1 + 0) = tmp.15 , tmp.16 = a.0 + 5.0, CopyToOffset(c.2 + 0) = tmp.16 , IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, CopyToOffset(d.3 + 0) = tmp.18 , tmp.19 = glob + 7.0, CopyToOffset(e.4 + 0) = tmp.19 , tmp.20 = glob2 * 2.0, CopyToOffset(f.5 + 0) = tmp.20 , tmp.21 = c.2 * 3.0, CopyToOffset(g.6 + 0) = tmp.21 , tmp.22 = d.3 * 112.0, CopyToOffset(h.7 + 0) = tmp.22 , tmp.23 = e.4 / 3.0, CopyToOffset(i.8 + 0) = tmp.23 , tmp.24 = g.6 + f.5, CopyToOffset(j.9 + 0) = tmp.24 , tmp.25 = h.7 - j.9, CopyToOffset(k.10 + 0) = tmp.25 , tmp.26 = i.8 + 1000.0, CopyToOffset(l.11 + 0) = tmp.26 , tmp.27 = j.9 - d.3, CopyToOffset(m.12 + 0) = tmp.27 , tmp.28 = m.12 * l.11, CopyToOffset(n.13 + 0) = tmp.28 , tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Jump(tmp.86), Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89, Label(tmp.86), Return 0]
NEW LIST [tmp.14 = glob * glob, Copy a.0 = tmp.14, tmp.15 = glob2 + 2.0, Copy b.1 = tmp.15, tmp.16 = a.0 + 5.0, Copy c.2 = tmp.16, IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, Copy d.3 = tmp.18, tmp.19 = glob + 7.0, Copy e.4 = tmp.19, tmp.20 = glob2 * 2.0, Copy f.5 = tmp.20, tmp.21 = c.2 * 3.0, Copy g.6 = tmp.21, tmp.22 = d.3 * 112.0, Copy h.7 = tmp.22, tmp.23 = e.4 / 3.0, Copy i.8 = tmp.23, tmp.24 = g.6 + f.5, Copy j.9 = tmp.24, tmp.25 = h.7 - j.9, Copy k.10 = tmp.25, tmp.26 = i.8 + 1000.0, Copy l.11 = tmp.26, tmp.27 = j.9 - d.3, Copy m.12 = tmp.27, tmp.28 = m.12 * l.11, Copy n.13 = tmp.28, tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Jump(tmp.86), Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89, Label(tmp.86), Return 0]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.14 = glob * glob
tmp.31 = b.1 == 32.0
Copy tmp.32 = 1
Label(tmp.30)
Label(tmp.33)
tmp.35 = c.2 == 405.0
Copy tmp.36 = 1
Label(tmp.34)
Label(tmp.37)
tmp.39 = -8.0
Copy tmp.41 = 1
Label(tmp.38)
Label(tmp.42)
tmp.44 = e.4 == 27.0
Copy tmp.45 = 1
Label(tmp.43)
Label(tmp.46)
tmp.48 = f.5 == 60.0
Copy tmp.49 = 1
Label(tmp.47)
Label(tmp.50)
tmp.52 = g.6 == 1215.0
Copy tmp.53 = 1
Label(tmp.51)
Label(tmp.54)
tmp.56 = -896.0
Copy tmp.58 = 1
Label(tmp.55)
Label(tmp.59)
tmp.61 = i.8 == 9.0
Copy tmp.62 = 1
Label(tmp.60)
Label(tmp.63)
tmp.65 = j.9 == 1275.0
Copy tmp.66 = 1
Label(tmp.64)
Label(tmp.67)
tmp.69 = -2171.0
Copy tmp.71 = 1
Label(tmp.68)
Label(tmp.72)
tmp.74 = l.11 == 1009.0
Copy tmp.75 = 1
Label(tmp.73)
Label(tmp.76)
tmp.78 = m.12 == 1283.0
Copy tmp.79 = 1
Label(tmp.77)
Label(tmp.80)
tmp.82 = n.13 == 1294547.0
Copy tmp.83 = 1
Label(tmp.81)
Label(tmp.84)
IntToDouble tmp.88 = 0
Jump(tmp.86)
Label(tmp.87)
Label(tmp.86)





















































































ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, Copy a.0 = tmp.14, tmp.15 = glob2 + 2.0, Copy b.1 = tmp.15, tmp.16 = a.0 + 5.0, Copy c.2 = tmp.16, IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, Copy d.3 = tmp.18, tmp.19 = glob + 7.0, Copy e.4 = tmp.19, tmp.20 = glob2 * 2.0, Copy f.5 = tmp.20, tmp.21 = c.2 * 3.0, Copy g.6 = tmp.21, tmp.22 = d.3 * 112.0, Copy h.7 = tmp.22, tmp.23 = e.4 / 3.0, Copy i.8 = tmp.23, tmp.24 = g.6 + f.5, Copy j.9 = tmp.24, tmp.25 = h.7 - j.9, Copy k.10 = tmp.25, tmp.26 = i.8 + 1000.0, Copy l.11 = tmp.26, tmp.27 = j.9 - d.3, Copy m.12 = tmp.27, tmp.28 = m.12 * l.11, Copy n.13 = tmp.28, tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), Copy a.0 = tmp.14: set(), tmp.15 = glob2 + 2.0: set(), Copy b.1 = tmp.15: set(), tmp.16 = a.0 + 5.0: set(), Copy c.2 = tmp.16: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = b.1 - tmp.17: set(), Copy d.3 = tmp.18: set(), tmp.19 = glob + 7.0: set(), Copy e.4 = tmp.19: set(), tmp.20 = glob2 * 2.0: set(), Copy f.5 = tmp.20: set(), tmp.21 = c.2 * 3.0: set(), Copy g.6 = tmp.21: set(), tmp.22 = d.3 * 112.0: set(), Copy h.7 = tmp.22: set(), tmp.23 = e.4 / 3.0: set(), Copy i.8 = tmp.23: set(), tmp.24 = g.6 + f.5: set(), Copy j.9 = tmp.24: set(), tmp.25 = h.7 - j.9: set(), Copy k.10 = tmp.25: set(), tmp.26 = i.8 + 1000.0: set(), Copy l.11 = tmp.26: set(), tmp.27 = j.9 - d.3: set(), Copy m.12 = tmp.27: set(), tmp.28 = m.12 * l.11: set(), Copy n.13 = tmp.28: set(), tmp.29 = a.0 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = b.1 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = c.2 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = d.3 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = e.4 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = f.5 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = g.6 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = h.7 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = i.8 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = j.9 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = k.10 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = l.11 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = m.12 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = n.13 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87)] Pred: {50, 51} Suc: {53, 55} iMap: {Label(tmp.84): set(), Copy tmp.85 = tmp.83: set(), JumpIfZero(tmp.85, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
54 54: [Jump(tmp.86)] Pred: set() Suc: {56} iMap: {Jump(tmp.86): set()} ReachingCopies: set()
55 55: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
56 56: [Label(tmp.86), Return 0] Pred: {54} Suc: {EXIT} iMap: {Label(tmp.86): set(), Return 0: set()} ReachingCopies: set()
EXIT Exit: EXIT {56, 53, 55}
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, Copy a.0 = tmp.14, tmp.15 = glob2 + 2.0, Copy b.1 = tmp.15, tmp.16 = a.0 + 5.0, Copy c.2 = tmp.16, IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, Copy d.3 = tmp.18, tmp.19 = glob + 7.0, Copy e.4 = tmp.19, tmp.20 = glob2 * 2.0, Copy f.5 = tmp.20, tmp.21 = c.2 * 3.0, Copy g.6 = tmp.21, tmp.22 = d.3 * 112.0, Copy h.7 = tmp.22, tmp.23 = e.4 / 3.0, Copy i.8 = tmp.23, tmp.24 = g.6 + f.5, Copy j.9 = tmp.24, tmp.25 = h.7 - j.9, Copy k.10 = tmp.25, tmp.26 = i.8 + 1000.0, Copy l.11 = tmp.26, tmp.27 = j.9 - d.3, Copy m.12 = tmp.27, tmp.28 = m.12 * l.11, Copy n.13 = tmp.28, tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), Copy a.0 = tmp.14: set(), tmp.15 = glob2 + 2.0: set(), Copy b.1 = tmp.15: set(), tmp.16 = a.0 + 5.0: set(), Copy c.2 = tmp.16: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = b.1 - tmp.17: set(), Copy d.3 = tmp.18: set(), tmp.19 = glob + 7.0: set(), Copy e.4 = tmp.19: set(), tmp.20 = glob2 * 2.0: set(), Copy f.5 = tmp.20: set(), tmp.21 = c.2 * 3.0: set(), Copy g.6 = tmp.21: set(), tmp.22 = d.3 * 112.0: set(), Copy h.7 = tmp.22: set(), tmp.23 = e.4 / 3.0: set(), Copy i.8 = tmp.23: set(), tmp.24 = g.6 + f.5: set(), Copy j.9 = tmp.24: set(), tmp.25 = h.7 - j.9: set(), Copy k.10 = tmp.25: set(), tmp.26 = i.8 + 1000.0: set(), Copy l.11 = tmp.26: set(), tmp.27 = j.9 - d.3: set(), Copy m.12 = tmp.27: set(), tmp.28 = m.12 * l.11: set(), Copy n.13 = tmp.28: set(), tmp.29 = a.0 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = b.1 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = c.2 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = d.3 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = e.4 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = f.5 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = g.6 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = h.7 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = i.8 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = j.9 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = k.10 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = l.11 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = m.12 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = n.13 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87)] Pred: {50, 51} Suc: {53, 55} iMap: {Label(tmp.84): set(), Copy tmp.85 = tmp.83: set(), JumpIfZero(tmp.85, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
55 55: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 55}
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, Copy a.0 = tmp.14, tmp.15 = glob2 + 2.0, Copy b.1 = tmp.15, tmp.16 = a.0 + 5.0, Copy c.2 = tmp.16, IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, Copy d.3 = tmp.18, tmp.19 = glob + 7.0, Copy e.4 = tmp.19, tmp.20 = glob2 * 2.0, Copy f.5 = tmp.20, tmp.21 = c.2 * 3.0, Copy g.6 = tmp.21, tmp.22 = d.3 * 112.0, Copy h.7 = tmp.22, tmp.23 = e.4 / 3.0, Copy i.8 = tmp.23, tmp.24 = g.6 + f.5, Copy j.9 = tmp.24, tmp.25 = h.7 - j.9, Copy k.10 = tmp.25, tmp.26 = i.8 + 1000.0, Copy l.11 = tmp.26, tmp.27 = j.9 - d.3, Copy m.12 = tmp.27, tmp.28 = m.12 * l.11, Copy n.13 = tmp.28, tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), Copy a.0 = tmp.14: set(), tmp.15 = glob2 + 2.0: set(), Copy b.1 = tmp.15: set(), tmp.16 = a.0 + 5.0: set(), Copy c.2 = tmp.16: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = b.1 - tmp.17: set(), Copy d.3 = tmp.18: set(), tmp.19 = glob + 7.0: set(), Copy e.4 = tmp.19: set(), tmp.20 = glob2 * 2.0: set(), Copy f.5 = tmp.20: set(), tmp.21 = c.2 * 3.0: set(), Copy g.6 = tmp.21: set(), tmp.22 = d.3 * 112.0: set(), Copy h.7 = tmp.22: set(), tmp.23 = e.4 / 3.0: set(), Copy i.8 = tmp.23: set(), tmp.24 = g.6 + f.5: set(), Copy j.9 = tmp.24: set(), tmp.25 = h.7 - j.9: set(), Copy k.10 = tmp.25: set(), tmp.26 = i.8 + 1000.0: set(), Copy l.11 = tmp.26: set(), tmp.27 = j.9 - d.3: set(), Copy m.12 = tmp.27: set(), tmp.28 = m.12 * l.11: set(), Copy n.13 = tmp.28: set(), tmp.29 = a.0 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = b.1 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = c.2 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = d.3 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = e.4 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = f.5 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = g.6 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = h.7 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = i.8 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = j.9 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = k.10 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = l.11 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = m.12 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = n.13 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87)] Pred: {50, 51} Suc: {53, 55} iMap: {Label(tmp.84): set(), Copy tmp.85 = tmp.83: set(), JumpIfZero(tmp.85, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
55 55: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 55}
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, Copy a.0 = tmp.14, tmp.15 = glob2 + 2.0, Copy b.1 = tmp.15, tmp.16 = a.0 + 5.0, Copy c.2 = tmp.16, IntToDouble tmp.17 = glob3, tmp.18 = b.1 - tmp.17, Copy d.3 = tmp.18, tmp.19 = glob + 7.0, Copy e.4 = tmp.19, tmp.20 = glob2 * 2.0, Copy f.5 = tmp.20, tmp.21 = c.2 * 3.0, Copy g.6 = tmp.21, tmp.22 = d.3 * 112.0, Copy h.7 = tmp.22, tmp.23 = e.4 / 3.0, Copy i.8 = tmp.23, tmp.24 = g.6 + f.5, Copy j.9 = tmp.24, tmp.25 = h.7 - j.9, Copy k.10 = tmp.25, tmp.26 = i.8 + 1000.0, Copy l.11 = tmp.26, tmp.27 = j.9 - d.3, Copy m.12 = tmp.27, tmp.28 = m.12 * l.11, Copy n.13 = tmp.28, tmp.29 = a.0 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), Copy a.0 = tmp.14: set(), tmp.15 = glob2 + 2.0: set(), Copy b.1 = tmp.15: set(), tmp.16 = a.0 + 5.0: set(), Copy c.2 = tmp.16: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = b.1 - tmp.17: set(), Copy d.3 = tmp.18: set(), tmp.19 = glob + 7.0: set(), Copy e.4 = tmp.19: set(), tmp.20 = glob2 * 2.0: set(), Copy f.5 = tmp.20: set(), tmp.21 = c.2 * 3.0: set(), Copy g.6 = tmp.21: set(), tmp.22 = d.3 * 112.0: set(), Copy h.7 = tmp.22: set(), tmp.23 = e.4 / 3.0: set(), Copy i.8 = tmp.23: set(), tmp.24 = g.6 + f.5: set(), Copy j.9 = tmp.24: set(), tmp.25 = h.7 - j.9: set(), Copy k.10 = tmp.25: set(), tmp.26 = i.8 + 1000.0: set(), Copy l.11 = tmp.26: set(), tmp.27 = j.9 - d.3: set(), Copy m.12 = tmp.27: set(), tmp.28 = m.12 * l.11: set(), Copy n.13 = tmp.28: set(), tmp.29 = a.0 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = b.1 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = b.1 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = c.2 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = c.2 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = d.3 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = d.3 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = e.4 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = e.4 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = f.5 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = f.5 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = g.6 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = g.6 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = h.7 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = h.7 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = i.8 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = i.8 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = j.9 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = j.9 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = k.10 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = k.10 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = l.11 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = l.11 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = m.12 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = m.12 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = n.13 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = n.13 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.85, tmp.87)] Pred: {50, 51} Suc: {53, 55} iMap: {Label(tmp.84): set(), Copy tmp.85 = tmp.83: set(), JumpIfZero(tmp.85, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
55 55: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 55}
--------------IMAP for block 0-------------------
tmp.14 = glob * glob set()
Copy a.0 = tmp.14 set()
tmp.15 = glob2 + 2.0 {Copy a.0 = tmp.14}
Copy b.1 = tmp.15 {Copy a.0 = tmp.14}
tmp.16 = a.0 + 5.0 {Copy a.0 = tmp.14, Copy b.1 = tmp.15}
Copy c.2 = tmp.16 {Copy a.0 = tmp.14, Copy b.1 = tmp.15}
IntToDouble tmp.17 = glob3 {Copy a.0 = tmp.14, Copy b.1 = tmp.15, Copy c.2 = tmp.16}
tmp.18 = b.1 - tmp.17 {Copy a.0 = tmp.14, Copy b.1 = tmp.15, Copy c.2 = tmp.16}
Copy d.3 = tmp.18 {Copy a.0 = tmp.14, Copy b.1 = tmp.15, Copy c.2 = tmp.16}
tmp.19 = glob + 7.0 {Copy a.0 = tmp.14, Copy d.3 = tmp.18, Copy b.1 = tmp.15, Copy c.2 = tmp.16}
Copy e.4 = tmp.19 {Copy a.0 = tmp.14, Copy d.3 = tmp.18, Copy b.1 = tmp.15, Copy c.2 = tmp.16}
tmp.20 = glob2 * 2.0 {Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
Copy f.5 = tmp.20 {Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
tmp.21 = c.2 * 3.0 {Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
Copy g.6 = tmp.21 {Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
tmp.22 = d.3 * 112.0 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
Copy h.7 = tmp.22 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
tmp.23 = e.4 / 3.0 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
Copy i.8 = tmp.23 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
tmp.24 = g.6 + f.5 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
Copy j.9 = tmp.24 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
tmp.25 = h.7 - j.9 {Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}
Copy k.10 = tmp.25 {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
tmp.26 = i.8 + 1000.0 {Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
Copy l.11 = tmp.26 {Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
tmp.27 = j.9 - d.3 {Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy m.12 = tmp.27 {Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
tmp.28 = m.12 * l.11 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
Copy n.13 = tmp.28 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
tmp.29 = a.0 == 400.0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.29, tmp.30) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.31 = b.1 == 32.0 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.31, tmp.30) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.32 = 1 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
Jump(tmp.33) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.30) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy tmp.32 = 0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.32 = 0, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.33) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.32, tmp.34) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.35 = c.2 == 405.0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.35, tmp.34) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.36 = 1 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.37) {Copy tmp.36 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy tmp.36 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.34) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
Copy tmp.36 = 0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.36 = 0, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.37) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.36, tmp.38) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.39 = -8.0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
tmp.40 = d.3 == tmp.39 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
JumpIfZero(tmp.40, tmp.38) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.41 = 1 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
Jump(tmp.42) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.41 = 1, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.41 = 1, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.38) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy tmp.41 = 0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy tmp.41 = 0, Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.42) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
JumpIfZero(tmp.41, tmp.43) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 13-------------------
tmp.44 = e.4 == 27.0 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.44, tmp.43) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 14-------------------
Copy tmp.45 = 1 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
Jump(tmp.46) {Copy m.12 = tmp.27, Copy tmp.45 = 1, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.45 = 1, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 15-------------------
Label(tmp.43) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy tmp.45 = 0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.45 = 0, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 16-------------------
Label(tmp.46) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.45, tmp.47) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 17-------------------
tmp.48 = f.5 == 60.0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.48, tmp.47) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 18-------------------
Copy tmp.49 = 1 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.50) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.49 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.49 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 19-------------------
Label(tmp.47) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
Copy tmp.49 = 0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14, Copy tmp.49 = 0}
ADD SUCCESSORS.
--------------IMAP for block 20-------------------
Label(tmp.50) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.49, tmp.51) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 21-------------------
tmp.52 = g.6 == 1215.0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.52, tmp.51) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 22-------------------
Copy tmp.53 = 1 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.54) {Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 23-------------------
Label(tmp.51) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
Copy tmp.53 = 0 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18, Copy tmp.53 = 0}
ADD SUCCESSORS.
--------------IMAP for block 24-------------------
Label(tmp.54) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.53, tmp.55) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 25-------------------
tmp.56 = -896.0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
tmp.57 = h.7 == tmp.56 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.57, tmp.55) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 26-------------------
Copy tmp.58 = 1 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
Jump(tmp.59) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.58 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.58 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 27-------------------
Label(tmp.55) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy tmp.58 = 0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.58 = 0, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 28-------------------
Label(tmp.59) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.58, tmp.60) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 29-------------------
tmp.61 = i.8 == 9.0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.61, tmp.60) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 30-------------------
Copy tmp.62 = 1 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.63) {Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 31-------------------
Label(tmp.60) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
Copy tmp.62 = 0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.62 = 0, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 32-------------------
Label(tmp.63) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.62, tmp.64) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 33-------------------
tmp.65 = j.9 == 1275.0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.65, tmp.64) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 34-------------------
Copy tmp.66 = 1 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.67) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.66 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.66 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 35-------------------
Label(tmp.64) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
Copy tmp.66 = 0 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy tmp.66 = 0, Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 36-------------------
Label(tmp.67) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.66, tmp.68) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 37-------------------
tmp.69 = -2171.0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
tmp.70 = k.10 == tmp.69 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.70, tmp.68) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 38-------------------
Copy tmp.71 = 1 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
Jump(tmp.72) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.71 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.71 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 39-------------------
Label(tmp.68) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy tmp.71 = 0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14, Copy tmp.71 = 0}
ADD SUCCESSORS.
--------------IMAP for block 40-------------------
Label(tmp.72) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
JumpIfZero(tmp.71, tmp.73) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 41-------------------
tmp.74 = l.11 == 1009.0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.74, tmp.73) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 42-------------------
Copy tmp.75 = 1 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.76) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.75 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.75 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 43-------------------
Label(tmp.73) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
Copy tmp.75 = 0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy tmp.75 = 0, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 44-------------------
Label(tmp.76) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.75, tmp.77) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 45-------------------
tmp.78 = m.12 == 1283.0 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.78, tmp.77) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 46-------------------
Copy tmp.79 = 1 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
Jump(tmp.80) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.79 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.79 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 47-------------------
Label(tmp.77) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
Copy tmp.79 = 0 {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.79 = 0, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 48-------------------
Label(tmp.80) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
JumpIfZero(tmp.79, tmp.81) {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 49-------------------
tmp.82 = n.13 == 1294547.0 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
JumpIfZero(tmp.82, tmp.81) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 50-------------------
Copy tmp.83 = 1 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
Jump(tmp.84) {Copy m.12 = tmp.27, Copy tmp.83 = 1, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.83 = 1, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 51-------------------
Label(tmp.81) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Copy tmp.83 = 0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy tmp.83 = 0, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 52-------------------
Label(tmp.84) {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
Copy tmp.85 = tmp.83 {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
JumpIfZero(tmp.85, tmp.87) {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
ADD SUCCESSORS.
--------------IMAP for block 53-------------------
IntToDouble tmp.88 = 0 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Return tmp.88 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
--------------IMAP for block 55-------------------
Label(tmp.87) {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
IntToDouble tmp.89 = 1 {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
Return tmp.89 {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy h.7 = tmp.22, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy c.2 = tmp.16, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.83 = 1, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy g.6 = tmp.21, Copy tmp.85 = tmp.83, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy a.0 = tmp.14, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy n.13 = tmp.28, Copy tmp.79 = 1, Copy k.10 = tmp.25}
NEW ANNOT: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, Copy a.0 = tmp.14, tmp.15 = glob2 + 2.0, Copy b.1 = tmp.15, tmp.16 = tmp.14 + 5.0, Copy c.2 = tmp.16, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, Copy d.3 = tmp.18, tmp.19 = glob + 7.0, Copy e.4 = tmp.19, tmp.20 = glob2 * 2.0, Copy f.5 = tmp.20, tmp.21 = tmp.16 * 3.0, Copy g.6 = tmp.21, tmp.22 = tmp.18 * 112.0, Copy h.7 = tmp.22, tmp.23 = tmp.19 / 3.0, Copy i.8 = tmp.23, tmp.24 = tmp.21 + tmp.20, Copy j.9 = tmp.24, tmp.25 = tmp.22 - tmp.24, Copy k.10 = tmp.25, tmp.26 = tmp.23 + 1000.0, Copy l.11 = tmp.26, tmp.27 = tmp.24 - tmp.18, Copy m.12 = tmp.27, tmp.28 = tmp.27 * tmp.26, Copy n.13 = tmp.28, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), Copy a.0 = tmp.14: set(), tmp.15 = glob2 + 2.0: {Copy a.0 = tmp.14}, Copy b.1 = tmp.15: {Copy a.0 = tmp.14}, tmp.16 = a.0 + 5.0: {Copy a.0 = tmp.14, Copy b.1 = tmp.15}, Copy c.2 = tmp.16: {Copy a.0 = tmp.14, Copy b.1 = tmp.15}, IntToDouble tmp.17 = glob3: {Copy a.0 = tmp.14, Copy b.1 = tmp.15, Copy c.2 = tmp.16}, tmp.18 = b.1 - tmp.17: {Copy a.0 = tmp.14, Copy b.1 = tmp.15, Copy c.2 = tmp.16}, Copy d.3 = tmp.18: {Copy a.0 = tmp.14, Copy b.1 = tmp.15, Copy c.2 = tmp.16}, tmp.19 = glob + 7.0: {Copy a.0 = tmp.14, Copy d.3 = tmp.18, Copy b.1 = tmp.15, Copy c.2 = tmp.16}, Copy e.4 = tmp.19: {Copy a.0 = tmp.14, Copy d.3 = tmp.18, Copy b.1 = tmp.15, Copy c.2 = tmp.16}, tmp.20 = glob2 * 2.0: {Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, Copy f.5 = tmp.20: {Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, tmp.21 = c.2 * 3.0: {Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, Copy g.6 = tmp.21: {Copy f.5 = tmp.20, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, tmp.22 = d.3 * 112.0: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, Copy h.7 = tmp.22: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, tmp.23 = e.4 / 3.0: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, Copy i.8 = tmp.23: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, tmp.24 = g.6 + f.5: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, Copy j.9 = tmp.24: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, tmp.25 = h.7 - j.9: {Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy d.3 = tmp.18}, Copy k.10 = tmp.25: {Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, tmp.26 = i.8 + 1000.0: {Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Copy l.11 = tmp.26: {Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, tmp.27 = j.9 - d.3: {Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy m.12 = tmp.27: {Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, tmp.28 = m.12 * l.11: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Copy n.13 = tmp.28: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, tmp.29 = a.0 == 400.0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.29, tmp.30): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = b.1 == 32.0: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.31, tmp.30): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Jump(tmp.33): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.32 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy tmp.32 = 0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.32 = 0, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.32, tmp.34): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = c.2 == 405.0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.35, tmp.34): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Jump(tmp.37): {Copy tmp.36 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy tmp.36 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Copy tmp.36 = 0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.36 = 0, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.36, tmp.38): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, tmp.40 = d.3 == tmp.39: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, JumpIfZero(tmp.40, tmp.38): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Jump(tmp.42): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.41 = 1, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.41 = 1, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy tmp.41 = 0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy tmp.41 = 0, Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, JumpIfZero(tmp.41, tmp.43): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = e.4 == 27.0: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.44, tmp.43): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Jump(tmp.46): {Copy m.12 = tmp.27, Copy tmp.45 = 1, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.45 = 1, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy tmp.45 = 0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.45 = 0, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.45, tmp.47): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = f.5 == 60.0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.48, tmp.47): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Jump(tmp.50): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.49 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.49 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Copy tmp.49 = 0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14, Copy tmp.49 = 0}
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.49, tmp.51): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = g.6 == 1215.0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.52, tmp.51): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Jump(tmp.54): {Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.53 = 1, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Copy tmp.53 = 0: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18, Copy tmp.53 = 0}
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.53, tmp.55): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, tmp.57 = h.7 == tmp.56: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.57, tmp.55): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Jump(tmp.59): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.58 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.58 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy tmp.58 = 0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.58 = 0, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.58, tmp.60): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = i.8 == 9.0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.61, tmp.60): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Jump(tmp.63): {Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy tmp.62 = 1, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Copy tmp.62 = 0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.62 = 0, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.62, tmp.64): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = j.9 == 1275.0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.65, tmp.64): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Jump(tmp.67): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.66 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.66 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Copy tmp.66 = 0: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy tmp.66 = 0, Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.66, tmp.68): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, tmp.70 = k.10 == tmp.69: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.70, tmp.68): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Jump(tmp.72): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.71 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.71 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy tmp.71 = 0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14, Copy tmp.71 = 0}
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, JumpIfZero(tmp.71, tmp.73): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = l.11 == 1009.0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.74, tmp.73): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Jump(tmp.76): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.75 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy tmp.75 = 1, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Copy tmp.75 = 0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy tmp.75 = 0, Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.75, tmp.77): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = m.12 == 1283.0: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.78, tmp.77): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Jump(tmp.80): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.79 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.79 = 1, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}, Copy tmp.79 = 0: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.79 = 0, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, JumpIfZero(tmp.79, tmp.81): {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = n.13 == 1294547.0: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, JumpIfZero(tmp.82, tmp.81): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Jump(tmp.84): {Copy m.12 = tmp.27, Copy tmp.83 = 1, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.83 = 1, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Copy tmp.83 = 0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy tmp.83 = 0, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
52 52: [Label(tmp.84), Copy tmp.85 = tmp.83, JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 55} iMap: {Label(tmp.84): {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, Copy tmp.85 = tmp.83: {Copy m.12 = tmp.27, Copy d.3 = tmp.18, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy a.0 = tmp.14}, JumpIfZero(tmp.85, tmp.87): {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}} ReachingCopies: {Copy m.12 = tmp.27, Copy k.10 = tmp.25, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy d.3 = tmp.18, Copy a.0 = tmp.14}
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Return tmp.88: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
55 55: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, IntToDouble tmp.89 = 1: {Copy m.12 = tmp.27, Copy a.0 = tmp.14, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy j.9 = tmp.24, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}, Return tmp.89: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}} ReachingCopies: {Copy m.12 = tmp.27, Copy j.9 = tmp.24, Copy f.5 = tmp.20, Copy g.6 = tmp.21, Copy e.4 = tmp.19, Copy i.8 = tmp.23, Copy b.1 = tmp.15, Copy n.13 = tmp.28, Copy c.2 = tmp.16, Copy h.7 = tmp.22, Copy tmp.85 = tmp.83, Copy a.0 = tmp.14, Copy l.11 = tmp.26, Copy k.10 = tmp.25, Copy d.3 = tmp.18}
EXIT Exit: EXIT {53, 55}
--------------ADDING ALL STATIC VARIABLES.------------------
glob glob double InitialVal: InitialList: [c_double(20.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(30.0)] Global: True
glob3 glob3 int InitialVal: InitialList: [c_int(40)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
a.0 a.0 double <typeChecker.LocalAttributes object at 0x7fc677ae93a0>
b.1 b.1 double <typeChecker.LocalAttributes object at 0x7fc677ae95b0>
c.2 c.2 double <typeChecker.LocalAttributes object at 0x7fc677ae97f0>
d.3 d.3 double <typeChecker.LocalAttributes object at 0x7fc677ae9a30>
e.4 e.4 double <typeChecker.LocalAttributes object at 0x7fc677ae9ca0>
f.5 f.5 double <typeChecker.LocalAttributes object at 0x7fc677ae9ee0>
g.6 g.6 double <typeChecker.LocalAttributes object at 0x7fc677aea150>
h.7 h.7 double <typeChecker.LocalAttributes object at 0x7fc677aea3c0>
i.8 i.8 double <typeChecker.LocalAttributes object at 0x7fc677aea600>
j.9 j.9 double <typeChecker.LocalAttributes object at 0x7fc677aea840>
k.10 k.10 double <typeChecker.LocalAttributes object at 0x7fc677dac230>
l.11 l.11 double <typeChecker.LocalAttributes object at 0x7fc677dac440>
m.12 m.12 double <typeChecker.LocalAttributes object at 0x7fc677dac680>
n.13 n.13 double <typeChecker.LocalAttributes object at 0x7fc677dac890>
tmp.14 tmp.14 double <typeChecker.LocalAttributes object at 0x7fc677daf620>
tmp.15 tmp.15 double <typeChecker.LocalAttributes object at 0x7fc677daf650>
tmp.16 tmp.16 double <typeChecker.LocalAttributes object at 0x7fc677daf7a0>
tmp.17 tmp.17 double <typeChecker.LocalAttributes object at 0x7fc677dafbf0>
tmp.18 tmp.18 double <typeChecker.LocalAttributes object at 0x7fc677daf980>
tmp.19 tmp.19 double <typeChecker.LocalAttributes object at 0x7fc677dafb00>
tmp.20 tmp.20 double <typeChecker.LocalAttributes object at 0x7fc677dafdd0>
tmp.21 tmp.21 double <typeChecker.LocalAttributes object at 0x7fc677daffb0>
tmp.22 tmp.22 double <typeChecker.LocalAttributes object at 0x7fc677da01d0>
tmp.23 tmp.23 double <typeChecker.LocalAttributes object at 0x7fc677da03e0>
tmp.24 tmp.24 double <typeChecker.LocalAttributes object at 0x7fc677da0590>
tmp.25 tmp.25 double <typeChecker.LocalAttributes object at 0x7fc677da07a0>
tmp.26 tmp.26 double <typeChecker.LocalAttributes object at 0x7fc677da0a10>
tmp.27 tmp.27 double <typeChecker.LocalAttributes object at 0x7fc677da0bf0>
tmp.28 tmp.28 double <typeChecker.LocalAttributes object at 0x7fc677da0dd0>
tmp.29 tmp.29 int <typeChecker.LocalAttributes object at 0x7fc677da20c0>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7fc677da22d0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7fc677da1fd0>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7fc677da2690>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7fc677da1e80>
tmp.39 tmp.39 double <typeChecker.LocalAttributes object at 0x7fc677da2cc0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7fc677da2a50>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7fc677da1d30>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7fc677da2f60>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7fc677da1be0>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7fc677da3320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7fc677da1a90>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7fc677da36e0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7fc677da1940>
tmp.56 tmp.56 double <typeChecker.LocalAttributes object at 0x7fc677da3d70>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7fc677da3b00>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7fc677da17f0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7fc677ac41d0>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7fc677da1670>
tmp.65 tmp.65 int <typeChecker.LocalAttributes object at 0x7fc677ac4410>
tmp.66 tmp.66 int <typeChecker.LocalAttributes object at 0x7fc677da14c0>
tmp.69 tmp.69 double <typeChecker.LocalAttributes object at 0x7fc677ac4a40>
tmp.70 tmp.70 int <typeChecker.LocalAttributes object at 0x7fc677ac47d0>
tmp.71 tmp.71 int <typeChecker.LocalAttributes object at 0x7fc677da1370>
tmp.74 tmp.74 int <typeChecker.LocalAttributes object at 0x7fc677ac4d40>
tmp.75 tmp.75 int <typeChecker.LocalAttributes object at 0x7fc677da1220>
tmp.78 tmp.78 int <typeChecker.LocalAttributes object at 0x7fc677ac5160>
tmp.79 tmp.79 int <typeChecker.LocalAttributes object at 0x7fc677da10d0>
tmp.82 tmp.82 int <typeChecker.LocalAttributes object at 0x7fc677ac55e0>
tmp.83 tmp.83 int <typeChecker.LocalAttributes object at 0x7fc677da1010>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7fc677da09b0>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7fc677ac5d30>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7fc677ac5f10>
--------------LIVE for block 55-------------------
Return tmp.89 {glob, glob3, glob2}
IntToDouble tmp.89 = 1 {glob, tmp.89, glob3, glob2}
Label(tmp.87) {glob, glob3, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 53-------------------
Return tmp.88 {glob, glob3, glob2}
IntToDouble tmp.88 = 0 {glob, glob3, tmp.88, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 52-------------------
JumpIfZero(tmp.83, tmp.87) {glob, glob3, glob2}
Copy tmp.85 = tmp.83 {glob, glob3, tmp.83, glob2}
Label(tmp.84) {glob, glob3, tmp.83, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.83, glob2}
--------------LIVE for block 51-------------------
Copy tmp.83 = 0 {glob, glob3, tmp.83, glob2}
Label(tmp.81) {glob, glob3, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 50-------------------
Jump(tmp.84) {glob, glob3, tmp.83, glob2}
Copy tmp.83 = 1 {glob, glob3, tmp.83, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 49-------------------
JumpIfZero(tmp.82, tmp.81) {glob, glob3, glob2}
tmp.82 = tmp.28 == 1294547.0 {glob, glob3, tmp.82, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.28, glob2}
--------------LIVE for block 48-------------------
JumpIfZero(tmp.79, tmp.81) {glob, glob3, tmp.28, glob2}
Label(tmp.80) {glob, tmp.28, glob2, glob3, tmp.79}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.79}
--------------LIVE for block 47-------------------
Copy tmp.79 = 0 {glob, tmp.28, glob2, glob3, tmp.79}
Label(tmp.77) {glob, glob3, tmp.28, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.28, glob2}
--------------LIVE for block 46-------------------
Jump(tmp.80) {glob, tmp.28, glob2, glob3, tmp.79}
Copy tmp.79 = 1 {glob, tmp.28, glob2, glob3, tmp.79}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.28, glob2}
--------------LIVE for block 45-------------------
JumpIfZero(tmp.78, tmp.77) {glob, glob2, tmp.28, glob3}
tmp.78 = tmp.27 == 1283.0 {glob, tmp.28, glob2, tmp.78, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 44-------------------
JumpIfZero(tmp.75, tmp.77) {glob, tmp.28, glob2, tmp.27, glob3}
Label(tmp.76) {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 43-------------------
Copy tmp.75 = 0 {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
Label(tmp.73) {glob, tmp.28, glob2, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 42-------------------
Jump(tmp.76) {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
Copy tmp.75 = 1 {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 41-------------------
JumpIfZero(tmp.74, tmp.73) {glob, tmp.28, glob2, tmp.27, glob3}
tmp.74 = tmp.26 == 1009.0 {glob, tmp.28, glob2, tmp.74, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
--------------LIVE for block 40-------------------
JumpIfZero(tmp.71, tmp.73) {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
Label(tmp.72) {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
--------------LIVE for block 39-------------------
Copy tmp.71 = 0 {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
Label(tmp.68) {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
--------------LIVE for block 38-------------------
Jump(tmp.72) {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
Copy tmp.71 = 1 {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
--------------LIVE for block 37-------------------
JumpIfZero(tmp.70, tmp.68) {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
tmp.70 = tmp.25 == tmp.69 {glob, tmp.28, glob2, tmp.27, tmp.70, glob3, tmp.26}
tmp.69 = -2171.0 {glob, tmp.28, glob2, glob3, tmp.69, tmp.26, tmp.25, tmp.27}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
--------------LIVE for block 36-------------------
JumpIfZero(tmp.66, tmp.68) {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
Label(tmp.67) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
--------------LIVE for block 35-------------------
Copy tmp.66 = 0 {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
Label(tmp.64) {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
--------------LIVE for block 34-------------------
Jump(tmp.67) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
Copy tmp.66 = 1 {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
--------------LIVE for block 33-------------------
JumpIfZero(tmp.65, tmp.64) {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
tmp.65 = tmp.24 == 1275.0 {glob, tmp.28, tmp.65, tmp.25, glob3, tmp.26, glob2, tmp.27}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 32-------------------
JumpIfZero(tmp.62, tmp.64) {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}
Label(tmp.63) {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 31-------------------
Copy tmp.62 = 0 {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
Label(tmp.60) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
--------------LIVE for block 30-------------------
Jump(tmp.63) {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
Copy tmp.62 = 1 {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
--------------LIVE for block 29-------------------
JumpIfZero(tmp.61, tmp.60) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
tmp.61 = tmp.23 == 9.0 {glob, tmp.28, tmp.25, glob3, tmp.61, tmp.26, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 28-------------------
JumpIfZero(tmp.58, tmp.60) {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}
Label(tmp.59) {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 27-------------------
Copy tmp.58 = 0 {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
Label(tmp.55) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
--------------LIVE for block 26-------------------
Jump(tmp.59) {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
Copy tmp.58 = 1 {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
--------------LIVE for block 25-------------------
JumpIfZero(tmp.57, tmp.55) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
tmp.57 = tmp.22 == tmp.56 {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.57, tmp.24}
tmp.56 = -896.0 {glob, tmp.28, glob2, glob3, tmp.56, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 24-------------------
JumpIfZero(tmp.53, tmp.55) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.54) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
--------------LIVE for block 23-------------------
Copy tmp.53 = 0 {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
Label(tmp.51) {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 22-------------------
Jump(tmp.54) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
Copy tmp.53 = 1 {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 21-------------------
JumpIfZero(tmp.52, tmp.51) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.52 = tmp.21 == 1215.0 {glob, tmp.28, tmp.25, tmp.52, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 20-------------------
JumpIfZero(tmp.49, tmp.51) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
Label(tmp.50) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 19-------------------
Copy tmp.49 = 0 {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
Label(tmp.47) {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 18-------------------
Jump(tmp.50) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
Copy tmp.49 = 1 {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 17-------------------
JumpIfZero(tmp.48, tmp.47) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
tmp.48 = tmp.20 == 60.0 {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.48, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 16-------------------
JumpIfZero(tmp.45, tmp.47) {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.46) {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 15-------------------
Copy tmp.45 = 0 {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.43) {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 14-------------------
Jump(tmp.46) {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Copy tmp.45 = 1 {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 13-------------------
JumpIfZero(tmp.44, tmp.43) {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.44 = tmp.19 == 27.0 {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.44, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 12-------------------
JumpIfZero(tmp.41, tmp.43) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
Label(tmp.42) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 11-------------------
Copy tmp.41 = 0 {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
Label(tmp.38) {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 10-------------------
Jump(tmp.42) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
Copy tmp.41 = 1 {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.40, tmp.38) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
tmp.40 = tmp.18 == tmp.39 {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.40, tmp.25, tmp.27, tmp.24}
tmp.39 = -8.0 {glob, tmp.28, tmp.39, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.36, tmp.38) {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.37) {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 7-------------------
Copy tmp.36 = 0 {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.34) {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 6-------------------
Jump(tmp.37) {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Copy tmp.36 = 1 {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.35, tmp.34) {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.35 = tmp.16 == 405.0 {glob, tmp.28, tmp.25, tmp.35, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.32, tmp.34) {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
Label(tmp.33) {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
OLD ANNOT: set()
NEW ANNOT: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
--------------LIVE for block 3-------------------
Copy tmp.32 = 0 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
Label(tmp.30) {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 2-------------------
Jump(tmp.33) {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
Copy tmp.32 = 1 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.31, tmp.30) {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.31 = tmp.15 == 32.0 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, tmp.31, glob, tmp.16, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.29, tmp.30) {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
tmp.29 = tmp.14 == 400.0 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.29, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
Copy n.13 = tmp.28 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}
tmp.28 = tmp.27 * tmp.26 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}
Copy m.12 = tmp.27 {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}
tmp.27 = tmp.24 - tmp.18 {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}
Copy l.11 = tmp.26 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24}
tmp.26 = tmp.23 + 1000.0 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24}
Copy k.10 = tmp.25 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}
tmp.25 = tmp.22 - tmp.24 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}
Copy j.9 = tmp.24 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}
tmp.24 = tmp.21 + tmp.20 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}
Copy i.8 = tmp.23 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2}
tmp.23 = tmp.19 / 3.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2}
Copy h.7 = tmp.22 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2}
tmp.22 = tmp.18 * 112.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2}
Copy g.6 = tmp.21 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2}
tmp.21 = tmp.16 * 3.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2}
Copy f.5 = tmp.20 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2}
tmp.20 = glob2 * 2.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2}
Copy e.4 = tmp.19 {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2}
tmp.19 = glob + 7.0 {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2}
Copy d.3 = tmp.18 {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15}
tmp.18 = tmp.15 - tmp.17 {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15}
IntToDouble tmp.17 = glob3 {glob, tmp.14, tmp.16, glob2, tmp.17, glob3, tmp.15}
Copy c.2 = tmp.16 {glob, tmp.14, tmp.16, glob2, glob3, tmp.15}
tmp.16 = tmp.14 + 5.0 {glob, tmp.14, tmp.16, glob2, glob3, tmp.15}
Copy b.1 = tmp.15 {glob, tmp.14, glob2, glob3, tmp.15}
tmp.15 = glob2 + 2.0 {glob, tmp.14, glob2, glob3, tmp.15}
Copy a.0 = tmp.14 {glob2, tmp.14, glob, glob3}
tmp.14 = glob * glob {glob2, tmp.14, glob, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob, glob3}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
Copy a.0 = tmp.14 {glob2, tmp.14, glob, glob3} for node 0
Copy b.1 = tmp.15 {glob, tmp.14, glob2, glob3, tmp.15} for node 0
Copy c.2 = tmp.16 {glob, tmp.14, tmp.16, glob2, glob3, tmp.15} for node 0
Copy d.3 = tmp.18 {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15} for node 0
Copy e.4 = tmp.19 {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2} for node 0
Copy f.5 = tmp.20 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2} for node 0
Copy g.6 = tmp.21 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2} for node 0
Copy h.7 = tmp.22 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2} for node 0
Copy i.8 = tmp.23 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2} for node 0
Copy j.9 = tmp.24 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24} for node 0
Copy k.10 = tmp.25 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24} for node 0
Copy l.11 = tmp.26 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24} for node 0
Copy m.12 = tmp.27 {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26} for node 0
Copy n.13 = tmp.28 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26} for node 0
Copy tmp.85 = tmp.83 {glob, glob3, tmp.83, glob2} for node 52
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: {glob2, tmp.14, glob, glob3}, Copy a.0 = tmp.14: {glob2, tmp.14, glob, glob3}, tmp.15 = glob2 + 2.0: {glob, tmp.14, glob2, glob3, tmp.15}, Copy b.1 = tmp.15: {glob, tmp.14, glob2, glob3, tmp.15}, tmp.16 = tmp.14 + 5.0: {glob, tmp.14, tmp.16, glob2, glob3, tmp.15}, Copy c.2 = tmp.16: {glob, tmp.14, tmp.16, glob2, glob3, tmp.15}, IntToDouble tmp.17 = glob3: {glob, tmp.14, tmp.16, glob2, tmp.17, glob3, tmp.15}, tmp.18 = tmp.15 - tmp.17: {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15}, Copy d.3 = tmp.18: {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15}, tmp.19 = glob + 7.0: {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2}, Copy e.4 = tmp.19: {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2}, tmp.20 = glob2 * 2.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2}, Copy f.5 = tmp.20: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2}, tmp.21 = tmp.16 * 3.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2}, Copy g.6 = tmp.21: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2}, tmp.22 = tmp.18 * 112.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2}, Copy h.7 = tmp.22: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2}, tmp.23 = tmp.19 / 3.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2}, Copy i.8 = tmp.23: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2}, tmp.24 = tmp.21 + tmp.20: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}, Copy j.9 = tmp.24: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}, tmp.25 = tmp.22 - tmp.24: {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}, Copy k.10 = tmp.25: {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}, tmp.26 = tmp.23 + 1000.0: {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24}, Copy l.11 = tmp.26: {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24}, tmp.27 = tmp.24 - tmp.18: {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}, Copy m.12 = tmp.27: {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}, tmp.28 = tmp.27 * tmp.26: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}, Copy n.13 = tmp.28: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}, tmp.29 = tmp.14 == 400.0: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.29, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}, JumpIfZero(tmp.29, tmp.30): {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}} ReachingCopies: {glob2, glob, glob3}
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, tmp.31, glob, tmp.16, glob3, tmp.26}, JumpIfZero(tmp.31, tmp.30): {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}, Jump(tmp.33): {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}} ReachingCopies: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.32 = 0: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}} ReachingCopies: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}, JumpIfZero(tmp.32, tmp.34): {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: {glob, tmp.28, tmp.25, tmp.35, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.35, tmp.34): {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Jump(tmp.37): {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.36 = 0: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.36, tmp.38): {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: {glob, tmp.28, tmp.39, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, tmp.40 = tmp.18 == tmp.39: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.40, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.40, tmp.38): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}, Jump(tmp.42): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Copy tmp.41 = 0: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.41, tmp.43): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.44, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.44, tmp.43): {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Jump(tmp.46): {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.45 = 0: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.45, tmp.47): {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.48, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.48, tmp.47): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}, Jump(tmp.50): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Copy tmp.49 = 0: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.49, tmp.51): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: {glob, tmp.28, tmp.25, tmp.52, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.52, tmp.51): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}, Jump(tmp.54): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.53 = 0: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}, JumpIfZero(tmp.53, tmp.55): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: {glob, tmp.28, glob2, glob3, tmp.56, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, tmp.57 = tmp.22 == tmp.56: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.57, tmp.24}, JumpIfZero(tmp.57, tmp.55): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}, Jump(tmp.59): {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}, Copy tmp.58 = 0: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.58, tmp.60): {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: {glob, tmp.28, tmp.25, glob3, tmp.61, tmp.26, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.61, tmp.60): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}, Jump(tmp.63): {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}, Copy tmp.62 = 0: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.62, tmp.64): {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: {glob, tmp.28, tmp.65, tmp.25, glob3, tmp.26, glob2, tmp.27}, JumpIfZero(tmp.65, tmp.64): {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}, Jump(tmp.67): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}} ReachingCopies: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}, Copy tmp.66 = 0: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}} ReachingCopies: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}, JumpIfZero(tmp.66, tmp.68): {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: {glob, tmp.28, glob2, glob3, tmp.69, tmp.26, tmp.25, tmp.27}, tmp.70 = tmp.25 == tmp.69: {glob, tmp.28, glob2, tmp.27, tmp.70, glob3, tmp.26}, JumpIfZero(tmp.70, tmp.68): {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}, Jump(tmp.72): {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}, Copy tmp.71 = 0: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}, JumpIfZero(tmp.71, tmp.73): {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: {glob, tmp.28, glob2, tmp.74, tmp.27, glob3}, JumpIfZero(tmp.74, tmp.73): {glob, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}, Jump(tmp.76): {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3}
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): {glob, tmp.28, glob2, tmp.27, glob3}, Copy tmp.75 = 0: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3}
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}, JumpIfZero(tmp.75, tmp.77): {glob, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: {glob, tmp.28, glob2, tmp.78, glob3}, JumpIfZero(tmp.78, tmp.77): {glob, glob2, tmp.28, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3}
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: {glob, tmp.28, glob2, glob3, tmp.79}, Jump(tmp.80): {glob, tmp.28, glob2, glob3, tmp.79}} ReachingCopies: {glob, glob3, tmp.28, glob2}
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): {glob, glob3, tmp.28, glob2}, Copy tmp.79 = 0: {glob, tmp.28, glob2, glob3, tmp.79}} ReachingCopies: {glob, glob3, tmp.28, glob2}
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): {glob, tmp.28, glob2, glob3, tmp.79}, JumpIfZero(tmp.79, tmp.81): {glob, glob3, tmp.28, glob2}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.79}
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: {glob, glob3, tmp.82, glob2}, JumpIfZero(tmp.82, tmp.81): {glob, glob3, glob2}} ReachingCopies: {glob, glob3, tmp.28, glob2}
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: {glob, glob3, tmp.83, glob2}, Jump(tmp.84): {glob, glob3, tmp.83, glob2}} ReachingCopies: {glob, glob3, glob2}
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): {glob, glob3, glob2}, Copy tmp.83 = 0: {glob, glob3, tmp.83, glob2}} ReachingCopies: {glob, glob3, glob2}
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 55} iMap: {Label(tmp.84): {glob, glob3, tmp.83, glob2}, Copy tmp.85 = tmp.83: {glob, glob3, tmp.83, glob2}, JumpIfZero(tmp.83, tmp.87): {glob, glob3, glob2}} ReachingCopies: {glob, glob3, tmp.83, glob2}
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: {glob, glob3, tmp.88, glob2}, Return tmp.88: {glob, glob3, glob2}} ReachingCopies: {glob, glob3, glob2}
55 55: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): {glob, glob3, glob2}, IntToDouble tmp.89 = 1: {glob, tmp.89, glob3, glob2}, Return tmp.89: {glob, glob3, glob2}} ReachingCopies: {glob, glob3, glob2}
EXIT Exit: EXIT {53, 55}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob, glob3, glob2}
-------------CONSTANT FOLDING PASS.--------------------
OLD LIST [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), JumpIfZero(tmp.83, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89]
NEW LIST [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), JumpIfZero(tmp.83, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89]
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_UnaryInstruction'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_BinaryInstruction'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_JumpInst'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_CopyInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_JumpIfZeroInst'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_returnInstruction'>
<class 'tacGenerator.TAC_LabelInst'>
<class 'tacGenerator.TAC_IntToDouble'>
<class 'tacGenerator.TAC_returnInstruction'>
tmp.14 = glob * glob
tmp.31 = tmp.15 == 32.0
Copy tmp.32 = 1
Label(tmp.30)
Label(tmp.33)
tmp.35 = tmp.16 == 405.0
Copy tmp.36 = 1
Label(tmp.34)
Label(tmp.37)
tmp.39 = -8.0
Copy tmp.41 = 1
Label(tmp.38)
Label(tmp.42)
tmp.44 = tmp.19 == 27.0
Copy tmp.45 = 1
Label(tmp.43)
Label(tmp.46)
tmp.48 = tmp.20 == 60.0
Copy tmp.49 = 1
Label(tmp.47)
Label(tmp.50)
tmp.52 = tmp.21 == 1215.0
Copy tmp.53 = 1
Label(tmp.51)
Label(tmp.54)
tmp.56 = -896.0
Copy tmp.58 = 1
Label(tmp.55)
Label(tmp.59)
tmp.61 = tmp.23 == 9.0
Copy tmp.62 = 1
Label(tmp.60)
Label(tmp.63)
tmp.65 = tmp.24 == 1275.0
Copy tmp.66 = 1
Label(tmp.64)
Label(tmp.67)
tmp.69 = -2171.0
Copy tmp.71 = 1
Label(tmp.68)
Label(tmp.72)
tmp.74 = tmp.26 == 1009.0
Copy tmp.75 = 1
Label(tmp.73)
Label(tmp.76)
tmp.78 = tmp.27 == 1283.0
Copy tmp.79 = 1
Label(tmp.77)
Label(tmp.80)
tmp.82 = tmp.28 == 1294547.0
Copy tmp.83 = 1
Label(tmp.81)
Label(tmp.84)
IntToDouble tmp.88 = 0
Label(tmp.87)



















































































ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), tmp.15 = glob2 + 2.0: set(), tmp.16 = tmp.14 + 5.0: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = tmp.15 - tmp.17: set(), tmp.19 = glob + 7.0: set(), tmp.20 = glob2 * 2.0: set(), tmp.21 = tmp.16 * 3.0: set(), tmp.22 = tmp.18 * 112.0: set(), tmp.23 = tmp.19 / 3.0: set(), tmp.24 = tmp.21 + tmp.20: set(), tmp.25 = tmp.22 - tmp.24: set(), tmp.26 = tmp.23 + 1000.0: set(), tmp.27 = tmp.24 - tmp.18: set(), tmp.28 = tmp.27 * tmp.26: set(), tmp.29 = tmp.14 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = tmp.18 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = tmp.22 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = tmp.25 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: {Label(tmp.84): set(), JumpIfZero(tmp.83, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
54 54: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), tmp.15 = glob2 + 2.0: set(), tmp.16 = tmp.14 + 5.0: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = tmp.15 - tmp.17: set(), tmp.19 = glob + 7.0: set(), tmp.20 = glob2 * 2.0: set(), tmp.21 = tmp.16 * 3.0: set(), tmp.22 = tmp.18 * 112.0: set(), tmp.23 = tmp.19 / 3.0: set(), tmp.24 = tmp.21 + tmp.20: set(), tmp.25 = tmp.22 - tmp.24: set(), tmp.26 = tmp.23 + 1000.0: set(), tmp.27 = tmp.24 - tmp.18: set(), tmp.28 = tmp.27 * tmp.26: set(), tmp.29 = tmp.14 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = tmp.18 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = tmp.22 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = tmp.25 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: {Label(tmp.84): set(), JumpIfZero(tmp.83, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
54 54: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), tmp.15 = glob2 + 2.0: set(), tmp.16 = tmp.14 + 5.0: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = tmp.15 - tmp.17: set(), tmp.19 = glob + 7.0: set(), tmp.20 = glob2 * 2.0: set(), tmp.21 = tmp.16 * 3.0: set(), tmp.22 = tmp.18 * 112.0: set(), tmp.23 = tmp.19 / 3.0: set(), tmp.24 = tmp.21 + tmp.20: set(), tmp.25 = tmp.22 - tmp.24: set(), tmp.26 = tmp.23 + 1000.0: set(), tmp.27 = tmp.24 - tmp.18: set(), tmp.28 = tmp.27 * tmp.26: set(), tmp.29 = tmp.14 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = tmp.18 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = tmp.22 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = tmp.25 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: {Label(tmp.84): set(), JumpIfZero(tmp.83, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
54 54: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), tmp.15 = glob2 + 2.0: set(), tmp.16 = tmp.14 + 5.0: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = tmp.15 - tmp.17: set(), tmp.19 = glob + 7.0: set(), tmp.20 = glob2 * 2.0: set(), tmp.21 = tmp.16 * 3.0: set(), tmp.22 = tmp.18 * 112.0: set(), tmp.23 = tmp.19 / 3.0: set(), tmp.24 = tmp.21 + tmp.20: set(), tmp.25 = tmp.22 - tmp.24: set(), tmp.26 = tmp.23 + 1000.0: set(), tmp.27 = tmp.24 - tmp.18: set(), tmp.28 = tmp.27 * tmp.26: set(), tmp.29 = tmp.14 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): set()} ReachingCopies: set()
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: set()
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): set()} ReachingCopies: set()
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: set()
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = tmp.18 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): set()} ReachingCopies: set()
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: set()
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): set()} ReachingCopies: set()
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: set()
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): set()} ReachingCopies: set()
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: set()
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): set()} ReachingCopies: set()
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: set()
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = tmp.22 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): set()} ReachingCopies: set()
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: set()
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): set()} ReachingCopies: set()
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: set()
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): set()} ReachingCopies: set()
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: set()
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = tmp.25 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): set()} ReachingCopies: set()
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: set()
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): set()} ReachingCopies: set()
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: set()
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): set()} ReachingCopies: set()
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: set()
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): set()} ReachingCopies: set()
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: set()
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: {Label(tmp.84): set(), JumpIfZero(tmp.83, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
54 54: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
--------------IMAP for block 0-------------------
tmp.14 = glob * glob set()
tmp.15 = glob2 + 2.0 set()
tmp.16 = tmp.14 + 5.0 set()
IntToDouble tmp.17 = glob3 set()
tmp.18 = tmp.15 - tmp.17 set()
tmp.19 = glob + 7.0 set()
tmp.20 = glob2 * 2.0 set()
tmp.21 = tmp.16 * 3.0 set()
tmp.22 = tmp.18 * 112.0 set()
tmp.23 = tmp.19 / 3.0 set()
tmp.24 = tmp.21 + tmp.20 set()
tmp.25 = tmp.22 - tmp.24 set()
tmp.26 = tmp.23 + 1000.0 set()
tmp.27 = tmp.24 - tmp.18 set()
tmp.28 = tmp.27 * tmp.26 set()
tmp.29 = tmp.14 == 400.0 set()
JumpIfZero(tmp.29, tmp.30) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 1-------------------
tmp.31 = tmp.15 == 32.0 set()
JumpIfZero(tmp.31, tmp.30) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 2-------------------
Copy tmp.32 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.33) {Copy tmp.32 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.32 = 1}
ADD SUCCESSORS.
--------------IMAP for block 3-------------------
Label(tmp.30) set()
Copy tmp.32 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.32 = 0}
ADD SUCCESSORS.
--------------IMAP for block 4-------------------
Label(tmp.33) set()
JumpIfZero(tmp.32, tmp.34) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 5-------------------
tmp.35 = tmp.16 == 405.0 set()
JumpIfZero(tmp.35, tmp.34) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 6-------------------
Copy tmp.36 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.37) {Copy tmp.36 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.36 = 1}
ADD SUCCESSORS.
--------------IMAP for block 7-------------------
Label(tmp.34) set()
Copy tmp.36 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.36 = 0}
ADD SUCCESSORS.
--------------IMAP for block 8-------------------
Label(tmp.37) set()
JumpIfZero(tmp.36, tmp.38) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 9-------------------
tmp.39 = -8.0 set()
tmp.40 = tmp.18 == tmp.39 set()
JumpIfZero(tmp.40, tmp.38) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 10-------------------
Copy tmp.41 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.42) {Copy tmp.41 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.41 = 1}
ADD SUCCESSORS.
--------------IMAP for block 11-------------------
Label(tmp.38) set()
Copy tmp.41 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.41 = 0}
ADD SUCCESSORS.
--------------IMAP for block 12-------------------
Label(tmp.42) set()
JumpIfZero(tmp.41, tmp.43) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 13-------------------
tmp.44 = tmp.19 == 27.0 set()
JumpIfZero(tmp.44, tmp.43) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 14-------------------
Copy tmp.45 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.46) {Copy tmp.45 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.45 = 1}
ADD SUCCESSORS.
--------------IMAP for block 15-------------------
Label(tmp.43) set()
Copy tmp.45 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.45 = 0}
ADD SUCCESSORS.
--------------IMAP for block 16-------------------
Label(tmp.46) set()
JumpIfZero(tmp.45, tmp.47) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 17-------------------
tmp.48 = tmp.20 == 60.0 set()
JumpIfZero(tmp.48, tmp.47) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 18-------------------
Copy tmp.49 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.50) {Copy tmp.49 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.49 = 1}
ADD SUCCESSORS.
--------------IMAP for block 19-------------------
Label(tmp.47) set()
Copy tmp.49 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.49 = 0}
ADD SUCCESSORS.
--------------IMAP for block 20-------------------
Label(tmp.50) set()
JumpIfZero(tmp.49, tmp.51) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 21-------------------
tmp.52 = tmp.21 == 1215.0 set()
JumpIfZero(tmp.52, tmp.51) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 22-------------------
Copy tmp.53 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.54) {Copy tmp.53 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.53 = 1}
ADD SUCCESSORS.
--------------IMAP for block 23-------------------
Label(tmp.51) set()
Copy tmp.53 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.53 = 0}
ADD SUCCESSORS.
--------------IMAP for block 24-------------------
Label(tmp.54) set()
JumpIfZero(tmp.53, tmp.55) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 25-------------------
tmp.56 = -896.0 set()
tmp.57 = tmp.22 == tmp.56 set()
JumpIfZero(tmp.57, tmp.55) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 26-------------------
Copy tmp.58 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.59) {Copy tmp.58 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.58 = 1}
ADD SUCCESSORS.
--------------IMAP for block 27-------------------
Label(tmp.55) set()
Copy tmp.58 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.58 = 0}
ADD SUCCESSORS.
--------------IMAP for block 28-------------------
Label(tmp.59) set()
JumpIfZero(tmp.58, tmp.60) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 29-------------------
tmp.61 = tmp.23 == 9.0 set()
JumpIfZero(tmp.61, tmp.60) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 30-------------------
Copy tmp.62 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.63) {Copy tmp.62 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.62 = 1}
ADD SUCCESSORS.
--------------IMAP for block 31-------------------
Label(tmp.60) set()
Copy tmp.62 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.62 = 0}
ADD SUCCESSORS.
--------------IMAP for block 32-------------------
Label(tmp.63) set()
JumpIfZero(tmp.62, tmp.64) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 33-------------------
tmp.65 = tmp.24 == 1275.0 set()
JumpIfZero(tmp.65, tmp.64) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 34-------------------
Copy tmp.66 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.67) {Copy tmp.66 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.66 = 1}
ADD SUCCESSORS.
--------------IMAP for block 35-------------------
Label(tmp.64) set()
Copy tmp.66 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.66 = 0}
ADD SUCCESSORS.
--------------IMAP for block 36-------------------
Label(tmp.67) set()
JumpIfZero(tmp.66, tmp.68) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 37-------------------
tmp.69 = -2171.0 set()
tmp.70 = tmp.25 == tmp.69 set()
JumpIfZero(tmp.70, tmp.68) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 38-------------------
Copy tmp.71 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.72) {Copy tmp.71 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.71 = 1}
ADD SUCCESSORS.
--------------IMAP for block 39-------------------
Label(tmp.68) set()
Copy tmp.71 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.71 = 0}
ADD SUCCESSORS.
--------------IMAP for block 40-------------------
Label(tmp.72) set()
JumpIfZero(tmp.71, tmp.73) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 41-------------------
tmp.74 = tmp.26 == 1009.0 set()
JumpIfZero(tmp.74, tmp.73) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 42-------------------
Copy tmp.75 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.76) {Copy tmp.75 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.75 = 1}
ADD SUCCESSORS.
--------------IMAP for block 43-------------------
Label(tmp.73) set()
Copy tmp.75 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.75 = 0}
ADD SUCCESSORS.
--------------IMAP for block 44-------------------
Label(tmp.76) set()
JumpIfZero(tmp.75, tmp.77) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 45-------------------
tmp.78 = tmp.27 == 1283.0 set()
JumpIfZero(tmp.78, tmp.77) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 46-------------------
Copy tmp.79 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.80) {Copy tmp.79 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.79 = 1}
ADD SUCCESSORS.
--------------IMAP for block 47-------------------
Label(tmp.77) set()
Copy tmp.79 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.79 = 0}
ADD SUCCESSORS.
--------------IMAP for block 48-------------------
Label(tmp.80) set()
JumpIfZero(tmp.79, tmp.81) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 49-------------------
tmp.82 = tmp.28 == 1294547.0 set()
JumpIfZero(tmp.82, tmp.81) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 50-------------------
Copy tmp.83 = 1 set()
<class 'parser.ConstInt'>
Jump(tmp.84) {Copy tmp.83 = 1}
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.83 = 1}
ADD SUCCESSORS.
--------------IMAP for block 51-------------------
Label(tmp.81) set()
Copy tmp.83 = 0 set()
<class 'parser.ConstInt'>
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: {Copy tmp.83 = 0}
ADD SUCCESSORS.
--------------IMAP for block 52-------------------
Label(tmp.84) set()
JumpIfZero(tmp.83, tmp.87) set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 53-------------------
IntToDouble tmp.88 = 0 set()
Return tmp.88 set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
--------------IMAP for block 54-------------------
Label(tmp.87) set()
IntToDouble tmp.89 = 1 set()
Return tmp.89 set()
OLD ANNOT: {Copy tmp.36 = 1, Copy tmp.32 = 0, Copy tmp.83 = 0, Copy tmp.71 = 1, Copy tmp.62 = 0, Copy tmp.58 = 1, Copy tmp.53 = 0, Copy tmp.41 = 0, Copy tmp.66 = 0, Copy tmp.32 = 1, Copy tmp.83 = 1, Copy tmp.75 = 0, Copy tmp.45 = 0, Copy tmp.49 = 0, Copy tmp.62 = 1, Copy tmp.53 = 1, Copy tmp.79 = 0, Copy tmp.36 = 0, Copy tmp.41 = 1, Copy tmp.66 = 1, Copy tmp.71 = 0, Copy tmp.58 = 0, Copy tmp.45 = 1, Copy tmp.75 = 1, Copy tmp.49 = 1, Copy tmp.79 = 1}
NEW ANNOT: set()
ADD SUCCESSORS.
------------REPLACE INSTRUCTIONS WITH REACHING COPIES.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: set(), tmp.15 = glob2 + 2.0: set(), tmp.16 = tmp.14 + 5.0: set(), IntToDouble tmp.17 = glob3: set(), tmp.18 = tmp.15 - tmp.17: set(), tmp.19 = glob + 7.0: set(), tmp.20 = glob2 * 2.0: set(), tmp.21 = tmp.16 * 3.0: set(), tmp.22 = tmp.18 * 112.0: set(), tmp.23 = tmp.19 / 3.0: set(), tmp.24 = tmp.21 + tmp.20: set(), tmp.25 = tmp.22 - tmp.24: set(), tmp.26 = tmp.23 + 1000.0: set(), tmp.27 = tmp.24 - tmp.18: set(), tmp.28 = tmp.27 * tmp.26: set(), tmp.29 = tmp.14 == 400.0: set(), JumpIfZero(tmp.29, tmp.30): set()} ReachingCopies: set()
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: set(), JumpIfZero(tmp.31, tmp.30): set()} ReachingCopies: set()
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: set(), Jump(tmp.33): {Copy tmp.32 = 1}} ReachingCopies: {Copy tmp.32 = 1}
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): set(), Copy tmp.32 = 0: set()} ReachingCopies: {Copy tmp.32 = 0}
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): set(), JumpIfZero(tmp.32, tmp.34): set()} ReachingCopies: set()
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: set(), JumpIfZero(tmp.35, tmp.34): set()} ReachingCopies: set()
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: set(), Jump(tmp.37): {Copy tmp.36 = 1}} ReachingCopies: {Copy tmp.36 = 1}
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): set(), Copy tmp.36 = 0: set()} ReachingCopies: {Copy tmp.36 = 0}
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): set(), JumpIfZero(tmp.36, tmp.38): set()} ReachingCopies: set()
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: set(), tmp.40 = tmp.18 == tmp.39: set(), JumpIfZero(tmp.40, tmp.38): set()} ReachingCopies: set()
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: set(), Jump(tmp.42): {Copy tmp.41 = 1}} ReachingCopies: {Copy tmp.41 = 1}
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): set(), Copy tmp.41 = 0: set()} ReachingCopies: {Copy tmp.41 = 0}
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): set(), JumpIfZero(tmp.41, tmp.43): set()} ReachingCopies: set()
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: set(), JumpIfZero(tmp.44, tmp.43): set()} ReachingCopies: set()
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: set(), Jump(tmp.46): {Copy tmp.45 = 1}} ReachingCopies: {Copy tmp.45 = 1}
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): set(), Copy tmp.45 = 0: set()} ReachingCopies: {Copy tmp.45 = 0}
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): set(), JumpIfZero(tmp.45, tmp.47): set()} ReachingCopies: set()
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: set(), JumpIfZero(tmp.48, tmp.47): set()} ReachingCopies: set()
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: set(), Jump(tmp.50): {Copy tmp.49 = 1}} ReachingCopies: {Copy tmp.49 = 1}
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): set(), Copy tmp.49 = 0: set()} ReachingCopies: {Copy tmp.49 = 0}
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): set(), JumpIfZero(tmp.49, tmp.51): set()} ReachingCopies: set()
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: set(), JumpIfZero(tmp.52, tmp.51): set()} ReachingCopies: set()
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: set(), Jump(tmp.54): {Copy tmp.53 = 1}} ReachingCopies: {Copy tmp.53 = 1}
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): set(), Copy tmp.53 = 0: set()} ReachingCopies: {Copy tmp.53 = 0}
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): set(), JumpIfZero(tmp.53, tmp.55): set()} ReachingCopies: set()
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: set(), tmp.57 = tmp.22 == tmp.56: set(), JumpIfZero(tmp.57, tmp.55): set()} ReachingCopies: set()
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: set(), Jump(tmp.59): {Copy tmp.58 = 1}} ReachingCopies: {Copy tmp.58 = 1}
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): set(), Copy tmp.58 = 0: set()} ReachingCopies: {Copy tmp.58 = 0}
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): set(), JumpIfZero(tmp.58, tmp.60): set()} ReachingCopies: set()
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: set(), JumpIfZero(tmp.61, tmp.60): set()} ReachingCopies: set()
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: set(), Jump(tmp.63): {Copy tmp.62 = 1}} ReachingCopies: {Copy tmp.62 = 1}
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): set(), Copy tmp.62 = 0: set()} ReachingCopies: {Copy tmp.62 = 0}
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): set(), JumpIfZero(tmp.62, tmp.64): set()} ReachingCopies: set()
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: set(), JumpIfZero(tmp.65, tmp.64): set()} ReachingCopies: set()
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: set(), Jump(tmp.67): {Copy tmp.66 = 1}} ReachingCopies: {Copy tmp.66 = 1}
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): set(), Copy tmp.66 = 0: set()} ReachingCopies: {Copy tmp.66 = 0}
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): set(), JumpIfZero(tmp.66, tmp.68): set()} ReachingCopies: set()
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: set(), tmp.70 = tmp.25 == tmp.69: set(), JumpIfZero(tmp.70, tmp.68): set()} ReachingCopies: set()
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: set(), Jump(tmp.72): {Copy tmp.71 = 1}} ReachingCopies: {Copy tmp.71 = 1}
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): set(), Copy tmp.71 = 0: set()} ReachingCopies: {Copy tmp.71 = 0}
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): set(), JumpIfZero(tmp.71, tmp.73): set()} ReachingCopies: set()
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: set(), JumpIfZero(tmp.74, tmp.73): set()} ReachingCopies: set()
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: set(), Jump(tmp.76): {Copy tmp.75 = 1}} ReachingCopies: {Copy tmp.75 = 1}
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): set(), Copy tmp.75 = 0: set()} ReachingCopies: {Copy tmp.75 = 0}
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): set(), JumpIfZero(tmp.75, tmp.77): set()} ReachingCopies: set()
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: set(), JumpIfZero(tmp.78, tmp.77): set()} ReachingCopies: set()
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: set(), Jump(tmp.80): {Copy tmp.79 = 1}} ReachingCopies: {Copy tmp.79 = 1}
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): set(), Copy tmp.79 = 0: set()} ReachingCopies: {Copy tmp.79 = 0}
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): set(), JumpIfZero(tmp.79, tmp.81): set()} ReachingCopies: set()
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: set(), JumpIfZero(tmp.82, tmp.81): set()} ReachingCopies: set()
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: set(), Jump(tmp.84): {Copy tmp.83 = 1}} ReachingCopies: {Copy tmp.83 = 1}
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): set(), Copy tmp.83 = 0: set()} ReachingCopies: {Copy tmp.83 = 0}
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: {Label(tmp.84): set(), JumpIfZero(tmp.83, tmp.87): set()} ReachingCopies: set()
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: set(), Return tmp.88: set()} ReachingCopies: set()
54 54: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): set(), IntToDouble tmp.89 = 1: set(), Return tmp.89: set()} ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
--------------ADDING ALL STATIC VARIABLES.------------------
glob glob double InitialVal: InitialList: [c_double(20.0)] Global: True
glob2 glob2 double InitialVal: InitialList: [c_double(30.0)] Global: True
glob3 glob3 int InitialVal: InitialList: [c_int(40)] Global: True
target target FunType: ParamTypes: [] Return Type: double Defined: True Global: True
a.0 a.0 double <typeChecker.LocalAttributes object at 0x7fc677ae93a0>
b.1 b.1 double <typeChecker.LocalAttributes object at 0x7fc677ae95b0>
c.2 c.2 double <typeChecker.LocalAttributes object at 0x7fc677ae97f0>
d.3 d.3 double <typeChecker.LocalAttributes object at 0x7fc677ae9a30>
e.4 e.4 double <typeChecker.LocalAttributes object at 0x7fc677ae9ca0>
f.5 f.5 double <typeChecker.LocalAttributes object at 0x7fc677ae9ee0>
g.6 g.6 double <typeChecker.LocalAttributes object at 0x7fc677aea150>
h.7 h.7 double <typeChecker.LocalAttributes object at 0x7fc677aea3c0>
i.8 i.8 double <typeChecker.LocalAttributes object at 0x7fc677aea600>
j.9 j.9 double <typeChecker.LocalAttributes object at 0x7fc677aea840>
k.10 k.10 double <typeChecker.LocalAttributes object at 0x7fc677dac230>
l.11 l.11 double <typeChecker.LocalAttributes object at 0x7fc677dac440>
m.12 m.12 double <typeChecker.LocalAttributes object at 0x7fc677dac680>
n.13 n.13 double <typeChecker.LocalAttributes object at 0x7fc677dac890>
tmp.14 tmp.14 double <typeChecker.LocalAttributes object at 0x7fc677daf620>
tmp.15 tmp.15 double <typeChecker.LocalAttributes object at 0x7fc677daf650>
tmp.16 tmp.16 double <typeChecker.LocalAttributes object at 0x7fc677daf7a0>
tmp.17 tmp.17 double <typeChecker.LocalAttributes object at 0x7fc677dafbf0>
tmp.18 tmp.18 double <typeChecker.LocalAttributes object at 0x7fc677daf980>
tmp.19 tmp.19 double <typeChecker.LocalAttributes object at 0x7fc677dafb00>
tmp.20 tmp.20 double <typeChecker.LocalAttributes object at 0x7fc677dafdd0>
tmp.21 tmp.21 double <typeChecker.LocalAttributes object at 0x7fc677daffb0>
tmp.22 tmp.22 double <typeChecker.LocalAttributes object at 0x7fc677da01d0>
tmp.23 tmp.23 double <typeChecker.LocalAttributes object at 0x7fc677da03e0>
tmp.24 tmp.24 double <typeChecker.LocalAttributes object at 0x7fc677da0590>
tmp.25 tmp.25 double <typeChecker.LocalAttributes object at 0x7fc677da07a0>
tmp.26 tmp.26 double <typeChecker.LocalAttributes object at 0x7fc677da0a10>
tmp.27 tmp.27 double <typeChecker.LocalAttributes object at 0x7fc677da0bf0>
tmp.28 tmp.28 double <typeChecker.LocalAttributes object at 0x7fc677da0dd0>
tmp.29 tmp.29 int <typeChecker.LocalAttributes object at 0x7fc677da20c0>
tmp.31 tmp.31 int <typeChecker.LocalAttributes object at 0x7fc677da22d0>
tmp.32 tmp.32 int <typeChecker.LocalAttributes object at 0x7fc677da1fd0>
tmp.35 tmp.35 int <typeChecker.LocalAttributes object at 0x7fc677da2690>
tmp.36 tmp.36 int <typeChecker.LocalAttributes object at 0x7fc677da1e80>
tmp.39 tmp.39 double <typeChecker.LocalAttributes object at 0x7fc677da2cc0>
tmp.40 tmp.40 int <typeChecker.LocalAttributes object at 0x7fc677da2a50>
tmp.41 tmp.41 int <typeChecker.LocalAttributes object at 0x7fc677da1d30>
tmp.44 tmp.44 int <typeChecker.LocalAttributes object at 0x7fc677da2f60>
tmp.45 tmp.45 int <typeChecker.LocalAttributes object at 0x7fc677da1be0>
tmp.48 tmp.48 int <typeChecker.LocalAttributes object at 0x7fc677da3320>
tmp.49 tmp.49 int <typeChecker.LocalAttributes object at 0x7fc677da1a90>
tmp.52 tmp.52 int <typeChecker.LocalAttributes object at 0x7fc677da36e0>
tmp.53 tmp.53 int <typeChecker.LocalAttributes object at 0x7fc677da1940>
tmp.56 tmp.56 double <typeChecker.LocalAttributes object at 0x7fc677da3d70>
tmp.57 tmp.57 int <typeChecker.LocalAttributes object at 0x7fc677da3b00>
tmp.58 tmp.58 int <typeChecker.LocalAttributes object at 0x7fc677da17f0>
tmp.61 tmp.61 int <typeChecker.LocalAttributes object at 0x7fc677ac41d0>
tmp.62 tmp.62 int <typeChecker.LocalAttributes object at 0x7fc677da1670>
tmp.65 tmp.65 int <typeChecker.LocalAttributes object at 0x7fc677ac4410>
tmp.66 tmp.66 int <typeChecker.LocalAttributes object at 0x7fc677da14c0>
tmp.69 tmp.69 double <typeChecker.LocalAttributes object at 0x7fc677ac4a40>
tmp.70 tmp.70 int <typeChecker.LocalAttributes object at 0x7fc677ac47d0>
tmp.71 tmp.71 int <typeChecker.LocalAttributes object at 0x7fc677da1370>
tmp.74 tmp.74 int <typeChecker.LocalAttributes object at 0x7fc677ac4d40>
tmp.75 tmp.75 int <typeChecker.LocalAttributes object at 0x7fc677da1220>
tmp.78 tmp.78 int <typeChecker.LocalAttributes object at 0x7fc677ac5160>
tmp.79 tmp.79 int <typeChecker.LocalAttributes object at 0x7fc677da10d0>
tmp.82 tmp.82 int <typeChecker.LocalAttributes object at 0x7fc677ac55e0>
tmp.83 tmp.83 int <typeChecker.LocalAttributes object at 0x7fc677da1010>
tmp.85 tmp.85 int <typeChecker.LocalAttributes object at 0x7fc677da09b0>
tmp.88 tmp.88 double <typeChecker.LocalAttributes object at 0x7fc677ac5d30>
tmp.89 tmp.89 double <typeChecker.LocalAttributes object at 0x7fc677ac5f10>
--------------LIVE for block 54-------------------
Return tmp.89 {glob, glob3, glob2}
IntToDouble tmp.89 = 1 {glob, tmp.89, glob3, glob2}
Label(tmp.87) {glob, glob3, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 53-------------------
Return tmp.88 {glob, glob3, glob2}
IntToDouble tmp.88 = 0 {glob, glob3, tmp.88, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 52-------------------
JumpIfZero(tmp.83, tmp.87) {glob, glob3, glob2}
Label(tmp.84) {glob, glob3, tmp.83, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.83, glob2}
--------------LIVE for block 51-------------------
Copy tmp.83 = 0 {glob, glob3, tmp.83, glob2}
Label(tmp.81) {glob, glob3, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 50-------------------
Jump(tmp.84) {glob, glob3, tmp.83, glob2}
Copy tmp.83 = 1 {glob, glob3, tmp.83, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, glob2}
--------------LIVE for block 49-------------------
JumpIfZero(tmp.82, tmp.81) {glob, glob3, glob2}
tmp.82 = tmp.28 == 1294547.0 {glob, glob3, tmp.82, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.28, glob2}
--------------LIVE for block 48-------------------
JumpIfZero(tmp.79, tmp.81) {glob, glob3, tmp.28, glob2}
Label(tmp.80) {glob, tmp.28, glob2, glob3, tmp.79}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.79}
--------------LIVE for block 47-------------------
Copy tmp.79 = 0 {glob, tmp.28, glob2, glob3, tmp.79}
Label(tmp.77) {glob, glob3, tmp.28, glob2}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.28, glob2}
--------------LIVE for block 46-------------------
Jump(tmp.80) {glob, tmp.28, glob2, glob3, tmp.79}
Copy tmp.79 = 1 {glob, tmp.28, glob2, glob3, tmp.79}
OLD ANNOT: set()
NEW ANNOT: {glob, glob3, tmp.28, glob2}
--------------LIVE for block 45-------------------
JumpIfZero(tmp.78, tmp.77) {glob, glob2, tmp.28, glob3}
tmp.78 = tmp.27 == 1283.0 {glob, tmp.28, glob2, tmp.78, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 44-------------------
JumpIfZero(tmp.75, tmp.77) {glob, tmp.28, glob2, tmp.27, glob3}
Label(tmp.76) {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 43-------------------
Copy tmp.75 = 0 {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
Label(tmp.73) {glob, tmp.28, glob2, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 42-------------------
Jump(tmp.76) {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
Copy tmp.75 = 1 {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3}
--------------LIVE for block 41-------------------
JumpIfZero(tmp.74, tmp.73) {glob, tmp.28, glob2, tmp.27, glob3}
tmp.74 = tmp.26 == 1009.0 {glob, tmp.28, glob2, tmp.74, tmp.27, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
--------------LIVE for block 40-------------------
JumpIfZero(tmp.71, tmp.73) {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
Label(tmp.72) {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
--------------LIVE for block 39-------------------
Copy tmp.71 = 0 {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
Label(tmp.68) {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
--------------LIVE for block 38-------------------
Jump(tmp.72) {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
Copy tmp.71 = 1 {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
--------------LIVE for block 37-------------------
JumpIfZero(tmp.70, tmp.68) {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
tmp.70 = tmp.25 == tmp.69 {glob, tmp.28, glob2, tmp.27, tmp.70, glob3, tmp.26}
tmp.69 = -2171.0 {glob, tmp.28, glob2, glob3, tmp.69, tmp.26, tmp.25, tmp.27}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
--------------LIVE for block 36-------------------
JumpIfZero(tmp.66, tmp.68) {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
Label(tmp.67) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
--------------LIVE for block 35-------------------
Copy tmp.66 = 0 {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
Label(tmp.64) {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
--------------LIVE for block 34-------------------
Jump(tmp.67) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
Copy tmp.66 = 1 {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
--------------LIVE for block 33-------------------
JumpIfZero(tmp.65, tmp.64) {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
tmp.65 = tmp.24 == 1275.0 {glob, tmp.28, tmp.65, tmp.25, glob3, tmp.26, glob2, tmp.27}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 32-------------------
JumpIfZero(tmp.62, tmp.64) {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}
Label(tmp.63) {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 31-------------------
Copy tmp.62 = 0 {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
Label(tmp.60) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
--------------LIVE for block 30-------------------
Jump(tmp.63) {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
Copy tmp.62 = 1 {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
--------------LIVE for block 29-------------------
JumpIfZero(tmp.61, tmp.60) {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
tmp.61 = tmp.23 == 9.0 {glob, tmp.28, tmp.25, glob3, tmp.61, tmp.26, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 28-------------------
JumpIfZero(tmp.58, tmp.60) {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}
Label(tmp.59) {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 27-------------------
Copy tmp.58 = 0 {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
Label(tmp.55) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
--------------LIVE for block 26-------------------
Jump(tmp.59) {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
Copy tmp.58 = 1 {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
--------------LIVE for block 25-------------------
JumpIfZero(tmp.57, tmp.55) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
tmp.57 = tmp.22 == tmp.56 {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.57, tmp.24}
tmp.56 = -896.0 {glob, tmp.28, glob2, glob3, tmp.56, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 24-------------------
JumpIfZero(tmp.53, tmp.55) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.54) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
--------------LIVE for block 23-------------------
Copy tmp.53 = 0 {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
Label(tmp.51) {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 22-------------------
Jump(tmp.54) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
Copy tmp.53 = 1 {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 21-------------------
JumpIfZero(tmp.52, tmp.51) {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.52 = tmp.21 == 1215.0 {glob, tmp.28, tmp.25, tmp.52, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 20-------------------
JumpIfZero(tmp.49, tmp.51) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
Label(tmp.50) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 19-------------------
Copy tmp.49 = 0 {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
Label(tmp.47) {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 18-------------------
Jump(tmp.50) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
Copy tmp.49 = 1 {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 17-------------------
JumpIfZero(tmp.48, tmp.47) {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
tmp.48 = tmp.20 == 60.0 {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.48, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 16-------------------
JumpIfZero(tmp.45, tmp.47) {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.46) {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 15-------------------
Copy tmp.45 = 0 {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.43) {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 14-------------------
Jump(tmp.46) {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Copy tmp.45 = 1 {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 13-------------------
JumpIfZero(tmp.44, tmp.43) {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.44 = tmp.19 == 27.0 {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.44, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 12-------------------
JumpIfZero(tmp.41, tmp.43) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
Label(tmp.42) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 11-------------------
Copy tmp.41 = 0 {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
Label(tmp.38) {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 10-------------------
Jump(tmp.42) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
Copy tmp.41 = 1 {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 9-------------------
JumpIfZero(tmp.40, tmp.38) {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
tmp.40 = tmp.18 == tmp.39 {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.40, tmp.25, tmp.27, tmp.24}
tmp.39 = -8.0 {glob, tmp.28, tmp.39, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 8-------------------
JumpIfZero(tmp.36, tmp.38) {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.37) {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 7-------------------
Copy tmp.36 = 0 {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Label(tmp.34) {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 6-------------------
Jump(tmp.37) {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
Copy tmp.36 = 1 {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 5-------------------
JumpIfZero(tmp.35, tmp.34) {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.35 = tmp.16 == 405.0 {glob, tmp.28, tmp.25, tmp.35, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
--------------LIVE for block 4-------------------
JumpIfZero(tmp.32, tmp.34) {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
Label(tmp.33) {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
OLD ANNOT: set()
NEW ANNOT: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
--------------LIVE for block 3-------------------
Copy tmp.32 = 0 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
Label(tmp.30) {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 2-------------------
Jump(tmp.33) {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
Copy tmp.32 = 1 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
OLD ANNOT: set()
NEW ANNOT: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
--------------LIVE for block 1-------------------
JumpIfZero(tmp.31, tmp.30) {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
tmp.31 = tmp.15 == 32.0 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, tmp.31, glob, tmp.16, glob3, tmp.26}
OLD ANNOT: set()
NEW ANNOT: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
--------------LIVE for block 0-------------------
JumpIfZero(tmp.29, tmp.30) {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
tmp.29 = tmp.14 == 400.0 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.29, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
tmp.28 = tmp.27 * tmp.26 {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}
tmp.27 = tmp.24 - tmp.18 {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}
tmp.26 = tmp.23 + 1000.0 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24}
tmp.25 = tmp.22 - tmp.24 {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}
tmp.24 = tmp.21 + tmp.20 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}
tmp.23 = tmp.19 / 3.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2}
tmp.22 = tmp.18 * 112.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2}
tmp.21 = tmp.16 * 3.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2}
tmp.20 = glob2 * 2.0 {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2}
tmp.19 = glob + 7.0 {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2}
tmp.18 = tmp.15 - tmp.17 {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15}
IntToDouble tmp.17 = glob3 {glob, tmp.14, tmp.16, glob2, tmp.17, glob3, tmp.15}
tmp.16 = tmp.14 + 5.0 {glob, tmp.14, tmp.16, glob2, glob3, tmp.15}
tmp.15 = glob2 + 2.0 {glob, tmp.14, glob2, glob3, tmp.15}
tmp.14 = glob * glob {glob2, tmp.14, glob, glob3}
OLD ANNOT: set()
NEW ANNOT: {glob2, glob, glob3}
------------REMOVE DEAD STORE INSTRUCTIONS.-------------
------------AFTER DEAD STORE REMOVAL.-------------
ENTRY Entry: ENTRY {0}
0 0: [tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: {tmp.14 = glob * glob: {glob2, tmp.14, glob, glob3}, tmp.15 = glob2 + 2.0: {glob, tmp.14, glob2, glob3, tmp.15}, tmp.16 = tmp.14 + 5.0: {glob, tmp.14, tmp.16, glob2, glob3, tmp.15}, IntToDouble tmp.17 = glob3: {glob, tmp.14, tmp.16, glob2, tmp.17, glob3, tmp.15}, tmp.18 = tmp.15 - tmp.17: {glob, tmp.14, tmp.16, glob2, tmp.18, glob3, tmp.15}, tmp.19 = glob + 7.0: {glob, tmp.14, tmp.16, tmp.19, tmp.18, glob3, tmp.15, glob2}, tmp.20 = glob2 * 2.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, glob2}, tmp.21 = tmp.16 * 3.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, glob2}, tmp.22 = tmp.18 * 112.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.22, glob2}, tmp.23 = tmp.19 / 3.0: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2}, tmp.24 = tmp.21 + tmp.20: {glob, tmp.14, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}, tmp.25 = tmp.22 - tmp.24: {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.23, tmp.22, glob2, tmp.24}, tmp.26 = tmp.23 + 1000.0: {glob, tmp.14, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, tmp.15, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.24}, tmp.27 = tmp.24 - tmp.18: {tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}, tmp.28 = tmp.27 * tmp.26: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.14, tmp.16, glob3, tmp.26}, tmp.29 = tmp.14 == 400.0: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.29, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}, JumpIfZero(tmp.29, tmp.30): {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}} ReachingCopies: {glob2, glob, glob3}
1 1: [tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30)] Pred: {0} Suc: {2, 3} iMap: {tmp.31 = tmp.15 == 32.0: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, tmp.31, glob, tmp.16, glob3, tmp.26}, JumpIfZero(tmp.31, tmp.30): {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.15, tmp.21, tmp.23, tmp.22, glob2, tmp.25, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26}
2 2: [Copy tmp.32 = 1, Jump(tmp.33)] Pred: {1} Suc: {4} iMap: {Copy tmp.32 = 1: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}, Jump(tmp.33): {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}} ReachingCopies: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
3 3: [Label(tmp.30), Copy tmp.32 = 0] Pred: {0, 1} Suc: {4} iMap: {Label(tmp.30): {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.32 = 0: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}} ReachingCopies: {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
4 4: [Label(tmp.33), JumpIfZero(tmp.32, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: {Label(tmp.33): {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}, JumpIfZero(tmp.32, tmp.34): {glob, tmp.28, glob2, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {tmp.28, tmp.19, tmp.20, tmp.18, tmp.21, tmp.23, tmp.22, tmp.25, glob2, tmp.27, tmp.24, glob, tmp.16, glob3, tmp.26, tmp.32}
5 5: [tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34)] Pred: {4} Suc: {6, 7} iMap: {tmp.35 = tmp.16 == 405.0: {glob, tmp.28, tmp.25, tmp.35, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.35, tmp.34): {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.16, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
6 6: [Copy tmp.36 = 1, Jump(tmp.37)] Pred: {5} Suc: {8} iMap: {Copy tmp.36 = 1: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Jump(tmp.37): {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
7 7: [Label(tmp.34), Copy tmp.36 = 0] Pred: {4, 5} Suc: {8} iMap: {Label(tmp.34): {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.36 = 0: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
8 8: [Label(tmp.37), JumpIfZero(tmp.36, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: {Label(tmp.37): {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.36, tmp.38): {glob, tmp.28, tmp.25, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.36, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
9 9: [tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38)] Pred: {8} Suc: {10, 11} iMap: {tmp.39 = -8.0: {glob, tmp.28, tmp.39, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, tmp.40 = tmp.18 == tmp.39: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.40, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.40, tmp.38): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, tmp.18, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
10 10: [Copy tmp.41 = 1, Jump(tmp.42)] Pred: {9} Suc: {12} iMap: {Copy tmp.41 = 1: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}, Jump(tmp.42): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
11 11: [Label(tmp.38), Copy tmp.41 = 0] Pred: {8, 9} Suc: {12} iMap: {Label(tmp.38): {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Copy tmp.41 = 0: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
12 12: [Label(tmp.42), JumpIfZero(tmp.41, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: {Label(tmp.42): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.41, tmp.43): {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.41, tmp.25, tmp.27, tmp.24}
13 13: [tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43)] Pred: {12} Suc: {14, 15} iMap: {tmp.44 = tmp.19 == 27.0: {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.44, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.44, tmp.43): {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, tmp.19, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
14 14: [Copy tmp.45 = 1, Jump(tmp.46)] Pred: {13} Suc: {16} iMap: {Copy tmp.45 = 1: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Jump(tmp.46): {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
15 15: [Label(tmp.43), Copy tmp.45 = 0] Pred: {12, 13} Suc: {16} iMap: {Label(tmp.43): {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.45 = 0: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
16 16: [Label(tmp.46), JumpIfZero(tmp.45, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: {Label(tmp.46): {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.45, tmp.47): {glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {tmp.45, glob, tmp.28, tmp.25, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
17 17: [tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47)] Pred: {16} Suc: {18, 19} iMap: {tmp.48 = tmp.20 == 60.0: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.48, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.48, tmp.47): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, tmp.20, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
18 18: [Copy tmp.49 = 1, Jump(tmp.50)] Pred: {17} Suc: {20} iMap: {Copy tmp.49 = 1: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}, Jump(tmp.50): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
19 19: [Label(tmp.47), Copy tmp.49 = 0] Pred: {16, 17} Suc: {20} iMap: {Label(tmp.47): {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, Copy tmp.49 = 0: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
20 20: [Label(tmp.50), JumpIfZero(tmp.49, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: {Label(tmp.50): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.49, tmp.51): {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.21, tmp.26, tmp.23, tmp.22, tmp.49, tmp.25, tmp.27, tmp.24}
21 21: [tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51)] Pred: {20} Suc: {22, 23} iMap: {tmp.52 = tmp.21 == 1215.0: {glob, tmp.28, tmp.25, tmp.52, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.52, tmp.51): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.21, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}
22 22: [Copy tmp.53 = 1, Jump(tmp.54)] Pred: {21} Suc: {24} iMap: {Copy tmp.53 = 1: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}, Jump(tmp.54): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
23 23: [Label(tmp.51), Copy tmp.53 = 0] Pred: {20, 21} Suc: {24} iMap: {Label(tmp.51): {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, Copy tmp.53 = 0: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
24 24: [Label(tmp.54), JumpIfZero(tmp.53, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: {Label(tmp.54): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}, JumpIfZero(tmp.53, tmp.55): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, tmp.22, glob2, tmp.27, tmp.24, tmp.53}
25 25: [tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55)] Pred: {24} Suc: {26, 27} iMap: {tmp.56 = -896.0: {glob, tmp.28, glob2, glob3, tmp.56, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}, tmp.57 = tmp.22 == tmp.56: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.57, tmp.24}, JumpIfZero(tmp.57, tmp.55): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.22, tmp.25, tmp.27, tmp.24}
26 26: [Copy tmp.58 = 1, Jump(tmp.59)] Pred: {25} Suc: {28} iMap: {Copy tmp.58 = 1: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}, Jump(tmp.59): {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
27 27: [Label(tmp.55), Copy tmp.58 = 0] Pred: {24, 25} Suc: {28} iMap: {Label(tmp.55): {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}, Copy tmp.58 = 0: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, tmp.23, glob2, tmp.27, tmp.24}
28 28: [Label(tmp.59), JumpIfZero(tmp.58, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: {Label(tmp.59): {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.58, tmp.60): {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.58, tmp.23, tmp.25, tmp.27, tmp.24}
29 29: [tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60)] Pred: {28} Suc: {30, 31} iMap: {tmp.61 = tmp.23 == 9.0: {glob, tmp.28, tmp.25, glob3, tmp.61, tmp.26, glob2, tmp.27, tmp.24}, JumpIfZero(tmp.61, tmp.60): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.23, tmp.25, tmp.27, tmp.24}
30 30: [Copy tmp.62 = 1, Jump(tmp.63)] Pred: {29} Suc: {32} iMap: {Copy tmp.62 = 1: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}, Jump(tmp.63): {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
31 31: [Label(tmp.60), Copy tmp.62 = 0] Pred: {28, 29} Suc: {32} iMap: {Label(tmp.60): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}, Copy tmp.62 = 0: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.24}
32 32: [Label(tmp.63), JumpIfZero(tmp.62, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: {Label(tmp.63): {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}, JumpIfZero(tmp.62, tmp.64): {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.62, tmp.26, tmp.25, tmp.27, tmp.24}
33 33: [tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64)] Pred: {32} Suc: {34, 35} iMap: {tmp.65 = tmp.24 == 1275.0: {glob, tmp.28, tmp.65, tmp.25, glob3, tmp.26, glob2, tmp.27}, JumpIfZero(tmp.65, tmp.64): {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.26, tmp.25, tmp.27, tmp.24}
34 34: [Copy tmp.66 = 1, Jump(tmp.67)] Pred: {33} Suc: {36} iMap: {Copy tmp.66 = 1: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}, Jump(tmp.67): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}} ReachingCopies: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
35 35: [Label(tmp.64), Copy tmp.66 = 0] Pred: {32, 33} Suc: {36} iMap: {Label(tmp.64): {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}, Copy tmp.66 = 0: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}} ReachingCopies: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
36 36: [Label(tmp.67), JumpIfZero(tmp.66, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: {Label(tmp.67): {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}, JumpIfZero(tmp.66, tmp.68): {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, tmp.25, glob3, tmp.26, glob2, tmp.27, tmp.66}
37 37: [tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68)] Pred: {36} Suc: {38, 39} iMap: {tmp.69 = -2171.0: {glob, tmp.28, glob2, glob3, tmp.69, tmp.26, tmp.25, tmp.27}, tmp.70 = tmp.25 == tmp.69: {glob, tmp.28, glob2, tmp.27, tmp.70, glob3, tmp.26}, JumpIfZero(tmp.70, tmp.68): {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.25, tmp.27, glob3, tmp.26}
38 38: [Copy tmp.71 = 1, Jump(tmp.72)] Pred: {37} Suc: {40} iMap: {Copy tmp.71 = 1: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}, Jump(tmp.72): {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
39 39: [Label(tmp.68), Copy tmp.71 = 0] Pred: {36, 37} Suc: {40} iMap: {Label(tmp.68): {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}, Copy tmp.71 = 0: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
40 40: [Label(tmp.72), JumpIfZero(tmp.71, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: {Label(tmp.72): {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}, JumpIfZero(tmp.71, tmp.73): {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, tmp.71, glob3, tmp.26}
41 41: [tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73)] Pred: {40} Suc: {42, 43} iMap: {tmp.74 = tmp.26 == 1009.0: {glob, tmp.28, glob2, tmp.74, tmp.27, glob3}, JumpIfZero(tmp.74, tmp.73): {glob, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3, tmp.26}
42 42: [Copy tmp.75 = 1, Jump(tmp.76)] Pred: {41} Suc: {44} iMap: {Copy tmp.75 = 1: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}, Jump(tmp.76): {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3}
43 43: [Label(tmp.73), Copy tmp.75 = 0] Pred: {40, 41} Suc: {44} iMap: {Label(tmp.73): {glob, tmp.28, glob2, tmp.27, glob3}, Copy tmp.75 = 0: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3}
44 44: [Label(tmp.76), JumpIfZero(tmp.75, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: {Label(tmp.76): {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}, JumpIfZero(tmp.75, tmp.77): {glob, tmp.28, glob2, tmp.27, glob3}} ReachingCopies: {glob, tmp.75, tmp.28, glob2, tmp.27, glob3}
45 45: [tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77)] Pred: {44} Suc: {46, 47} iMap: {tmp.78 = tmp.27 == 1283.0: {glob, tmp.28, glob2, tmp.78, glob3}, JumpIfZero(tmp.78, tmp.77): {glob, glob2, tmp.28, glob3}} ReachingCopies: {glob, tmp.28, glob2, tmp.27, glob3}
46 46: [Copy tmp.79 = 1, Jump(tmp.80)] Pred: {45} Suc: {48} iMap: {Copy tmp.79 = 1: {glob, tmp.28, glob2, glob3, tmp.79}, Jump(tmp.80): {glob, tmp.28, glob2, glob3, tmp.79}} ReachingCopies: {glob, glob3, tmp.28, glob2}
47 47: [Label(tmp.77), Copy tmp.79 = 0] Pred: {44, 45} Suc: {48} iMap: {Label(tmp.77): {glob, glob3, tmp.28, glob2}, Copy tmp.79 = 0: {glob, tmp.28, glob2, glob3, tmp.79}} ReachingCopies: {glob, glob3, tmp.28, glob2}
48 48: [Label(tmp.80), JumpIfZero(tmp.79, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: {Label(tmp.80): {glob, tmp.28, glob2, glob3, tmp.79}, JumpIfZero(tmp.79, tmp.81): {glob, glob3, tmp.28, glob2}} ReachingCopies: {glob, tmp.28, glob2, glob3, tmp.79}
49 49: [tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81)] Pred: {48} Suc: {50, 51} iMap: {tmp.82 = tmp.28 == 1294547.0: {glob, glob3, tmp.82, glob2}, JumpIfZero(tmp.82, tmp.81): {glob, glob3, glob2}} ReachingCopies: {glob, glob3, tmp.28, glob2}
50 50: [Copy tmp.83 = 1, Jump(tmp.84)] Pred: {49} Suc: {52} iMap: {Copy tmp.83 = 1: {glob, glob3, tmp.83, glob2}, Jump(tmp.84): {glob, glob3, tmp.83, glob2}} ReachingCopies: {glob, glob3, glob2}
51 51: [Label(tmp.81), Copy tmp.83 = 0] Pred: {48, 49} Suc: {52} iMap: {Label(tmp.81): {glob, glob3, glob2}, Copy tmp.83 = 0: {glob, glob3, tmp.83, glob2}} ReachingCopies: {glob, glob3, glob2}
52 52: [Label(tmp.84), JumpIfZero(tmp.83, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: {Label(tmp.84): {glob, glob3, tmp.83, glob2}, JumpIfZero(tmp.83, tmp.87): {glob, glob3, glob2}} ReachingCopies: {glob, glob3, tmp.83, glob2}
53 53: [IntToDouble tmp.88 = 0, Return tmp.88] Pred: {52} Suc: {EXIT} iMap: {IntToDouble tmp.88 = 0: {glob, glob3, tmp.88, glob2}, Return tmp.88: {glob, glob3, glob2}} ReachingCopies: {glob, glob3, glob2}
54 54: [Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89] Pred: {52} Suc: {EXIT} iMap: {Label(tmp.87): {glob, glob3, glob2}, IntToDouble tmp.89 = 1: {glob, tmp.89, glob3, glob2}, Return tmp.89: {glob, glob3, glob2}} ReachingCopies: {glob, glob3, glob2}
EXIT Exit: EXIT {53, 54}
--------------ADDRESS TAKEN ANALYSIS.------------------
{glob, glob3, glob2}
TAC Program:[Function: target ([]) instructions:[tmp.14 = glob * glob, tmp.15 = glob2 + 2.0, tmp.16 = tmp.14 + 5.0, IntToDouble tmp.17 = glob3, tmp.18 = tmp.15 - tmp.17, tmp.19 = glob + 7.0, tmp.20 = glob2 * 2.0, tmp.21 = tmp.16 * 3.0, tmp.22 = tmp.18 * 112.0, tmp.23 = tmp.19 / 3.0, tmp.24 = tmp.21 + tmp.20, tmp.25 = tmp.22 - tmp.24, tmp.26 = tmp.23 + 1000.0, tmp.27 = tmp.24 - tmp.18, tmp.28 = tmp.27 * tmp.26, tmp.29 = tmp.14 == 400.0, JumpIfZero(tmp.29, tmp.30), tmp.31 = tmp.15 == 32.0, JumpIfZero(tmp.31, tmp.30), Copy tmp.32 = 1, Jump(tmp.33), Label(tmp.30), Copy tmp.32 = 0, Label(tmp.33), JumpIfZero(tmp.32, tmp.34), tmp.35 = tmp.16 == 405.0, JumpIfZero(tmp.35, tmp.34), Copy tmp.36 = 1, Jump(tmp.37), Label(tmp.34), Copy tmp.36 = 0, Label(tmp.37), JumpIfZero(tmp.36, tmp.38), tmp.39 = -8.0, tmp.40 = tmp.18 == tmp.39, JumpIfZero(tmp.40, tmp.38), Copy tmp.41 = 1, Jump(tmp.42), Label(tmp.38), Copy tmp.41 = 0, Label(tmp.42), JumpIfZero(tmp.41, tmp.43), tmp.44 = tmp.19 == 27.0, JumpIfZero(tmp.44, tmp.43), Copy tmp.45 = 1, Jump(tmp.46), Label(tmp.43), Copy tmp.45 = 0, Label(tmp.46), JumpIfZero(tmp.45, tmp.47), tmp.48 = tmp.20 == 60.0, JumpIfZero(tmp.48, tmp.47), Copy tmp.49 = 1, Jump(tmp.50), Label(tmp.47), Copy tmp.49 = 0, Label(tmp.50), JumpIfZero(tmp.49, tmp.51), tmp.52 = tmp.21 == 1215.0, JumpIfZero(tmp.52, tmp.51), Copy tmp.53 = 1, Jump(tmp.54), Label(tmp.51), Copy tmp.53 = 0, Label(tmp.54), JumpIfZero(tmp.53, tmp.55), tmp.56 = -896.0, tmp.57 = tmp.22 == tmp.56, JumpIfZero(tmp.57, tmp.55), Copy tmp.58 = 1, Jump(tmp.59), Label(tmp.55), Copy tmp.58 = 0, Label(tmp.59), JumpIfZero(tmp.58, tmp.60), tmp.61 = tmp.23 == 9.0, JumpIfZero(tmp.61, tmp.60), Copy tmp.62 = 1, Jump(tmp.63), Label(tmp.60), Copy tmp.62 = 0, Label(tmp.63), JumpIfZero(tmp.62, tmp.64), tmp.65 = tmp.24 == 1275.0, JumpIfZero(tmp.65, tmp.64), Copy tmp.66 = 1, Jump(tmp.67), Label(tmp.64), Copy tmp.66 = 0, Label(tmp.67), JumpIfZero(tmp.66, tmp.68), tmp.69 = -2171.0, tmp.70 = tmp.25 == tmp.69, JumpIfZero(tmp.70, tmp.68), Copy tmp.71 = 1, Jump(tmp.72), Label(tmp.68), Copy tmp.71 = 0, Label(tmp.72), JumpIfZero(tmp.71, tmp.73), tmp.74 = tmp.26 == 1009.0, JumpIfZero(tmp.74, tmp.73), Copy tmp.75 = 1, Jump(tmp.76), Label(tmp.73), Copy tmp.75 = 0, Label(tmp.76), JumpIfZero(tmp.75, tmp.77), tmp.78 = tmp.27 == 1283.0, JumpIfZero(tmp.78, tmp.77), Copy tmp.79 = 1, Jump(tmp.80), Label(tmp.77), Copy tmp.79 = 0, Label(tmp.80), JumpIfZero(tmp.79, tmp.81), tmp.82 = tmp.28 == 1294547.0, JumpIfZero(tmp.82, tmp.81), Copy tmp.83 = 1, Jump(tmp.84), Label(tmp.81), Copy tmp.83 = 0, Label(tmp.84), JumpIfZero(tmp.83, tmp.87), IntToDouble tmp.88 = 0, Return tmp.88, Label(tmp.87), IntToDouble tmp.89 = 1, Return tmp.89], Global: True glob = [c_double(20.0)], Global: True glob2 = [c_double(30.0)], Global: True glob3 = [c_int(40)]]
Type Table:
 {}
Symbol Table:
 {'glob': glob double InitialVal: InitialList: [c_double(20.0)] Global: True, 'glob2': glob2 double InitialVal: InitialList: [c_double(30.0)] Global: True, 'glob3': glob3 int InitialVal: InitialList: [c_int(40)] Global: True, 'target': target FunType: ParamTypes: [] Return Type: double Defined: True Global: True, 'a.0': a.0 double <typeChecker.LocalAttributes object at 0x7fc677ae93a0>, 'b.1': b.1 double <typeChecker.LocalAttributes object at 0x7fc677ae95b0>, 'c.2': c.2 double <typeChecker.LocalAttributes object at 0x7fc677ae97f0>, 'd.3': d.3 double <typeChecker.LocalAttributes object at 0x7fc677ae9a30>, 'e.4': e.4 double <typeChecker.LocalAttributes object at 0x7fc677ae9ca0>, 'f.5': f.5 double <typeChecker.LocalAttributes object at 0x7fc677ae9ee0>, 'g.6': g.6 double <typeChecker.LocalAttributes object at 0x7fc677aea150>, 'h.7': h.7 double <typeChecker.LocalAttributes object at 0x7fc677aea3c0>, 'i.8': i.8 double <typeChecker.LocalAttributes object at 0x7fc677aea600>, 'j.9': j.9 double <typeChecker.LocalAttributes object at 0x7fc677aea840>, 'k.10': k.10 double <typeChecker.LocalAttributes object at 0x7fc677dac230>, 'l.11': l.11 double <typeChecker.LocalAttributes object at 0x7fc677dac440>, 'm.12': m.12 double <typeChecker.LocalAttributes object at 0x7fc677dac680>, 'n.13': n.13 double <typeChecker.LocalAttributes object at 0x7fc677dac890>, 'tmp.14': tmp.14 double <typeChecker.LocalAttributes object at 0x7fc677daf620>, 'tmp.15': tmp.15 double <typeChecker.LocalAttributes object at 0x7fc677daf650>, 'tmp.16': tmp.16 double <typeChecker.LocalAttributes object at 0x7fc677daf7a0>, 'tmp.17': tmp.17 double <typeChecker.LocalAttributes object at 0x7fc677dafbf0>, 'tmp.18': tmp.18 double <typeChecker.LocalAttributes object at 0x7fc677daf980>, 'tmp.19': tmp.19 double <typeChecker.LocalAttributes object at 0x7fc677dafb00>, 'tmp.20': tmp.20 double <typeChecker.LocalAttributes object at 0x7fc677dafdd0>, 'tmp.21': tmp.21 double <typeChecker.LocalAttributes object at 0x7fc677daffb0>, 'tmp.22': tmp.22 double <typeChecker.LocalAttributes object at 0x7fc677da01d0>, 'tmp.23': tmp.23 double <typeChecker.LocalAttributes object at 0x7fc677da03e0>, 'tmp.24': tmp.24 double <typeChecker.LocalAttributes object at 0x7fc677da0590>, 'tmp.25': tmp.25 double <typeChecker.LocalAttributes object at 0x7fc677da07a0>, 'tmp.26': tmp.26 double <typeChecker.LocalAttributes object at 0x7fc677da0a10>, 'tmp.27': tmp.27 double <typeChecker.LocalAttributes object at 0x7fc677da0bf0>, 'tmp.28': tmp.28 double <typeChecker.LocalAttributes object at 0x7fc677da0dd0>, 'tmp.29': tmp.29 int <typeChecker.LocalAttributes object at 0x7fc677da20c0>, 'tmp.31': tmp.31 int <typeChecker.LocalAttributes object at 0x7fc677da22d0>, 'tmp.32': tmp.32 int <typeChecker.LocalAttributes object at 0x7fc677da1fd0>, 'tmp.35': tmp.35 int <typeChecker.LocalAttributes object at 0x7fc677da2690>, 'tmp.36': tmp.36 int <typeChecker.LocalAttributes object at 0x7fc677da1e80>, 'tmp.39': tmp.39 double <typeChecker.LocalAttributes object at 0x7fc677da2cc0>, 'tmp.40': tmp.40 int <typeChecker.LocalAttributes object at 0x7fc677da2a50>, 'tmp.41': tmp.41 int <typeChecker.LocalAttributes object at 0x7fc677da1d30>, 'tmp.44': tmp.44 int <typeChecker.LocalAttributes object at 0x7fc677da2f60>, 'tmp.45': tmp.45 int <typeChecker.LocalAttributes object at 0x7fc677da1be0>, 'tmp.48': tmp.48 int <typeChecker.LocalAttributes object at 0x7fc677da3320>, 'tmp.49': tmp.49 int <typeChecker.LocalAttributes object at 0x7fc677da1a90>, 'tmp.52': tmp.52 int <typeChecker.LocalAttributes object at 0x7fc677da36e0>, 'tmp.53': tmp.53 int <typeChecker.LocalAttributes object at 0x7fc677da1940>, 'tmp.56': tmp.56 double <typeChecker.LocalAttributes object at 0x7fc677da3d70>, 'tmp.57': tmp.57 int <typeChecker.LocalAttributes object at 0x7fc677da3b00>, 'tmp.58': tmp.58 int <typeChecker.LocalAttributes object at 0x7fc677da17f0>, 'tmp.61': tmp.61 int <typeChecker.LocalAttributes object at 0x7fc677ac41d0>, 'tmp.62': tmp.62 int <typeChecker.LocalAttributes object at 0x7fc677da1670>, 'tmp.65': tmp.65 int <typeChecker.LocalAttributes object at 0x7fc677ac4410>, 'tmp.66': tmp.66 int <typeChecker.LocalAttributes object at 0x7fc677da14c0>, 'tmp.69': tmp.69 double <typeChecker.LocalAttributes object at 0x7fc677ac4a40>, 'tmp.70': tmp.70 int <typeChecker.LocalAttributes object at 0x7fc677ac47d0>, 'tmp.71': tmp.71 int <typeChecker.LocalAttributes object at 0x7fc677da1370>, 'tmp.74': tmp.74 int <typeChecker.LocalAttributes object at 0x7fc677ac4d40>, 'tmp.75': tmp.75 int <typeChecker.LocalAttributes object at 0x7fc677da1220>, 'tmp.78': tmp.78 int <typeChecker.LocalAttributes object at 0x7fc677ac5160>, 'tmp.79': tmp.79 int <typeChecker.LocalAttributes object at 0x7fc677da10d0>, 'tmp.82': tmp.82 int <typeChecker.LocalAttributes object at 0x7fc677ac55e0>, 'tmp.83': tmp.83 int <typeChecker.LocalAttributes object at 0x7fc677da1010>, 'tmp.85': tmp.85 int <typeChecker.LocalAttributes object at 0x7fc677da09b0>, 'tmp.88': tmp.88 double <typeChecker.LocalAttributes object at 0x7fc677ac5d30>, 'tmp.89': tmp.89 double <typeChecker.LocalAttributes object at 0x7fc677ac5f10>}
All Aliased Vars:
 {glob, glob3, glob2}
IntParams: []
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
<class 'parser.DoubleType'>
ASM Program: [Static Constant: Alignment = 8 : tmp.90 = c_double(2.0), Static Constant: Alignment = 8 : tmp.91 = c_double(5.0), Static Constant: Alignment = 8 : tmp.92 = c_double(7.0), Static Constant: Alignment = 8 : tmp.93 = c_double(2.0), Static Constant: Alignment = 8 : tmp.94 = c_double(3.0), Static Constant: Alignment = 8 : tmp.95 = c_double(112.0), Static Constant: Alignment = 8 : tmp.96 = c_double(3.0), Static Constant: Alignment = 8 : tmp.97 = c_double(1000.0), Static Constant: Alignment = 8 : tmp.98 = c_double(400.0), Static Constant: Alignment = 8 : tmp.99 = c_double(32.0), Static Constant: Alignment = 8 : tmp.100 = c_double(405.0), Static Constant: Alignment = 8 : tmp.101 = c_double(8.0), Static Constant: Alignment = 16 : tmp.102 = c_double(-0.0), Static Constant: Alignment = 8 : tmp.103 = c_double(27.0), Static Constant: Alignment = 8 : tmp.104 = c_double(60.0), Static Constant: Alignment = 8 : tmp.105 = c_double(1215.0), Static Constant: Alignment = 8 : tmp.106 = c_double(896.0), Static Constant: Alignment = 16 : tmp.107 = c_double(-0.0), Static Constant: Alignment = 8 : tmp.108 = c_double(9.0), Static Constant: Alignment = 8 : tmp.109 = c_double(1275.0), Static Constant: Alignment = 8 : tmp.110 = c_double(2171.0), Static Constant: Alignment = 16 : tmp.111 = c_double(-0.0), Static Constant: Alignment = 8 : tmp.112 = c_double(1009.0), Static Constant: Alignment = 8 : tmp.113 = c_double(1283.0), Static Constant: Alignment = 8 : tmp.114 = c_double(1294547.0), Function target stackOffset: None global: True instructions:[AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)), AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)), AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)), AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)), AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)), AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)), AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)), AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)), AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)), AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)), AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)), AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)), AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)), AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)), AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)), AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)), AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)), AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)), AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)), AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)), AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)), AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)), AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)), AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)), AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)), AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)), AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)), AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)), AssType: Longword Mov(Imm(0), Pseudo(tmp.29)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)), JmpCC(ConcCodeType.E, tmp.30), AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)), AssType: Longword Mov(Imm(0), Pseudo(tmp.31)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)), JmpCC(ConcCodeType.E, tmp.30), AssType: Longword Mov(Imm(1), Pseudo(tmp.32)), Jmp(tmp.33), Label(tmp.30), AssType: Longword Mov(Imm(0), Pseudo(tmp.32)), Label(tmp.33), AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), JmpCC(ConcCodeType.E, tmp.34), AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)), AssType: Longword Mov(Imm(0), Pseudo(tmp.35)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)), JmpCC(ConcCodeType.E, tmp.34), AssType: Longword Mov(Imm(1), Pseudo(tmp.36)), Jmp(tmp.37), Label(tmp.34), AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), Label(tmp.37), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, tmp.38), AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)), AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)), AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)), AssType: Longword Mov(Imm(0), Pseudo(tmp.40)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)), JmpCC(ConcCodeType.E, tmp.38), AssType: Longword Mov(Imm(1), Pseudo(tmp.41)), Jmp(tmp.42), Label(tmp.38), AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), Label(tmp.42), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43), AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)), AssType: Longword Mov(Imm(0), Pseudo(tmp.44)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)), JmpCC(ConcCodeType.E, tmp.43), AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), Jmp(tmp.46), Label(tmp.43), AssType: Longword Mov(Imm(0), Pseudo(tmp.45)), Label(tmp.46), AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), JmpCC(ConcCodeType.E, tmp.47), AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)), AssType: Longword Mov(Imm(0), Pseudo(tmp.48)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)), JmpCC(ConcCodeType.E, tmp.47), AssType: Longword Mov(Imm(1), Pseudo(tmp.49)), Jmp(tmp.50), Label(tmp.47), AssType: Longword Mov(Imm(0), Pseudo(tmp.49)), Label(tmp.50), AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), JmpCC(ConcCodeType.E, tmp.51), AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)), AssType: Longword Mov(Imm(0), Pseudo(tmp.52)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)), JmpCC(ConcCodeType.E, tmp.51), AssType: Longword Mov(Imm(1), Pseudo(tmp.53)), Jmp(tmp.54), Label(tmp.51), AssType: Longword Mov(Imm(0), Pseudo(tmp.53)), Label(tmp.54), AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), JmpCC(ConcCodeType.E, tmp.55), AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)), AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)), AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)), AssType: Longword Mov(Imm(0), Pseudo(tmp.57)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)), JmpCC(ConcCodeType.E, tmp.55), AssType: Longword Mov(Imm(1), Pseudo(tmp.58)), Jmp(tmp.59), Label(tmp.55), AssType: Longword Mov(Imm(0), Pseudo(tmp.58)), Label(tmp.59), AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), JmpCC(ConcCodeType.E, tmp.60), AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)), AssType: Longword Mov(Imm(0), Pseudo(tmp.61)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)), JmpCC(ConcCodeType.E, tmp.60), AssType: Longword Mov(Imm(1), Pseudo(tmp.62)), Jmp(tmp.63), Label(tmp.60), AssType: Longword Mov(Imm(0), Pseudo(tmp.62)), Label(tmp.63), AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), JmpCC(ConcCodeType.E, tmp.64), AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)), AssType: Longword Mov(Imm(0), Pseudo(tmp.65)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)), JmpCC(ConcCodeType.E, tmp.64), AssType: Longword Mov(Imm(1), Pseudo(tmp.66)), Jmp(tmp.67), Label(tmp.64), AssType: Longword Mov(Imm(0), Pseudo(tmp.66)), Label(tmp.67), AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), JmpCC(ConcCodeType.E, tmp.68), AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)), AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)), AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)), AssType: Longword Mov(Imm(0), Pseudo(tmp.70)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)), JmpCC(ConcCodeType.E, tmp.68), AssType: Longword Mov(Imm(1), Pseudo(tmp.71)), Jmp(tmp.72), Label(tmp.68), AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), Label(tmp.72), AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), JmpCC(ConcCodeType.E, tmp.73), AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)), AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)), JmpCC(ConcCodeType.E, tmp.73), AssType: Longword Mov(Imm(1), Pseudo(tmp.75)), Jmp(tmp.76), Label(tmp.73), AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), Label(tmp.76), AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), JmpCC(ConcCodeType.E, tmp.77), AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)), AssType: Longword Mov(Imm(0), Pseudo(tmp.78)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)), JmpCC(ConcCodeType.E, tmp.77), AssType: Longword Mov(Imm(1), Pseudo(tmp.79)), Jmp(tmp.80), Label(tmp.77), AssType: Longword Mov(Imm(0), Pseudo(tmp.79)), Label(tmp.80), AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), JmpCC(ConcCodeType.E, tmp.81), AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)), AssType: Longword Mov(Imm(0), Pseudo(tmp.82)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)), JmpCC(ConcCodeType.E, tmp.81), AssType: Longword Mov(Imm(1), Pseudo(tmp.83)), Jmp(tmp.84), Label(tmp.81), AssType: Longword Mov(Imm(0), Pseudo(tmp.83)), Label(tmp.84), AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), JmpCC(ConcCodeType.E, tmp.87), AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)), AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), ret, Label(tmp.87), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), ret], Static Variable: Global = True Alignment = 8 : glob = [c_double(20.0)], Static Variable: Global = True Alignment = 8 : glob2 = [c_double(30.0)], Static Variable: Global = True Alignment = 4 : glob3 = [c_int(40)]]
Type Table:
 {}
Backend Symbol Table:
 {'tmp.90': AssType: Double IsStatic: True IsConstant: True, 'tmp.91': AssType: Double IsStatic: True IsConstant: True, 'tmp.92': AssType: Double IsStatic: True IsConstant: True, 'tmp.93': AssType: Double IsStatic: True IsConstant: True, 'tmp.94': AssType: Double IsStatic: True IsConstant: True, 'tmp.95': AssType: Double IsStatic: True IsConstant: True, 'tmp.96': AssType: Double IsStatic: True IsConstant: True, 'tmp.97': AssType: Double IsStatic: True IsConstant: True, 'tmp.98': AssType: Double IsStatic: True IsConstant: True, 'tmp.99': AssType: Double IsStatic: True IsConstant: True, 'tmp.100': AssType: Double IsStatic: True IsConstant: True, 'tmp.101': AssType: Double IsStatic: True IsConstant: True, 'tmp.102': AssType: Double IsStatic: True IsConstant: True, 'tmp.103': AssType: Double IsStatic: True IsConstant: True, 'tmp.104': AssType: Double IsStatic: True IsConstant: True, 'tmp.105': AssType: Double IsStatic: True IsConstant: True, 'tmp.106': AssType: Double IsStatic: True IsConstant: True, 'tmp.107': AssType: Double IsStatic: True IsConstant: True, 'tmp.108': AssType: Double IsStatic: True IsConstant: True, 'tmp.109': AssType: Double IsStatic: True IsConstant: True, 'tmp.110': AssType: Double IsStatic: True IsConstant: True, 'tmp.111': AssType: Double IsStatic: True IsConstant: True, 'tmp.112': AssType: Double IsStatic: True IsConstant: True, 'tmp.113': AssType: Double IsStatic: True IsConstant: True, 'tmp.114': AssType: Double IsStatic: True IsConstant: True, 'glob': AssType: Double IsStatic: True IsConstant: False, 'glob2': AssType: Double IsStatic: True IsConstant: False, 'glob3': AssType: Longword IsStatic: True IsConstant: False, 'target': Defined: True ReturnOnStack: False IntParams: OrderedSet() DoubleParams: OrderedSet() ReturnInt: OrderedSet() ReturnDouble: OrderedSet([Reg(XMM0)]), 'a.0': AssType: Double IsStatic: False IsConstant: False, 'b.1': AssType: Double IsStatic: False IsConstant: False, 'c.2': AssType: Double IsStatic: False IsConstant: False, 'd.3': AssType: Double IsStatic: False IsConstant: False, 'e.4': AssType: Double IsStatic: False IsConstant: False, 'f.5': AssType: Double IsStatic: False IsConstant: False, 'g.6': AssType: Double IsStatic: False IsConstant: False, 'h.7': AssType: Double IsStatic: False IsConstant: False, 'i.8': AssType: Double IsStatic: False IsConstant: False, 'j.9': AssType: Double IsStatic: False IsConstant: False, 'k.10': AssType: Double IsStatic: False IsConstant: False, 'l.11': AssType: Double IsStatic: False IsConstant: False, 'm.12': AssType: Double IsStatic: False IsConstant: False, 'n.13': AssType: Double IsStatic: False IsConstant: False, 'tmp.14': AssType: Double IsStatic: False IsConstant: False, 'tmp.15': AssType: Double IsStatic: False IsConstant: False, 'tmp.16': AssType: Double IsStatic: False IsConstant: False, 'tmp.17': AssType: Double IsStatic: False IsConstant: False, 'tmp.18': AssType: Double IsStatic: False IsConstant: False, 'tmp.19': AssType: Double IsStatic: False IsConstant: False, 'tmp.20': AssType: Double IsStatic: False IsConstant: False, 'tmp.21': AssType: Double IsStatic: False IsConstant: False, 'tmp.22': AssType: Double IsStatic: False IsConstant: False, 'tmp.23': AssType: Double IsStatic: False IsConstant: False, 'tmp.24': AssType: Double IsStatic: False IsConstant: False, 'tmp.25': AssType: Double IsStatic: False IsConstant: False, 'tmp.26': AssType: Double IsStatic: False IsConstant: False, 'tmp.27': AssType: Double IsStatic: False IsConstant: False, 'tmp.28': AssType: Double IsStatic: False IsConstant: False, 'tmp.29': AssType: Longword IsStatic: False IsConstant: False, 'tmp.31': AssType: Longword IsStatic: False IsConstant: False, 'tmp.32': AssType: Longword IsStatic: False IsConstant: False, 'tmp.35': AssType: Longword IsStatic: False IsConstant: False, 'tmp.36': AssType: Longword IsStatic: False IsConstant: False, 'tmp.39': AssType: Double IsStatic: False IsConstant: False, 'tmp.40': AssType: Longword IsStatic: False IsConstant: False, 'tmp.41': AssType: Longword IsStatic: False IsConstant: False, 'tmp.44': AssType: Longword IsStatic: False IsConstant: False, 'tmp.45': AssType: Longword IsStatic: False IsConstant: False, 'tmp.48': AssType: Longword IsStatic: False IsConstant: False, 'tmp.49': AssType: Longword IsStatic: False IsConstant: False, 'tmp.52': AssType: Longword IsStatic: False IsConstant: False, 'tmp.53': AssType: Longword IsStatic: False IsConstant: False, 'tmp.56': AssType: Double IsStatic: False IsConstant: False, 'tmp.57': AssType: Longword IsStatic: False IsConstant: False, 'tmp.58': AssType: Longword IsStatic: False IsConstant: False, 'tmp.61': AssType: Longword IsStatic: False IsConstant: False, 'tmp.62': AssType: Longword IsStatic: False IsConstant: False, 'tmp.65': AssType: Longword IsStatic: False IsConstant: False, 'tmp.66': AssType: Longword IsStatic: False IsConstant: False, 'tmp.69': AssType: Double IsStatic: False IsConstant: False, 'tmp.70': AssType: Longword IsStatic: False IsConstant: False, 'tmp.71': AssType: Longword IsStatic: False IsConstant: False, 'tmp.74': AssType: Longword IsStatic: False IsConstant: False, 'tmp.75': AssType: Longword IsStatic: False IsConstant: False, 'tmp.78': AssType: Longword IsStatic: False IsConstant: False, 'tmp.79': AssType: Longword IsStatic: False IsConstant: False, 'tmp.82': AssType: Longword IsStatic: False IsConstant: False, 'tmp.83': AssType: Longword IsStatic: False IsConstant: False, 'tmp.85': AssType: Longword IsStatic: False IsConstant: False, 'tmp.88': AssType: Double IsStatic: False IsConstant: False, 'tmp.89': AssType: Double IsStatic: False IsConstant: False}
REGISTER ALLOCATE FUNCTION target
-----------Building INTEGER interference graph.------------------
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14))
AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15))
AssType: Longword Mov(Imm(1), Pseudo(tmp.32))
Label(tmp.30)
Label(tmp.33)
AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16))
AssType: Longword Mov(Imm(1), Pseudo(tmp.36))
Label(tmp.34)
Label(tmp.37)
AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39))
AssType: Longword Mov(Imm(1), Pseudo(tmp.41))
Label(tmp.38)
Label(tmp.42)
AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19))
AssType: Longword Mov(Imm(1), Pseudo(tmp.45))
Label(tmp.43)
Label(tmp.46)
AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20))
AssType: Longword Mov(Imm(1), Pseudo(tmp.49))
Label(tmp.47)
Label(tmp.50)
AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21))
AssType: Longword Mov(Imm(1), Pseudo(tmp.53))
Label(tmp.51)
Label(tmp.54)
AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56))
AssType: Longword Mov(Imm(1), Pseudo(tmp.58))
Label(tmp.55)
Label(tmp.59)
AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23))
AssType: Longword Mov(Imm(1), Pseudo(tmp.62))
Label(tmp.60)
Label(tmp.63)
AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24))
AssType: Longword Mov(Imm(1), Pseudo(tmp.66))
Label(tmp.64)
Label(tmp.67)
AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69))
AssType: Longword Mov(Imm(1), Pseudo(tmp.71))
Label(tmp.68)
Label(tmp.72)
AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26))
AssType: Longword Mov(Imm(1), Pseudo(tmp.75))
Label(tmp.73)
Label(tmp.76)
AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27))
AssType: Longword Mov(Imm(1), Pseudo(tmp.79))
Label(tmp.77)
Label(tmp.80)
AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28))
AssType: Longword Mov(Imm(1), Pseudo(tmp.83))
Label(tmp.81)
Label(tmp.84)
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88))
Label(tmp.87)
-------------LABELS-----------------
tmp.30 3: [Label(tmp.30), AssType: Longword Mov(Imm(0), Pseudo(tmp.32))] Pred: set() Suc: set() iMap: [(Label(tmp.30), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.32)), set())] ReachingCopies: set()
tmp.33 4: [Label(tmp.33), AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), JmpCC(ConcCodeType.E, tmp.34)] Pred: set() Suc: set() iMap: [(Label(tmp.33), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), set()), (JmpCC(ConcCodeType.E, tmp.34), set())] ReachingCopies: set()
tmp.34 7: [Label(tmp.34), AssType: Longword Mov(Imm(0), Pseudo(tmp.36))] Pred: set() Suc: set() iMap: [(Label(tmp.34), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), set())] ReachingCopies: set()
tmp.37 8: [Label(tmp.37), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, tmp.38)] Pred: set() Suc: set() iMap: [(Label(tmp.37), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), set()), (JmpCC(ConcCodeType.E, tmp.38), set())] ReachingCopies: set()
tmp.38 11: [Label(tmp.38), AssType: Longword Mov(Imm(0), Pseudo(tmp.41))] Pred: set() Suc: set() iMap: [(Label(tmp.38), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set())] ReachingCopies: set()
tmp.42 12: [Label(tmp.42), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: set() Suc: set() iMap: [(Label(tmp.42), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
tmp.43 15: [Label(tmp.43), AssType: Longword Mov(Imm(0), Pseudo(tmp.45))] Pred: set() Suc: set() iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.45)), set())] ReachingCopies: set()
tmp.46 16: [Label(tmp.46), AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), JmpCC(ConcCodeType.E, tmp.47)] Pred: set() Suc: set() iMap: [(Label(tmp.46), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), set()), (JmpCC(ConcCodeType.E, tmp.47), set())] ReachingCopies: set()
tmp.47 19: [Label(tmp.47), AssType: Longword Mov(Imm(0), Pseudo(tmp.49))] Pred: set() Suc: set() iMap: [(Label(tmp.47), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.49)), set())] ReachingCopies: set()
tmp.50 20: [Label(tmp.50), AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), JmpCC(ConcCodeType.E, tmp.51)] Pred: set() Suc: set() iMap: [(Label(tmp.50), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), set()), (JmpCC(ConcCodeType.E, tmp.51), set())] ReachingCopies: set()
tmp.51 23: [Label(tmp.51), AssType: Longword Mov(Imm(0), Pseudo(tmp.53))] Pred: set() Suc: set() iMap: [(Label(tmp.51), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.53)), set())] ReachingCopies: set()
tmp.54 24: [Label(tmp.54), AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), JmpCC(ConcCodeType.E, tmp.55)] Pred: set() Suc: set() iMap: [(Label(tmp.54), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), set()), (JmpCC(ConcCodeType.E, tmp.55), set())] ReachingCopies: set()
tmp.55 27: [Label(tmp.55), AssType: Longword Mov(Imm(0), Pseudo(tmp.58))] Pred: set() Suc: set() iMap: [(Label(tmp.55), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.58)), set())] ReachingCopies: set()
tmp.59 28: [Label(tmp.59), AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), JmpCC(ConcCodeType.E, tmp.60)] Pred: set() Suc: set() iMap: [(Label(tmp.59), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), set()), (JmpCC(ConcCodeType.E, tmp.60), set())] ReachingCopies: set()
tmp.60 31: [Label(tmp.60), AssType: Longword Mov(Imm(0), Pseudo(tmp.62))] Pred: set() Suc: set() iMap: [(Label(tmp.60), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.62)), set())] ReachingCopies: set()
tmp.63 32: [Label(tmp.63), AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), JmpCC(ConcCodeType.E, tmp.64)] Pred: set() Suc: set() iMap: [(Label(tmp.63), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), set()), (JmpCC(ConcCodeType.E, tmp.64), set())] ReachingCopies: set()
tmp.64 35: [Label(tmp.64), AssType: Longword Mov(Imm(0), Pseudo(tmp.66))] Pred: set() Suc: set() iMap: [(Label(tmp.64), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.66)), set())] ReachingCopies: set()
tmp.67 36: [Label(tmp.67), AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), JmpCC(ConcCodeType.E, tmp.68)] Pred: set() Suc: set() iMap: [(Label(tmp.67), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), set()), (JmpCC(ConcCodeType.E, tmp.68), set())] ReachingCopies: set()
tmp.68 39: [Label(tmp.68), AssType: Longword Mov(Imm(0), Pseudo(tmp.71))] Pred: set() Suc: set() iMap: [(Label(tmp.68), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), set())] ReachingCopies: set()
tmp.72 40: [Label(tmp.72), AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), JmpCC(ConcCodeType.E, tmp.73)] Pred: set() Suc: set() iMap: [(Label(tmp.72), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), set()), (JmpCC(ConcCodeType.E, tmp.73), set())] ReachingCopies: set()
tmp.73 43: [Label(tmp.73), AssType: Longword Mov(Imm(0), Pseudo(tmp.75))] Pred: set() Suc: set() iMap: [(Label(tmp.73), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), set())] ReachingCopies: set()
tmp.76 44: [Label(tmp.76), AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), JmpCC(ConcCodeType.E, tmp.77)] Pred: set() Suc: set() iMap: [(Label(tmp.76), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), set()), (JmpCC(ConcCodeType.E, tmp.77), set())] ReachingCopies: set()
tmp.77 47: [Label(tmp.77), AssType: Longword Mov(Imm(0), Pseudo(tmp.79))] Pred: set() Suc: set() iMap: [(Label(tmp.77), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.79)), set())] ReachingCopies: set()
tmp.80 48: [Label(tmp.80), AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), JmpCC(ConcCodeType.E, tmp.81)] Pred: set() Suc: set() iMap: [(Label(tmp.80), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), set()), (JmpCC(ConcCodeType.E, tmp.81), set())] ReachingCopies: set()
tmp.81 51: [Label(tmp.81), AssType: Longword Mov(Imm(0), Pseudo(tmp.83))] Pred: set() Suc: set() iMap: [(Label(tmp.81), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.83)), set())] ReachingCopies: set()
tmp.84 52: [Label(tmp.84), AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), JmpCC(ConcCodeType.E, tmp.87)] Pred: set() Suc: set() iMap: [(Label(tmp.84), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), set()), (JmpCC(ConcCodeType.E, tmp.87), set())] ReachingCopies: set()
tmp.87 54: [Label(tmp.87), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.87), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), set()), (AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)), AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)), AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)), AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)), AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)), AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)), AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)), AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)), AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)), AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)), AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)), AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)), AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)), AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)), AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)), AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)), AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)), AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)), AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)), AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)), AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)), AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)), AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)), AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)), AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)), AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)), AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)), AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)), AssType: Longword Mov(Imm(0), Pseudo(tmp.29)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)), JmpCC(ConcCodeType.E, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)), set()), (AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)), set()), (AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)), set()), (AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)), set()), (AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)), set()), (AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)), set()), (AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)), set()), (AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)), set()), (AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)), set()), (AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)), set()), (AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)), set()), (AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)), set()), (AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)), set()), (AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)), set()), (AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)), set()), (AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)), set()), (AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)), set()), (AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)), set()), (AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)), set()), (AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)), set()), (AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)), set()), (AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)), set()), (AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)), set()), (AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)), set()), (AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.29)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)), set()), (JmpCC(ConcCodeType.E, tmp.30), set())] ReachingCopies: set()
1 1: [AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)), AssType: Longword Mov(Imm(0), Pseudo(tmp.31)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)), JmpCC(ConcCodeType.E, tmp.30)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.31)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)), set()), (JmpCC(ConcCodeType.E, tmp.30), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Pseudo(tmp.32)), Jmp(tmp.33)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.32)), set()), (Jmp(tmp.33), set())] ReachingCopies: set()
3 3: [Label(tmp.30), AssType: Longword Mov(Imm(0), Pseudo(tmp.32))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.30), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.32)), set())] ReachingCopies: set()
4 4: [Label(tmp.33), AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), JmpCC(ConcCodeType.E, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: [(Label(tmp.33), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), set()), (JmpCC(ConcCodeType.E, tmp.34), set())] ReachingCopies: set()
5 5: [AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)), AssType: Longword Mov(Imm(0), Pseudo(tmp.35)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)), JmpCC(ConcCodeType.E, tmp.34)] Pred: {4} Suc: {6, 7} iMap: [(AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.35)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)), set()), (JmpCC(ConcCodeType.E, tmp.34), set())] ReachingCopies: set()
6 6: [AssType: Longword Mov(Imm(1), Pseudo(tmp.36)), Jmp(tmp.37)] Pred: {5} Suc: {8} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.36)), set()), (Jmp(tmp.37), set())] ReachingCopies: set()
7 7: [Label(tmp.34), AssType: Longword Mov(Imm(0), Pseudo(tmp.36))] Pred: {4, 5} Suc: {8} iMap: [(Label(tmp.34), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), set())] ReachingCopies: set()
8 8: [Label(tmp.37), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: [(Label(tmp.37), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), set()), (JmpCC(ConcCodeType.E, tmp.38), set())] ReachingCopies: set()
9 9: [AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)), AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)), AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)), AssType: Longword Mov(Imm(0), Pseudo(tmp.40)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)), JmpCC(ConcCodeType.E, tmp.38)] Pred: {8} Suc: {10, 11} iMap: [(AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)), set()), (AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)), set()), (AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.40)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)), set()), (JmpCC(ConcCodeType.E, tmp.38), set())] ReachingCopies: set()
10 10: [AssType: Longword Mov(Imm(1), Pseudo(tmp.41)), Jmp(tmp.42)] Pred: {9} Suc: {12} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.41)), set()), (Jmp(tmp.42), set())] ReachingCopies: set()
11 11: [Label(tmp.38), AssType: Longword Mov(Imm(0), Pseudo(tmp.41))] Pred: {8, 9} Suc: {12} iMap: [(Label(tmp.38), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set())] ReachingCopies: set()
12 12: [Label(tmp.42), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: [(Label(tmp.42), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
13 13: [AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)), AssType: Longword Mov(Imm(0), Pseudo(tmp.44)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {12} Suc: {14, 15} iMap: [(AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.44)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
14 14: [AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), Jmp(tmp.46)] Pred: {13} Suc: {16} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), set()), (Jmp(tmp.46), set())] ReachingCopies: set()
15 15: [Label(tmp.43), AssType: Longword Mov(Imm(0), Pseudo(tmp.45))] Pred: {12, 13} Suc: {16} iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.45)), set())] ReachingCopies: set()
16 16: [Label(tmp.46), AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), JmpCC(ConcCodeType.E, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: [(Label(tmp.46), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), set()), (JmpCC(ConcCodeType.E, tmp.47), set())] ReachingCopies: set()
17 17: [AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)), AssType: Longword Mov(Imm(0), Pseudo(tmp.48)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)), JmpCC(ConcCodeType.E, tmp.47)] Pred: {16} Suc: {18, 19} iMap: [(AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.48)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)), set()), (JmpCC(ConcCodeType.E, tmp.47), set())] ReachingCopies: set()
18 18: [AssType: Longword Mov(Imm(1), Pseudo(tmp.49)), Jmp(tmp.50)] Pred: {17} Suc: {20} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.49)), set()), (Jmp(tmp.50), set())] ReachingCopies: set()
19 19: [Label(tmp.47), AssType: Longword Mov(Imm(0), Pseudo(tmp.49))] Pred: {16, 17} Suc: {20} iMap: [(Label(tmp.47), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.49)), set())] ReachingCopies: set()
20 20: [Label(tmp.50), AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), JmpCC(ConcCodeType.E, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: [(Label(tmp.50), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), set()), (JmpCC(ConcCodeType.E, tmp.51), set())] ReachingCopies: set()
21 21: [AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)), AssType: Longword Mov(Imm(0), Pseudo(tmp.52)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)), JmpCC(ConcCodeType.E, tmp.51)] Pred: {20} Suc: {22, 23} iMap: [(AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.52)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)), set()), (JmpCC(ConcCodeType.E, tmp.51), set())] ReachingCopies: set()
22 22: [AssType: Longword Mov(Imm(1), Pseudo(tmp.53)), Jmp(tmp.54)] Pred: {21} Suc: {24} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.53)), set()), (Jmp(tmp.54), set())] ReachingCopies: set()
23 23: [Label(tmp.51), AssType: Longword Mov(Imm(0), Pseudo(tmp.53))] Pred: {20, 21} Suc: {24} iMap: [(Label(tmp.51), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.53)), set())] ReachingCopies: set()
24 24: [Label(tmp.54), AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), JmpCC(ConcCodeType.E, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: [(Label(tmp.54), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), set()), (JmpCC(ConcCodeType.E, tmp.55), set())] ReachingCopies: set()
25 25: [AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)), AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)), AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)), AssType: Longword Mov(Imm(0), Pseudo(tmp.57)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)), JmpCC(ConcCodeType.E, tmp.55)] Pred: {24} Suc: {26, 27} iMap: [(AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)), set()), (AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)), set()), (AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.57)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)), set()), (JmpCC(ConcCodeType.E, tmp.55), set())] ReachingCopies: set()
26 26: [AssType: Longword Mov(Imm(1), Pseudo(tmp.58)), Jmp(tmp.59)] Pred: {25} Suc: {28} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.58)), set()), (Jmp(tmp.59), set())] ReachingCopies: set()
27 27: [Label(tmp.55), AssType: Longword Mov(Imm(0), Pseudo(tmp.58))] Pred: {24, 25} Suc: {28} iMap: [(Label(tmp.55), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.58)), set())] ReachingCopies: set()
28 28: [Label(tmp.59), AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), JmpCC(ConcCodeType.E, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: [(Label(tmp.59), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), set()), (JmpCC(ConcCodeType.E, tmp.60), set())] ReachingCopies: set()
29 29: [AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)), AssType: Longword Mov(Imm(0), Pseudo(tmp.61)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)), JmpCC(ConcCodeType.E, tmp.60)] Pred: {28} Suc: {30, 31} iMap: [(AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.61)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)), set()), (JmpCC(ConcCodeType.E, tmp.60), set())] ReachingCopies: set()
30 30: [AssType: Longword Mov(Imm(1), Pseudo(tmp.62)), Jmp(tmp.63)] Pred: {29} Suc: {32} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.62)), set()), (Jmp(tmp.63), set())] ReachingCopies: set()
31 31: [Label(tmp.60), AssType: Longword Mov(Imm(0), Pseudo(tmp.62))] Pred: {28, 29} Suc: {32} iMap: [(Label(tmp.60), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.62)), set())] ReachingCopies: set()
32 32: [Label(tmp.63), AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), JmpCC(ConcCodeType.E, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: [(Label(tmp.63), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), set()), (JmpCC(ConcCodeType.E, tmp.64), set())] ReachingCopies: set()
33 33: [AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)), AssType: Longword Mov(Imm(0), Pseudo(tmp.65)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)), JmpCC(ConcCodeType.E, tmp.64)] Pred: {32} Suc: {34, 35} iMap: [(AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.65)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)), set()), (JmpCC(ConcCodeType.E, tmp.64), set())] ReachingCopies: set()
34 34: [AssType: Longword Mov(Imm(1), Pseudo(tmp.66)), Jmp(tmp.67)] Pred: {33} Suc: {36} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.66)), set()), (Jmp(tmp.67), set())] ReachingCopies: set()
35 35: [Label(tmp.64), AssType: Longword Mov(Imm(0), Pseudo(tmp.66))] Pred: {32, 33} Suc: {36} iMap: [(Label(tmp.64), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.66)), set())] ReachingCopies: set()
36 36: [Label(tmp.67), AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), JmpCC(ConcCodeType.E, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: [(Label(tmp.67), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), set()), (JmpCC(ConcCodeType.E, tmp.68), set())] ReachingCopies: set()
37 37: [AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)), AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)), AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)), AssType: Longword Mov(Imm(0), Pseudo(tmp.70)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)), JmpCC(ConcCodeType.E, tmp.68)] Pred: {36} Suc: {38, 39} iMap: [(AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)), set()), (AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)), set()), (AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.70)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)), set()), (JmpCC(ConcCodeType.E, tmp.68), set())] ReachingCopies: set()
38 38: [AssType: Longword Mov(Imm(1), Pseudo(tmp.71)), Jmp(tmp.72)] Pred: {37} Suc: {40} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.71)), set()), (Jmp(tmp.72), set())] ReachingCopies: set()
39 39: [Label(tmp.68), AssType: Longword Mov(Imm(0), Pseudo(tmp.71))] Pred: {36, 37} Suc: {40} iMap: [(Label(tmp.68), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), set())] ReachingCopies: set()
40 40: [Label(tmp.72), AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), JmpCC(ConcCodeType.E, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: [(Label(tmp.72), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), set()), (JmpCC(ConcCodeType.E, tmp.73), set())] ReachingCopies: set()
41 41: [AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)), AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)), JmpCC(ConcCodeType.E, tmp.73)] Pred: {40} Suc: {42, 43} iMap: [(AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)), set()), (JmpCC(ConcCodeType.E, tmp.73), set())] ReachingCopies: set()
42 42: [AssType: Longword Mov(Imm(1), Pseudo(tmp.75)), Jmp(tmp.76)] Pred: {41} Suc: {44} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.75)), set()), (Jmp(tmp.76), set())] ReachingCopies: set()
43 43: [Label(tmp.73), AssType: Longword Mov(Imm(0), Pseudo(tmp.75))] Pred: {40, 41} Suc: {44} iMap: [(Label(tmp.73), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), set())] ReachingCopies: set()
44 44: [Label(tmp.76), AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), JmpCC(ConcCodeType.E, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: [(Label(tmp.76), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), set()), (JmpCC(ConcCodeType.E, tmp.77), set())] ReachingCopies: set()
45 45: [AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)), AssType: Longword Mov(Imm(0), Pseudo(tmp.78)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)), JmpCC(ConcCodeType.E, tmp.77)] Pred: {44} Suc: {46, 47} iMap: [(AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.78)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)), set()), (JmpCC(ConcCodeType.E, tmp.77), set())] ReachingCopies: set()
46 46: [AssType: Longword Mov(Imm(1), Pseudo(tmp.79)), Jmp(tmp.80)] Pred: {45} Suc: {48} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.79)), set()), (Jmp(tmp.80), set())] ReachingCopies: set()
47 47: [Label(tmp.77), AssType: Longword Mov(Imm(0), Pseudo(tmp.79))] Pred: {44, 45} Suc: {48} iMap: [(Label(tmp.77), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.79)), set())] ReachingCopies: set()
48 48: [Label(tmp.80), AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), JmpCC(ConcCodeType.E, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: [(Label(tmp.80), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), set()), (JmpCC(ConcCodeType.E, tmp.81), set())] ReachingCopies: set()
49 49: [AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)), AssType: Longword Mov(Imm(0), Pseudo(tmp.82)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)), JmpCC(ConcCodeType.E, tmp.81)] Pred: {48} Suc: {50, 51} iMap: [(AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.82)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)), set()), (JmpCC(ConcCodeType.E, tmp.81), set())] ReachingCopies: set()
50 50: [AssType: Longword Mov(Imm(1), Pseudo(tmp.83)), Jmp(tmp.84)] Pred: {49} Suc: {52} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.83)), set()), (Jmp(tmp.84), set())] ReachingCopies: set()
51 51: [Label(tmp.81), AssType: Longword Mov(Imm(0), Pseudo(tmp.83))] Pred: {48, 49} Suc: {52} iMap: [(Label(tmp.81), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.83)), set())] ReachingCopies: set()
52 52: [Label(tmp.84), AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), JmpCC(ConcCodeType.E, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: [(Label(tmp.84), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), set()), (JmpCC(ConcCodeType.E, tmp.87), set())] ReachingCopies: set()
53 53: [AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)), AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), ret] Pred: {52} Suc: {EXIT} iMap: [(AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)), set()), (AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
54 54: [Label(tmp.87), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), ret] Pred: {52} Suc: {EXIT} iMap: [(Label(tmp.87), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), set()), (AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
--------------LIVE for block 54-------------------
ret {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)) {Reg(XMM0)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)) {Pseudo(tmp.89)}
Label(tmp.87) {Pseudo(tmp.89)}
--------------ACTUALIZED IMAP for block 54-------------------
Label(tmp.87) {Pseudo(tmp.89)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)) {Pseudo(tmp.89)}
AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)) {Reg(XMM0)}
ret {Reg(XMM0)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89)}
--------------LIVE for block 53-------------------
ret {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)) {Reg(XMM0)}
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)) {Pseudo(tmp.88)}
--------------ACTUALIZED IMAP for block 53-------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)) {Pseudo(tmp.88)}
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)) {Reg(XMM0)}
ret {Reg(XMM0)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.88)}
--------------LIVE for block 52-------------------
JmpCC(ConcCodeType.E, tmp.87) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88)}
Label(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
--------------ACTUALIZED IMAP for block 52-------------------
Label(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88)}
JmpCC(ConcCodeType.E, tmp.87) {Pseudo(tmp.89), Pseudo(tmp.88)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
--------------LIVE for block 51-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
Label(tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------ACTUALIZED IMAP for block 51-------------------
Label(tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------LIVE for block 50-------------------
Jmp(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
--------------ACTUALIZED IMAP for block 50-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
Jmp(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------LIVE for block 49-------------------
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)) {Pseudo(tmp.82), Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)) {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------ACTUALIZED IMAP for block 49-------------------
AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)) {Pseudo(tmp.82), Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 48-------------------
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
Label(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
--------------ACTUALIZED IMAP for block 48-------------------
Label(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
--------------LIVE for block 47-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
Label(tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 47-------------------
Label(tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 46-------------------
Jmp(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
--------------ACTUALIZED IMAP for block 46-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
Jmp(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 45-------------------
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)) {Pseudo(tmp.78), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 45-------------------
AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)) {Pseudo(tmp.78), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 44-------------------
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
Label(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
--------------ACTUALIZED IMAP for block 44-------------------
Label(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
--------------LIVE for block 43-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
Label(tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 43-------------------
Label(tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 42-------------------
Jmp(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
--------------ACTUALIZED IMAP for block 42-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
Jmp(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 41-------------------
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.74), Pseudo(tmp.27)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 41-------------------
AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.74), Pseudo(tmp.27)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 40-------------------
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
Label(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 40-------------------
Label(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
--------------LIVE for block 39-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
Label(tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 39-------------------
Label(tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 38-------------------
Jmp(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 38-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
Jmp(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 37-------------------
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.70), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 37-------------------
AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.70), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 36-------------------
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
Label(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 36-------------------
Label(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
--------------LIVE for block 35-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
Label(tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 35-------------------
Label(tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 34-------------------
Jmp(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 34-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
Jmp(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 33-------------------
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.65), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 33-------------------
AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.65), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------LIVE for block 32-------------------
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
Label(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 32-------------------
Label(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 31-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 31-------------------
Label(tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------LIVE for block 30-------------------
Jmp(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 30-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------LIVE for block 29-------------------
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.61), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 29-------------------
AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.61), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 28-------------------
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 28-------------------
Label(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 27-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 27-------------------
Label(tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 26-------------------
Jmp(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 26-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 25-------------------
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.57), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 25-------------------
AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.57), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 24-------------------
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
--------------ACTUALIZED IMAP for block 24-------------------
Label(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
--------------LIVE for block 23-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
Label(tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 23-------------------
Label(tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 22-------------------
Jmp(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
--------------ACTUALIZED IMAP for block 22-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
Jmp(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 21-------------------
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.52), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 21-------------------
AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.52), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 20-------------------
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 20-------------------
Label(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 19-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 19-------------------
Label(tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 18-------------------
Jmp(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 18-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 17-------------------
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.48), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 17-------------------
AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.48), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 16-------------------
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 16-------------------
Label(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 15-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 15-------------------
Label(tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 14-------------------
Jmp(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 14-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 13-------------------
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.44), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 13-------------------
AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.44), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 12-------------------
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 12-------------------
Label(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 11-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 11-------------------
Label(tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 10-------------------
Jmp(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 10-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 9-------------------
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.40), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 9-------------------
AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.40), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 8-------------------
Label(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 7-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 7-------------------
Label(tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 6-------------------
Jmp(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 6-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 5-------------------
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.35), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 5-------------------
AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.35), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
--------------ACTUALIZED IMAP for block 4-------------------
Label(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
Label(tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 3-------------------
Label(tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 2-------------------
Jmp(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
--------------ACTUALIZED IMAP for block 2-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
Jmp(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.31), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 1-------------------
AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.31), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.29), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.20), Pseudo(tmp.15)}
AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
--------------ACTUALIZED IMAP for block 0-------------------
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.20), Pseudo(tmp.15)}
AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.29), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
-----------Adding edges to interference graph.------------------
Interference Graph:
Reg(AX)
    Reg(AX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(BX)
    Reg(BX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(CX)
    Reg(CX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
Reg(DX)
    Reg(DX) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(CX)
Reg(DI)
    Reg(DI) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(SI)
    Reg(SI) spillCost: 0.0 color: None pruned: False
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(R8d)
    Reg(R8d) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(R9d)
    Reg(R9d) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(R12d)
    Reg(R12d) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R14d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(R13d)
    Reg(R13d) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R14d)
        Reg(DX)
        Reg(CX)
Reg(R14d)
    Reg(R14d) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R15d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Reg(R15d)
    Reg(R15d) spillCost: 0.0 color: None pruned: False
        Reg(SI)
        Reg(R9d)
        Reg(AX)
        Reg(R12d)
        Reg(R14d)
        Reg(BX)
        Reg(R8d)
        Reg(DI)
        Reg(R13d)
        Reg(DX)
        Reg(CX)
Pseudo(tmp.29)
    Pseudo(tmp.29) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.31)
    Pseudo(tmp.31) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.32)
    Pseudo(tmp.32) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.35)
    Pseudo(tmp.35) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.36)
    Pseudo(tmp.36) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.40)
    Pseudo(tmp.40) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.41)
    Pseudo(tmp.41) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.44)
    Pseudo(tmp.44) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.45)
    Pseudo(tmp.45) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.48)
    Pseudo(tmp.48) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.49)
    Pseudo(tmp.49) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.52)
    Pseudo(tmp.52) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.53)
    Pseudo(tmp.53) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.57)
    Pseudo(tmp.57) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.58)
    Pseudo(tmp.58) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.61)
    Pseudo(tmp.61) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.62)
    Pseudo(tmp.62) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.65)
    Pseudo(tmp.65) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.66)
    Pseudo(tmp.66) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.70)
    Pseudo(tmp.70) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.71)
    Pseudo(tmp.71) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.74)
    Pseudo(tmp.74) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.75)
    Pseudo(tmp.75) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.78)
    Pseudo(tmp.78) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.79)
    Pseudo(tmp.79) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.82)
    Pseudo(tmp.82) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.83)
    Pseudo(tmp.83) spillCost: 0.0 color: None pruned: False
-----------Building DOUBLE interference graph.------------------
Interference Graph:
Reg(XMM0)
    Reg(XMM0) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM1)
    Reg(XMM1) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM2)
    Reg(XMM2) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM0)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM3)
    Reg(XMM3) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM4)
    Reg(XMM4) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM5)
    Reg(XMM5) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
Reg(XMM6)
    Reg(XMM6) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM7)
    Reg(XMM7) spillCost: 0.0 color: None pruned: False
        Reg(XMM8)
        Reg(XMM0)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM8)
    Reg(XMM8) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM9)
    Reg(XMM9) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM5)
Reg(XMM10)
    Reg(XMM10) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM11)
    Reg(XMM11) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM12)
    Reg(XMM12) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM13)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Reg(XMM13)
    Reg(XMM13) spillCost: 0.0 color: None pruned: False
        Reg(XMM7)
        Reg(XMM0)
        Reg(XMM8)
        Reg(XMM11)
        Reg(XMM1)
        Reg(XMM6)
        Reg(XMM4)
        Reg(XMM12)
        Reg(XMM10)
        Reg(XMM3)
        Reg(XMM2)
        Reg(XMM9)
        Reg(XMM5)
Pseudo(tmp.14)
    Pseudo(tmp.14) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.15)
    Pseudo(tmp.15) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.16)
    Pseudo(tmp.16) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.18)
    Pseudo(tmp.18) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.17)
    Pseudo(tmp.17) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.19)
    Pseudo(tmp.19) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.20)
    Pseudo(tmp.20) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.21)
    Pseudo(tmp.21) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.22)
    Pseudo(tmp.22) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.23)
    Pseudo(tmp.23) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.24)
    Pseudo(tmp.24) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.25)
    Pseudo(tmp.25) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.26)
    Pseudo(tmp.26) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.27)
    Pseudo(tmp.27) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.28)
    Pseudo(tmp.28) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.39)
    Pseudo(tmp.39) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.56)
    Pseudo(tmp.56) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.69)
    Pseudo(tmp.69) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.88)
    Pseudo(tmp.88) spillCost: 0.0 color: None pruned: False
Pseudo(tmp.89)
    Pseudo(tmp.89) spillCost: 0.0 color: None pruned: False
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14))
AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15))
AssType: Longword Mov(Imm(1), Pseudo(tmp.32))
Label(tmp.30)
Label(tmp.33)
AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16))
AssType: Longword Mov(Imm(1), Pseudo(tmp.36))
Label(tmp.34)
Label(tmp.37)
AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39))
AssType: Longword Mov(Imm(1), Pseudo(tmp.41))
Label(tmp.38)
Label(tmp.42)
AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19))
AssType: Longword Mov(Imm(1), Pseudo(tmp.45))
Label(tmp.43)
Label(tmp.46)
AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20))
AssType: Longword Mov(Imm(1), Pseudo(tmp.49))
Label(tmp.47)
Label(tmp.50)
AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21))
AssType: Longword Mov(Imm(1), Pseudo(tmp.53))
Label(tmp.51)
Label(tmp.54)
AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56))
AssType: Longword Mov(Imm(1), Pseudo(tmp.58))
Label(tmp.55)
Label(tmp.59)
AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23))
AssType: Longword Mov(Imm(1), Pseudo(tmp.62))
Label(tmp.60)
Label(tmp.63)
AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24))
AssType: Longword Mov(Imm(1), Pseudo(tmp.66))
Label(tmp.64)
Label(tmp.67)
AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69))
AssType: Longword Mov(Imm(1), Pseudo(tmp.71))
Label(tmp.68)
Label(tmp.72)
AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26))
AssType: Longword Mov(Imm(1), Pseudo(tmp.75))
Label(tmp.73)
Label(tmp.76)
AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27))
AssType: Longword Mov(Imm(1), Pseudo(tmp.79))
Label(tmp.77)
Label(tmp.80)
AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28))
AssType: Longword Mov(Imm(1), Pseudo(tmp.83))
Label(tmp.81)
Label(tmp.84)
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88))
Label(tmp.87)
-------------LABELS-----------------
tmp.30 3: [Label(tmp.30), AssType: Longword Mov(Imm(0), Pseudo(tmp.32))] Pred: set() Suc: set() iMap: [(Label(tmp.30), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.32)), set())] ReachingCopies: set()
tmp.33 4: [Label(tmp.33), AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), JmpCC(ConcCodeType.E, tmp.34)] Pred: set() Suc: set() iMap: [(Label(tmp.33), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), set()), (JmpCC(ConcCodeType.E, tmp.34), set())] ReachingCopies: set()
tmp.34 7: [Label(tmp.34), AssType: Longword Mov(Imm(0), Pseudo(tmp.36))] Pred: set() Suc: set() iMap: [(Label(tmp.34), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), set())] ReachingCopies: set()
tmp.37 8: [Label(tmp.37), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, tmp.38)] Pred: set() Suc: set() iMap: [(Label(tmp.37), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), set()), (JmpCC(ConcCodeType.E, tmp.38), set())] ReachingCopies: set()
tmp.38 11: [Label(tmp.38), AssType: Longword Mov(Imm(0), Pseudo(tmp.41))] Pred: set() Suc: set() iMap: [(Label(tmp.38), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set())] ReachingCopies: set()
tmp.42 12: [Label(tmp.42), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: set() Suc: set() iMap: [(Label(tmp.42), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
tmp.43 15: [Label(tmp.43), AssType: Longword Mov(Imm(0), Pseudo(tmp.45))] Pred: set() Suc: set() iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.45)), set())] ReachingCopies: set()
tmp.46 16: [Label(tmp.46), AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), JmpCC(ConcCodeType.E, tmp.47)] Pred: set() Suc: set() iMap: [(Label(tmp.46), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), set()), (JmpCC(ConcCodeType.E, tmp.47), set())] ReachingCopies: set()
tmp.47 19: [Label(tmp.47), AssType: Longword Mov(Imm(0), Pseudo(tmp.49))] Pred: set() Suc: set() iMap: [(Label(tmp.47), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.49)), set())] ReachingCopies: set()
tmp.50 20: [Label(tmp.50), AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), JmpCC(ConcCodeType.E, tmp.51)] Pred: set() Suc: set() iMap: [(Label(tmp.50), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), set()), (JmpCC(ConcCodeType.E, tmp.51), set())] ReachingCopies: set()
tmp.51 23: [Label(tmp.51), AssType: Longword Mov(Imm(0), Pseudo(tmp.53))] Pred: set() Suc: set() iMap: [(Label(tmp.51), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.53)), set())] ReachingCopies: set()
tmp.54 24: [Label(tmp.54), AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), JmpCC(ConcCodeType.E, tmp.55)] Pred: set() Suc: set() iMap: [(Label(tmp.54), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), set()), (JmpCC(ConcCodeType.E, tmp.55), set())] ReachingCopies: set()
tmp.55 27: [Label(tmp.55), AssType: Longword Mov(Imm(0), Pseudo(tmp.58))] Pred: set() Suc: set() iMap: [(Label(tmp.55), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.58)), set())] ReachingCopies: set()
tmp.59 28: [Label(tmp.59), AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), JmpCC(ConcCodeType.E, tmp.60)] Pred: set() Suc: set() iMap: [(Label(tmp.59), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), set()), (JmpCC(ConcCodeType.E, tmp.60), set())] ReachingCopies: set()
tmp.60 31: [Label(tmp.60), AssType: Longword Mov(Imm(0), Pseudo(tmp.62))] Pred: set() Suc: set() iMap: [(Label(tmp.60), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.62)), set())] ReachingCopies: set()
tmp.63 32: [Label(tmp.63), AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), JmpCC(ConcCodeType.E, tmp.64)] Pred: set() Suc: set() iMap: [(Label(tmp.63), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), set()), (JmpCC(ConcCodeType.E, tmp.64), set())] ReachingCopies: set()
tmp.64 35: [Label(tmp.64), AssType: Longword Mov(Imm(0), Pseudo(tmp.66))] Pred: set() Suc: set() iMap: [(Label(tmp.64), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.66)), set())] ReachingCopies: set()
tmp.67 36: [Label(tmp.67), AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), JmpCC(ConcCodeType.E, tmp.68)] Pred: set() Suc: set() iMap: [(Label(tmp.67), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), set()), (JmpCC(ConcCodeType.E, tmp.68), set())] ReachingCopies: set()
tmp.68 39: [Label(tmp.68), AssType: Longword Mov(Imm(0), Pseudo(tmp.71))] Pred: set() Suc: set() iMap: [(Label(tmp.68), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), set())] ReachingCopies: set()
tmp.72 40: [Label(tmp.72), AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), JmpCC(ConcCodeType.E, tmp.73)] Pred: set() Suc: set() iMap: [(Label(tmp.72), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), set()), (JmpCC(ConcCodeType.E, tmp.73), set())] ReachingCopies: set()
tmp.73 43: [Label(tmp.73), AssType: Longword Mov(Imm(0), Pseudo(tmp.75))] Pred: set() Suc: set() iMap: [(Label(tmp.73), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), set())] ReachingCopies: set()
tmp.76 44: [Label(tmp.76), AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), JmpCC(ConcCodeType.E, tmp.77)] Pred: set() Suc: set() iMap: [(Label(tmp.76), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), set()), (JmpCC(ConcCodeType.E, tmp.77), set())] ReachingCopies: set()
tmp.77 47: [Label(tmp.77), AssType: Longword Mov(Imm(0), Pseudo(tmp.79))] Pred: set() Suc: set() iMap: [(Label(tmp.77), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.79)), set())] ReachingCopies: set()
tmp.80 48: [Label(tmp.80), AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), JmpCC(ConcCodeType.E, tmp.81)] Pred: set() Suc: set() iMap: [(Label(tmp.80), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), set()), (JmpCC(ConcCodeType.E, tmp.81), set())] ReachingCopies: set()
tmp.81 51: [Label(tmp.81), AssType: Longword Mov(Imm(0), Pseudo(tmp.83))] Pred: set() Suc: set() iMap: [(Label(tmp.81), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.83)), set())] ReachingCopies: set()
tmp.84 52: [Label(tmp.84), AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), JmpCC(ConcCodeType.E, tmp.87)] Pred: set() Suc: set() iMap: [(Label(tmp.84), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), set()), (JmpCC(ConcCodeType.E, tmp.87), set())] ReachingCopies: set()
tmp.87 54: [Label(tmp.87), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), ret] Pred: set() Suc: set() iMap: [(Label(tmp.87), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), set()), (AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
-------------CONNECTED BLOCKS-----------------
ENTRY Entry: ENTRY {0}
0 0: [AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)), AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)), AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)), AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)), AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)), AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)), AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)), AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)), AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)), AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)), AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)), AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)), AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)), AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)), AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)), AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)), AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)), AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)), AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)), AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)), AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)), AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)), AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)), AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)), AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)), AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)), AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)), AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)), AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)), AssType: Longword Mov(Imm(0), Pseudo(tmp.29)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)), JmpCC(ConcCodeType.E, tmp.30)] Pred: {ENTRY} Suc: {1, 3} iMap: [(AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)), set()), (AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)), set()), (AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)), set()), (AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)), set()), (AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)), set()), (AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)), set()), (AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)), set()), (AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)), set()), (AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)), set()), (AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)), set()), (AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)), set()), (AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)), set()), (AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)), set()), (AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)), set()), (AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)), set()), (AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)), set()), (AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)), set()), (AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)), set()), (AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)), set()), (AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)), set()), (AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)), set()), (AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)), set()), (AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)), set()), (AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)), set()), (AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)), set()), (AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)), set()), (AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.29)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)), set()), (JmpCC(ConcCodeType.E, tmp.30), set())] ReachingCopies: set()
1 1: [AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)), AssType: Longword Mov(Imm(0), Pseudo(tmp.31)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)), JmpCC(ConcCodeType.E, tmp.30)] Pred: {0} Suc: {2, 3} iMap: [(AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.31)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)), set()), (JmpCC(ConcCodeType.E, tmp.30), set())] ReachingCopies: set()
2 2: [AssType: Longword Mov(Imm(1), Pseudo(tmp.32)), Jmp(tmp.33)] Pred: {1} Suc: {4} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.32)), set()), (Jmp(tmp.33), set())] ReachingCopies: set()
3 3: [Label(tmp.30), AssType: Longword Mov(Imm(0), Pseudo(tmp.32))] Pred: {0, 1} Suc: {4} iMap: [(Label(tmp.30), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.32)), set())] ReachingCopies: set()
4 4: [Label(tmp.33), AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), JmpCC(ConcCodeType.E, tmp.34)] Pred: {2, 3} Suc: {5, 7} iMap: [(Label(tmp.33), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)), set()), (JmpCC(ConcCodeType.E, tmp.34), set())] ReachingCopies: set()
5 5: [AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)), AssType: Longword Mov(Imm(0), Pseudo(tmp.35)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)), JmpCC(ConcCodeType.E, tmp.34)] Pred: {4} Suc: {6, 7} iMap: [(AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.35)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)), set()), (JmpCC(ConcCodeType.E, tmp.34), set())] ReachingCopies: set()
6 6: [AssType: Longword Mov(Imm(1), Pseudo(tmp.36)), Jmp(tmp.37)] Pred: {5} Suc: {8} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.36)), set()), (Jmp(tmp.37), set())] ReachingCopies: set()
7 7: [Label(tmp.34), AssType: Longword Mov(Imm(0), Pseudo(tmp.36))] Pred: {4, 5} Suc: {8} iMap: [(Label(tmp.34), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.36)), set())] ReachingCopies: set()
8 8: [Label(tmp.37), AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), JmpCC(ConcCodeType.E, tmp.38)] Pred: {6, 7} Suc: {9, 11} iMap: [(Label(tmp.37), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)), set()), (JmpCC(ConcCodeType.E, tmp.38), set())] ReachingCopies: set()
9 9: [AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)), AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)), AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)), AssType: Longword Mov(Imm(0), Pseudo(tmp.40)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)), JmpCC(ConcCodeType.E, tmp.38)] Pred: {8} Suc: {10, 11} iMap: [(AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)), set()), (AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)), set()), (AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.40)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)), set()), (JmpCC(ConcCodeType.E, tmp.38), set())] ReachingCopies: set()
10 10: [AssType: Longword Mov(Imm(1), Pseudo(tmp.41)), Jmp(tmp.42)] Pred: {9} Suc: {12} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.41)), set()), (Jmp(tmp.42), set())] ReachingCopies: set()
11 11: [Label(tmp.38), AssType: Longword Mov(Imm(0), Pseudo(tmp.41))] Pred: {8, 9} Suc: {12} iMap: [(Label(tmp.38), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.41)), set())] ReachingCopies: set()
12 12: [Label(tmp.42), AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {10, 11} Suc: {13, 15} iMap: [(Label(tmp.42), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
13 13: [AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)), AssType: Longword Mov(Imm(0), Pseudo(tmp.44)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)), JmpCC(ConcCodeType.E, tmp.43)] Pred: {12} Suc: {14, 15} iMap: [(AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.44)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)), set()), (JmpCC(ConcCodeType.E, tmp.43), set())] ReachingCopies: set()
14 14: [AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), Jmp(tmp.46)] Pred: {13} Suc: {16} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.45)), set()), (Jmp(tmp.46), set())] ReachingCopies: set()
15 15: [Label(tmp.43), AssType: Longword Mov(Imm(0), Pseudo(tmp.45))] Pred: {12, 13} Suc: {16} iMap: [(Label(tmp.43), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.45)), set())] ReachingCopies: set()
16 16: [Label(tmp.46), AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), JmpCC(ConcCodeType.E, tmp.47)] Pred: {14, 15} Suc: {17, 19} iMap: [(Label(tmp.46), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)), set()), (JmpCC(ConcCodeType.E, tmp.47), set())] ReachingCopies: set()
17 17: [AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)), AssType: Longword Mov(Imm(0), Pseudo(tmp.48)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)), JmpCC(ConcCodeType.E, tmp.47)] Pred: {16} Suc: {18, 19} iMap: [(AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.48)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)), set()), (JmpCC(ConcCodeType.E, tmp.47), set())] ReachingCopies: set()
18 18: [AssType: Longword Mov(Imm(1), Pseudo(tmp.49)), Jmp(tmp.50)] Pred: {17} Suc: {20} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.49)), set()), (Jmp(tmp.50), set())] ReachingCopies: set()
19 19: [Label(tmp.47), AssType: Longword Mov(Imm(0), Pseudo(tmp.49))] Pred: {16, 17} Suc: {20} iMap: [(Label(tmp.47), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.49)), set())] ReachingCopies: set()
20 20: [Label(tmp.50), AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), JmpCC(ConcCodeType.E, tmp.51)] Pred: {18, 19} Suc: {21, 23} iMap: [(Label(tmp.50), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)), set()), (JmpCC(ConcCodeType.E, tmp.51), set())] ReachingCopies: set()
21 21: [AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)), AssType: Longword Mov(Imm(0), Pseudo(tmp.52)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)), JmpCC(ConcCodeType.E, tmp.51)] Pred: {20} Suc: {22, 23} iMap: [(AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.52)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)), set()), (JmpCC(ConcCodeType.E, tmp.51), set())] ReachingCopies: set()
22 22: [AssType: Longword Mov(Imm(1), Pseudo(tmp.53)), Jmp(tmp.54)] Pred: {21} Suc: {24} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.53)), set()), (Jmp(tmp.54), set())] ReachingCopies: set()
23 23: [Label(tmp.51), AssType: Longword Mov(Imm(0), Pseudo(tmp.53))] Pred: {20, 21} Suc: {24} iMap: [(Label(tmp.51), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.53)), set())] ReachingCopies: set()
24 24: [Label(tmp.54), AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), JmpCC(ConcCodeType.E, tmp.55)] Pred: {22, 23} Suc: {25, 27} iMap: [(Label(tmp.54), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)), set()), (JmpCC(ConcCodeType.E, tmp.55), set())] ReachingCopies: set()
25 25: [AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)), AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)), AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)), AssType: Longword Mov(Imm(0), Pseudo(tmp.57)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)), JmpCC(ConcCodeType.E, tmp.55)] Pred: {24} Suc: {26, 27} iMap: [(AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)), set()), (AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)), set()), (AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.57)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)), set()), (JmpCC(ConcCodeType.E, tmp.55), set())] ReachingCopies: set()
26 26: [AssType: Longword Mov(Imm(1), Pseudo(tmp.58)), Jmp(tmp.59)] Pred: {25} Suc: {28} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.58)), set()), (Jmp(tmp.59), set())] ReachingCopies: set()
27 27: [Label(tmp.55), AssType: Longword Mov(Imm(0), Pseudo(tmp.58))] Pred: {24, 25} Suc: {28} iMap: [(Label(tmp.55), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.58)), set())] ReachingCopies: set()
28 28: [Label(tmp.59), AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), JmpCC(ConcCodeType.E, tmp.60)] Pred: {26, 27} Suc: {29, 31} iMap: [(Label(tmp.59), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)), set()), (JmpCC(ConcCodeType.E, tmp.60), set())] ReachingCopies: set()
29 29: [AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)), AssType: Longword Mov(Imm(0), Pseudo(tmp.61)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)), JmpCC(ConcCodeType.E, tmp.60)] Pred: {28} Suc: {30, 31} iMap: [(AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.61)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)), set()), (JmpCC(ConcCodeType.E, tmp.60), set())] ReachingCopies: set()
30 30: [AssType: Longword Mov(Imm(1), Pseudo(tmp.62)), Jmp(tmp.63)] Pred: {29} Suc: {32} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.62)), set()), (Jmp(tmp.63), set())] ReachingCopies: set()
31 31: [Label(tmp.60), AssType: Longword Mov(Imm(0), Pseudo(tmp.62))] Pred: {28, 29} Suc: {32} iMap: [(Label(tmp.60), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.62)), set())] ReachingCopies: set()
32 32: [Label(tmp.63), AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), JmpCC(ConcCodeType.E, tmp.64)] Pred: {30, 31} Suc: {33, 35} iMap: [(Label(tmp.63), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)), set()), (JmpCC(ConcCodeType.E, tmp.64), set())] ReachingCopies: set()
33 33: [AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)), AssType: Longword Mov(Imm(0), Pseudo(tmp.65)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)), JmpCC(ConcCodeType.E, tmp.64)] Pred: {32} Suc: {34, 35} iMap: [(AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.65)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)), set()), (JmpCC(ConcCodeType.E, tmp.64), set())] ReachingCopies: set()
34 34: [AssType: Longword Mov(Imm(1), Pseudo(tmp.66)), Jmp(tmp.67)] Pred: {33} Suc: {36} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.66)), set()), (Jmp(tmp.67), set())] ReachingCopies: set()
35 35: [Label(tmp.64), AssType: Longword Mov(Imm(0), Pseudo(tmp.66))] Pred: {32, 33} Suc: {36} iMap: [(Label(tmp.64), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.66)), set())] ReachingCopies: set()
36 36: [Label(tmp.67), AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), JmpCC(ConcCodeType.E, tmp.68)] Pred: {34, 35} Suc: {37, 39} iMap: [(Label(tmp.67), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)), set()), (JmpCC(ConcCodeType.E, tmp.68), set())] ReachingCopies: set()
37 37: [AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)), AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)), AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)), AssType: Longword Mov(Imm(0), Pseudo(tmp.70)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)), JmpCC(ConcCodeType.E, tmp.68)] Pred: {36} Suc: {38, 39} iMap: [(AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)), set()), (AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)), set()), (AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.70)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)), set()), (JmpCC(ConcCodeType.E, tmp.68), set())] ReachingCopies: set()
38 38: [AssType: Longword Mov(Imm(1), Pseudo(tmp.71)), Jmp(tmp.72)] Pred: {37} Suc: {40} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.71)), set()), (Jmp(tmp.72), set())] ReachingCopies: set()
39 39: [Label(tmp.68), AssType: Longword Mov(Imm(0), Pseudo(tmp.71))] Pred: {36, 37} Suc: {40} iMap: [(Label(tmp.68), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.71)), set())] ReachingCopies: set()
40 40: [Label(tmp.72), AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), JmpCC(ConcCodeType.E, tmp.73)] Pred: {38, 39} Suc: {41, 43} iMap: [(Label(tmp.72), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)), set()), (JmpCC(ConcCodeType.E, tmp.73), set())] ReachingCopies: set()
41 41: [AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)), AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)), JmpCC(ConcCodeType.E, tmp.73)] Pred: {40} Suc: {42, 43} iMap: [(AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.74)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)), set()), (JmpCC(ConcCodeType.E, tmp.73), set())] ReachingCopies: set()
42 42: [AssType: Longword Mov(Imm(1), Pseudo(tmp.75)), Jmp(tmp.76)] Pred: {41} Suc: {44} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.75)), set()), (Jmp(tmp.76), set())] ReachingCopies: set()
43 43: [Label(tmp.73), AssType: Longword Mov(Imm(0), Pseudo(tmp.75))] Pred: {40, 41} Suc: {44} iMap: [(Label(tmp.73), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.75)), set())] ReachingCopies: set()
44 44: [Label(tmp.76), AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), JmpCC(ConcCodeType.E, tmp.77)] Pred: {42, 43} Suc: {45, 47} iMap: [(Label(tmp.76), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)), set()), (JmpCC(ConcCodeType.E, tmp.77), set())] ReachingCopies: set()
45 45: [AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)), AssType: Longword Mov(Imm(0), Pseudo(tmp.78)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)), JmpCC(ConcCodeType.E, tmp.77)] Pred: {44} Suc: {46, 47} iMap: [(AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.78)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)), set()), (JmpCC(ConcCodeType.E, tmp.77), set())] ReachingCopies: set()
46 46: [AssType: Longword Mov(Imm(1), Pseudo(tmp.79)), Jmp(tmp.80)] Pred: {45} Suc: {48} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.79)), set()), (Jmp(tmp.80), set())] ReachingCopies: set()
47 47: [Label(tmp.77), AssType: Longword Mov(Imm(0), Pseudo(tmp.79))] Pred: {44, 45} Suc: {48} iMap: [(Label(tmp.77), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.79)), set())] ReachingCopies: set()
48 48: [Label(tmp.80), AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), JmpCC(ConcCodeType.E, tmp.81)] Pred: {46, 47} Suc: {49, 51} iMap: [(Label(tmp.80), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)), set()), (JmpCC(ConcCodeType.E, tmp.81), set())] ReachingCopies: set()
49 49: [AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)), AssType: Longword Mov(Imm(0), Pseudo(tmp.82)), SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)), AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)), JmpCC(ConcCodeType.E, tmp.81)] Pred: {48} Suc: {50, 51} iMap: [(AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.82)), set()), (SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)), set()), (JmpCC(ConcCodeType.E, tmp.81), set())] ReachingCopies: set()
50 50: [AssType: Longword Mov(Imm(1), Pseudo(tmp.83)), Jmp(tmp.84)] Pred: {49} Suc: {52} iMap: [(AssType: Longword Mov(Imm(1), Pseudo(tmp.83)), set()), (Jmp(tmp.84), set())] ReachingCopies: set()
51 51: [Label(tmp.81), AssType: Longword Mov(Imm(0), Pseudo(tmp.83))] Pred: {48, 49} Suc: {52} iMap: [(Label(tmp.81), set()), (AssType: Longword Mov(Imm(0), Pseudo(tmp.83)), set())] ReachingCopies: set()
52 52: [Label(tmp.84), AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), JmpCC(ConcCodeType.E, tmp.87)] Pred: {50, 51} Suc: {53, 54} iMap: [(Label(tmp.84), set()), (AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)), set()), (JmpCC(ConcCodeType.E, tmp.87), set())] ReachingCopies: set()
53 53: [AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)), AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), ret] Pred: {52} Suc: {EXIT} iMap: [(AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)), set()), (AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
54 54: [Label(tmp.87), AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), ret] Pred: {52} Suc: {EXIT} iMap: [(Label(tmp.87), set()), (AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)), set()), (AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)), set()), (ret, set())] ReachingCopies: set()
EXIT Exit: EXIT {53, 54}
--------------LIVE for block 54-------------------
ret {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)) {Reg(XMM0)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)) {Pseudo(tmp.89)}
Label(tmp.87) {Pseudo(tmp.89)}
--------------ACTUALIZED IMAP for block 54-------------------
Label(tmp.87) {Pseudo(tmp.89)}
AssType: Longword Cvtsi2sd(Imm(1), Pseudo(tmp.89)) {Pseudo(tmp.89)}
AssType: Double Mov(Pseudo(tmp.89), Reg(XMM0)) {Reg(XMM0)}
ret {Reg(XMM0)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89)}
--------------LIVE for block 53-------------------
ret {Reg(XMM0)}
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)) {Reg(XMM0)}
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)) {Pseudo(tmp.88)}
--------------ACTUALIZED IMAP for block 53-------------------
AssType: Longword Cvtsi2sd(Imm(0), Pseudo(tmp.88)) {Pseudo(tmp.88)}
AssType: Double Mov(Pseudo(tmp.88), Reg(XMM0)) {Reg(XMM0)}
ret {Reg(XMM0)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.88)}
--------------LIVE for block 52-------------------
JmpCC(ConcCodeType.E, tmp.87) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88)}
Label(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
--------------ACTUALIZED IMAP for block 52-------------------
Label(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88)}
JmpCC(ConcCodeType.E, tmp.87) {Pseudo(tmp.89), Pseudo(tmp.88)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
--------------LIVE for block 51-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
Label(tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------ACTUALIZED IMAP for block 51-------------------
Label(tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------LIVE for block 50-------------------
Jmp(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
--------------ACTUALIZED IMAP for block 50-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.83)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
Jmp(tmp.84) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.83)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------LIVE for block 49-------------------
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)) {Pseudo(tmp.82), Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)) {Pseudo(tmp.89), Pseudo(tmp.88)}
--------------ACTUALIZED IMAP for block 49-------------------
AssType: Double Cmp(Data(tmp.114, 0), Pseudo(tmp.28)) {Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.82)) {Pseudo(tmp.82), Pseudo(tmp.89), Pseudo(tmp.88)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.82)) {Pseudo(tmp.89), Pseudo(tmp.88)}
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 48-------------------
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
Label(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
--------------ACTUALIZED IMAP for block 48-------------------
Label(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.81) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
--------------LIVE for block 47-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
Label(tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 47-------------------
Label(tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 46-------------------
Jmp(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
--------------ACTUALIZED IMAP for block 46-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.79)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
Jmp(tmp.80) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.79)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 45-------------------
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)) {Pseudo(tmp.78), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 45-------------------
AssType: Double Cmp(Data(tmp.113, 0), Pseudo(tmp.27)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.78)) {Pseudo(tmp.78), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.78)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 44-------------------
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
Label(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
--------------ACTUALIZED IMAP for block 44-------------------
Label(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.77) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
--------------LIVE for block 43-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
Label(tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 43-------------------
Label(tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 42-------------------
Jmp(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
--------------ACTUALIZED IMAP for block 42-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.75)) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
Jmp(tmp.76) {Pseudo(tmp.75), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------LIVE for block 41-------------------
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.74), Pseudo(tmp.27)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
--------------ACTUALIZED IMAP for block 41-------------------
AssType: Double Cmp(Data(tmp.112, 0), Pseudo(tmp.26)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.74)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.74), Pseudo(tmp.27)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.74)) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.27), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 40-------------------
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
Label(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 40-------------------
Label(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.73) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
--------------LIVE for block 39-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
Label(tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 39-------------------
Label(tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 38-------------------
Jmp(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 38-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.71)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
Jmp(tmp.72) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.71), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 37-------------------
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.70), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 37-------------------
AssType: Double Mov(Data(tmp.110, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
AssType: Double Binary(Xor, Data(tmp.111, 0), Pseudo(tmp.69)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.69), Pseudo(tmp.26)}
AssType: Double Cmp(Pseudo(tmp.69), Pseudo(tmp.25)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.70), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.70)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 36-------------------
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
Label(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 36-------------------
Label(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.68) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
--------------LIVE for block 35-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
Label(tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 35-------------------
Label(tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 34-------------------
Jmp(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 34-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.66)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
Jmp(tmp.67) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.66), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------LIVE for block 33-------------------
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.65), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 33-------------------
AssType: Double Cmp(Data(tmp.109, 0), Pseudo(tmp.24)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.65), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.65)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------LIVE for block 32-------------------
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
Label(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 32-------------------
Label(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.64) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 31-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 31-------------------
Label(tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------LIVE for block 30-------------------
Jmp(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 30-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.62)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.63) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.62), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------LIVE for block 29-------------------
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.61), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
--------------ACTUALIZED IMAP for block 29-------------------
AssType: Double Cmp(Data(tmp.108, 0), Pseudo(tmp.23)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.61), Pseudo(tmp.26), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.61)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.26)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 28-------------------
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 28-------------------
Label(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.60) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 27-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 27-------------------
Label(tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 26-------------------
Jmp(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 26-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.58)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.59) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.58), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 25-------------------
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.57), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 25-------------------
AssType: Double Mov(Data(tmp.106, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.107, 0), Pseudo(tmp.56)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.56), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.56), Pseudo(tmp.22)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.57), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.57)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 24-------------------
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
--------------ACTUALIZED IMAP for block 24-------------------
Label(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.55) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
--------------LIVE for block 23-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
Label(tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 23-------------------
Label(tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 22-------------------
Jmp(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
--------------ACTUALIZED IMAP for block 22-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.53)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
Jmp(tmp.54) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.53)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 21-------------------
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.52), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 21-------------------
AssType: Double Cmp(Data(tmp.105, 0), Pseudo(tmp.21)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.52), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.52)) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.28), Pseudo(tmp.26), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 20-------------------
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 20-------------------
Label(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.51) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 19-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 19-------------------
Label(tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 18-------------------
Jmp(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 18-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.49)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.50) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.49), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 17-------------------
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.48), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 17-------------------
AssType: Double Cmp(Data(tmp.104, 0), Pseudo(tmp.20)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.48), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.48)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 16-------------------
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 16-------------------
Label(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.47) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 15-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 15-------------------
Label(tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 14-------------------
Jmp(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 14-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.45)) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.46) {Pseudo(tmp.45), Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 13-------------------
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.44), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 13-------------------
AssType: Double Cmp(Data(tmp.103, 0), Pseudo(tmp.19)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.44), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.44)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 12-------------------
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 12-------------------
Label(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.43) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 11-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 11-------------------
Label(tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 10-------------------
Jmp(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 10-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.41)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.42) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.41), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 9-------------------
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.40), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 9-------------------
AssType: Double Mov(Data(tmp.101, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Xor, Data(tmp.102, 0), Pseudo(tmp.39)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.39), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Pseudo(tmp.39), Pseudo(tmp.18)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.40), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.40)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 8-------------------
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 8-------------------
Label(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.38) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 7-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 7-------------------
Label(tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 6-------------------
Jmp(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 6-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.36)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Jmp(tmp.37) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.36), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 5-------------------
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.35), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 5-------------------
AssType: Double Cmp(Data(tmp.100, 0), Pseudo(tmp.16)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.35), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.35)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 4-------------------
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
Label(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
--------------ACTUALIZED IMAP for block 4-------------------
Label(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.34) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
--------------LIVE for block 3-------------------
AssType: Longword Mov(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
Label(tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 3-------------------
Label(tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 2-------------------
Jmp(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
AssType: Longword Mov(Imm(1), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
--------------ACTUALIZED IMAP for block 2-------------------
AssType: Longword Mov(Imm(1), Pseudo(tmp.32)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
Jmp(tmp.33) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.32)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 1-------------------
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.31), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------ACTUALIZED IMAP for block 1-------------------
AssType: Double Cmp(Data(tmp.99, 0), Pseudo(tmp.15)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.31), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.31)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
--------------LIVE for block 0-------------------
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.29), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.20), Pseudo(tmp.15)}
AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
--------------ACTUALIZED IMAP for block 0-------------------
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Mult, Pseudo(glob), Pseudo(tmp.14)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Binary(Add, Data(tmp.90, 0), Pseudo(tmp.15)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(tmp.14), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Add, Data(tmp.91, 0), Pseudo(tmp.16)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Longword Cvtsi2sd(Pseudo(glob3), Pseudo(tmp.17)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Mov(Pseudo(tmp.15), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2), Pseudo(tmp.17)}
AssType: Double Binary(Sub, Pseudo(tmp.17), Pseudo(tmp.18)) {Pseudo(glob), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(glob), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Binary(Add, Data(tmp.92, 0), Pseudo(tmp.19)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(glob2)}
AssType: Double Mov(Pseudo(glob2), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.18), Pseudo(tmp.20), Pseudo(tmp.15)}
AssType: Double Binary(Mult, Data(tmp.93, 0), Pseudo(tmp.20)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15)}
AssType: Double Mov(Pseudo(tmp.16), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Binary(Mult, Data(tmp.94, 0), Pseudo(tmp.21)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21)}
AssType: Double Mov(Pseudo(tmp.18), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Binary(Mult, Data(tmp.95, 0), Pseudo(tmp.22)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.19), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Binary(DivDouble, Data(tmp.96, 0), Pseudo(tmp.23)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22)}
AssType: Double Mov(Pseudo(tmp.21), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Binary(Add, Pseudo(tmp.20), Pseudo(tmp.24)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.22), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Sub, Pseudo(tmp.24), Pseudo(tmp.25)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.23), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Binary(Add, Data(tmp.97, 0), Pseudo(tmp.26)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.24), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Binary(Sub, Pseudo(tmp.18), Pseudo(tmp.27)) {Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Double Mov(Pseudo(tmp.27), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Binary(Mult, Pseudo(tmp.26), Pseudo(tmp.28)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.14), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Double Cmp(Data(tmp.98, 0), Pseudo(tmp.14)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
AssType: Longword Mov(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
SetCC(ConcCodeTypeUnsigned.E, Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.29), Pseudo(tmp.21), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.26)}
AssType: Longword Cmp(Imm(0), Pseudo(tmp.29)) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
JmpCC(ConcCodeType.E, tmp.30) {Pseudo(tmp.28), Pseudo(tmp.88), Pseudo(tmp.89), Pseudo(tmp.16), Pseudo(tmp.19), Pseudo(tmp.20), Pseudo(tmp.18), Pseudo(tmp.15), Pseudo(tmp.21), Pseudo(tmp.26), Pseudo(tmp.23), Pseudo(tmp.22), Pseudo(tmp.25), Pseudo(tmp.27), Pseudo(tmp.24)}
OLD ANNOT: set()
NEW ANNOT: {Pseudo(glob), Pseudo(tmp.89), Pseudo(tmp.88), Pseudo(glob2), Pseudo(tmp.17)}
-----------Adding edges to interference graph.------------------
